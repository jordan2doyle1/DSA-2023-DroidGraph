---------- Controls Visited (2) ----------
Unknown
Unknown

---------- Controls Not Visited (17) ----------
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown

---------- Methods Visited (443) ----------
<com.github.mikephil.charting.renderer.XAxisRenderer: void renderGridLines(android.graphics.Canvas)>
<com.android.gpstest.util.UIUtils: void <clinit>()>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter: void <init>(com.android.gpstest.GpsStatusFragment,com.android.gpstest.model.ConstellationType)>
<com.github.mikephil.charting.charts.Chart$1: void <init>(com.github.mikephil.charting.charts.Chart)>
<com.android.gpstest.BenchmarkViewModel: boolean getBenchmarkCardCollapsed()>
<com.github.mikephil.charting.charts.Chart: void setTouchEnabled(boolean)>
<com.github.mikephil.charting.utils.MPPointD: com.github.mikephil.charting.utils.ObjectPool$Poolable instantiate()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.components.Description getDescription()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback: void <init>(com.sothree.slidinguppanel.SlidingUpPanelLayout,com.sothree.slidinguppanel.SlidingUpPanelLayout$1)>
<com.android.gpstest.chart.DistanceValueFormatter: void <init>(java.lang.String)>
<com.github.mikephil.charting.charts.Chart: void onDetachedFromWindow()>
<com.github.mikephil.charting.animation.ChartAnimator: float getPhaseY()>
<com.github.mikephil.charting.components.Legend: java.util.List getCalculatedLabelBreakPoints()>
<com.android.gpstest.BenchmarkViewModel: androidx.lifecycle.LiveData getLocationErrorPair()>
<com.github.mikephil.charting.components.ComponentBase: void <init>()>
<com.android.gpstest.GpsTestActivity: void onNavigationDrawerItemSelected(int)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void computeSize()>
<com.github.mikephil.charting.utils.MPPointF: void <init>(float,float)>
<com.android.gpstest.BenchmarkControllerImpl$$ExternalSyntheticLambda0: void <init>(androidx.appcompat.app.AppCompatActivity)>
<com.android.gpstest.NavigationDrawerFragment: void setSelectedNavDrawerItem(int)>
<com.github.mikephil.charting.utils.ViewPortHandler: void restrainViewPort(float,float,float,float)>
<com.github.mikephil.charting.utils.FSize: void recycleInstance(com.github.mikephil.charting.utils.FSize)>
<com.android.gpstest.GpsTestActivity: void removeNmeaListener()>
<com.github.mikephil.charting.utils.Utils: float getLineSpacing(android.graphics.Paint,android.graphics.Paint$FontMetrics)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState getPanelState()>
<com.github.mikephil.charting.utils.ViewPortHandler: float offsetBottom()>
<com.android.gpstest.BenchmarkControllerImpl$$ExternalSyntheticLambda1: void <init>(com.android.gpstest.BenchmarkControllerImpl,androidx.appcompat.app.AppCompatActivity)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState: com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState[] values()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.github.mikephil.charting.components.Legend: float getStackSpace()>
<com.android.gpstest.lang.LocaleManager: android.content.Context setLocale(android.content.Context)>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter: com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.gpstest.GpsTestActivity: void removeNavMessageListener()>
<com.sothree.slidinguppanel.ViewDragHelper: void <clinit>()>
<com.android.gpstest.GpsTestActivity: void removeGnssStatusListener()>
<com.android.gpstest.GpsTestActivity$12: void onClick(android.content.DialogInterface,int)>
<com.github.mikephil.charting.renderer.BarLineScatterCandleBubbleRenderer$XBounds: void <init>(com.github.mikephil.charting.renderer.BarLineScatterCandleBubbleRenderer)>
<com.github.mikephil.charting.renderer.LegendRenderer: void renderLegend(android.graphics.Canvas)>
<com.android.gpstest.BenchmarkViewModel: androidx.lifecycle.LiveData getAllowGroundTruthEdit()>
<com.github.mikephil.charting.components.YAxis: boolean isDrawTopYLabelEntryEnabled()>
<com.github.mikephil.charting.components.XAxis$XAxisPosition: void <clinit>()>
<com.github.mikephil.charting.renderer.YAxisRenderer: void renderLimitLines(android.graphics.Canvas)>
<com.android.gpstest.GpsTestActivity: boolean onPrepareOptionsMenu(android.view.Menu)>
<com.android.gpstest.io.JsonFileLogger: void <init>(android.content.Context)>
<com.github.mikephil.charting.components.AxisBase: int getAxisLineColor()>
<com.github.mikephil.charting.utils.MPPointF: void recycleInstance(com.github.mikephil.charting.utils.MPPointF)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setPanelState(com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState)>
<com.github.mikephil.charting.charts.LineChart: void init()>
<com.github.mikephil.charting.components.YAxis: void calculate(float,float)>
<com.github.mikephil.charting.components.YAxis: boolean isInverted()>
<com.github.mikephil.charting.components.Legend: float getXEntrySpace()>
<com.github.mikephil.charting.data.ChartData: int getDataSetCount()>
<com.android.gpstest.GpsTestActivity: void removeGnssAntennaListener()>
<com.android.gpstest.BenchmarkControllerImpl$3: void <init>(com.android.gpstest.BenchmarkControllerImpl)>
<com.github.mikephil.charting.charts.Chart: float getExtraTopOffset()>
<com.github.mikephil.charting.utils.ViewPortHandler: float getScaleX()>
<com.android.gpstest.GpsTestActivity$13: void <init>(com.android.gpstest.GpsTestActivity)>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.components.YAxis getAxisLeft()>
<com.github.mikephil.charting.components.Legend: void calculateDimensions(android.graphics.Paint,com.github.mikephil.charting.utils.ViewPortHandler)>
<com.github.mikephil.charting.utils.ViewPortHandler: float contentTop()>
<com.android.gpstest.util.PermissionUtils: boolean hasGrantedPermissions(android.app.Activity,java.lang.String[])>
<com.android.gpstest.NavigationDrawerFragment: void createNavDrawerItems()>
<com.android.gpstest.io.JsonFileLogger: void close()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setDragView(android.view.View)>
<com.android.gpstest.io.BaseFileLogger: void close()>
<com.sothree.slidinguppanel.ViewDragHelper: void <init>(android.content.Context,android.view.ViewGroup,android.view.animation.Interpolator,com.sothree.slidinguppanel.ViewDragHelper$Callback)>
<com.github.mikephil.charting.components.Description: void <init>()>
<com.github.mikephil.charting.components.AxisBase: void setGranularity(float)>
<com.github.mikephil.charting.renderer.BarLineScatterCandleBubbleRenderer: void <init>(com.github.mikephil.charting.animation.ChartAnimator,com.github.mikephil.charting.utils.ViewPortHandler)>
<com.github.mikephil.charting.components.AxisBase: boolean isDrawLabelsEnabled()>
<com.github.mikephil.charting.components.YAxis: float getSpaceBottom()>
<com.github.mikephil.charting.charts.Chart: void onMeasure(int,int)>
<com.github.mikephil.charting.components.Legend: com.github.mikephil.charting.components.Legend$LegendVerticalAlignment getVerticalAlignment()>
<com.github.mikephil.charting.components.AxisBase: void <init>()>
<com.github.mikephil.charting.utils.ObjectPool: com.github.mikephil.charting.utils.ObjectPool$Poolable get()>
<com.github.mikephil.charting.components.Legend: float getMaximumEntryWidth(android.graphics.Paint)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setDragEnabled(boolean)>
<com.android.gpstest.GpsTestActivity: void onPause()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.components.Legend getLegend()>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: void <init>()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.components.XAxis getXAxis()>
<com.github.mikephil.charting.charts.BarLineChartBase: void onDraw(android.graphics.Canvas)>
<com.android.gpstest.GpsTestActivity$12: void <init>(com.android.gpstest.GpsTestActivity)>
<com.android.gpstest.util.IOUtils: boolean isShowRadarIntent(android.content.Intent)>
<com.github.mikephil.charting.components.AxisBase: int getLabelCount()>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: void computeScroll()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState: void <init>(java.lang.String,int)>
<com.github.mikephil.charting.components.Legend: float getFormToTextSpace()>
<com.github.mikephil.charting.utils.ViewPortHandler: float offsetTop()>
<com.github.mikephil.charting.renderer.YAxisRenderer: void renderAxisLine(android.graphics.Canvas)>
<com.github.mikephil.charting.utils.Transformer: void pointValuesToPixel(float[])>
<com.github.mikephil.charting.renderer.LegendRenderer$1: void <clinit>()>
<com.android.gpstest.NavigationDrawerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.gpstest.view.VerticalTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.github.mikephil.charting.components.Legend: void <init>()>
<com.github.mikephil.charting.renderer.LineRadarRenderer: void <init>(com.github.mikephil.charting.animation.ChartAnimator,com.github.mikephil.charting.utils.ViewPortHandler)>
<com.github.mikephil.charting.components.XAxis: void setPosition(com.github.mikephil.charting.components.XAxis$XAxisPosition)>
<com.github.mikephil.charting.components.Legend$LegendForm: void <init>(java.lang.String,int)>
<com.android.gpstest.GpsStatusFragment$1: void <init>(com.android.gpstest.GpsStatusFragment)>
<com.github.mikephil.charting.utils.ViewPortHandler: float contentWidth()>
<com.github.mikephil.charting.charts.BarLineChartBase: void notifyDataSetChanged()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: float computeSlideOffset(int)>
<com.github.mikephil.charting.charts.LineChart: com.github.mikephil.charting.data.LineData getLineData()>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter: androidx.recyclerview.widget.RecyclerView$ViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<com.github.mikephil.charting.renderer.YAxisRenderer: android.graphics.RectF getGridClippingRect()>
<com.github.mikephil.charting.components.Legend: com.github.mikephil.charting.components.LegendEntry[] getEntries()>
<com.github.mikephil.charting.utils.ViewPortHandler: float offsetLeft()>
<com.github.mikephil.charting.charts.Chart: void init()>
<com.github.mikephil.charting.renderer.YAxisRenderer: void renderGridLines(android.graphics.Canvas)>
<com.github.mikephil.charting.renderer.AxisRenderer: void computeAxisValues(float,float)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isFullyZoomedOutY()>
<com.github.mikephil.charting.highlight.ChartHighlighter: void <init>(com.github.mikephil.charting.interfaces.dataprovider.BarLineScatterCandleBubbleDataProvider)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void renderAxisLine(android.graphics.Canvas)>
<com.github.mikephil.charting.charts.BarLineChartBase: void calculateOffsets()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$LayoutParams: void <clinit>()>
<com.sothree.slidinguppanel.ViewDragHelper$1: void <init>()>
<com.github.mikephil.charting.components.ComponentBase: void setTextColor(int)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void computeAxisValues(float,float)>
<com.github.mikephil.charting.utils.ViewPortHandler: float getChartHeight()>
<com.github.mikephil.charting.charts.BarLineChartBase: void prepareValuePxMatrix()>
<com.android.gpstest.util.PermissionUtils: void <clinit>()>
<com.github.mikephil.charting.utils.ViewPortHandler: void setChartDimens(float,float)>
<com.android.gpstest.GpsStatusFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<com.github.mikephil.charting.renderer.YAxisRenderer: float[] getTransformedPositions()>
<com.github.mikephil.charting.components.ComponentBase: float getYOffset()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<com.github.mikephil.charting.components.YAxis: boolean isDrawBottomYLabelEntryEnabled()>
<com.github.mikephil.charting.components.AxisBase: int getGridColor()>
<com.android.gpstest.util.SatelliteUtils: boolean isGnssStatusListenerSupported()>
<com.github.mikephil.charting.charts.Chart: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.gpstest.NavigationDrawerFragment: void onAttach(android.content.Context)>
<com.github.mikephil.charting.components.Legend$LegendForm: com.github.mikephil.charting.components.Legend$LegendForm[] values()>
<com.github.mikephil.charting.components.Legend: java.util.List getCalculatedLabelSizes()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<com.android.gpstest.GpsTestActivity: void onCreate(android.os.Bundle)>
<com.github.mikephil.charting.components.Legend$LegendOrientation: com.github.mikephil.charting.components.Legend$LegendOrientation[] values()>
<com.github.mikephil.charting.components.Legend: float getYEntrySpace()>
<com.android.gpstest.GpsStatusFragment: void setupUnitPreferences()>
<com.android.gpstest.GpsTestActivity: void attachBaseContext(android.content.Context)>
<com.android.gpstest.BenchmarkViewModel: androidx.lifecycle.LiveData getAvgError()>
<com.android.gpstest.BenchmarkViewModel: void reset()>
<com.github.mikephil.charting.components.AxisBase: android.graphics.DashPathEffect getAxisLineDashPathEffect()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.github.mikephil.charting.utils.ObjectPool$Poolable: void <clinit>()>
<com.github.mikephil.charting.animation.ChartAnimator: void <init>(android.animation.ValueAnimator$AnimatorUpdateListener)>
<com.android.gpstest.Application: android.content.SharedPreferences getPrefs()>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: android.widget.TextView getCarrierFrequency()>
<com.github.mikephil.charting.components.AxisBase: boolean isDrawGridLinesBehindDataEnabled()>
<com.sothree.slidinguppanel.ScrollableViewHelper: void <init>()>
<com.github.mikephil.charting.components.Legend$LegendHorizontalAlignment: com.github.mikephil.charting.components.Legend$LegendHorizontalAlignment[] values()>
<com.github.mikephil.charting.data.ChartData: java.util.List getDataSets()>
<com.github.mikephil.charting.charts.Chart: boolean valuesToHighlight()>
<com.github.mikephil.charting.components.AxisBase: boolean isCenterAxisLabelsEnabled()>
<com.github.mikephil.charting.charts.BarLineChartBase: int getMaxVisibleCount()>
<com.github.mikephil.charting.components.Legend: com.github.mikephil.charting.components.LegendEntry[] getExtraEntries()>
<com.android.gpstest.BenchmarkControllerImpl$2: void <init>(com.android.gpstest.BenchmarkControllerImpl)>
<com.github.mikephil.charting.charts.Chart: void drawMarkers(android.graphics.Canvas)>
<com.github.mikephil.charting.renderer.LineChartRenderer: void initBuffers()>
<com.github.mikephil.charting.components.AxisBase: android.graphics.DashPathEffect getGridDashPathEffect()>
<com.android.gpstest.NavigationDrawerFragment: void setUp(int,androidx.drawerlayout.widget.DrawerLayout)>
<com.android.gpstest.DeviceInfoViewModel: void <init>(android.app.Application)>
<com.github.mikephil.charting.utils.ObjectPool: void <init>(int,com.github.mikephil.charting.utils.ObjectPool$Poolable)>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawCircles(android.graphics.Canvas)>
<com.github.mikephil.charting.renderer.LineChartRenderer: void <init>(com.github.mikephil.charting.interfaces.dataprovider.LineDataProvider,com.github.mikephil.charting.animation.ChartAnimator,com.github.mikephil.charting.utils.ViewPortHandler)>
<com.github.mikephil.charting.utils.Utils: float getLineHeight(android.graphics.Paint)>
<com.sothree.slidinguppanel.ViewDragHelper: com.sothree.slidinguppanel.ViewDragHelper create(android.view.ViewGroup,float,android.view.animation.Interpolator,com.sothree.slidinguppanel.ViewDragHelper$Callback)>
<com.github.mikephil.charting.components.Legend$LegendOrientation: void <clinit>()>
<com.github.mikephil.charting.utils.MPPointD: void <init>(double,double)>
<com.android.gpstest.GpsTestActivity: void showLocationPermissionDialog()>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: void <init>(com.github.mikephil.charting.charts.BarLineChartBase,android.graphics.Matrix,float)>
<com.github.mikephil.charting.data.ChartData: float getXMax()>
<com.github.mikephil.charting.renderer.LineChartRenderer: void releaseBitmap()>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: android.widget.TextView getStatusFlags()>
<com.android.gpstest.Application: com.android.gpstest.lang.LocaleManager getLocaleManager()>
<com.android.gpstest.NavigationDrawerFragment: void setSavedPosition(int)>
<com.github.mikephil.charting.components.XAxis$XAxisPosition: void <init>(java.lang.String,int)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback: void <init>(com.sothree.slidinguppanel.SlidingUpPanelLayout)>
<com.android.gpstest.BenchmarkControllerImpl: void setupSlidingPanel()>
<com.android.gpstest.DeviceInfoViewModel: androidx.lifecycle.MutableLiveData getSatelliteMetadata()>
<com.android.gpstest.io.BaseFileLogger: void <init>(android.content.Context)>
<com.github.mikephil.charting.charts.BarLineChartBase: void prepareOffsetMatrix()>
<com.github.mikephil.charting.components.XAxis: float getLabelRotationAngle()>
<com.android.gpstest.GpsTestActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])>
<com.github.mikephil.charting.utils.Transformer: void prepareMatrixOffset(boolean)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isFullyZoomedOutX()>
<com.android.gpstest.GpsTestActivity: void onResume()>
<com.github.mikephil.charting.components.ComponentBase: void setEnabled(boolean)>
<com.sothree.slidinguppanel.ViewDragHelper: void setMinVelocity(float)>
<com.github.mikephil.charting.renderer.DataRenderer: void <init>(com.github.mikephil.charting.animation.ChartAnimator,com.github.mikephil.charting.utils.ViewPortHandler)>
<com.github.mikephil.charting.components.AxisBase: java.lang.String getLongestLabel()>
<com.github.mikephil.charting.charts.BarLineChartBase: void calculateLegendOffsets(android.graphics.RectF)>
<com.github.mikephil.charting.utils.Utils: com.github.mikephil.charting.utils.FSize getSizeOfRotatedRectangleByRadians(float,float,float)>
<com.github.mikephil.charting.utils.ObjectPool: void recycle(com.github.mikephil.charting.utils.ObjectPool$Poolable)>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.data.ChartData getData()>
<com.github.mikephil.charting.utils.MPPointD: void <clinit>()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setScaleEnabled(boolean)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void <clinit>()>
<com.github.mikephil.charting.utils.ObjectPool: void setReplenishPercentage(float)>
<com.github.mikephil.charting.utils.Utils: com.github.mikephil.charting.formatter.IValueFormatter generateDefaultValueFormatter()>
<com.github.mikephil.charting.data.ChartData: float getYMax(com.github.mikephil.charting.components.YAxis$AxisDependency)>
<com.github.mikephil.charting.components.YAxis$YAxisLabelPosition: void <clinit>()>
<com.github.mikephil.charting.components.Legend$LegendVerticalAlignment: void <init>(java.lang.String,int)>
<com.github.mikephil.charting.charts.BarLineChartBase: void calcMinMax()>
<com.github.mikephil.charting.components.YAxis$AxisDependency: void <init>(java.lang.String,int)>
<com.android.gpstest.model.ConstellationType: void <init>(java.lang.String,int)>
<com.android.gpstest.GpsTestActivity: void setupNavigationDrawer()>
<com.android.gpstest.Application: void onCreate()>
<com.android.gpstest.util.IOUtils: boolean isGeoIntent(android.content.Intent)>
<com.github.mikephil.charting.charts.Chart: void onDraw(android.graphics.Canvas)>
<com.github.mikephil.charting.charts.LineChart: void <init>(android.content.Context,android.util.AttributeSet)>
<com.github.mikephil.charting.utils.Utils: com.github.mikephil.charting.utils.FSize getSizeOfRotatedRectangleByDegrees(float,float,float)>
<com.github.mikephil.charting.utils.MPPointF: void <clinit>()>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: android.widget.TextView getSvId()>
<com.github.mikephil.charting.utils.FSize: com.github.mikephil.charting.utils.FSize getInstance(float,float)>
<com.github.mikephil.charting.data.ChartData: float getYMin(com.github.mikephil.charting.components.YAxis$AxisDependency)>
<com.android.gpstest.BenchmarkControllerImpl: void onResume()>
<com.android.gpstest.NavigationDrawerFragment: boolean isNewActivityItem(int)>
<com.github.mikephil.charting.components.XAxis: void <init>()>
<com.github.mikephil.charting.utils.ViewPortHandler: float contentBottom()>
<com.github.mikephil.charting.utils.MPPointF: com.github.mikephil.charting.utils.MPPointF getInstance(float,float)>
<com.github.mikephil.charting.components.AxisBase: void setDrawGridLines(boolean)>
<com.android.gpstest.io.CsvFileLogger: void <init>(android.content.Context)>
<com.github.mikephil.charting.utils.Transformer: void prepareMatrixValuePx(float,float,float,float)>
<com.github.mikephil.charting.components.AxisBase: boolean isDrawGridLinesEnabled()>
<com.github.mikephil.charting.charts.LineChart: void onDetachedFromWindow()>
<com.android.gpstest.Application: void <init>()>
<com.github.mikephil.charting.components.Legend: com.github.mikephil.charting.components.Legend$LegendDirection getDirection()>
<com.github.mikephil.charting.utils.Utils: float getLineSpacing(android.graphics.Paint)>
<com.android.gpstest.GpsStatusFragment: void setStarted(boolean)>
<com.github.mikephil.charting.charts.Chart: void onLayout(boolean,int,int,int,int)>
<com.android.gpstest.BenchmarkControllerImpl$1: void onChanged(java.lang.Object)>
<com.github.mikephil.charting.utils.Utils: void init(android.content.Context)>
<com.android.gpstest.GpsTestActivity: boolean isFileLoggingEnabled()>
<com.github.mikephil.charting.components.ComponentBase: android.graphics.Typeface getTypeface()>
<com.android.gpstest.NavigationDrawerFragment$2: void run()>
<com.android.gpstest.model.ConstellationType: void <clinit>()>
<com.android.gpstest.GpsTestActivity: void initGpsSwitch(android.view.Menu)>
<com.github.mikephil.charting.components.YAxis: com.github.mikephil.charting.components.YAxis$AxisDependency getAxisDependency()>
<com.android.gpstest.GpsStatusFragment: void onResume()>
<com.github.mikephil.charting.listener.ChartTouchListener$ChartGesture: void <init>(java.lang.String,int)>
<com.android.gpstest.GpsTestActivity$13: void onClick(android.content.DialogInterface,int)>
<com.github.mikephil.charting.charts.Chart: void onSizeChanged(int,int,int,int)>
<com.github.mikephil.charting.charts.Chart: void setHighlighter(com.github.mikephil.charting.highlight.ChartHighlighter)>
<com.github.mikephil.charting.components.ComponentBase: float getTextSize()>
<com.github.mikephil.charting.data.ChartData: float getXMin()>
<com.github.mikephil.charting.components.Legend$LegendOrientation: void <init>(java.lang.String,int)>
<com.github.mikephil.charting.components.Legend$LegendDirection: void <init>(java.lang.String,int)>
<com.android.gpstest.util.UIUtils: void setClickableSpan(android.widget.TextView,android.text.style.ClickableSpan)>
<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF getContentRect()>
<com.sothree.slidinguppanel.ViewDragHelper: int getViewDragState()>
<com.github.mikephil.charting.formatter.DefaultValueFormatter: void <init>(int)>
<com.github.mikephil.charting.utils.Transformer: void <init>(com.github.mikephil.charting.utils.ViewPortHandler)>
<com.android.gpstest.BenchmarkControllerImpl$1: void <init>(com.android.gpstest.BenchmarkControllerImpl)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void computeAxis(float,float,boolean)>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: android.widget.LinearLayout getFlagLayout()>
<com.android.gpstest.util.UIUtils: void removeAllClickableSpans(android.widget.TextView)>
<com.github.mikephil.charting.renderer.Renderer: void <init>(com.github.mikephil.charting.utils.ViewPortHandler)>
<com.github.mikephil.charting.components.YAxis: float getMaxWidth()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void onDetachedFromWindow()>
<com.android.gpstest.BenchmarkControllerImpl: void <init>(androidx.appcompat.app.AppCompatActivity,android.view.View)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void computeScroll()>
<com.android.gpstest.NavigationDrawerFragment$2: void <init>(com.android.gpstest.NavigationDrawerFragment)>
<com.android.gpstest.GpsTestActivity: void goToNavDrawerItem(int)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void onLayout(boolean,int,int,int,int)>
<com.github.mikephil.charting.charts.BarLineChartBase: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: android.widget.TextView getFlagHeader()>
<com.android.gpstest.GpsTestActivity: void showStatusFragment()>
<com.github.mikephil.charting.utils.FSize: com.github.mikephil.charting.utils.ObjectPool$Poolable instantiate()>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.components.YAxis getAxisRight()>
<com.github.mikephil.charting.utils.Utils: int calcTextHeight(android.graphics.Paint,java.lang.String)>
<com.github.mikephil.charting.utils.ViewPortHandler: float getChartWidth()>
<com.android.gpstest.GpsTestActivity: void requestPermissionAndInit(android.app.Activity)>
<com.github.mikephil.charting.components.Legend: com.github.mikephil.charting.components.Legend$LegendOrientation getOrientation()>
<com.github.mikephil.charting.components.ComponentBase: int getTextColor()>
<com.android.gpstest.NavigationDrawerFragment$1: void <init>(com.android.gpstest.NavigationDrawerFragment,android.app.Activity,androidx.drawerlayout.widget.DrawerLayout,int,int)>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter: int getItemCount()>
<com.github.mikephil.charting.utils.Utils: void calcTextSize(android.graphics.Paint,java.lang.String,com.github.mikephil.charting.utils.FSize)>
<com.github.mikephil.charting.components.Legend$LegendForm: void <clinit>()>
<com.github.mikephil.charting.components.YAxis$AxisDependency: void <clinit>()>
<com.android.gpstest.Application: void attachBaseContext(android.content.Context)>
<com.android.gpstest.util.PreferenceUtils: java.lang.String getString(java.lang.String)>
<com.github.mikephil.charting.components.Legend: com.github.mikephil.charting.components.Legend$LegendHorizontalAlignment getHorizontalAlignment()>
<com.github.mikephil.charting.utils.Utils: int calcTextWidth(android.graphics.Paint,java.lang.String)>
<com.github.mikephil.charting.renderer.AxisRenderer: void computeAxis(float,float,boolean)>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter: void onBindViewHolder(com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder,int)>
<com.android.gpstest.NavigationDrawerFragment: void onActivityCreated(android.os.Bundle)>
<com.github.mikephil.charting.utils.ViewPortHandler: float contentHeight()>
<com.github.mikephil.charting.components.YAxis: void <init>(com.github.mikephil.charting.components.YAxis$AxisDependency)>
<com.github.mikephil.charting.components.Legend: java.util.List getCalculatedLineSizes()>
<com.github.mikephil.charting.utils.MPPointF: com.github.mikephil.charting.utils.ObjectPool$Poolable instantiate()>
<com.android.gpstest.BenchmarkControllerImpl$1: void onChanged(java.lang.Boolean)>
<com.sothree.slidinguppanel.ViewDragHelper: com.sothree.slidinguppanel.ViewDragHelper create(android.view.ViewGroup,android.view.animation.Interpolator,com.sothree.slidinguppanel.ViewDragHelper$Callback)>
<com.github.mikephil.charting.utils.ViewPortHandler: float contentLeft()>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: void <init>(com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter,android.view.View)>
<com.github.mikephil.charting.components.Legend: float getMaxSizePercent()>
<com.github.mikephil.charting.renderer.LineScatterCandleRadarRenderer: void <init>(com.github.mikephil.charting.animation.ChartAnimator,com.github.mikephil.charting.utils.ViewPortHandler)>
<com.android.gpstest.GpsTestActivity: void <clinit>()>
<com.github.mikephil.charting.components.YAxis: float getSpaceTop()>
<com.github.mikephil.charting.components.Legend$LegendDirection: void <clinit>()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.gpstest.view.VerticalTextView: void onDraw(android.graphics.Canvas)>
<com.android.gpstest.GpsTestActivity: com.android.gpstest.GpsTestActivity getInstance()>
<com.android.gpstest.GpsStatusFragment$3: void <init>(com.android.gpstest.GpsStatusFragment)>
<com.github.mikephil.charting.renderer.YAxisRenderer: void <init>(com.github.mikephil.charting.utils.ViewPortHandler,com.github.mikephil.charting.components.YAxis,com.github.mikephil.charting.utils.Transformer)>
<com.github.mikephil.charting.charts.Chart: void drawDescription(android.graphics.Canvas)>
<com.github.mikephil.charting.renderer.YAxisRenderer: void drawYLabels(android.graphics.Canvas,float,float[],float)>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isClipValuesToContentEnabled()>
<com.github.mikephil.charting.components.YAxis$YAxisLabelPosition: void <init>(java.lang.String,int)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void onAttachedToWindow()>
<com.android.gpstest.NavigationDrawerFragment: androidx.appcompat.app.ActionBar getActionBar()>
<com.android.gpstest.DeviceInfoViewModel: void reset()>
<com.android.gpstest.DeviceInfoViewModel: void onCleared()>
<com.android.gpstest.BenchmarkViewModel: void <init>(android.app.Application)>
<com.github.mikephil.charting.renderer.DataRenderer: boolean isDrawingValuesAllowed(com.github.mikephil.charting.interfaces.dataprovider.ChartInterface)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void drawLabels(android.graphics.Canvas,float,com.github.mikephil.charting.utils.MPPointF)>
<com.github.mikephil.charting.components.YAxis: com.github.mikephil.charting.components.YAxis$YAxisLabelPosition getLabelPosition()>
<com.github.mikephil.charting.utils.Utils: com.github.mikephil.charting.utils.FSize calcTextSize(android.graphics.Paint,java.lang.String)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.gpstest.GpsTestActivity: void <init>()>
<com.android.gpstest.NavigationDrawerFragment: void populateNavDrawer()>
<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix getMatrixTouch()>
<com.android.gpstest.GpsTestActivity: void removeStatusListener()>
<com.github.mikephil.charting.charts.Chart: float getExtraRightOffset()>
<com.github.mikephil.charting.utils.ObjectPool: com.github.mikephil.charting.utils.ObjectPool create(int,com.github.mikephil.charting.utils.ObjectPool$Poolable)>
<com.github.mikephil.charting.components.Legend: float getMaximumEntryHeight(android.graphics.Paint)>
<com.android.gpstest.GpsTestActivity: void onDestroy()>
<com.android.gpstest.GpsTestActivity: void hideSkyFragment()>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawValues(android.graphics.Canvas)>
<com.android.gpstest.GpsTestActivity: void onNewIntent(android.content.Intent)>
<com.github.mikephil.charting.components.Legend: void setEntries(java.util.List)>
<com.android.gpstest.GpsTestActivity: void addListener(com.android.gpstest.GpsTestListener)>
<com.android.gpstest.NavigationDrawerFragment: void onResume()>
<com.github.mikephil.charting.components.Legend: float getFormSize()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void onSizeChanged(int,int,int,int)>
<com.github.mikephil.charting.components.AxisBase: void calculate(float,float)>
<com.github.mikephil.charting.utils.MPPointF$1: void <init>()>
<com.github.mikephil.charting.components.AxisBase: boolean isDrawAxisLineEnabled()>
<com.android.gpstest.GpsTestActivity: void saveInstanceState(android.os.Bundle)>
<com.github.mikephil.charting.utils.ViewPortHandler: void limitTransAndScale(android.graphics.Matrix,android.graphics.RectF)>
<com.github.mikephil.charting.components.Legend$LegendHorizontalAlignment: void <init>(java.lang.String,int)>
<com.github.mikephil.charting.charts.Chart: float getExtraLeftOffset()>
<com.github.mikephil.charting.charts.Chart: float getExtraBottomOffset()>
<com.android.gpstest.NavigationDrawerFragment: boolean isSeparator(int)>
<com.android.gpstest.GpsStatusFragment: void onActivityCreated(android.os.Bundle)>
<com.github.mikephil.charting.renderer.LegendRenderer: void <init>(com.github.mikephil.charting.utils.ViewPortHandler,com.github.mikephil.charting.components.Legend)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void onMeasure(int,int)>
<com.android.gpstest.GpsStatusFragment: void <init>()>
<com.github.mikephil.charting.components.AxisBase: java.util.List getLimitLines()>
<com.android.gpstest.util.UIUtils: void resetActivityTitle(android.app.Activity)>
<com.github.mikephil.charting.utils.Utils: float getLineHeight(android.graphics.Paint,android.graphics.Paint$FontMetrics)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void draw(android.graphics.Canvas)>
<com.android.gpstest.BenchmarkControllerImpl: void initChartUnits(com.github.mikephil.charting.charts.LineChart)>
<com.github.mikephil.charting.listener.ChartTouchListener: void <init>(com.github.mikephil.charting.charts.Chart)>
<com.android.gpstest.GpsTestActivity: void hideMapFragment()>
<com.android.gpstest.BenchmarkViewModel: void onCleared()>
<com.android.gpstest.GpsStatusFragment$2: void <init>(com.android.gpstest.GpsStatusFragment)>
<com.github.mikephil.charting.charts.BarLineChartBase: void computeScroll()>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawData(android.graphics.Canvas)>
<com.github.mikephil.charting.components.AxisBase: float getAxisLineWidth()>
<com.github.mikephil.charting.utils.ViewPortHandler: float contentRight()>
<com.github.mikephil.charting.components.AxisBase: void setAxisMinimum(float)>
<com.github.mikephil.charting.utils.Utils: void <clinit>()>
<com.github.mikephil.charting.utils.MPPointD: com.github.mikephil.charting.utils.MPPointD getInstance(double,double)>
<com.android.gpstest.BenchmarkControllerImpl: void hide()>
<com.android.gpstest.BenchmarkControllerImpl$4: void <init>(com.android.gpstest.BenchmarkControllerImpl)>
<com.github.mikephil.charting.components.YAxis: boolean needsOffset()>
<com.github.mikephil.charting.components.AxisBase: void setValueFormatter(com.github.mikephil.charting.formatter.IAxisValueFormatter)>
<com.github.mikephil.charting.components.YAxis: float getRequiredWidthSpace(android.graphics.Paint)>
<com.android.gpstest.util.UIUtils: void setAccessibilityIgnore(android.view.View)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setGravity(int)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void <init>(com.github.mikephil.charting.utils.ViewPortHandler,com.github.mikephil.charting.components.XAxis,com.github.mikephil.charting.utils.Transformer)>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawExtras(android.graphics.Canvas)>
<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix refresh(android.graphics.Matrix,android.view.View,boolean)>
<com.github.mikephil.charting.components.Legend: boolean isLegendCustom()>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter: void onBindViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder,int)>
<com.github.mikephil.charting.components.YAxis: boolean isDrawZeroLineEnabled()>
<com.android.gpstest.NavigationDrawerFragment: void selectItem(int)>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: android.widget.TextView getElevation()>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: android.widget.TextView getSignal()>
<com.github.mikephil.charting.data.ChartData: int getEntryCount()>
<com.github.mikephil.charting.utils.ViewPortHandler: float offsetRight()>
<com.github.mikephil.charting.charts.BarLineChartBase: void drawGridBackground(android.graphics.Canvas)>
<com.github.mikephil.charting.formatter.DefaultValueFormatter: void setup(int)>
<com.github.mikephil.charting.utils.ObjectPool$Poolable: void <init>()>
<com.android.gpstest.GpsTestActivity: void hideAccuracyFragment()>
<com.github.mikephil.charting.components.AxisBase: float getGridLineWidth()>
<com.android.gpstest.GpsStatusFragment$$ExternalSyntheticLambda2: void <init>(com.android.gpstest.GpsStatusFragment)>
<com.android.gpstest.BenchmarkControllerImpl: boolean isTestInProgress()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$2: void <clinit>()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setScrollableView(android.view.View)>
<com.github.mikephil.charting.utils.ObjectPool: void refillPool(float)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void renderLimitLines(android.graphics.Canvas)>
<com.github.mikephil.charting.utils.ViewPortHandler: void <init>()>
<com.github.mikephil.charting.utils.Utils: float convertDpToPixel(float)>
<com.github.mikephil.charting.components.Legend$LegendVerticalAlignment: void <clinit>()>
<com.github.mikephil.charting.components.ComponentBase: float getXOffset()>
<com.github.mikephil.charting.renderer.AxisRenderer: android.graphics.Paint getPaintAxisLabels()>
<com.github.mikephil.charting.charts.BarLineChartBase: void init()>
<com.android.gpstest.BenchmarkControllerImpl: void initChart(com.github.mikephil.charting.charts.LineChart)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void onFinishInflate()>
<com.github.mikephil.charting.components.Legend$LegendHorizontalAlignment: void <clinit>()>
<com.github.mikephil.charting.renderer.AxisRenderer: void <init>(com.github.mikephil.charting.utils.ViewPortHandler,com.github.mikephil.charting.utils.Transformer,com.github.mikephil.charting.components.AxisBase)>
<com.android.gpstest.GpsTestActivity: boolean onCreateOptionsMenu(android.view.Menu)>
<com.android.gpstest.view.VerticalTextView: void onMeasure(int,int)>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: android.widget.ImageView getFlag()>
<com.android.gpstest.GpsStatusFragment$$ExternalSyntheticLambda3: void <init>(androidx.core.view.GestureDetectorCompat)>
<com.android.gpstest.GpsStatusFragment$SatelliteStatusAdapter$ViewHolder: android.widget.TextView getAzimuth()>
<com.github.mikephil.charting.components.XAxis: com.github.mikephil.charting.components.XAxis$XAxisPosition getPosition()>
<com.github.mikephil.charting.components.XAxis: void setAvoidFirstLastClipping(boolean)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void addPanelSlideListener(com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelSlideListener)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState: void <clinit>()>
<com.android.gpstest.BenchmarkControllerImpl: void setupUnitPreferences()>
<com.github.mikephil.charting.utils.FSize: void <init>(float,float)>
<com.android.gpstest.lang.LocaleManager: void <init>(android.content.Context)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setDrawGridBackground(boolean)>
<com.android.gpstest.NavigationDrawerFragment: void formatNavDrawerItem(android.view.View,int,boolean)>
<com.android.gpstest.NavigationDrawerFragment: void <init>()>
<com.github.mikephil.charting.renderer.LegendRenderer: void computeLegend(com.github.mikephil.charting.data.ChartData)>
<com.github.mikephil.charting.components.Legend$LegendVerticalAlignment: com.github.mikephil.charting.components.Legend$LegendVerticalAlignment[] values()>
<com.github.mikephil.charting.renderer.YAxisRenderer: void renderAxisLabels(android.graphics.Canvas)>
<com.github.mikephil.charting.components.ComponentBase: boolean isEnabled()>
<com.github.mikephil.charting.charts.BarLineChartBase: void onSizeChanged(int,int,int,int)>
<com.github.mikephil.charting.utils.ObjectPool: void refillPool()>
<com.github.mikephil.charting.renderer.XAxisRenderer: void renderAxisLabels(android.graphics.Canvas)>
<com.sothree.slidinguppanel.ViewDragHelper$2: void <init>(com.sothree.slidinguppanel.ViewDragHelper)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: int computePanelTopPosition(float)>
<com.android.gpstest.GpsTestActivity$6: void <init>(com.android.gpstest.GpsTestActivity)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$1: void <init>(com.sothree.slidinguppanel.SlidingUpPanelLayout)>
<com.github.mikephil.charting.components.Legend: boolean isDrawInsideEnabled()>
<com.android.gpstest.NavigationDrawerFragment: android.view.View makeNavDrawerItem(int,android.view.ViewGroup)>
<com.android.gpstest.NavigationDrawerFragment: void onCreate(android.os.Bundle)>
<com.android.gpstest.util.SatelliteUtils: boolean isGnssCarrierFrequenciesSupported()>
<com.android.gpstest.NavigationDrawerFragment: void onDetach()>
<com.github.mikephil.charting.components.YAxis: float getMinWidth()>
<com.android.gpstest.GpsStatusFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.github.mikephil.charting.components.AxisBase: boolean isDrawLimitLinesBehindDataEnabled()>
<com.github.mikephil.charting.utils.ObjectPool: void <clinit>()>
<com.github.mikephil.charting.listener.ChartTouchListener$ChartGesture: void <clinit>()>
<com.sothree.slidinguppanel.ViewDragHelper: boolean continueSettling(boolean)>
<com.android.gpstest.Application: com.android.gpstest.Application get()>
<com.android.gpstest.NavigationDrawerFragment$3: void <init>(com.android.gpstest.NavigationDrawerFragment,int)>
<com.android.gpstest.BenchmarkControllerImpl$5: void <init>(com.android.gpstest.BenchmarkControllerImpl)>
<com.android.gpstest.GpsTestActivity: void removeGnssMeasurementsListener()>

---------- Methods Not Visited (7019) ----------
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: java.lang.Class getDeclaringClass()>
<com.fasterxml.jackson.databind.ser.AnyGetterWriter: void fixAccess(com.fasterxml.jackson.databind.SerializationConfig)>
<kotlin.collections.EmptyIterator: void <clinit>()>
<com.fasterxml.jackson.databind.type.SimpleType: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],int,java.lang.Object,java.lang.Object,boolean)>
<kotlin.jvm.internal.MutablePropertyReference1: void <init>(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<kotlin.ranges.IntProgression: java.util.Iterator iterator()>
<org.osmdroid.tileprovider.MapTileCache: android.graphics.drawable.Drawable getMapTile(long)>
<com.fasterxml.jackson.databind.JavaType: boolean useStaticType()>
<kotlinx.coroutines.CancelledContinuation: void <clinit>()>
<kotlinx.coroutines.MainCoroutineDispatcher: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()>
<com.sothree.slidinguppanel.ViewDragHelper: void setDragState(int)>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionLikeType withContentTypeHandler(java.lang.Object)>
<kotlinx.coroutines.NodeList: java.lang.String getString(java.lang.String)>
<kotlinx.coroutines.DispatchedTask: void handleFatalException$kotlinx_coroutines_core(java.lang.Throwable,java.lang.Throwable)>
<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.components.IMarker: void refreshContent(com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.highlight.Highlight)>
<org.osmdroid.tileprovider.modules.DatabaseFileArchive: void init(java.io.File)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$3: java.lang.Boolean withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object takeState$kotlinx_coroutines_core()>
<org.osmdroid.api.IMapController: void setCenter(org.osmdroid.api.IGeoPoint)>
<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType getKeyType()>
<org.osmdroid.util.MyMath: int floorToInt(double)>
<kotlinx.coroutines.internal.SystemPropsKt__SystemPropsKt: java.lang.String systemProp(java.lang.String)>
<kotlinx.coroutines.JobSupport$Finishing: boolean isActive()>
<kotlinx.coroutines.CommonPool: java.util.concurrent.ExecutorService createPool()>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapLikeType withKeyType(com.fasterxml.jackson.databind.JavaType)>
<kotlin.jvm.internal.CallableReference: kotlin.reflect.KType getReturnType()>
<kotlinx.coroutines.internal.MainDispatcherLoader: kotlinx.coroutines.MainCoroutineDispatcher loadMainDispatcher()>
<org.osmdroid.util.TileSystemWebMercator: void <init>()>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: java.lang.Boolean _isShapeWrittenUsingIndex(java.lang.Class,com.fasterxml.jackson.'annotation'.JsonFormat$Value,boolean,java.lang.Boolean)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromArrayType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.jackson.databind.type.TypeBindings)>
<org.osmdroid.util.GeoPoint: void setLongitude(double)>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig _withMapperFeatures(int)>
<org.osmdroid.util.MapTileAreaList$1: java.util.Iterator getCurrent()>
<org.osmdroid.views.Projection: long getLongPixelXFromLongitude(double,boolean)>
<com.fasterxml.jackson.core.util.Separators: void <init>()>
<kotlinx.coroutines.CompletedExceptionallyKt: java.lang.Object toState(java.lang.Object,kotlinx.coroutines.CancellableContinuation)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4: java.lang.Object invoke(java.lang.Object)>
<org.osmdroid.views.MapView$MapViewZoomListener: void <init>(org.osmdroid.views.MapView)>
<kotlin.jvm.internal.Reflection: kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)>
<com.github.mikephil.charting.charts.BarLineChartBase: float getScaleY()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: com.fasterxml.jackson.databind.ser.impl.WritableObjectId findObjectId(java.lang.Object,com.fasterxml.jackson.'annotation'.ObjectIdGenerator)>
<com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature valueOf(java.lang.String)>
<kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeBoolean(boolean)>
<kotlinx.coroutines.JobSupport: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>
<com.fasterxml.jackson.core.JsonGenerator: void writeRaw(char)>
<com.fasterxml.jackson.core.TokenStreamFactory: void <init>()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)>
<com.github.mikephil.charting.renderer.DataRenderer: void drawData(android.graphics.Canvas)>
<org.osmdroid.util.GarbageCollector: boolean gc()>
<org.osmdroid.views.overlay.LinearRing: void buildLinePortion(org.osmdroid.views.Projection,boolean)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.JsonParser: void <init>()>
<org.osmdroid.views.MapView: org.osmdroid.views.overlay.OverlayManager getOverlayManager()>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void <init>(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)>
<kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>
<org.osmdroid.util.TileLooper: void <init>(boolean,boolean)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.String toString()>
<kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>
<kotlinx.coroutines.internal.ThreadSafeHeapNode: void setIndex(int)>
<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter: void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(java.lang.Class,boolean)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.MapController$ReplayType: void <clinit>()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setScrollableViewHelper(com.sothree.slidinguppanel.ScrollableViewHelper)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlinx.coroutines.SupervisorJobImpl: void <init>(kotlinx.coroutines.Job)>
<kotlinx.coroutines.DebugKt: void <clinit>()>
<org.osmdroid.config.IConfigurationProvider: boolean isDebugMapTileDownloader()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation: boolean hasOneOf(java.lang.Class[])>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int totalCount()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: void addProvider(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)>
<com.android.gpstest.dialog.ShareLogFragment$onViewCreated$2: void <init>(com.android.gpstest.dialog.ShareLogFragment,android.net.Uri,java.util.ArrayList)>
<kotlin.jvm.internal.CallableReference: java.lang.Object callBy(java.util.Map)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder$1: void <clinit>()>
<com.github.mikephil.charting.renderer.LineScatterCandleRadarRenderer: void drawHighlightLines(android.graphics.Canvas,float,float,com.github.mikephil.charting.interfaces.datasets.ILineScatterCandleRadarDataSet)>
<kotlin.ranges.IntRange: boolean isEmpty()>
<com.fasterxml.jackson.databind.JsonMappingException: void _appendPathDesc(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.type.TypeFactory: void <clinit>()>
<org.osmdroid.views.CustomZoomButtonsController: boolean isTouched(android.view.MotionEvent)>
<kotlin.text.StringsKt: java.lang.Long toLongOrNull(java.lang.String)>
<org.osmdroid.views.overlay.Polygon$OnClickListener: boolean onClick(org.osmdroid.views.overlay.Polygon,org.osmdroid.views.MapView,org.osmdroid.util.GeoPoint)>
<com.github.mikephil.charting.components.AxisBase: float getGranularity()>
<kotlin.internal.PlatformImplementationsKt: void <clinit>()>
<com.github.mikephil.charting.data.BaseDataSet: com.github.mikephil.charting.components.Legend$LegendForm getForm()>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector collectProperties(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver,boolean,java.lang.String)>
<kotlin.coroutines.ContinuationInterceptor$Key: void <init>()>
<org.osmdroid.util.TileSystem: boolean isValidLongitude(double)>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: float getMultiTouchHeight()>
<org.osmdroid.views.MapView: void onPause()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class wrapperType(java.lang.Class)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeEndArray()>
<com.fasterxml.jackson.databind.JavaType: boolean isFinal()>
<com.github.mikephil.charting.charts.Chart: void enableScroll()>
<org.osmdroid.tileprovider.MapTileProviderArray: void remove(long)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider$TileLoader getTileLoader()>
<com.fasterxml.jackson.databind.PropertyName: boolean hasSimpleName()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Type[] getGenericInterfaces(java.lang.Class)>
<com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo: void <init>(com.fasterxml.jackson.databind.introspect.AnnotatedMember,boolean)>
<com.fasterxml.jackson.core.JsonStreamContext: java.lang.Object getCurrentValue()>
<org.osmdroid.util.MapTileIndex: void <clinit>()>
<com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo: com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo createForDefaults(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ext.Java7Support: void <init>()>
<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: void <init>()>
<org.osmdroid.util.GeometryMath: double Max4(double,double,double,double)>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken,java.lang.Object)>
<com.fasterxml.jackson.core.base.GeneratorBase: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$3: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.databind.introspect.Annotated: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.StringArraySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<org.osmdroid.util.MapTileIndex: int getZoom(long)>
<com.sothree.slidinguppanel.ViewDragHelper: void clearMotionHistory()>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: boolean isTileReachable(long)>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onSingleTapUp(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.metalev.multitouch.controller.MultiTouchController: void extractCurrPtInfo()>
<com.github.mikephil.charting.data.Entry: void <init>(android.os.Parcel)>
<kotlin.text.Regex: void <init>(java.lang.String)>
<org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String[],java.lang.String)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _calcTertiaryShift(int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Class _rawTypeOf(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder typeProperty(java.lang.String)>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<kotlin.collections.EmptyList: int indexOf(java.lang.Object)>
<kotlinx.coroutines.JobSupport: boolean cancelImpl$kotlinx_coroutines_core(java.lang.Object)>
<com.fasterxml.jackson.databind.MappingJsonFactory: com.fasterxml.jackson.core.ObjectCodec getCodec()>
<com.fasterxml.jackson.databind.DatabindContext: java.lang.Object reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <clinit>()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.ser.BeanSerializer createDummy()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: java.lang.String toString()>
<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker 'with'(com.fasterxml.jackson.'annotation'.JsonAutoDetect)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.renderer.YAxisRenderer: android.graphics.Path linePath(android.graphics.Path,int,float[])>
<com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo: com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo createForTypeOverride(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: java.lang.String getThreadGroupName()>
<kotlinx.coroutines.scheduling.NonBlockingContext: void afterTask()>
<org.osmdroid.views.MapView: android.widget.Scroller getScroller()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Boolean findSerializationSortAlphabetically(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.android.gpstest.model.SatelliteMetadata: int getNumSignalsTotal()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isPinchZoomEnabled()>
<com.fasterxml.jackson.core.io.NumberOutput: void <clinit>()>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: void <init>(java.lang.Object,java.lang.Boolean)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartArray(int)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu$kotlinx_coroutines_core(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>
<com.fasterxml.jackson.'annotation'.Nulls: void <clinit>()>
<kotlinx.coroutines.Job: void cancel(java.util.concurrent.CancellationException)>
<kotlinx.coroutines.CoroutineId: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.PrettyPrinter: void beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)>
<kotlinx.coroutines.android.HandlerContext: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
<org.osmdroid.config.DefaultConfigurationProvider: short getCacheMapTileOvershoot()>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: void onMediaUnmounted()>
<com.fasterxml.jackson.core.JsonProcessingException: void <init>(java.lang.String,java.lang.Throwable)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: java.lang.Class getScope()>
<kotlinx.coroutines.ChildHandleNode: java.lang.String toString()>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerator: java.lang.Object generateId(java.lang.Object)>
<org.osmdroid.util.MapTileArea: int getLeft()>
<com.fasterxml.jackson.databind.ext.Java7SupportImpl: java.lang.Boolean hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add$default(kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.Task,boolean,int,java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator getPolymorphicTypeValidator()>
<com.fasterxml.jackson.databind.SerializationFeature: void <clinit>()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase asArraySerializer()>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isDoubleTapToZoomEnabled()>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedParameter getConstructorParameter()>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: java.lang.String getThreadGroupName()>
<com.fasterxml.jackson.databind.JsonSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void serializeWithType(char[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer: com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.type.SimpleType constructUnsafe(java.lang.Class)>
<com.github.mikephil.charting.data.ChartData: float getYMin()>
<kotlinx.coroutines.internal.MainDispatcherLoader: void <clinit>()>
<com.fasterxml.jackson.databind.MapperFeature: void <init>(java.lang.String,int,boolean)>
<com.sothree.slidinguppanel.ViewDragHelper: void dispatchViewReleased(float,float)>
<org.osmdroid.views.Projection: android.graphics.Rect getIntrinsicScreenRect()>
<com.github.mikephil.charting.interfaces.datasets.IBarDataSet: int getStackSize()>
<com.github.mikephil.charting.charts.HorizontalBarChart: float[] getMarkerPosition(com.github.mikephil.charting.highlight.Highlight)>
<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: void <clinit>()>
<com.fasterxml.jackson.core.PrettyPrinter: void writeStartObject(com.fasterxml.jackson.core.JsonGenerator)>
<org.osmdroid.tileprovider.modules.ZipFileArchive: void <init>()>
<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.github.mikephil.charting.data.ChartData: void calcMinMax(com.github.mikephil.charting.interfaces.datasets.IDataSet)>
<kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver: java.util.Collection collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.'annotation'.PropertyAccessor: com.fasterxml.jackson.'annotation'.PropertyAccessor valueOf(java.lang.String)>
<com.android.gpstest.DeviceInfoViewModel: void setStatuses(java.util.List,java.util.List)>
<com.github.mikephil.charting.utils.TransformerHorizontalBarChart: void <init>(com.github.mikephil.charting.utils.ViewPortHandler)>
<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>
<org.osmdroid.util.TileSystemWebMercator: double getY01FromLatitude(double)>
<kotlin.internal.PlatformImplementations: void <init>()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addFields(java.util.Map)>
<com.android.gpstest.model.ConstellationFamily: com.android.gpstest.model.SatelliteMetadata getSatelliteMetadata()>
<org.osmdroid.views.MapController$ReplayController: void <init>(org.osmdroid.views.MapController)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.charts.Chart: void setDrawMarkers(boolean)>
<kotlinx.coroutines.CoroutineId: java.lang.String toString()>
<org.osmdroid.tileprovider.MapTileRequestState: void <init>(long,java.util.List,org.osmdroid.tileprovider.IMapTileProviderCallback)>
<com.android.gpstest.DeviceInfoViewModel: java.util.Set getSupportedGnssCfs()>
<com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.views.MapController$ReplayType: org.osmdroid.views.MapController$ReplayType valueOf(java.lang.String)>
<org.osmdroid.views.overlay.DefaultOverlayManager: void onPause()>
<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add(kotlinx.coroutines.scheduling.Task,boolean)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter withConfig(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.JavaType)>
<com.android.gpstest.GpsStatusFragment$1: void onChanged(com.android.gpstest.model.SatelliteMetadata)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Object defaultValue(java.lang.Class)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writePPFieldName(java.lang.String,boolean)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty findReferenceType()>
<com.github.mikephil.charting.data.BarEntry: float getPositiveSum()>
<com.fasterxml.jackson.databind.util.TypeKey: int untypedHash(com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.tileprovider.MapTileProviderArray: void mapTileRequestExpiredTile(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void <init>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: boolean _isIgnorable(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.github.mikephil.charting.data.LineRadarDataSet: void setLineWidth(float)>
<com.fasterxml.jackson.core.JsonLocation: java.lang.StringBuilder _appendSourceDesc(java.lang.StringBuilder)>
<org.osmdroid.views.overlay.TilesOverlay$OverlayTileLooper: void <init>(org.osmdroid.views.overlay.TilesOverlay)>
<org.osmdroid.views.Projection: long getLongPixelYFromLatitude(double)>
<org.osmdroid.util.RectL: int hashCode()>
<com.fasterxml.jackson.databind.jsontype.NamedType: boolean hasName()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedMember findAnyGetter()>
<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeStartArray()>
<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>
<kotlin.jvm.internal.PropertyReference1: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>
<kotlin.collections.EmptyIterator: int previousIndex()>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: void <clinit>()>
<org.osmdroid.views.overlay.PolyOverlayWithIW: void onDetach(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.ReferenceType withValueHandler(java.lang.Object)>
<org.osmdroid.util.TileSystem: double getX01FromLongitude(double,boolean)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void shutdown(long)>
<kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$1: void <init>(kotlin.jvm.functions.Function1[])>
<kotlinx.coroutines.internal.ThreadSafeHeap: void <init>()>
<org.osmdroid.views.Projection: org.osmdroid.util.PointL toProjectedPixels(double,double,boolean,org.osmdroid.util.PointL)>
<com.fasterxml.jackson.'annotation'.JsonAnySetter: boolean enabled()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void _writeArrayContents(com.fasterxml.jackson.core.JsonGenerator,char[])>
<org.osmdroid.views.Projection: android.graphics.Point toPixels(org.osmdroid.api.IGeoPoint,android.graphics.Point)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$SingleView: com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$SingleView rename(com.fasterxml.jackson.databind.util.NameTransformer)>
<kotlin.collections.EmptySet: boolean add(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value merge(com.fasterxml.jackson.'annotation'.JsonInclude$Value,com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Typing: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: com.fasterxml.jackson.databind.PropertyName getPropertyName()>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As getTypeInclusion()>
<com.fasterxml.jackson.databind.type.TypeBindings: java.util.List getTypeParameters()>
<kotlin.collections.EmptyList: java.lang.Object remove(int)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: java.lang.String pathBase()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void <init>(java.lang.Class,com.fasterxml.jackson.databind.util.EnumValues)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter getObjectIdWriter()>
<com.fasterxml.jackson.databind.introspect.CollectorBase: com.fasterxml.jackson.databind.introspect.AnnotationCollector collectAnnotations(java.lang.'annotation'.Annotation[])>
<kotlinx.coroutines.CoroutineExceptionHandler$Key: void <init>()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.SimpleType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapType withTypeHandler(java.lang.Object)>
<kotlinx.coroutines.internal.MainDispatchersKt: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher createMissingDispatcher(java.lang.Throwable,java.lang.String)>
<com.fasterxml.jackson.core.json.JsonWriteContext: java.lang.Object getCurrentValue()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class findEnumType(java.lang.Class)>
<kotlinx.coroutines.DefaultExecutor: void run()>
<org.osmdroid.tileprovider.modules.TileWriter: java.util.List getDirectoryFileList(java.io.File)>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isAnyAxisInverted()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: com.fasterxml.jackson.databind.JavaType getType()>
<com.fasterxml.jackson.core.JsonGenerationException: com.fasterxml.jackson.core.JsonGenerator getProcessor()>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: long _timestamp(java.util.Calendar)>
<com.github.mikephil.charting.renderer.HorizontalBarChartRenderer: void setHighlightDrawPos(com.github.mikephil.charting.highlight.Highlight,android.graphics.RectF)>
<kotlinx.coroutines.AbstractCoroutine: void onCompletionInternal(java.lang.Object)>
<org.osmdroid.views.Projection: void <init>(double,android.graphics.Rect,org.osmdroid.util.GeoPoint,long,long,float,boolean,boolean,org.osmdroid.util.TileSystem,int,int)>
<com.fasterxml.jackson.databind.ser.std.ByteArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.jvm.internal.ReflectionFactory: void <init>()>
<com.fasterxml.jackson.databind.type.TypeBindings: boolean hasUnbound(java.lang.String)>
<kotlin.jvm.internal.PropertyReference1: kotlin.reflect.KProperty1$Getter getGetter()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Boolean isTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.core.util.BufferRecycler: byte[] allocByteBuffer(int)>
<kotlinx.coroutines.CoroutineExceptionHandlerImplKt: void <clinit>()>
<org.osmdroid.views.overlay.Polyline: void setColor(int)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setDragOffsetY(float)>
<org.osmdroid.util.MapTileAreaList$1: boolean hasNext()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>
<com.github.mikephil.charting.components.AxisBase: boolean isForceLabelsEnabled()>
<com.github.mikephil.charting.data.BaseDataSet: float getFormSize()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.highlight.Highlight[] getHighlighted()>
<com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator: void <clinit>()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: java.util.Set _asSet(java.lang.String[])>
<kotlinx.coroutines.EventLoop: long delta(boolean)>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: int getMinimumZoomLevel()>
<kotlinx.coroutines.CoroutineId: long getId()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: boolean getUsesDataConnection()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void applyParallaxForCurrentSlideOffset()>
<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer: java.lang.String getPropertyName()>
<org.osmdroid.util.UrlBackoff: org.osmdroid.util.Delay remove(java.lang.String)>
<org.osmdroid.views.MapController$ReplayType: void <init>(java.lang.String,int)>
<kotlin.internal.PlatformImplementationsKt: int getJavaVersion()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.JavaType getBoundType(int)>
<com.fasterxml.jackson.databind.ser.ContainerSerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setTouchEnabled(boolean)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)>
<kotlin.sequences.SequencesKt___SequencesKt: java.util.List toMutableList(kotlin.sequences.Sequence)>
<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _appendStartMarker(com.fasterxml.jackson.core.JsonToken)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$2: java.lang.Object withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: void calcMinMaxY(float,float)>
<com.github.mikephil.charting.data.LineDataSet$Mode: com.github.mikephil.charting.data.LineDataSet$Mode valueOf(java.lang.String)>
<org.osmdroid.views.MapView$MapViewGestureDetectorListener: void <init>(org.osmdroid.views.MapView,org.osmdroid.views.MapView$1)>
<com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.Class getType()>
<com.fasterxml.jackson.databind.DeserializationFeature: void <init>(java.lang.String,int,boolean)>
<com.android.gpstest.GpsMapFragment: void onOrientationChanged(double,double)>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: int getIndex()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.BeanDescription introspectClassAnnotations(java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.'annotation'.JacksonInject$Value findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.github.mikephil.charting.interfaces.dataprovider.ChartInterface: com.github.mikephil.charting.data.ChartData getData()>
<org.osmdroid.tileprovider.modules.ZipFileArchive: java.io.InputStream getInputStream(org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper: void finaliseLoop()>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: java.lang.Class using()>
<org.osmdroid.views.CustomZoomButtonsController$OnZoomListener: void onZoom(boolean)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$KebabCaseStrategy: void <init>()>
<com.fasterxml.jackson.'annotation'.JsonPropertyOrder: boolean alphabetic()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase: java.lang.String nameForGetterMethod(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeString(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl createInstance(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)>
<kotlin.text.StringsKt__StringsKt: int lastIndexOf(java.lang.CharSequence,char,int,boolean)>
<com.fasterxml.jackson.databind.JsonSerializer: java.lang.Class handledType()>
<com.fasterxml.jackson.'annotation'.JsonIgnore: boolean value()>
<com.fasterxml.jackson.databind.cfg.ConfigOverride$Empty: void <init>()>
<org.osmdroid.util.MapTileList: void ensureCapacity(int)>
<com.github.mikephil.charting.data.BaseEntry: void setY(float)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker withOverrides(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Value)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.github.mikephil.charting.renderer.BarLineScatterCandleBubbleRenderer: boolean isInBoundsX(com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.interfaces.datasets.IBarLineScatterCandleBubbleDataSet)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1: void <init>()>
<org.osmdroid.config.DefaultConfigurationProvider: long getTileGCFrequencyInMillis()>
<org.osmdroid.views.overlay.Marker: boolean onLongPress(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.util.GeoPoint: void <clinit>()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeEndObject()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter: void <clinit>()>
<org.osmdroid.util.MapTileArea: int size()>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: com.fasterxml.jackson.databind.JsonSerializer modifyKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.'annotation'.JsonProperty: boolean required()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Object,boolean)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.List)>
<kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>
<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOf(java.lang.Object[])>
<com.fasterxml.jackson.databind.SerializerProvider: void reportMappingProblem(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<com.github.mikephil.charting.charts.BarLineChartBase: void setDragXEnabled(boolean)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.ser.BeanPropertyWriter unwrappingWriter(com.fasterxml.jackson.databind.util.NameTransformer)>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Prop: java.lang.String namespace()>
<org.osmdroid.views.overlay.DefaultOverlayManager: org.osmdroid.views.overlay.Overlay set(int,org.osmdroid.views.overlay.Overlay)>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: com.github.mikephil.charting.utils.MPPointF getTrans(float,float)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object,boolean)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _appendFieldName(java.lang.Object)>
<org.osmdroid.views.overlay.Marker: void moveToEventPosition(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.util.NameTransformer: com.fasterxml.jackson.databind.util.NameTransformer simpleTransformer(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer: void serialize(java.net.InetSocketAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.CommonPool: java.util.concurrent.ExecutorService createPlainPool()>
<com.github.mikephil.charting.charts.Chart: boolean isDrawMarkersEnabled()>
<com.fasterxml.jackson.databind.type.TypeBindings$AsKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>
<com.github.mikephil.charting.data.LineDataSet: boolean isDashedLineEnabled()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer$1: void <clinit>()>
<com.github.mikephil.charting.data.LineDataSet$Mode: void <init>(java.lang.String,int)>
<org.osmdroid.tileprovider.modules.MapTileApproximater: java.lang.String getThreadGroupName()>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Inclusion: com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Inclusion[] values()>
<com.fasterxml.jackson.databind.util.BeanUtil: java.lang.String legacyManglePropertyName(java.lang.String,int)>
<com.fasterxml.jackson.databind.util.BeanUtil: boolean isGroovyMetaClassGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: java.util.List collect(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>
<com.fasterxml.jackson.databind.PropertyName: boolean isEmpty()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void park()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.internal.MainDispatchersKt: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher createMissingDispatcher$default(java.lang.Throwable,java.lang.String,int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked _trimByVisibility(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<com.fasterxml.jackson.core.io.JsonStringEncoder: void <clinit>()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: void <init>(com.fasterxml.jackson.'annotation'.JsonFormat)>
<com.fasterxml.jackson.core.JsonFactory$Feature: void <clinit>()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedParameter getConstructorParameter()>
<org.osmdroid.views.CustomZoomButtonsController$Visibility: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.util.LRUMap: void <init>(int,int)>
<kotlin.ranges.RangesKt___RangesKt: int coerceIn(int,int,int)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getGetter()>
<com.github.mikephil.charting.renderer.LineChartRenderer: void generateFilledPath(com.github.mikephil.charting.interfaces.datasets.ILineDataSet,int,int,android.graphics.Path)>
<kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties: boolean allowGetters()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked _applyAnnotations(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked,com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.github.mikephil.charting.charts.HorizontalBarChart: float getLowestVisibleX()>
<com.github.mikephil.charting.renderer.LegendRenderer: void drawForm(android.graphics.Canvas,float,float,com.github.mikephil.charting.components.LegendEntry,com.github.mikephil.charting.components.Legend)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: void <clinit>()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: int getEntryIndex(com.github.mikephil.charting.data.Entry)>
<com.fasterxml.jackson.'annotation'.JsonFormat: com.fasterxml.jackson.'annotation'.JsonFormat$Shape shape()>
<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException getChildJobCancellationCause()>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.util.NameTransformer)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: android.graphics.drawable.Drawable loadTile(long)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(double)>
<kotlin.coroutines.CombinedContext: boolean contains(kotlin.coroutines.CoroutineContext$Element)>
<kotlinx.coroutines.CoroutinesInternalError: void <init>(java.lang.String,java.lang.Throwable)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers: void addAll(java.util.Map)>
<kotlin.collections.EmptyList: boolean addAll(int,java.util.Collection)>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>
<org.osmdroid.views.MapView: float getTilesScaleFactor()>
<com.fasterxml.jackson.core.io.NumberOutput: boolean notFinite(float)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.databind.util.BeanUtil: java.lang.String okNameForRegularGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String,boolean)>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder typeIdVisibility(boolean)>
<org.osmdroid.config.DefaultConfigurationProvider: short getTileDownloadThreads()>
<org.osmdroid.util.TileSystem: int getTileSize()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void executeTask(kotlinx.coroutines.scheduling.Task)>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean addOneIfEmpty(kotlinx.coroutines.internal.LockFreeLinkedListNode)>
<com.fasterxml.jackson.databind.PropertyName: void <init>(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumSet)>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.PropertyName getFullName()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: com.github.mikephil.charting.utils.MPPointF getIconsOffset()>
<kotlin.collections.EmptyList: java.util.ListIterator listIterator(int)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: java.lang.String getThreadGroupName()>
<kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: android.database.sqlite.SQLiteDatabase getDb()>
<com.sothree.slidinguppanel.ViewDragHelper: boolean shouldInterceptTouchEvent(android.view.MotionEvent)>
<org.osmdroid.views.overlay.Overlay: int getSafeMenuIdSequence(int)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeNumber(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneCollector: void <init>(java.lang.Object,java.lang.Class,java.lang.'annotation'.Annotation)>
<org.osmdroid.util.BoundingBox: double getLonEast()>
<kotlin.comparisons.ComparisonsKt: int compareValues(java.lang.Comparable,java.lang.Comparable)>
<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
<kotlin.random.Random$Default: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1: java.lang.Object invoke(java.lang.Object)>
<com.android.gpstest.dialog.ShareDialogFragment$onCreateDialog$1: void <init>(com.android.gpstest.dialog.ShareDialogFragment)>
<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>
<com.android.gpstest.model.SatelliteStatus: boolean getUsedInFix()>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.android.gpstest.GpsTestActivity: void hideProgressBar()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean shouldSortPropertiesAlphabetically()>
<org.osmdroid.views.overlay.OverlayManager: boolean onDoubleTap(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.android.gpstest.dialog.ShareDialogFragment$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<org.osmdroid.views.overlay.LinearRing: org.osmdroid.util.GeoPoint getCloseTo(org.osmdroid.util.GeoPoint,double,org.osmdroid.views.Projection,boolean)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Boolean findSerializationSortAlphabetically(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void _explode(java.util.Collection,java.util.Map,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<com.fasterxml.jackson.core.io.CharTypes: void <clinit>()>
<com.github.mikephil.charting.charts.Chart$1: void onAnimationUpdate(android.animation.ValueAnimator)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.tilesource.ITileSource,org.osmdroid.tileprovider.modules.IArchiveFile[])>
<org.osmdroid.tileprovider.modules.TileWriter: android.graphics.drawable.Drawable loadTile(org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<org.osmdroid.views.overlay.Marker: boolean isInfoWindowShown()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: android.os.Parcelable onSaveInstanceState()>
<com.fasterxml.jackson.databind.util.EnumValues: void <init>(java.lang.Class,com.fasterxml.jackson.core.SerializableString[])>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: java.lang.Class getActiveView()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<kotlin.jvm.internal.MutablePropertyReference1: kotlin.reflect.KCallable computeReflected()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: boolean _equals(com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value,com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: java.lang.Class as()>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: boolean hasKeySerializers()>
<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>
<com.fasterxml.jackson.databind.BeanProperty$Bogus: void <init>()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: java.util.Locale getLocale()>
<org.osmdroid.views.overlay.LinearRing: org.osmdroid.util.GeoPoint getCenter(org.osmdroid.util.GeoPoint)>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$None: void <init>()>
<org.osmdroid.views.overlay.gestures.RotationGestureOverlay: void onRotate(float)>
<org.osmdroid.views.Projection: void adjustOffsets(long,long)>
<kotlin.Result: boolean isSuccess-impl(java.lang.Object)>
<com.fasterxml.jackson.databind.JavaType: java.lang.String getGenericSignature()>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: void <init>(java.lang.Boolean,java.text.DateFormat)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value mergeAll(com.fasterxml.jackson.'annotation'.JsonInclude$Value[])>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: void loadMapTileAsync(org.osmdroid.tileprovider.MapTileRequestState)>
<org.osmdroid.util.MapTileArea$1: void <init>(org.osmdroid.util.MapTileArea)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonCreator$Mode findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlin.jvm.internal.CallableReference: void <init>()>
<com.fasterxml.jackson.core.io.NumberInput: int parseInt(java.lang.String)>
<com.github.mikephil.charting.renderer.LineChartRenderer$DataSetImageCache: void fill(com.github.mikephil.charting.interfaces.datasets.ILineDataSet,boolean,boolean)>
<kotlin.coroutines.CoroutineContext$plus$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader getTileLoader()>
<kotlin.coroutines.CoroutineContext$plus$1: void <clinit>()>
<com.fasterxml.jackson.databind.ext.OptionalHandlerFactory: void <clinit>()>
<com.github.mikephil.charting.listener.OnChartGestureListener: void onChartFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<org.osmdroid.views.overlay.Overlay: void onDetach(org.osmdroid.views.MapView)>
<org.osmdroid.tileprovider.TileStates: void initialiseLoop()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase: com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<org.osmdroid.views.MapView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.fasterxml.jackson.'annotation'.JsonIdentityReference: boolean alwaysAsId()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void reportProblem(java.lang.String,java.lang.Object[])>
<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>
<org.osmdroid.util.GeoPoint: java.lang.Object clone()>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.Writer)>
<com.android.gpstest.dialog.ShareLocationFragment: void <init>()>
<com.android.gpstest.dialog.ShareDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: boolean isIsGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: void <clinit>()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void <init>()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setFilterId(java.lang.Object)>
<com.github.mikephil.charting.highlight.Highlight: float getDrawY()>
<com.fasterxml.jackson.databind.'annotation'.JsonTypeIdResolver: java.lang.Class value()>
<org.osmdroid.tileprovider.modules.DatabaseFileArchive: java.lang.String toString()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setDoubleTapToZoomEnabled(boolean)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.MapType constructMapType(java.lang.Class,java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: java.lang.Object convertValue(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] getClassMethods(java.lang.Class)>
<com.fasterxml.jackson.core.util.DefaultIndenter: void <clinit>()>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: void <init>(java.util.Map)>
<com.github.mikephil.charting.interfaces.datasets.ILineScatterCandleRadarDataSet: boolean isHorizontalHighlightIndicatorEnabled()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void <init>()>
<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode removeAtImpl(int)>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Prop: java.lang.String name()>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: void <init>(int,int,java.lang.String[],com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[])>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeString2(int)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.DeserializationConfig getConfig()>
<kotlinx.coroutines.NodeList: void <init>()>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMutator()>
<org.osmdroid.util.TileSystem: double getMinLongitude()>
<kotlinx.coroutines.CoroutineName$Key: void <init>()>
<com.github.mikephil.charting.charts.BarLineChartBase: void zoom(float,float,float,float)>
<org.osmdroid.config.DefaultConfigurationProvider: void setDebugMode(boolean)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serializeTypedContents(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.util.BufferRecycler: int charBufferLength(int)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultInclusion(java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapLikeType withValueHandler(java.lang.Object)>
<kotlin.comparisons.ComparisonsKt: java.util.Comparator compareBy(kotlin.jvm.functions.Function1[])>
<org.osmdroid.tileprovider.MapTileRequestState: boolean isEmpty()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setParallaxOffset(int)>
<com.android.gpstest.GpsTestActivity: void checkKeepScreenOn(android.content.SharedPreferences)>
<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>
<kotlinx.coroutines.InvokeOnCancelling: void <init>(kotlinx.coroutines.Job,kotlin.jvm.functions.Function1)>
<org.osmdroid.config.Configuration: org.osmdroid.config.IConfigurationProvider getInstance()>
<com.fasterxml.jackson.databind.ser.std.FileSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.events.MapEventsReceiver: boolean singleTapConfirmedHelper(org.osmdroid.util.GeoPoint)>
<com.github.mikephil.charting.interfaces.dataprovider.ChartInterface: float getMaxHighlightDistance()>
<com.github.mikephil.charting.charts.Chart: void setNoDataText(java.lang.String)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.String findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: boolean _contains(java.util.List,java.lang.Class)>
<com.github.mikephil.charting.highlight.ChartHighlighter: java.util.List buildHighlights(com.github.mikephil.charting.interfaces.datasets.IDataSet,int,float,com.github.mikephil.charting.data.DataSet$Rounding)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void fixAccess(com.fasterxml.jackson.databind.SerializationConfig)>
<kotlin.jvm.internal.MutablePropertyReference: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter,java.lang.Object)>
<com.fasterxml.jackson.databind.type.ArrayType: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeBindings,java.lang.Object,java.lang.Object,java.lang.Object,boolean)>
<com.android.gpstest.GpsTestActivity: void gpsStop()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase: java.lang.String nameForConstructorParameter(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedParameter,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$4: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.util.List findProperties()>
<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.tileprovider.util.SimpleRegisterReceiver: void unregisterReceiver(android.content.BroadcastReceiver)>
<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Shape getShape()>
<org.osmdroid.tileprovider.modules.MapTileDownloader: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1: java.lang.Void invoke(java.lang.Throwable)>
<kotlin.collections.SetsKt__SetsJVMKt: java.util.Set setOf(java.lang.Object)>
<kotlin.collections.MapsKt__MapsJVMKt: java.util.Map toSingletonMap(java.util.Map)>
<com.github.mikephil.charting.components.Legend$LegendVerticalAlignment: com.github.mikephil.charting.components.Legend$LegendVerticalAlignment valueOf(java.lang.String)>
<org.osmdroid.util.TileLooper: void handleTile(long,int,int)>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.github.mikephil.charting.highlight.BarHighlighter: float getDistance(float,float,float,float)>
<org.osmdroid.util.SegmentClipper: long clipY(long)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: boolean hasOneOf(java.lang.Class[])>
<com.fasterxml.jackson.databind.type.MapLikeType: boolean isMapLikeType()>
<kotlin.jvm.internal.PackageReference: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.util.Annotations getAnnotations()>
<com.github.mikephil.charting.listener.OnChartGestureListener: void onChartTranslate(android.view.MotionEvent,float,float)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: void <init>(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,java.lang.reflect.Method,com.fasterxml.jackson.databind.introspect.AnnotationMap,com.fasterxml.jackson.databind.introspect.AnnotationMap[])>
<kotlinx.coroutines.android.HandlerDispatcher: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.PropertyMetadata: void <clinit>()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector: void <init>()>
<kotlinx.coroutines.DispatchedContinuation: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.Serializers: com.fasterxml.jackson.databind.JsonSerializer findSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.ser.AnyGetterWriter: void getAndSerialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setBorderColor(int)>
<org.osmdroid.tileprovider.modules.ZipFileArchive: java.lang.String toString()>
<kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int hashCode()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker withSetterVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<org.osmdroid.views.overlay.LineDrawer: void setPaint(android.graphics.Paint)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: com.github.mikephil.charting.formatter.IValueFormatter getValueFormatter()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$2: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.core.JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: com.fasterxml.jackson.core.type.WritableTypeId$Inclusion[] values()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext clearAndGetParent()>
<org.osmdroid.views.MapView$MapViewDoubleClickListener: boolean onDoubleTapEvent(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$KebabCaseStrategy: java.lang.String translate(java.lang.String)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<com.github.mikephil.charting.components.LimitLine$LimitLabelPosition: com.github.mikephil.charting.components.LimitLine$LimitLabelPosition[] values()>
<kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: float getMultiTouchWidth()>
<com.github.mikephil.charting.jobs.MoveViewJob: void recycleInstance(com.github.mikephil.charting.jobs.MoveViewJob)>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: java.lang.Object _getReferencedIfPresent(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void <init>()>
<org.osmdroid.util.RectL: void set(long,long,long,long)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: void <clinit>()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: int getValueTextColor(int)>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serialize(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.overlay.LineDrawer: void setCanvas(android.graphics.Canvas)>
<kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>
<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
<kotlin.jvm.internal.CallableReference: void <clinit>()>
<kotlinx.coroutines.android.AndroidDispatcherFactory: void <init>()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryAcquireCpuPermit()>
<com.fasterxml.jackson.core.JsonFactory$Feature: com.fasterxml.jackson.core.JsonFactory$Feature[] values()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setCoveredFadeColor(int)>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerators$Base: boolean canUseFor(com.fasterxml.jackson.'annotation'.ObjectIdGenerator)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)>
<org.osmdroid.views.overlay.DefaultOverlayManager: org.osmdroid.views.overlay.Overlay remove(int)>
<org.osmdroid.tileprovider.modules.TileWriter$2: int compare(java.io.File,java.io.File)>
<kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object removeFirstOrNull()>
<kotlinx.coroutines.JobSupport: boolean tryMakeCancelling(kotlinx.coroutines.Incomplete,java.lang.Throwable)>
<com.github.mikephil.charting.interfaces.dataprovider.ChartInterface: float getYChartMin()>
<com.fasterxml.jackson.databind.JavaType: boolean isInterface()>
<com.fasterxml.jackson.databind.cfg.ConfigOverride$Empty: void <clinit>()>
<org.osmdroid.config.IConfigurationProvider: short getCacheMapTileOvershoot()>
<org.osmdroid.util.GeoPoint: boolean equals(java.lang.Object)>
<com.android.gpstest.GpsTestActivity: android.app.Dialog createWhatsNewDialog()>
<com.github.mikephil.charting.data.Entry$1: com.github.mikephil.charting.data.Entry createFromParcel(android.os.Parcel)>
<kotlinx.coroutines.JobSupport: boolean isScopedCoroutine()>
<org.osmdroid.views.MapView: void setMultiTouchScale(float)>
<kotlin.random.Random$Default: int nextInt()>
<org.osmdroid.views.MapView: void setMultiTouchScaleInitPoint(float,float)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeFieldName(java.lang.String,boolean)>
<com.fasterxml.jackson.core.PrettyPrinter: void beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)>
<kotlin.collections.ArraysKt___ArraysJvmKt: void sort(java.lang.Object[])>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As getTypeInclusion()>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(int,int,int,int[],java.lang.String[],int,int)>
<com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter: void <init>(java.lang.String,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.util.Annotations,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setDrawBorders(boolean)>
<org.osmdroid.tileprovider.util.Counters: void <clinit>()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig,int)>
<kotlinx.coroutines.internal.LockFreeLinkedListKt: kotlinx.coroutines.internal.LockFreeLinkedListNode unwrap(java.lang.Object)>
<org.osmdroid.config.DefaultConfigurationProvider: void setExpirationExtendedDuration(long)>
<kotlinx.coroutines.EventLoop: void incrementUseCount$default(kotlinx.coroutines.EventLoop,boolean,int,java.lang.Object)>
<org.osmdroid.views.MapView: double getMinZoomLevel()>
<org.osmdroid.util.LineBuilder: void flush()>
<com.fasterxml.jackson.databind.deser.DeserializerFactory: void <clinit>()>
<kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getIO()>
<kotlin.collections.EmptyMap: int getSize()>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>
<com.github.mikephil.charting.charts.Chart: void setDescription(com.github.mikephil.charting.components.Description)>
<com.fasterxml.jackson.databind.util.BeanUtil: java.lang.String stdManglePropertyName(java.lang.String,int)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.core.JsonGenerator: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: void <init>(java.lang.Class,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)>
<org.osmdroid.tileprovider.MapTileProviderBase: void clearTileCache()>
<org.osmdroid.util.TileSystem: double wrap(double,double,double,double)>
<com.fasterxml.jackson.core.JsonGenerator: void writeTypeId(java.lang.Object)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<org.osmdroid.tileprovider.modules.TileWriter: boolean createFolderAndCheckIfExists(java.io.File)>
<com.fasterxml.jackson.databind.util.NameTransformer$2: java.lang.String transform(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.'annotation'.JsonInclude$Value findInclusion()>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty managed(java.lang.String)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: java.util.Locale getLocale()>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _renameProperties(java.util.Map)>
<com.github.mikephil.charting.buffer.AbstractBuffer: int size()>
<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(short)>
<com.fasterxml.jackson.databind.util.StdDateFormat: boolean looksLikeISO8601(java.lang.String)>
<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String toString()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer createRoot(int)>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.charts.BarLineChartBase$2: void <clinit>()>
<kotlinx.coroutines.CancellableContinuationImpl: java.lang.StackTraceElement getStackTraceElement()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Class _classIfExplicit(java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMember getAccessor()>
<com.fasterxml.jackson.core.JsonStreamContext: void <init>(com.fasterxml.jackson.core.JsonStreamContext)>
<com.fasterxml.jackson.databind.util.StdDateFormat: boolean isLenient()>
<com.github.mikephil.charting.renderer.DataRenderer: void drawExtras(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean isNaturalTypeWithStdHandling(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.BeanDescription: boolean hasKnownClassAnnotations()>
<org.osmdroid.views.MapView: org.osmdroid.api.IMapController getController()>
<kotlin.text.StringsKt: java.lang.String substringBefore$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.android.gpstest.GpsTestActivity: void gpsStart()>
<org.osmdroid.views.MapView: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.fasterxml.jackson.'annotation'.JsonProperty$Access: com.fasterxml.jackson.'annotation'.JsonProperty$Access valueOf(java.lang.String)>
<kotlinx.coroutines.JobImpl: boolean getOnCancelComplete$kotlinx_coroutines_core()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.JsonSerializer build()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: com.fasterxml.jackson.databind.introspect.AnnotatedField withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect: com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility fieldVisibility()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.PropertyName getWrapperName()>
<kotlin.sequences.SequencesKt: kotlin.sequences.Sequence asSequence(java.util.Iterator)>
<com.fasterxml.jackson.databind.exc.InvalidDefinitionException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException 'from'(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)>
<kotlinx.coroutines.CoroutineDispatcher: void <clinit>()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.ser.std.MapSerializer _checkMapContentInclusion(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.ser.std.MapSerializer)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: void onEdgeTouched(int,int)>
<org.osmdroid.util.TileSystemWebMercator: double getLatitudeFromY01(double)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void <init>()>
<kotlin.jvm.internal.Intrinsics: void throwParameterIsNullIAE(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int compareTo(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.databind.SerializerProvider: boolean canOverrideAccessModifiers()>
<kotlinx.coroutines.DispatchedCoroutine: void afterCompletion(java.lang.Object)>
<org.osmdroid.config.DefaultConfigurationProvider: short getTileDownloadMaxQueueSize()>
<kotlin.collections.EmptyList: int getSize()>
<com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase: void <init>(com.fasterxml.jackson.databind.PropertyMetadata)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: com.fasterxml.jackson.core.util.DefaultPrettyPrinter createInstance()>
<com.fasterxml.jackson.databind.type.ArrayType: boolean isContainerType()>
<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: void _serializeAsString(java.util.Date,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerator: void <init>()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isFieldVisible(java.lang.reflect.Field)>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.utils.MPPointF getCenterOffsets()>
<org.osmdroid.views.overlay.infowindow.InfoWindow: boolean isOpen()>
<org.osmdroid.tileprovider.BitmapPool: android.graphics.Bitmap obtainSizedBitmapFromPool(int,int)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: void runCleanupOperation()>
<com.fasterxml.jackson.databind.ext.NioPathSerializer: void serialize(java.nio.file.Path,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.coroutines.jvm.internal.DebugMetadata: java.lang.String m()>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String getName()>
<kotlin.jvm.internal.MutablePropertyReference1Impl: void <init>(java.lang.Class,java.lang.String,java.lang.String,int)>
<kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedMember findJsonValueAccessor()>
<kotlin.coroutines.CombinedContext$toString$1: void <init>()>
<org.osmdroid.tileprovider.modules.DatabaseFileArchive: void setIgnoreTileSource(boolean)>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: java.lang.Iterable keySerializers()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Boolean _findSortAlpha(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Empty: void <init>(boolean)>
<com.android.gpstest.util.SatelliteUtils: java.lang.String createGnssSatelliteKey(com.android.gpstest.model.SatelliteStatus)>
<kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>
<org.osmdroid.views.overlay.LinearRing: int getBestOffset(double,double,double,double,long,long)>
<com.fasterxml.jackson.databind.introspect.MemberKey: void <init>(java.lang.String,java.lang.Class[])>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<kotlinx.coroutines.CommonPool$isGoodCommonPool$1: void <init>()>
<org.osmdroid.tileprovider.modules.MapTileDownloader: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader getTileLoader()>
<org.osmdroid.util.LineBuilder: void add(long,long)>
<org.osmdroid.views.overlay.TilesOverlay$OverlayTileLooper: void handleTile(long,int,int)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<kotlinx.coroutines.internal.AtomicKt: void <clinit>()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: com.github.mikephil.charting.data.Entry getEntryForIndex(int)>
<com.fasterxml.jackson.databind.JavaType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawHorizontalBezier(com.github.mikephil.charting.interfaces.datasets.ILineDataSet)>
<com.android.gpstest.DeviceInfoViewModel: boolean isNonPrimaryCarrierFreqInView()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _collectionType(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1)>
<com.fasterxml.jackson.databind.ser.std.StringSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.views.overlay.Overlay: boolean isEnabled()>
<kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: void <init>(com.fasterxml.jackson.databind.introspect.ClassIntrospector,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.PropertyNamingStrategy,com.fasterxml.jackson.databind.type.TypeFactory,com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder,java.text.DateFormat,com.fasterxml.jackson.databind.cfg.HandlerInstantiator,java.util.Locale,java.util.TimeZone,com.fasterxml.jackson.core.Base64Variant,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$SingleView: void assignSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.util.List findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.PropertyName getFullRootName()>
<org.osmdroid.tileprovider.util.SimpleInvalidationHandler: void destroy()>
<com.android.gpstest.util.PreferenceUtils: java.util.Set getGnssFilter()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.Annotated: com.fasterxml.jackson.databind.JavaType getType()>
<kotlinx.coroutines.TimeSource: void registerTimeLoopThread()>
<kotlinx.coroutines.internal.ArrayQueue: void addLast(java.lang.Object)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: float getYMin()>
<org.osmdroid.tileprovider.tilesource.CloudmadeTileSource: void setStyle(java.lang.String)>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: com.fasterxml.jackson.databind.JsonSerializer modifyMapLikeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.MapLikeType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map$Entry)>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessageSuffix()>
<com.github.mikephil.charting.charts.Chart: float getYMin()>
<org.osmdroid.views.Projection: org.osmdroid.util.PointL toMercatorPixels(int,int,org.osmdroid.util.PointL)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider createInstance(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)>
<org.osmdroid.config.IConfigurationProvider: long getTileFileSystemCacheTrimBytes()>
<com.fasterxml.jackson.core.util.VersionUtil: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.MemberKey: int hashCode()>
<com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer: com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _doAddInjectable(com.fasterxml.jackson.'annotation'.JacksonInject$Value,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>
<kotlin.collections.CollectionsKt__CollectionsKt: void throwIndexOverflow()>
<com.github.mikephil.charting.utils.ViewPortHandler: void setDragOffsetX(float)>
<kotlin.jvm.internal.CallableReference: boolean isAbstract()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: boolean _hasAnnotation(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>
<com.github.mikephil.charting.interfaces.datasets.ICandleDataSet: int getDecreasingColor()>
<com.github.mikephil.charting.data.DataSet: void calcMinMax()>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: int getMinimumZoomLevel()>
<com.github.mikephil.charting.interfaces.datasets.ICandleDataSet: int getIncreasingColor()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std withFieldVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.databind.util.Annotations getClassAnnotations()>
<org.osmdroid.views.MapView: void setTileSystem(org.osmdroid.util.TileSystem)>
<com.fasterxml.jackson.'annotation'.JsonUnwrapped: java.lang.String suffix()>
<org.osmdroid.views.MapController$ReplayController: void animateTo(int,int)>
<org.osmdroid.config.DefaultConfigurationProvider: java.lang.String computeNormalizedUserAgent(android.content.Context)>
<com.fasterxml.jackson.databind.BeanProperty$Bogus: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>
<kotlin.collections.EmptySet: java.lang.Object[] toArray(java.lang.Object[])>
<com.fasterxml.jackson.core.JsonParser$Feature: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: boolean removeProperty(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotatedClass resolveFully()>
<com.fasterxml.jackson.core.io.JsonStringEncoder: int _appendNamed(int,char[])>
<kotlin.jvm.internal.ClassReference$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<com.github.mikephil.charting.data.BaseDataSet: void setDrawValues(boolean)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: boolean hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<org.osmdroid.util.MyMath: double getAngleDifference(double,double,java.lang.Boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int getParameterCount()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>
<com.github.mikephil.charting.components.Legend$LegendDirection: com.github.mikephil.charting.components.Legend$LegendDirection valueOf(java.lang.String)>
<kotlinx.coroutines.internal.LockFreeLinkedListHead: void <init>()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void mergeAnnotations(boolean)>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType getContentType()>
<org.osmdroid.tileprovider.ExpirableBitmapDrawable: int[] getState()>
<org.osmdroid.views.overlay.LinearRing: void getBestOffset(org.osmdroid.views.Projection,org.osmdroid.util.PointL)>
<org.osmdroid.tileprovider.TileStates: void <init>()>
<com.github.mikephil.charting.utils.Utils: int getSDKInt()>
<com.fasterxml.jackson.core.util.TextBuffer: int size()>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: void <init>(com.github.mikephil.charting.utils.ViewPortHandler,com.github.mikephil.charting.components.YAxis,com.github.mikephil.charting.utils.Transformer)>
<org.osmdroid.config.DefaultConfigurationProvider: long getTileGCBulkPauseInMillis()>
<com.github.mikephil.charting.highlight.Highlight: float getXPx()>
<com.fasterxml.jackson.databind.type.SimpleType: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: com.fasterxml.jackson.databind.introspect.Annotated withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<org.osmdroid.views.overlay.milestones.MilestoneManager: void draw(android.graphics.Canvas)>
<com.android.gpstest.io.BaseFileLogger: boolean isStarted()>
<com.github.mikephil.charting.components.Legend$LegendPosition: void <clinit>()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Multi: void <init>(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$TypeAndSerializer[])>
<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: void init(com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.views.MapView: android.graphics.Rect getIntrinsicScreenRect(android.graphics.Rect)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void close()>
<org.osmdroid.tileprovider.MapTilePreCache: void search(long)>
<org.osmdroid.tileprovider.MapTileProviderBasic: boolean isDowngradedMode(long)>
<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>
<org.osmdroid.views.CustomZoomButtonsController: void stopFadeOut()>
<com.sothree.slidinguppanel.ViewDragHelper: void ensureMotionHistorySizeForId(int)>
<org.osmdroid.views.MapView: void setMapScroll(long,long)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: java.util.Map getPropertyMap()>
<kotlin.coroutines.jvm.internal.CoroutineStackFrame: java.lang.StackTraceElement getStackTraceElement()>
<com.fasterxml.jackson.databind.ser.std.ByteArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<org.osmdroid.tileprovider.modules.TileWriter: boolean saveFile(org.osmdroid.tileprovider.tilesource.ITileSource,long,java.io.InputStream,java.lang.Long)>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$As: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: java.util.List getProperties()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean isTypeId()>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void <init>(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<kotlin.Result$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<org.osmdroid.views.MapView: org.osmdroid.api.IProjection getProjection()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedClass getClassInfo()>
<com.fasterxml.jackson.databind.ext.Java7SupportImpl: java.lang.Boolean findTransient(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlin.sequences.ConstrainedOnceSequence: java.util.Iterator iterator()>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void _serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,boolean)>
<kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)>
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)>
<com.android.gpstest.model.GnssType: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators collect(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<org.osmdroid.util.RectL: void <init>(long,long,long,long)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _getCalendar(java.util.TimeZone)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: boolean tryCaptureView(android.view.View,int)>
<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)>
<org.osmdroid.views.overlay.Polygon: void <init>()>
<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter: void serializeAsElement(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.ArrayType: java.lang.String toString()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: com.github.mikephil.charting.data.Entry getEntryForXValue(float,float,com.github.mikephil.charting.data.DataSet$Rounding)>
<kotlinx.coroutines.JobSupport$ChildCompletion: void invoke(java.lang.Throwable)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.introspect.VisibilityChecker getDefaultVisibilityChecker(java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.String getName()>
<com.fasterxml.jackson.databind.type.CollectionType: java.lang.String toString()>
<com.android.gpstest.util.IOUtils: boolean forceTimeInjection(android.location.LocationManager)>
<com.github.mikephil.charting.formatter.DefaultAxisValueFormatter: void <init>(int)>
<com.fasterxml.jackson.'annotation'.JsonGetter: java.lang.String value()>
<kotlin.jvm.internal.CallableReference: java.util.List getTypeParameters()>
<kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Class _classIfExplicit(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void serializeContents(long[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.type.ResolvedType: com.fasterxml.jackson.core.type.ResolvedType getReferencedType()>
<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findContentValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<kotlinx.coroutines.IncompleteStateBox: void <init>(kotlinx.coroutines.Incomplete)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$SnakeCaseStrategy: java.lang.String translate(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.UnknownSerializer: void failForEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.github.mikephil.charting.utils.Transformer: void rectValueToPixel(android.graphics.RectF)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: void <init>()>
<com.fasterxml.jackson.core.json.JsonWriteContext: void _checkDup(com.fasterxml.jackson.core.json.DupDetector,java.lang.String)>
<org.osmdroid.views.MapView: void resetProjection()>
<com.fasterxml.jackson.core.JsonGenerator: void writeRaw(char[],int,int)>
<org.osmdroid.views.overlay.OverlayWithIW: java.lang.String getTitle()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.'annotation'.JsonAppend$Attr,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.JavaType)>
<com.android.gpstest.GpsStatusFragment: void updateGnssStatus(android.location.GnssStatus)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: boolean hasOpaqueBackground(android.view.View)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector$1: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.'annotation'.JsonAppend$Prop,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _sortProperties(java.util.Map)>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isHighlightPerDragEnabled()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class findEnumType(java.util.EnumSet)>
<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Partial(int,int,char[],int)>
<com.github.mikephil.charting.components.LimitLine: float getLimit()>
<com.github.mikephil.charting.renderer.XAxisRendererHorizontalBarChart: void drawGridLine(android.graphics.Canvas,float,float,android.graphics.Path)>
<kotlinx.coroutines.InvokeOnCancelling: void <clinit>()>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Prop: boolean required()>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: boolean add(java.lang.'annotation'.Annotation)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations: int size()>
<com.fasterxml.jackson.databind.type.TypeFactory: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: boolean _isValuePresent(java.lang.Object)>
<kotlinx.coroutines.DispatchedTask: java.lang.Object getSuccessfulResult$kotlinx_coroutines_core(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect: com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility setterVisibility()>
<com.github.mikephil.charting.data.DataSet: java.lang.String toString()>
<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class,java.lang.String)>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: void <init>(com.fasterxml.jackson.'annotation'.Nulls,com.fasterxml.jackson.'annotation'.Nulls)>
<org.osmdroid.util.MapTileIndex: java.lang.String toString(int,int,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector: com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap collectMethods(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.introspect.TypeResolutionContext,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver,com.fasterxml.jackson.databind.type.TypeFactory,com.fasterxml.jackson.databind.JavaType,java.util.List,java.lang.Class,boolean)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addInjectables(java.util.Map)>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: boolean getUsesDataConnection()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreType: boolean value()>
<kotlinx.coroutines.CoroutineExceptionHandlerKt: java.lang.Throwable handlerException(java.lang.Throwable,java.lang.Throwable)>
<org.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: boolean getNetworkAvailable()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Boolean findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class,com.fasterxml.jackson.'annotation'.JsonFormat$Feature)>
<com.fasterxml.jackson.core.util.ThreadLocalBufferManager$ThreadLocalBufferManagerHolder: void <clinit>()>
<com.fasterxml.jackson.core.util.TextBuffer: char[] carr(int)>
<com.fasterxml.jackson.databind.cfg.ContextAttributes: com.fasterxml.jackson.databind.cfg.ContextAttributes withPerCallAttribute(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver: java.lang.String _idFrom(java.lang.Object,java.lang.Class,com.fasterxml.jackson.databind.type.TypeFactory)>
<kotlin.collections.EmptyMap: boolean containsValue(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddPrimarySerializer(java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<kotlin.jvm.internal.MutablePropertyReference1: kotlin.reflect.KMutableProperty$Setter getSetter()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$1: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>
<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key getKey()>
<com.github.mikephil.charting.components.Legend$LegendPosition: com.github.mikephil.charting.components.Legend$LegendPosition[] values()>
<com.android.gpstest.GpsStatusFragment: void onNmeaMessage(java.lang.String,long)>
<kotlinx.coroutines.NonDisposableHandle: void dispose()>
<kotlinx.coroutines.JobCancellationException: java.lang.Throwable fillInStackTrace()>
<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildMapEntrySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.collections.EmptyIterator: void <init>()>
<com.github.mikephil.charting.data.DataSet: void calcMinMaxY(float,float)>
<com.fasterxml.jackson.'annotation'.JsonCreator$Mode: com.fasterxml.jackson.'annotation'.JsonCreator$Mode[] values()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.ser.ContainerSerializer buildCollectionSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.github.mikephil.charting.utils.FSize: java.lang.String toString()>
<kotlin.collections.ArraysKt___ArraysJvmKt: java.util.List asList(java.lang.Object[])>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void removeIgnored()>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.android.gpstest.util.DateTimeUtils$Companion: int getNUM_DAYS_TIME_VALID()>
<com.android.gpstest.dialog.ShareLogFragment$onViewCreated$1: void <init>(com.android.gpstest.dialog.ShareLogFragment,java.util.ArrayList)>
<org.osmdroid.views.overlay.OverlayWithIW: java.lang.String getSnippet()>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType containedType(int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotationCollector _addAnnotationsIfNotPresent(com.fasterxml.jackson.databind.introspect.AnnotationCollector,java.lang.'annotation'.Annotation[])>
<com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.SerializableString,com.fasterxml.jackson.'annotation'.ObjectIdGenerator,com.fasterxml.jackson.databind.JsonSerializer,boolean)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapType withContentTypeHandler(java.lang.Object)>
<com.github.mikephil.charting.interfaces.dataprovider.LineDataProvider: com.github.mikephil.charting.data.LineData getLineData()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: java.lang.String _checkRenameByField(java.lang.String)>
<com.android.gpstest.util.IOUtils: java.lang.String replaceNavstar(java.lang.String)>
<kotlinx.coroutines.DispatchedTask: void run()>
<org.osmdroid.views.CustomZoomButtonsDisplay: float getTopLeft(boolean,boolean)>
<org.osmdroid.tileprovider.MapTileProviderBase: void <init>(org.osmdroid.tileprovider.tilesource.ITileSource,android.os.Handler)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void collectAll()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: boolean _handleSelfReference(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>
<kotlin.text.CharsKt__CharJVMKt: boolean isWhitespace(char)>
<org.osmdroid.tileprovider.modules.MapTileApproximater: android.graphics.Bitmap approximateTileFromLowerZoom(long,int)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelSlideListener: void onPanelStateChanged(android.view.View,com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState,com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState)>
<org.osmdroid.tileprovider.MapTileCache: org.osmdroid.tileprovider.MapTileCache$TileRemovedListener getTileRemovedListener()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNull()>
<com.fasterxml.jackson.databind.cfg.ConfigOverrides: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultInclusion()>
<com.fasterxml.jackson.databind.SerializationConfig: void <clinit>()>
<com.fasterxml.jackson.databind.cfg.ConfigFeature: boolean enabledByDefault()>
<kotlinx.coroutines.internal.LockFreeTaskQueue: boolean addLast(java.lang.Object)>
<org.osmdroid.tileprovider.modules.DatabaseFileArchive: void close()>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String getName()>
<org.osmdroid.views.overlay.OverlayWithIW: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: void unwrapAndThrowAsIAE(java.lang.Throwable,java.lang.String)>
<com.android.gpstest.util.PreferenceUtils: void saveString(android.content.SharedPreferences,java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.util.TypeKey: boolean equals(java.lang.Object)>
<com.android.gpstest.util.IOUtils: java.lang.String trimEnds(java.lang.String)>
<kotlinx.coroutines.EventLoop: void <init>()>
<kotlin.collections.CollectionsKt__CollectionsJVMKt: java.util.List listOf(java.lang.Object)>
<com.fasterxml.jackson.core.util.ThreadLocalBufferManager: void removeSoftRefsClearedByGc()>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: void serialize(java.util.EnumSet,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.tilesource.TileSourceFactory: java.util.List getTileSources()>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: java.lang.Object _getReferencedIfPresent(java.lang.Object)>
<com.fasterxml.jackson.databind.BeanProperty$Bogus: com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<com.fasterxml.jackson.core.io.SerializedString: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.ContextAttributes: com.fasterxml.jackson.databind.cfg.ContextAttributes getEmpty()>
<com.github.mikephil.charting.components.Legend: com.github.mikephil.charting.components.Legend$LegendForm getForm()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultInclusion(java.lang.Class,java.lang.Class,com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: boolean _useStatic(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.interfaces.dataprovider.BarLineScatterCandleBubbleDataProvider: com.github.mikephil.charting.data.BarLineScatterCandleBubbleData getData()>
<kotlin.ranges.IntProgression: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.DebugStringsKt: java.lang.String toDebugString(kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.util.ClassUtil$Ctor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>
<org.osmdroid.util.ListPointL: void add(long,long)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.reflect.Constructor getAnnotated()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] values()>
<org.osmdroid.views.MapView: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: void refreshDb()>
<kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.BeanProperty$Std: com.fasterxml.jackson.'annotation'.JsonFormat$Value findPropertyFormat(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: void <clinit>()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.PropertyNamingStrategy _findNamingStrategy()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: void _generateTypeId(com.fasterxml.jackson.core.type.WritableTypeId)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeWithType(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.views.MapController: boolean zoomIn()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.'annotation'.JsonFormat$Value findExpectedFormat(com.fasterxml.jackson.'annotation'.JsonFormat$Value)>
<com.github.mikephil.charting.utils.ViewPortHandler: void setMinimumScaleY(float)>
<org.osmdroid.views.overlay.gestures.RotationGestureOverlay: boolean onTouchEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<kotlinx.coroutines.internal.FastServiceLoaderKt: boolean getANDROID_DETECTED()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: void processViews(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: com.fasterxml.jackson.databind.JavaType getSelfReferencedType()>
<kotlinx.coroutines.CommonPool$createPlainPool$1: java.lang.Thread newThread(java.lang.Runnable)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone getTimeZone()>
<org.osmdroid.util.MapTileIndex: void checkValues(int,int,int)>
<org.osmdroid.views.MapView: long getMapScrollY()>
<org.osmdroid.views.MapView: void setScrollableAreaLimitLatitude(double,double,int)>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean isJacksonStdImpl(java.lang.Class)>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: int compareTo(java.lang.Object)>
<kotlinx.coroutines.JobSupport: boolean tryWaitForChild(kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>
<com.android.gpstest.dialog.ShareDialogFragment: void <init>()>
<com.fasterxml.jackson.core.JsonGenerator: void _throwInternal()>
<org.osmdroid.views.MapController$MapAnimatorListener: void onAnimationCancel(android.animation.Animator)>
<com.fasterxml.jackson.databind.MappingJsonFactory: void <init>(com.fasterxml.jackson.databind.ObjectMapper)>
<org.osmdroid.util.TileLooper: void <init>()>
<kotlin.text.Regex: java.lang.String toString()>
<kotlinx.coroutines.InvokeOnCancelling: java.lang.String toString()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.ser.FilterProvider getFilterProvider()>
<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode peek()>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesUntyped(com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.views.overlay.Overlay: boolean onDown(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.core.Base64Variant: void encodeBase64Chunk(java.lang.StringBuilder,int)>
<com.fasterxml.jackson.databind.util.RawValue: void serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.internal.ThreadSafeHeap: void siftDownFrom(int)>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider$TileLoader: android.graphics.drawable.Drawable loadTile(long)>
<org.osmdroid.config.IConfigurationProvider: long getExpirationExtendedDuration()>
<kotlin.reflect.KCallable: java.util.List getTypeParameters()>
<kotlin.random.AbstractPlatformRandom: int nextInt()>
<com.sothree.slidinguppanel.ViewDragHelper: void saveInitialMotion(float,float,int)>
<com.android.gpstest.DeviceInfoViewModel: java.util.Set getSupportedSbasCfs()>
<com.github.mikephil.charting.charts.Chart: void setLastHighlighted(com.github.mikephil.charting.highlight.Highlight[])>
<com.github.mikephil.charting.interfaces.datasets.ILineRadarDataSet: android.graphics.drawable.Drawable getFillDrawable()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<kotlin.reflect.KAnnotatedElement: java.util.List getAnnotations()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serialize(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.charts.Chart: void notifyDataSetChanged()>
<org.osmdroid.util.Delay: long now()>
<org.osmdroid.views.overlay.Marker$OnMarkerDragListener: void onMarkerDragEnd(org.osmdroid.views.overlay.Marker)>
<org.osmdroid.config.DefaultConfigurationProvider: short getCacheMapTileCount()>
<org.osmdroid.views.MapController$ReplayController: void replayCalls()>
<com.android.gpstest.GpsStatusFragment: void gpsStop()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer _findContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)>
<org.osmdroid.views.overlay.infowindow.BasicInfoWindow: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations: boolean has(java.lang.Class)>
<org.osmdroid.views.MapView: void setMaxZoomLevel(java.lang.Double)>
<com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String buildCanonicalName()>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: void finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _flushBuffer()>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>
<com.fasterxml.jackson.core.JsonFactory$Feature: int getMask()>
<com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.views.overlay.Marker: boolean onMarkerClickDefault(org.osmdroid.views.overlay.Marker,org.osmdroid.views.MapView)>
<com.github.mikephil.charting.components.LimitLine: java.lang.String getLabel()>
<org.osmdroid.tileprovider.tilesource.ITileSource: int getTileSizePixels()>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawLinear(android.graphics.Canvas,com.github.mikephil.charting.interfaces.datasets.ILineDataSet)>
<org.osmdroid.views.CustomZoomButtonsDisplay$VerticalPosition: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>
<kotlin.ranges.IntProgression: int getFirst()>
<com.fasterxml.jackson.databind.PropertyMetadata: com.fasterxml.jackson.databind.PropertyMetadata withNulls(com.fasterxml.jackson.'annotation'.Nulls,com.fasterxml.jackson.'annotation'.Nulls)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void <init>(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeEndArray(com.fasterxml.jackson.core.JsonGenerator,int)>
<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)>
<org.osmdroid.util.MapTileAreaList$1: void <init>(org.osmdroid.util.MapTileAreaList)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: org.osmdroid.tileprovider.MapTileRequestState nextTile()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void run()>
<com.fasterxml.jackson.databind.ext.NioPathSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable computeReflected()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.views.MapController: void zoomToSpan(int,int)>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: com.fasterxml.jackson.databind.ser.std.CalendarSerializer withFormat(java.lang.Boolean,java.text.DateFormat)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$9: java.lang.Object withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.overlay.OverlayManager: java.util.List overlays()>
<kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.coroutines.Continuation,kotlin.coroutines.Continuation)>
<org.osmdroid.views.overlay.OverlayWithIW: java.lang.String getSubDescription()>
<kotlin.ranges.IntRange: int hashCode()>
<com.fasterxml.jackson.core.Base64Variant: void <init>(java.lang.String,java.lang.String,boolean,char,int)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findContentValueSerializer(java.lang.Class,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: java.util.Locale getLocale()>
<kotlin.coroutines.jvm.internal.DebugMetadataKt: int getLabel(kotlin.coroutines.jvm.internal.BaseContinuationImpl)>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: boolean _isValuePresent(java.util.concurrent.atomic.AtomicReference)>
<com.github.mikephil.charting.renderer.HorizontalBarChartRenderer: void drawDataSet(android.graphics.Canvas,com.github.mikephil.charting.interfaces.datasets.IBarDataSet,int)>
<org.osmdroid.util.MapTileAreaComputer: org.osmdroid.util.MapTileArea computeFromSource(org.osmdroid.util.MapTileArea,org.osmdroid.util.MapTileArea)>
<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>
<com.android.gpstest.util.MathUtils: float toMhz(float)>
<org.osmdroid.tileprovider.tilesource.TileSourceFactory$2: java.lang.String getTileURLString(long)>
<com.github.mikephil.charting.highlight.ChartHighlighter: com.github.mikephil.charting.data.BarLineScatterCandleBubbleData getData()>
<kotlinx.coroutines.JobSupport$Finishing: java.lang.String toString()>
<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>
<org.osmdroid.views.MapView: org.osmdroid.views.overlay.TilesOverlay getMapOverlay()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: java.util.Map _createObjectIdMap()>
<kotlinx.coroutines.YieldContext: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Object fromMemberAnnotationsExcept(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$WithMember,java.lang.Object)>
<com.github.mikephil.charting.renderer.DataRenderer: void drawHighlighted(android.graphics.Canvas,com.github.mikephil.charting.highlight.Highlight[])>
<kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()>
<com.android.gpstest.dialog.ShareLocationFragment$onViewCreated$8: void <init>(com.android.gpstest.dialog.ShareLocationFragment,android.location.Location,com.google.android.material.chip.Chip,android.widget.CheckBox,android.widget.TextView)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void beforeTask(int)>
<com.fasterxml.jackson.databind.type.ClassKey: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedField getField()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Empty: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap newWith(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: boolean _add(java.lang.'annotation'.Annotation)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: void onEdgeDragStarted(int,int)>
<kotlinx.coroutines.CancellableContinuationImpl: void resumeWith(java.lang.Object)>
<org.osmdroid.tileprovider.BitmapPool: void returnDrawableToPool(org.osmdroid.tileprovider.ReusableBitmapDrawable)>
<com.github.mikephil.charting.charts.BarChart: boolean isDrawValueAboveBarEnabled()>
<kotlinx.coroutines.internal.SystemPropsKt: java.lang.String systemProp(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.String findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.core.PrettyPrinter: void <clinit>()>
<com.fasterxml.jackson.core.JsonGenerationException: java.lang.Object getProcessor()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: com.fasterxml.jackson.databind.JavaType getParameterType(int)>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void <init>()>
<com.fasterxml.jackson.core.JsonFactory$Feature: void <init>(java.lang.String,int,boolean)>
<com.sothree.slidinguppanel.ViewDragHelper: int getEdgesTouched(int,int)>
<org.osmdroid.tileprovider.MapTileProviderArray: void detach()>
<org.osmdroid.util.TileSystem: int getTileFromMercator(long,double)>
<kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: boolean systemProp(java.lang.String,boolean)>
<com.fasterxml.jackson.databind.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member,boolean)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.collections.MapsKt: int mapCapacity(int)>
<kotlinx.coroutines.scheduling.NanoTimeSource: void <clinit>()>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(java.lang.Class)>
<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.JsonStreamContext getParent()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap: java.util.Iterator iterator()>
<org.osmdroid.views.overlay.Polyline: void setPoints(java.util.List)>
<kotlinx.coroutines.JobSupport: java.lang.String nameString$kotlinx_coroutines_core()>
<kotlinx.coroutines.internal.MainDispatchersKt: kotlinx.coroutines.MainCoroutineDispatcher tryCreateDispatcher(kotlinx.coroutines.internal.MainDispatcherFactory,java.util.List)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$LowerCaseStrategy: void <init>()>
<org.osmdroid.views.MapView: void setTileProvider(org.osmdroid.tileprovider.MapTileProviderBase)>
<kotlinx.coroutines.android.HandlerContext: void <init>(android.os.Handler,java.lang.String)>
<org.osmdroid.views.overlay.Marker: void drawAt(android.graphics.Canvas,int,int,float)>
<com.fasterxml.jackson.core.JsonGenerator: void writeFieldId(long)>
<com.github.mikephil.charting.renderer.BarChartRenderer: void drawExtras(android.graphics.Canvas)>
<org.osmdroid.util.SegmentIntersection: boolean parallelSideEffect(double,double,double,double,double,double,double,double,org.osmdroid.util.PointL)>
<org.osmdroid.views.CustomZoomButtonsController: void <init>(org.osmdroid.views.MapView)>
<com.github.mikephil.charting.charts.BarLineChartBase: float getVisibleXRange()>
<com.fasterxml.jackson.core.JsonLocation: int _append(java.lang.StringBuilder,java.lang.String)>
<com.fasterxml.jackson.core.JsonProcessingException: void <init>(java.lang.String,com.fasterxml.jackson.core.JsonLocation)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Double: com.fasterxml.jackson.databind.JsonSerializer serializerFor(java.lang.Class)>
<kotlinx.coroutines.CoroutineId$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Double: void <init>(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Value 'from'(com.fasterxml.jackson.'annotation'.JsonFormat)>
<com.fasterxml.jackson.databind.PropertyMetadata: boolean hasIndex()>
<kotlin.collections.EmptyList: void clear()>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean addToGlobalQueue(kotlinx.coroutines.scheduling.Task)>
<org.osmdroid.tileprovider.modules.GEMFFileArchive: java.io.InputStream getInputStream(org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<kotlin.collections.EmptyMap: java.lang.String toString()>
<com.android.gpstest.model.SatelliteStatus: void <clinit>()>
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter getPrettyPrinter()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isSetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.github.mikephil.charting.components.LegendEntry: void <init>(java.lang.String,com.github.mikephil.charting.components.Legend$LegendForm,float,float,android.graphics.DashPathEffect,int)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: void <init>(boolean)>
<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>
<com.android.gpstest.util.UIUtils: boolean isWideEnoughForDate(android.content.Context)>
<com.sothree.slidinguppanel.ViewDragHelper: boolean isCapturedViewUnder(int,int)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Feature: void <clinit>()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int spilloverCount()>
<org.osmdroid.api.IMapController: double setZoom(double)>
<com.fasterxml.jackson.databind.ser.BeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase asArraySerializer()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.util.NameTransformer findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>
<kotlinx.coroutines.scheduling.WorkQueue: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: com.fasterxml.jackson.databind.introspect.Annotated withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<kotlinx.coroutines.JobSupport: java.lang.Object tryMakeCompletingSlowPath(kotlinx.coroutines.Incomplete,java.lang.Object)>
<com.fasterxml.jackson.core.io.SerializedString: java.lang.String getValue()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void serializeAsPlaceholder(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.utils.Utils: double nextUp(double)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Boolean hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.core.Base64Variant: java.lang.String encode(byte[])>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter: com.fasterxml.jackson.databind.ser.BeanPropertyWriter constructViewBased(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.lang.Class[])>
<org.osmdroid.util.TileSystem: double getXY01FromMercator(long,double,boolean)>
<com.github.mikephil.charting.data.BaseDataSet: boolean isHighlightEnabled()>
<kotlin.coroutines.jvm.internal.DebugMetadata: int[] l()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedParameter getConstructorParameter()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder _constructStdTypeResolverBuilder()>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$1: boolean removeEldestEntry(java.util.Map$Entry)>
<com.fasterxml.jackson.databind.ser.impl.WritableObjectId: java.lang.Object generateId(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder defaultImpl(java.lang.Class)>
<org.osmdroid.config.IConfigurationProvider: java.lang.Long getExpirationOverrideDuration()>
<org.osmdroid.views.MapView$MapViewGestureDetectorListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsY(float)>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: com.fasterxml.jackson.databind.JavaType getType()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<kotlin.collections.EmptyMap: boolean containsValue(java.lang.Void)>
<org.osmdroid.tileprovider.modules.MapTileApproximater: void detach()>
<com.github.mikephil.charting.data.ChartData: void calcMinMax(com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.components.YAxis$AxisDependency)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation: java.lang.'annotation'.Annotation get(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Single: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap newWith(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<com.github.mikephil.charting.data.BaseDataSet: android.graphics.Typeface getValueTypeface()>
<kotlin.collections.EmptyIterator: java.lang.Object next()>
<com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,char[],int)>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.cfg.MapperConfigBase _withMapperFeatures(int)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormat(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter _new(com.fasterxml.jackson.databind.util.NameTransformer,com.fasterxml.jackson.core.io.SerializedString)>
<com.fasterxml.jackson.core.util.Instantiatable: java.lang.Object createInstance()>
<kotlin.text.Regex: void <clinit>()>
<kotlinx.coroutines.EventLoopImplBase: void resetAll()>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>
<org.osmdroid.views.MapView: org.osmdroid.tileprovider.tilesource.ITileSource getTileSourceFromAttributes(android.util.AttributeSet)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType uncheckedSimpleType(java.lang.Class)>
<org.osmdroid.tileprovider.MapTileProviderBase: int getMaximumZoomLevel()>
<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List sortedWith(java.lang.Iterable,java.util.Comparator)>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildObjectContext()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.util.StdDateFormat: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect: com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility getterVisibility()>
<com.github.mikephil.charting.data.ChartData: void calcMinMaxY(float,float)>
<com.github.mikephil.charting.data.LineScatterCandleRadarDataSet: float getHighlightLineWidth()>
<org.osmdroid.views.overlay.LinearRing: void clearPath()>
<kotlinx.coroutines.internal.FastServiceLoader: void <clinit>()>
<com.github.mikephil.charting.charts.Chart: void setMarker(com.github.mikephil.charting.components.IMarker)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _prependOrWriteCharacterEscape(char,int)>
<com.android.gpstest.GpsTestActivity: void $r8$lambda$fMIKH3eEXt91nzOvJjX7y_VjcaQ(com.android.gpstest.GpsTestActivity,java.lang.String,long)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value findPropertyIgnorals(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.type.CollectionLikeType withValueHandler(java.lang.Object)>
<kotlinx.coroutines.CommonPool: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<org.osmdroid.views.Projection: int getScreenCenterX()>
<org.osmdroid.views.CustomZoomButtonsController: void activate()>
<kotlin.random.FallbackThreadLocalRandom$implStorage$1: void <init>()>
<kotlin.coroutines.jvm.internal.ModuleNameRetriever: void <clinit>()>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean close()>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: void <init>(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,com.fasterxml.jackson.databind.introspect.AnnotationMap,com.fasterxml.jackson.databind.introspect.AnnotationMap[])>
<kotlinx.coroutines.DisposableHandle: void dispose()>
<kotlinx.coroutines.JobSupport: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>
<com.fasterxml.jackson.core.Base64Variant: java.lang.String encode(byte[],boolean)>
<kotlinx.coroutines.CancellableContinuationImpl: void alreadyResumedError(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: boolean hasSingleElement(com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject(java.lang.Object)>
<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators: void <init>(com.fasterxml.jackson.databind.introspect.AnnotatedConstructor,java.util.List,java.util.List)>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.internal.ScopeCoroutine: boolean isScopedCoroutine()>
<com.fasterxml.jackson.core.io.CharTypes: byte[] copyHexBytes()>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)>
<com.github.mikephil.charting.renderer.XAxisRendererHorizontalBarChart: void computeAxis(float,float,boolean)>
<kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>
<com.github.mikephil.charting.data.DataSet: void calcMinMax(com.github.mikephil.charting.data.Entry)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: int getViewHorizontalDragRange(android.view.View)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: java.lang.String toString()>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: float getXDist(android.view.MotionEvent)>
<com.github.mikephil.charting.highlight.Highlight: float getYPx()>
<com.android.gpstest.dialog.ShareLogFragment: void onViewCreated(android.view.View,android.os.Bundle)>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.cfg.BaseSettings withClassIntrospector(com.fasterxml.jackson.databind.introspect.ClassIntrospector)>
<com.fasterxml.jackson.'annotation'.JsonSetter: com.fasterxml.jackson.'annotation'.Nulls nulls()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class getDeclaringClass()>
<org.osmdroid.views.MapController$MapAnimatorListener: void onAnimationUpdate(android.animation.ValueAnimator)>
<com.fasterxml.jackson.core.JsonStreamContext: java.lang.String getCurrentName()>
<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<com.android.gpstest.GpsTestActivity$3: void onStatusChanged(int)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$SingleView: com.fasterxml.jackson.databind.ser.BeanPropertyWriter rename(com.fasterxml.jackson.databind.util.NameTransformer)>
<org.osmdroid.views.CustomZoomButtonsDisplay: android.graphics.Bitmap getZoomBitmap(boolean,boolean)>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: java.lang.String toString()>
<com.github.mikephil.charting.interfaces.datasets.IBarDataSet: boolean isStacked()>
<com.github.mikephil.charting.renderer.XAxisRenderer: void renderLimitLineLine(android.graphics.Canvas,com.github.mikephil.charting.components.LimitLine,float[])>
<kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.android.gpstest.dialog.ShareLocationFragment: void onViewCreated(android.view.View,android.os.Bundle)>
<kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>
<com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream: int read()>
<com.android.gpstest.util.UIUtils$1: void <init>(com.android.gpstest.io.CsvFileLogger,com.android.gpstest.io.JsonFileLogger,com.android.gpstest.dialog.ShareDialogFragment)>
<com.fasterxml.jackson.core.JsonGenerator$Feature: void <clinit>()>
<com.github.mikephil.charting.data.LineDataSet$Mode: void <clinit>()>
<kotlin.collections.IntIterator: java.lang.Object next()>
<com.github.mikephil.charting.data.BaseDataSet: void setColor(int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.AnnotationIntrospector,boolean,com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.PropertyName)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartObject(java.lang.Object)>
<org.osmdroid.tileprovider.MapTileProviderBase: void mapTileRequestFailed(org.osmdroid.tileprovider.MapTileRequestState)>
<com.github.mikephil.charting.data.LineDataSet: int getCircleColor(int)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.type.TypeBindings getBindings()>
<org.osmdroid.tileprovider.tilesource.CloudmadeTileSource: java.lang.String getTileURLString(long)>
<org.osmdroid.config.DefaultConfigurationProvider: void setDebugMapTileDownloader(boolean)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object[])>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeFieldName(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>
<kotlin.collections.EmptySet: boolean equals(java.lang.Object)>
<kotlinx.coroutines.JobSupport$Finishing: boolean isCompleting()>
<kotlinx.coroutines.JobSupport: void addSuppressedExceptions(java.lang.Throwable,java.util.List)>
<com.github.mikephil.charting.jobs.MoveViewJob: void run()>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value withOverrides(com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: boolean wouldConflictWithName(com.fasterxml.jackson.databind.PropertyName)>
<com.fasterxml.jackson.databind.ser.BeanSerializer: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneCollector: com.fasterxml.jackson.databind.introspect.AnnotationMap asAnnotationMap()>
<kotlinx.coroutines.internal.ArrayQueue: void <init>()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: boolean isContainerType()>
<com.github.mikephil.charting.highlight.Highlight: com.github.mikephil.charting.components.YAxis$AxisDependency getAxis()>
<kotlinx.coroutines.JobSupport: void promoteEmptyToNodeList(kotlinx.coroutines.Empty)>
<org.osmdroid.views.overlay.OverlayManager: void setTilesOverlay(org.osmdroid.views.overlay.TilesOverlay)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: int size()>
<com.github.mikephil.charting.utils.MPPointF$1: java.lang.Object createFromParcel(android.os.Parcel)>
<kotlinx.coroutines.StandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: boolean hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlin.KotlinNothingValueException: void <init>()>
<org.osmdroid.views.MapView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotatedClass createPrimordial(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: void <init>(com.fasterxml.jackson.databind.type.ReferenceType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonProperty$Access findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated)>
<org.osmdroid.views.overlay.TilesOverlay: void setVerticalWrapEnabled(boolean)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void flush()>
<org.osmdroid.util.MapTileList: int getSize()>
<com.fasterxml.jackson.databind.type.MapLikeType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>
<kotlinx.coroutines.Job: boolean start()>
<com.android.gpstest.GpsTestActivity: void addGnssAntennaListener()>
<com.android.gpstest.GpsTestActivity: void onAccuracyChanged(android.hardware.Sensor,int)>
<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.JsonSerializable$Base: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>
<kotlinx.coroutines.JobNode: kotlinx.coroutines.NodeList getList()>
<com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder inclusion(com.fasterxml.jackson.'annotation'.JsonTypeInfo$As)>
<com.android.gpstest.GpsTestActivity$3: void <init>(com.android.gpstest.GpsTestActivity)>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: void _addFieldMixIns(java.lang.Class,java.lang.Class,java.util.Map)>
<kotlin.jvm.internal.ClassReference: boolean equals(java.lang.Object)>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <clinit>()>
<org.osmdroid.util.MapTileAreaBorderComputer: void <init>(int)>
<com.fasterxml.jackson.databind.introspect.CollectorBase: com.fasterxml.jackson.databind.introspect.AnnotationCollector collectDefaultAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationCollector,java.lang.'annotation'.Annotation[])>
<org.osmdroid.config.DefaultConfigurationProvider: void setDebugMapView(boolean)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ReferenceType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<kotlin.reflect.KProperty: boolean isConst()>
<com.fasterxml.jackson.databind.type.PlaceholderForType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<com.android.gpstest.dialog.ShareLogFragment: void <init>()>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isScaleYEnabled()>
<kotlin.jvm.internal.CallableReference: kotlin.reflect.KDeclarationContainer getOwner()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <clinit>()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeRaw(char[],int,int)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandle getParentHandle$kotlinx_coroutines_core()>
<com.github.mikephil.charting.highlight.ChartHighlighter: float getHighlightPos(com.github.mikephil.charting.highlight.Highlight)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>
<com.github.mikephil.charting.charts.BarLineChartBase: float getYChartMax()>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: int addFailReason(long)>
<com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo: com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo createForPropertyOverride(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.std.ClassSerializer: void serialize(java.lang.Class,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.MapView: org.osmdroid.util.BoundingBox getBoundingBox()>
<org.osmdroid.views.CustomZoomButtonsController$3: void run()>
<com.android.gpstest.model.SatelliteMetadata: int getNumSatsUsed()>
<com.fasterxml.jackson.databind.ser.AnyGetterWriter: void getAndFilter(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter)>
<org.osmdroid.views.MapController: void zoomToSpan(double,double)>
<com.fasterxml.jackson.databind.type.TypeBindings$TypeParamStash: java.lang.reflect.TypeVariable[] paramsFor2(java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$9: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.databind.DeserializationConfig: void <init>(com.fasterxml.jackson.databind.DeserializationConfig,int,int,int,int,int,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.Object getValue(java.lang.Object)>
<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeDateKey(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)>
<kotlin.coroutines.CoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>
<org.osmdroid.views.overlay.Overlay: int getSafeMenuId()>
<com.android.gpstest.model.SatelliteStatus: boolean getHasCarrierFrequency()>
<org.osmdroid.config.DefaultConfigurationProvider: void save(android.content.SharedPreferences,android.content.SharedPreferences$Editor,java.util.Map,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.ObjectCodec getCodec()>
<org.osmdroid.util.ListPointL: void clear()>
<org.osmdroid.tileprovider.modules.GEMFFileArchive: void <init>()>
<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter: java.lang.Object _suppressableValue(com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode findPrevNonRemoved(kotlinx.coroutines.internal.LockFreeLinkedListNode)>
<kotlinx.coroutines.JobCancellationException: int hashCode()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String _findDescription()>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker withFieldVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<org.osmdroid.tileprovider.modules.MapTileApproximater: android.graphics.Bitmap approximateTileFromLowerZoom(long)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1: int compare(java.lang.Object,java.lang.Object)>
<kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getGetter()>
<org.osmdroid.views.MapView$MapViewDoubleClickListener: boolean onSingleTapConfirmed(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.util.ClassUtil$Ctor: java.lang.reflect.Constructor getConstructor()>
<kotlinx.coroutines.JobSupport$Finishing: java.util.List sealLocked(java.lang.Throwable)>
<kotlinx.coroutines.Dispatchers: void <clinit>()>
<org.osmdroid.views.overlay.OverlayWithIW: boolean isInfoWindowOpen()>
<org.osmdroid.views.overlay.gestures.RotationGestureOverlay: void onDetach(org.osmdroid.views.MapView)>
<com.github.mikephil.charting.data.BarEntry: float[] getYVals()>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: java.lang.String getPropertyName()>
<kotlinx.coroutines.SupervisorKt: kotlinx.coroutines.CompletableJob SupervisorJob(kotlinx.coroutines.Job)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean canOverrideAccessModifiers()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder _property(java.util.Map,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.Annotated: java.lang.Class getRawType()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildAtomicReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ReferenceType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.databind.cfg.ConfigOverride empty()>
<com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.coroutines.intrinsics.CoroutineSingletons: void <clinit>()>
<com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledByDefault()>
<com.fasterxml.jackson.databind.ser.ContextualSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.util.GEMFFile: void readHeader()>
<com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: void <init>()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked merge(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.AbstractCoroutine: boolean isActive()>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type valueOf(java.lang.String)>
<kotlin.jvm.internal.Reflection: kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: java.lang.Class converter()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<org.osmdroid.views.overlay.infowindow.BasicInfoWindow$1: boolean onTouch(android.view.View,android.view.MotionEvent)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.PropertyName getFullName()>
<com.fasterxml.jackson.databind.type.ClassStack: java.lang.String toString()>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: com.fasterxml.jackson.'annotation'.JacksonInject$Value 'from'(com.fasterxml.jackson.'annotation'.JacksonInject)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: float getXMin()>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Attr: java.lang.String propNamespace()>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: void onLongPress(android.view.MotionEvent)>
<com.android.gpstest.BenchmarkControllerImpl: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>
<org.osmdroid.config.DefaultConfigurationProvider: boolean isDebugMode()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: int clampViewPositionHorizontal(android.view.View,int,int)>
<org.osmdroid.util.BoundingBox: int describeContents()>
<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer: void <init>()>
<com.github.mikephil.charting.data.LineDataSet: float getCircleHoleRadius()>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: void <init>(com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket,com.fasterxml.jackson.databind.util.TypeKey,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.type.ClassKey: void <init>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.github.mikephil.charting.highlight.ChartHighlighter: float getMinimumDistance(java.util.List,float,com.github.mikephil.charting.components.YAxis$AxisDependency)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<org.osmdroid.views.overlay.DefaultOverlayManager: void onDetach(org.osmdroid.views.MapView)>
<com.github.mikephil.charting.utils.ViewPortHandler: void setMaximumScaleX(float)>
<org.osmdroid.views.MapViewRepository: void onDetach()>
<com.fasterxml.jackson.'annotation'.JsonInclude$Include: void <init>(java.lang.String,int)>
<org.osmdroid.tileprovider.MapTileProviderArray: boolean isDowngradedMode(long)>
<org.osmdroid.config.DefaultConfigurationProvider: void setAnimationSpeedShort(int)>
<kotlin.ranges.IntProgression: boolean equals(java.lang.Object)>
<org.osmdroid.views.overlay.PolyOverlayWithIW: void setInfoWindow(org.osmdroid.views.overlay.infowindow.InfoWindow)>
<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>
<com.fasterxml.jackson.databind.type.ArrayType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: boolean isPotentialBeanType(java.lang.Class)>
<org.osmdroid.util.GeoPoint$1: java.lang.Object[] newArray(int)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeRaw(char)>
<kotlin.ranges.RangesKt: int coerceAtMost(int,int)>
<org.osmdroid.views.Projection: double getZoomLevel()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider createInstance(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)>
<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>
<org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper: void <init>(org.osmdroid.tileprovider.MapTileProviderBase,org.osmdroid.tileprovider.MapTileProviderBase$1)>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: boolean isArtificial(java.lang.StackTraceElement)>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.type.ArrayType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>
<org.osmdroid.views.MapView: boolean onKeyUp(int,android.view.KeyEvent)>
<kotlinx.coroutines.scheduling.NonBlockingContext: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean hasReturnType()>
<com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder init(com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<com.fasterxml.jackson.core.JsonGenerator$Feature: void <init>(java.lang.String,int,boolean)>
<kotlin.collections.EmptyList: java.lang.Void get(int)>
<com.github.mikephil.charting.components.LimitLine: android.graphics.DashPathEffect getDashPathEffect()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotatedClass createArrayType(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.core.type.WritableTypeId: void <init>(java.lang.Object,com.fasterxml.jackson.core.JsonToken,java.lang.Object)>
<com.fasterxml.jackson.databind.SerializerProvider: void reportMappingProblem(java.lang.String,java.lang.Object[])>
<com.fasterxml.jackson.'annotation'.JsonRawValue: boolean value()>
<com.fasterxml.jackson.core.JsonStreamContext: com.fasterxml.jackson.core.JsonStreamContext getParent()>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: void onMediaMounted()>
<com.github.mikephil.charting.buffer.AbstractBuffer: void reset()>
<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: kotlinx.coroutines.internal.ThreadState invoke(kotlinx.coroutines.internal.ThreadState,kotlin.coroutines.CoroutineContext$Element)>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapProperty: com.fasterxml.jackson.databind.JavaType getType()>
<com.fasterxml.jackson.core.util.Separators: com.fasterxml.jackson.core.util.Separators createDefaultInstance()>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap 'from'(java.util.HashMap)>
<org.osmdroid.views.CustomZoomButtonsController$Visibility: void <clinit>()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.core.json.JsonWriteContext getOutputContext()>
<org.osmdroid.util.PointL: boolean equals(java.lang.Object)>
<kotlinx.coroutines.JobSupport: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<kotlinx.coroutines.internal.SystemPropsKt: int getAVAILABLE_PROCESSORS()>
<com.fasterxml.jackson.databind.ser.ContainerSerializer: void <init>(com.fasterxml.jackson.databind.ser.ContainerSerializer)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>
<kotlin.ranges.IntRange: void <clinit>()>
<org.osmdroid.config.IConfigurationProvider: short getCacheMapTileCount()>
<org.osmdroid.views.MapView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty: void <init>(com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type,java.lang.String)>
<org.osmdroid.tileprovider.modules.MapTileDownloader: int getMinimumZoomLevel()>
<kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1: java.util.Iterator iterator()>
<org.osmdroid.tileprovider.modules.GEMFFileArchive: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonFactory$Feature: com.fasterxml.jackson.core.JsonFactory$Feature valueOf(java.lang.String)>
<kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.SerializerProvider setAttribute(java.lang.Object,java.lang.Object)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: android.graphics.DashPathEffect getFormLineDashEffect()>
<com.fasterxml.jackson.databind.JsonSerializer: boolean usesObjectId()>
<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)>
<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>
<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object[])>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: java.lang.String getName()>
<com.android.gpstest.GpsTestActivity: void checkNmeaOutput(android.content.SharedPreferences)>
<kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache buildCache(kotlin.coroutines.jvm.internal.BaseContinuationImpl)>
<com.fasterxml.jackson.databind.ext.Java7Handlers: com.fasterxml.jackson.databind.JsonSerializer getSerializerForJavaNioFilePath(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void <init>(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)>
<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>
<org.osmdroid.tileprovider.tilesource.XYTileSource: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String[])>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Type getGenericSuperclass(java.lang.Class)>
<kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnCompletion$default(kotlinx.coroutines.Job,boolean,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.ContextAttributes: java.lang.Object getAttribute(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: java.lang.Class getGeneratorType()>
<org.osmdroid.views.overlay.Polyline: void <init>(org.osmdroid.views.MapView,boolean)>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: int julery_isqrt(int)>
<kotlin.Pair: java.lang.String toString()>
<kotlinx.coroutines.internal.OpDescriptor: java.lang.String toString()>
<kotlin.coroutines.EmptyCoroutineContext: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void serialize(float[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.utils.MPPointF getCenterOfView()>
<kotlinx.coroutines.JobSupport$ChildCompletion: java.lang.String toString()>
<com.github.mikephil.charting.data.BaseEntry: void setData(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.JsonSerializer findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _collectIgnorals(java.lang.String)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.AnnotatedClass _resolveAnnotatedClass(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.github.mikephil.charting.charts.Chart: void setNoDataTextColor(int)>
<com.android.gpstest.util.CarrierFreqUtils: java.lang.String getCarrierFrequencyLabel(com.android.gpstest.model.SatelliteStatus)>
<com.github.mikephil.charting.charts.BarChart: com.github.mikephil.charting.highlight.Highlight getHighlightByTouchPoint(float,float)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: char[] _allocateEntityBuffer()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback: int getViewVerticalDragRange(android.view.View)>
<kotlin.jvm.internal.MutablePropertyReference1: kotlin.reflect.KProperty$Getter getGetter()>
<com.fasterxml.jackson.databind.ext.Java7Support: java.lang.Boolean hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.core.JsonFactory getFactory()>
<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.util.NameTransformer,java.lang.Object,boolean)>
<org.metalev.multitouch.controller.MultiTouchController: void performDragOrPinch()>
<com.github.mikephil.charting.interfaces.dataprovider.ChartInterface: float getYChartMax()>
<org.osmdroid.views.overlay.infowindow.BasicInfoWindow: void onClose()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.github.mikephil.charting.data.BarLineScatterCandleBubbleDataSet: void <init>(java.util.List,java.lang.String)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findOptionalStdSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1: void <init>()>
<com.github.mikephil.charting.jobs.MoveViewJob: com.github.mikephil.charting.utils.ObjectPool$Poolable instantiate()>
<org.osmdroid.views.overlay.DefaultOverlayManager: java.lang.Object get(int)>
<com.android.gpstest.model.SatelliteStatus: int getSvid()>
<org.osmdroid.views.overlay.OverlayManager: boolean onSingleTapConfirmed(android.view.MotionEvent,org.osmdroid.views.MapView)>
<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildIterableSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectReferenceInfo(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)>
<com.github.mikephil.charting.highlight.Highlight: int getStackIndex()>
<org.osmdroid.views.Projection: android.graphics.Matrix getInvertedScaleRotateCanvasMatrix()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: boolean isVisible()>
<kotlin.internal.ProgressionUtilKt: int mod(int,int)>
<org.osmdroid.views.overlay.TilesOverlay: void onDetach(org.osmdroid.views.MapView)>
<org.osmdroid.config.IConfigurationProvider: void load(android.content.Context,android.content.SharedPreferences)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneCollector: com.fasterxml.jackson.databind.introspect.AnnotationCollector addOrOverride(java.lang.'annotation'.Annotation)>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,byte[],int)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeEndArray()>
<kotlinx.coroutines.internal.ScopeCoroutine: void afterResume(java.lang.Object)>
<com.github.mikephil.charting.data.LineRadarDataSet: int getFillColor()>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawHighlighted(android.graphics.Canvas,com.github.mikephil.charting.highlight.Highlight[])>
<kotlin.random.Random: int nextInt()>
<com.github.mikephil.charting.data.LineScatterCandleRadarDataSet: boolean isHorizontalHighlightIndicatorEnabled()>
<kotlinx.coroutines.CoroutineDispatcher$Key$1: void <clinit>()>
<kotlinx.coroutines.internal.ThreadState: java.lang.Object take()>
<org.osmdroid.views.MapController: void onAnimationEnd()>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onSnapToItem(int,int,android.graphics.Point,org.osmdroid.api.IMapView)>
<org.osmdroid.views.MapView: void setUseDataConnection(boolean)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.core.type.ResolvedType getReferencedType()>
<kotlin.collections.EmptyList: int hashCode()>
<com.github.mikephil.charting.listener.ChartTouchListener$ChartGesture: com.github.mikephil.charting.listener.ChartTouchListener$ChartGesture valueOf(java.lang.String)>
<kotlin.jvm.internal.CallableReference: boolean isOpen()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void serializeContents(double[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.data.BaseDataSet: int getValueTextColor(int)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: boolean isUnwrappingSerializer()>
<com.fasterxml.jackson.databind.JavaType: boolean isEnumImplType()>
<org.osmdroid.tileprovider.tilesource.TileSourcePolicy: boolean acceptsPreventive()>
<kotlinx.coroutines.internal.LockFreeLinkedListKt: java.lang.Object getCONDITION_FALSE()>
<org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper: void <init>(org.osmdroid.tileprovider.MapTileProviderBase)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector: boolean isPresent(java.lang.'annotation'.Annotation)>
<org.osmdroid.util.SegmentClipper: boolean intersection(long,long,long,long,long,long,long,long)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String getName()>
<org.osmdroid.config.IConfigurationProvider: java.lang.String getUserAgentValue()>
<kotlin.collections.CollectionsKt__MutableCollectionsJVMKt: void sort(java.util.List)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector: boolean _isIncludableMemberMethod(java.lang.reflect.Method)>
<com.github.mikephil.charting.utils.Transformer: float[] generateTransformedValuesLine(com.github.mikephil.charting.interfaces.datasets.ILineDataSet,float,float,int,int)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: int getTileSizePixels()>
<org.osmdroid.util.ListPointL: java.util.Iterator iterator()>
<com.sothree.slidinguppanel.ViewDragHelper: boolean isViewUnder(android.view.View,int,int)>
<kotlinx.coroutines.internal.Removed: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonParser$Feature: void <init>(java.lang.String,int,boolean)>
<org.osmdroid.util.TileSystem: double getMaxLongitude()>
<com.fasterxml.jackson.databind.introspect.CollectorBase: com.fasterxml.jackson.databind.introspect.AnnotationMap[] _emptyAnnotationMaps(int)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: boolean onTouchEvent(android.view.MotionEvent)>
<kotlinx.coroutines.EventLoopImplBase: int scheduleImpl(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)>
<com.fasterxml.jackson.databind.introspect.CollectorBase: void <init>(com.fasterxml.jackson.databind.AnnotationIntrospector)>
<org.osmdroid.views.MapController: boolean zoomIn(java.lang.Long)>
<com.fasterxml.jackson.databind.ser.impl.WritableObjectId: void <init>(com.fasterxml.jackson.'annotation'.ObjectIdGenerator)>
<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)>
<com.fasterxml.jackson.core.io.CharTypes: int[] get7BitOutputEscapes()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: java.lang.Iterable customSerializers()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLocale()>
<kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: long systemProp(java.lang.String,long,long,long)>
<org.osmdroid.tileprovider.modules.MapTileApproximater: void <init>(int,int)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddPrimarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<kotlin.internal.jdk8.JDK8PlatformImplementations: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void serialize(boolean[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.'annotation'.JsonInclude: com.fasterxml.jackson.'annotation'.JsonInclude$Include content()>
<org.osmdroid.views.overlay.LinearRing: org.osmdroid.util.PointL buildPathPortion(org.osmdroid.views.Projection,org.osmdroid.util.PointL,boolean)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: com.fasterxml.jackson.databind.JavaType getSuperClass()>
<com.fasterxml.jackson.databind.type.TypeBindings: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector: com.fasterxml.jackson.databind.introspect.AnnotationCollector addOrOverride(java.lang.'annotation'.Annotation)>
<org.osmdroid.tileprovider.MapTileProviderBase: void ensureCapacity(int)>
<org.osmdroid.util.SegmentClipper: void set(long,long,long,long,org.osmdroid.util.PointAccepter,boolean)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: void onDetach()>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializable)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.BeanDescription forClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.fasterxml.jackson.databind.ser.SerializerFactory: com.fasterxml.jackson.databind.JsonSerializer createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.interfaces.datasets.ILineRadarDataSet: int getFillAlpha()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method preHandler()>
<com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature valueOf(java.lang.String)>
<com.fasterxml.jackson.core.io.IOContext: java.lang.IllegalArgumentException wrongBuf()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations: void <init>(java.lang.Class,java.lang.'annotation'.Annotation,java.lang.Class,java.lang.'annotation'.Annotation)>
<com.fasterxml.jackson.core.json.DupDetector: void <init>(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonBackReference: java.lang.String value()>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings withUnboundVariable(java.lang.String)>
<com.android.gpstest.GpsMapFragment: void <init>()>
<com.fasterxml.jackson.databind.ser.ContainerSerializer: void <init>(java.lang.Class,boolean)>
<com.fasterxml.jackson.databind.ext.Java7Support: java.lang.Boolean findTransient(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator getPolymorphicTypeValidator()>
<com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver: java.util.Collection collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onDown(android.view.MotionEvent,org.osmdroid.views.MapView)>
<kotlin.coroutines.AbstractCoroutineContextKey: kotlin.coroutines.CoroutineContext$Element tryCast$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Element)>
<kotlin.collections.EmptySet: void clear()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String getName()>
<com.fasterxml.jackson.databind.util.NameTransformer: void <clinit>()>
<kotlinx.coroutines.JobCancellingNode: void <init>(kotlinx.coroutines.Job)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void setTimeZone(java.util.TimeZone)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: com.fasterxml.jackson.databind.introspect.AnnotatedParameter withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<kotlinx.coroutines.TimeSource: void unpark(java.lang.Thread)>
<org.osmdroid.tileprovider.MapTileProviderBasic: boolean setOfflineFirst(boolean)>
<com.fasterxml.jackson.'annotation'.JsonUnwrapped: boolean enabled()>
<kotlin.Result$Failure: int hashCode()>
<com.android.gpstest.util.CarrierFreqUtils: java.lang.String getNavstarCF(float)>
<com.github.mikephil.charting.components.LimitLine$LimitLabelPosition: void <clinit>()>
<com.android.gpstest.dialog.ShareLogFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.github.mikephil.charting.interfaces.dataprovider.BarLineScatterCandleBubbleDataProvider: com.github.mikephil.charting.utils.Transformer getTransformer(com.github.mikephil.charting.components.YAxis$AxisDependency)>
<org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper: void <init>(org.osmdroid.tileprovider.MapTileProviderBase)>
<org.osmdroid.config.DefaultConfigurationProvider: void setUserAgentValue(java.lang.String)>
<com.github.mikephil.charting.components.LimitLine$LimitLabelPosition: void <init>(java.lang.String,int)>
<kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>
<kotlin.collections.EmptyMap: boolean isEmpty()>
<kotlinx.coroutines.JobSupport: void onStartInternal$kotlinx_coroutines_core()>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: java.lang.Object generateId(java.lang.Object)>
<kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)>
<kotlin.coroutines.jvm.internal.DebugMetadata: int v()>
<kotlinx.coroutines.internal.ThreadSafeHeapNode: kotlinx.coroutines.internal.ThreadSafeHeap getHeap()>
<org.osmdroid.views.overlay.infowindow.BasicInfoWindow: void setResIds(android.content.Context)>
<kotlin.comparisons.ComparisonsKt__ComparisonsKt: int compareValues(java.lang.Comparable,java.lang.Comparable)>
<com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator: void <init>()>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<org.osmdroid.util.TileLooper: void loop(double,org.osmdroid.util.RectL)>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer withDelegate(com.fasterxml.jackson.databind.util.Converter,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer)>
<kotlinx.coroutines.CommonPool$isGoodCommonPool$1: void run()>
<kotlin.jvm.internal.CallableReference: void <init>(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedField getField()>
<org.osmdroid.util.GEMFFile: java.lang.String getName()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setBorderWidth(float)>
<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.core.json.JsonWriteContext: java.lang.String getCurrentName()>
<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>
<com.github.mikephil.charting.renderer.DataRenderer: void applyValueTextStyle(com.github.mikephil.charting.interfaces.datasets.IDataSet)>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: com.fasterxml.jackson.'annotation'.ObjectIdGenerator forScope(java.lang.Class)>
<com.github.mikephil.charting.highlight.BarHighlighter: com.github.mikephil.charting.highlight.Highlight getStackedHighlight(com.github.mikephil.charting.highlight.Highlight,com.github.mikephil.charting.interfaces.datasets.IBarDataSet,float,float)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.type.CollectionLikeType withTypeHandler(java.lang.Object)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: boolean getUsesDataConnection()>
<org.osmdroid.tileprovider.util.StorageUtils: java.util.List getStorageList()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int _setterPriority(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.JsonSerializable$Base: void <init>()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addCreatorParam(java.util.Map,com.fasterxml.jackson.databind.introspect.AnnotatedParameter)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$1: void <clinit>()>
<com.android.gpstest.GpsTestActivity: void lambda$addNmeaListenerAndroidN$4(java.lang.String,long)>
<kotlin.reflect.KMutableProperty1: kotlin.reflect.KMutableProperty1$Setter getSetter()>
<kotlinx.coroutines.ParentJob: java.util.concurrent.CancellationException getChildJobCancellationCause()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.util.List findRawSuperTypes(java.lang.Class,java.lang.Class,boolean)>
<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<kotlin.text.StringsKt__StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: void <init>(java.lang.Class,com.fasterxml.jackson.core.JsonParser$NumberType,java.lang.String)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean isEmpty()>
<com.fasterxml.jackson.databind.ser.SerializerFactory: com.fasterxml.jackson.databind.JsonSerializer createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: void <init>()>
<kotlin.ranges.IntProgression$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<com.fasterxml.jackson.core.io.NumberOutput: boolean notFinite(double)>
<org.osmdroid.views.overlay.Marker$OnMarkerDragListener: void onMarkerDragStart(org.osmdroid.views.overlay.Marker)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findAnyTask(boolean)>
<kotlinx.coroutines.internal.MainDispatcherFactory: int getLoadPriority()>
<com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer: com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.util.List findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.std.ClassSerializer: void <init>()>
<org.osmdroid.util.MyMath: double cleanPositiveAngle(double)>
<com.fasterxml.jackson.core.JsonParser$Feature: int collectDefaults()>
<org.osmdroid.views.overlay.Marker: void setIcon(android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: com.fasterxml.jackson.databind.JsonSerializer modifyCollectionLikeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.CollectionLikeType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer)>
<com.android.gpstest.util.SatelliteUtils: boolean isGnssAntennaInfoSupported(android.location.LocationManager)>
<com.fasterxml.jackson.core.JsonFactory: java.io.Writer _decorate(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)>
<com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String getName()>
<org.osmdroid.util.GEMFFile: void openFiles()>
<com.fasterxml.jackson.databind.util.ArrayBuilders$1: boolean equals(java.lang.Object)>
<kotlinx.coroutines.EventLoopImplBase: void shutdown()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>
<kotlin.collections.EmptyMap: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.MapProperty: void <clinit>()>
<com.fasterxml.jackson.databind.util.ArrayIterator: java.util.Iterator iterator()>
<kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()>
<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[],int,int)>
<kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1: kotlinx.coroutines.ExecutorCoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element)>
<com.github.mikephil.charting.data.DataSet: int getEntryIndex(com.github.mikephil.charting.data.Entry)>
<kotlinx.coroutines.JobSupport: boolean getOnCancelComplete$kotlinx_coroutines_core()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: void <init>()>
<kotlin.collections.EmptyMap: void clear()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Feature: com.fasterxml.jackson.'annotation'.JsonFormat$Feature valueOf(java.lang.String)>
<com.android.gpstest.GpsStatusFragment: void onLocationChanged(android.location.Location)>
<com.fasterxml.jackson.core.base.GeneratorBase: java.lang.String _asString(java.math.BigDecimal)>
<com.android.gpstest.GpsStatusFragment$GnssFilterDialog: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.jvm.internal.PackageReference: java.lang.Class getJClass()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: void <init>(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<kotlin.collections.EmptyMap: java.util.Collection getValues()>
<kotlin.jvm.internal.PropertyReference1: void <init>(java.lang.Object)>
<com.github.mikephil.charting.formatter.DefaultAxisValueFormatter: java.lang.String getFormattedValue(float,com.github.mikephil.charting.components.AxisBase)>
<kotlinx.coroutines.ChildHandleNode: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.github.mikephil.charting.charts.HorizontalBarChart: com.github.mikephil.charting.highlight.Highlight getHighlightByTouchPoint(float,float)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.ConfigOverrides: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void serialize(long[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty)>
<com.github.mikephil.charting.data.LineScatterCandleRadarDataSet: boolean isVerticalHighlightIndicatorEnabled()>
<com.android.gpstest.util.SatelliteUtils: java.lang.String createGnssStatusKey(com.android.gpstest.model.SatelliteStatus)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.'annotation'.JsonInclude: com.fasterxml.jackson.'annotation'.JsonInclude$Include value()>
<com.fasterxml.jackson.databind.cfg.ContextAttributes: void <init>()>
<org.osmdroid.tileprovider.modules.IArchiveFile: void setIgnoreTileSource(boolean)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addField(com.fasterxml.jackson.databind.introspect.AnnotatedField,com.fasterxml.jackson.databind.PropertyName,boolean,boolean,boolean)>
<com.fasterxml.jackson.databind.type.TypeBase: java.lang.StringBuilder _classSignature(java.lang.Class,java.lang.StringBuilder,boolean)>
<com.github.mikephil.charting.renderer.XAxisRendererHorizontalBarChart: void renderLimitLines(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.github.mikephil.charting.data.Entry$1: com.github.mikephil.charting.data.Entry[] newArray(int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: boolean skippableArray(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<org.osmdroid.views.overlay.LinearRing: org.osmdroid.util.ListPointL getPointsForMilestones()>
<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.util.Collection)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>
<com.github.mikephil.charting.data.BaseDataSet: int getColor()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.type.MapLikeType withTypeHandler(java.lang.Object)>
<org.osmdroid.views.overlay.LinearRing: void setCloserPoint(org.osmdroid.util.PointL,org.osmdroid.util.PointL,double)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.util.Collection explode(java.util.Collection)>
<org.osmdroid.views.MapView: boolean isVerticalMapRepetitionEnabled()>
<com.fasterxml.jackson.databind.deser.DeserializerCache: void <init>()>
<kotlinx.coroutines.JobSupport$Finishing: java.lang.Throwable getRootCause()>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: int getMinimumZoomLevel()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: boolean onEdgeLock(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _appendValue(com.fasterxml.jackson.core.JsonToken)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfigBase,int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Dynamic: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultInclusion(java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writePPFieldName(com.fasterxml.jackson.core.SerializableString,boolean)>
<org.osmdroid.tileprovider.TileStates: void finaliseLoop()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.Class[] getViews()>
<com.fasterxml.jackson.databind.introspect.Annotated: int hashCode()>
<com.github.mikephil.charting.components.AxisBase: void setSpaceMin(float)>
<org.osmdroid.views.MapView: org.osmdroid.api.IGeoPoint getMapCenter()>
<org.osmdroid.config.DefaultConfigurationProvider: boolean isMapTileDownloaderFollowRedirects()>
<org.osmdroid.views.Projection: org.osmdroid.util.PointL getLongPixelsFromProjected(org.osmdroid.util.PointL,double,boolean,org.osmdroid.util.PointL)>
<org.osmdroid.tileprovider.modules.TileWriter$2: int compare(java.lang.Object,java.lang.Object)>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: boolean isDown()>
<org.osmdroid.util.PointL: java.lang.String toString()>
<com.fasterxml.jackson.core.JsonGenerator: boolean canWriteObjectId()>
<kotlinx.coroutines.JobSupport: void afterCompletion(java.lang.Object)>
<org.osmdroid.util.GeoPoint: int describeContents()>
<org.osmdroid.util.MapTileAreaList$1: void remove()>
<kotlin.jvm.internal.CallableReference$NoReceiver: void <init>()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1: java.lang.Object invoke(java.lang.Object)>
<org.osmdroid.views.overlay.Polygon: void setFillColor(int)>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.StackTraceElement getStackTraceElement()>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: java.lang.Class getRawType()>
<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException toCancellationException$default(kotlinx.coroutines.JobSupport,java.lang.Throwable,java.lang.String,int,java.lang.Object)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: int getPanelHeight()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: void _addSuperInterfaces(com.fasterxml.jackson.databind.JavaType,java.util.List,boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: int hashCode()>
<org.osmdroid.tileprovider.util.CloudmadeUtil: java.lang.String getCloudmadeKey()>
<org.osmdroid.views.MapView: org.osmdroid.util.GeoPoint getExpectedCenter()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable,java.lang.String)>
<com.fasterxml.jackson.databind.JsonSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>
<com.github.mikephil.charting.utils.Transformer: void rectToPixelPhase(android.graphics.RectF,float)>
<com.github.mikephil.charting.components.Legend$LegendHorizontalAlignment: com.github.mikephil.charting.components.Legend$LegendHorizontalAlignment valueOf(java.lang.String)>
<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: boolean _anyIndexed(java.util.Collection)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: java.util.List filterBeanProperties(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<kotlinx.coroutines.CoroutineName: int hashCode()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(java.math.BigInteger)>
<com.fasterxml.jackson.core.util.BufferRecyclers: com.fasterxml.jackson.core.util.BufferRecycler getBufferRecycler()>
<kotlinx.coroutines.AbstractCoroutine: void start(kotlinx.coroutines.CoroutineStart,java.lang.Object,kotlin.jvm.functions.Function2)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void serialize(short[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.renderer.HorizontalBarChartRenderer: void <init>(com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider,com.github.mikephil.charting.animation.ChartAnimator,com.github.mikephil.charting.utils.ViewPortHandler)>
<org.osmdroid.tileprovider.modules.ArchiveFileFactory: org.osmdroid.tileprovider.modules.IArchiveFile getArchiveFile(java.io.File)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: int getMaximumZoomLevel()>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value withContentFilter(java.lang.Class)>
<kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.components.IMarker getMarkerView()>
<com.github.mikephil.charting.animation.ChartAnimator: void <init>()>
<org.osmdroid.views.Projection: long getLongPixelYFromLatitude(double,boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: boolean hasAnnotation(java.lang.Class)>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: boolean hasId()>
<com.fasterxml.jackson.databind.ser.ContainerSerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.github.mikephil.charting.utils.Utils: void velocityTrackerPointerUpCleanUpIfNecessary(android.view.MotionEvent,android.view.VelocityTracker)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.JavaType: boolean hasRawClass(java.lang.Class)>
<kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression downTo(int,int)>
<org.osmdroid.config.DefaultConfigurationProvider: void setTileDownloadMaxQueueSize(short)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.SerializationConfig getConfig()>
<org.osmdroid.views.overlay.DefaultOverlayManager$1$1: org.osmdroid.views.overlay.Overlay next()>
<kotlinx.coroutines.internal.AtomicOp: void <clinit>()>
<kotlin.reflect.KCallable: boolean isOpen()>
<com.github.mikephil.charting.components.LimitLine: android.graphics.Paint$Style getTextStyle()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: java.lang.String toString()>
<kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: int hashCode()>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>
<com.github.mikephil.charting.utils.ObjectPool$Poolable: com.github.mikephil.charting.utils.ObjectPool$Poolable instantiate()>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Typing typing()>
<kotlinx.coroutines.scheduling.NonBlockingContext: int getTaskMode()>
<org.osmdroid.util.GEMFFile: java.io.InputStream getInputStream(int,int,int)>
<com.fasterxml.jackson.databind.type.PlaceholderForType: boolean isContainerType()>
<com.sothree.slidinguppanel.ViewDragHelper: void dragTo(int,int,int,int)>
<com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.util.Converter findConverter(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.BeanDescription: java.lang.Object instantiateBean(boolean)>
<org.osmdroid.tileprovider.modules.TileDownloader: java.lang.Long getHttpCacheControlDuration(java.lang.String)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder constructBeanSerializerBuilder(com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.core.JsonParser asParser()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations: java.lang.'annotation'.Annotation get(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.databind.JsonSerializer findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)>
<com.github.mikephil.charting.charts.Chart: void setExtraRightOffset(float)>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: void setIndex(int)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: java.lang.Class contentAs()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.charts.Chart: void setOnChartGestureListener(com.github.mikephil.charting.listener.OnChartGestureListener)>
<org.osmdroid.views.MapViewRepository: android.graphics.drawable.Drawable getDefaultMarkerIcon()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nonNullString(java.lang.String)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$LowerDotCaseStrategy: void <init>()>
<kotlinx.coroutines.CompletedExceptionallyKt: java.lang.Object recoverResult(java.lang.Object,kotlin.coroutines.Continuation)>
<com.android.gpstest.GpsStatusFragment: void gpsStart()>
<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.lang.Iterable)>
<org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase: void onMediaUnmounted()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: boolean willSuppressNulls()>
<org.osmdroid.views.overlay.LinearRing: void addGreatCircle(org.osmdroid.util.GeoPoint,org.osmdroid.util.GeoPoint,int)>
<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int)>
<org.osmdroid.views.MapView: void setMapOrientation(float)>
<com.github.mikephil.charting.components.LegendEntry: void <init>()>
<kotlin.coroutines.CombinedContext$toString$1: void <clinit>()>
<com.github.mikephil.charting.renderer.LineChartRenderer$DataSetImageCache: void <init>(com.github.mikephil.charting.renderer.LineChartRenderer)>
<org.osmdroid.views.overlay.Overlay: boolean onLongPress(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: java.lang.String imageFilenameEnding()>
<kotlinx.coroutines.JobSupport: void <init>(boolean)>
<org.osmdroid.tileprovider.modules.DatabaseFileArchive: java.io.InputStream getInputStream(org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<kotlinx.coroutines.internal.AtomicOp: void <init>()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: com.github.mikephil.charting.model.GradientColor getGradientColor()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.JavaType constructType(java.lang.Class)>
<com.fasterxml.jackson.'annotation'.Nulls: com.fasterxml.jackson.'annotation'.Nulls valueOf(java.lang.String)>
<org.osmdroid.util.SegmentClipper: int getClosestCorner(long,long,long,long)>
<org.osmdroid.views.overlay.TilesOverlay: void setHorizontalWrapEnabled(boolean)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonFactory setCodec(com.fasterxml.jackson.core.ObjectCodec)>
<org.osmdroid.util.MapTileAreaList: java.util.List getList()>
<com.fasterxml.jackson.databind.introspect.ClassIntrospector: com.fasterxml.jackson.databind.BeanDescription forClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class,com.fasterxml.jackson.databind.JavaType[])>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: com.fasterxml.jackson.databind.JsonSerializer _findSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findRenameByField(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedField,com.fasterxml.jackson.databind.PropertyName)>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.databind.util.Converter findSerializationConverter()>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper: void _assertNotNull(java.lang.String,java.lang.Object)>
<kotlin.ranges.IntRange: void <init>(int,int)>
<org.osmdroid.util.MapTileList: long get(int)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType[] findTypeParameters(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<kotlinx.coroutines.internal.FastServiceLoader: java.util.List parse(java.net.URL)>
<com.fasterxml.jackson.databind.util.BeanUtil: java.lang.String okNameForIsGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String,boolean)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: com.fasterxml.jackson.databind.ser.BeanPropertyWriter buildWriter(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.introspect.AnnotatedMember,boolean)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.config.IConfigurationProvider: short getTileDownloadThreads()>
<org.osmdroid.tileprovider.TileStates: void handleTile(android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$SingleView: void serializeAsElement(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std _with(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility,com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility,com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility,com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility,com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void serialize(com.fasterxml.jackson.core.JsonGenerator)>
<com.github.mikephil.charting.utils.Transformer: void getValuesByTouchPoint(float,float,com.github.mikephil.charting.utils.MPPointD)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase$MyBroadcastReceiver: void <init>(org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase)>
<com.fasterxml.jackson.databind.DeserializationConfig: void <init>(com.fasterxml.jackson.databind.cfg.BaseSettings,com.fasterxml.jackson.databind.jsontype.SubtypeResolver,com.fasterxml.jackson.databind.introspect.SimpleMixInResolver,com.fasterxml.jackson.databind.util.RootNameLookup,com.fasterxml.jackson.databind.cfg.ConfigOverrides)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase asArraySerializer()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeNumber(java.math.BigDecimal)>
<kotlinx.coroutines.EventLoopImplBase: void setCompleted(boolean)>
<org.osmdroid.views.Projection: long getLongPixelXFromLongitude(double)>
<com.github.mikephil.charting.renderer.XAxisRendererHorizontalBarChart: void computeSize()>
<com.fasterxml.jackson.core.JsonGenerator: int writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)>
<org.osmdroid.tileprovider.MapTileCache: boolean ensureCapacity(int)>
<com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder getTypeResolverBuilder()>
<org.osmdroid.views.Projection: void detach()>
<com.fasterxml.jackson.databind.jsontype.NamedType: void setName(java.lang.String)>
<org.osmdroid.views.Projection: org.osmdroid.api.IGeoPoint fromPixels(int,int,org.osmdroid.util.GeoPoint)>
<org.osmdroid.views.overlay.Overlay: void setEnabled(boolean)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class getEnclosingClass(java.lang.Class)>
<com.github.mikephil.charting.charts.Chart: void setData(com.github.mikephil.charting.data.ChartData)>
<com.fasterxml.jackson.databind.ext.Java7HandlersImpl: void <init>()>
<com.android.gpstest.GpsTestActivity: void checkNavMessageOutput(android.content.SharedPreferences)>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicLongSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.components.AxisBase: void setSpaceMax(float)>
<org.osmdroid.views.MapController$ZoomAnimationListener: void onAnimationEnd(android.view.animation.Animation)>
<kotlinx.coroutines.DispatchedContinuation: java.lang.StackTraceElement getStackTraceElement()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeRaw(java.lang.String)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyContentTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl: void <clinit>()>
<kotlinx.coroutines.CommonPool: int getParallelism()>
<org.osmdroid.config.DefaultConfigurationProvider: void commit(android.content.SharedPreferences$Editor)>
<com.android.gpstest.GpsTestActivity: boolean isJsonLoggingEnabled()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: void <init>(java.lang.Object,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked,com.fasterxml.jackson.databind.PropertyName,boolean,boolean,boolean)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setScaleXEnabled(boolean)>
<kotlin.coroutines.CombinedContext: int size()>
<com.github.mikephil.charting.utils.TransformerHorizontalBarChart: void prepareMatrixOffset(boolean)>
<com.fasterxml.jackson.core.base.GeneratorBase: void writeRawValue(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: void <init>(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<kotlin.collections.EmptyList: boolean isEmpty()>
<org.osmdroid.views.overlay.Overlay: boolean onKeyDown(int,android.view.KeyEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: boolean isDrawCircleHoleEnabled()>
<kotlinx.coroutines.DispatchedContinuation: void <clinit>()>
<org.osmdroid.views.CustomZoomButtonsController$2: void run()>
<org.osmdroid.views.overlay.DefaultOverlayManager$1: java.util.ListIterator bulletProofReverseListIterator()>
<org.osmdroid.views.overlay.MapEventsOverlay: void <init>(org.osmdroid.events.MapEventsReceiver)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.'annotation'.JsonInclude$Value findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.io.Closeable,java.lang.String,java.lang.Throwable)>
<com.fasterxml.jackson.databind.ser.BeanSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<org.osmdroid.tileprovider.MapTileCache: void maintenance()>
<com.github.mikephil.charting.charts.Chart: void setRenderer(com.github.mikephil.charting.renderer.DataRenderer)>
<com.github.mikephil.charting.formatter.IValueFormatter: java.lang.String getFormattedValue(float,com.github.mikephil.charting.data.Entry,int,com.github.mikephil.charting.utils.ViewPortHandler)>
<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: boolean isIndexedList(java.lang.Class)>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.listener.OnDrawListener getDrawListener()>
<com.github.mikephil.charting.components.XAxis$XAxisPosition: com.github.mikephil.charting.components.XAxis$XAxisPosition valueOf(java.lang.String)>
<com.fasterxml.jackson.'annotation'.JsonRootName: java.lang.String value()>
<com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getLocalizedMessage()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Boolean hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<org.osmdroid.util.SegmentClipper: boolean intersection(long,long,long,long)>
<com.github.mikephil.charting.charts.Chart: void setDrawMarkerViews(boolean)>
<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter: boolean isInline()>
<com.android.gpstest.util.UIUtils: void showShareFragmentDialog(androidx.appcompat.app.AppCompatActivity,android.location.Location,boolean,com.android.gpstest.io.CsvFileLogger,com.android.gpstest.io.JsonFileLogger,android.net.Uri)>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: boolean _isValuePresent(java.lang.Object)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3: void <init>(java.lang.reflect.Constructor)>
<org.osmdroid.views.MapController: void animateTo(org.osmdroid.api.IGeoPoint,java.lang.Double,java.lang.Long,java.lang.Float,java.lang.Boolean)>
<org.osmdroid.views.overlay.Polyline$OnClickListener: boolean onClick(org.osmdroid.views.overlay.Polyline,org.osmdroid.views.MapView,org.osmdroid.util.GeoPoint)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Boolean findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.github.mikephil.charting.interfaces.datasets.IBarLineScatterCandleBubbleDataSet: int getHighLightColor()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void <clinit>()>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.util.BufferRecycler _getBufferRecycler()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer: void <init>()>
<kotlin.collections.ArraysKt___ArraysKt: java.lang.Object singleOrNull(java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.std.MapProperty: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>
<kotlinx.coroutines.internal.LockFreeTaskQueue: void close()>
<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object reportBadDefinition(java.lang.Class,java.lang.String,java.lang.Throwable)>
<com.fasterxml.jackson.databind.ser.PropertyWriter: void <init>(com.fasterxml.jackson.databind.ser.PropertyWriter)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsLeft(float)>
<com.fasterxml.jackson.databind.introspect.CollectorBase: com.fasterxml.jackson.databind.introspect.AnnotationCollector collectFromBundle(com.fasterxml.jackson.databind.introspect.AnnotationCollector,java.lang.'annotation'.Annotation)>
<kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.android.HandlerContext createDispatcher(java.util.List)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy: void <init>()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void <init>(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.util.Annotations,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JavaType,boolean,java.lang.Object,java.lang.Class[])>
<kotlinx.coroutines.DebugKt: boolean getDEBUG()>
<com.android.gpstest.dialog.ShareDialogFragment$onCreateDialog$builder$1: void <clinit>()>
<com.github.mikephil.charting.utils.Utils: void postInvalidateOnAnimation(android.view.View)>
<kotlinx.coroutines.DefaultExecutor: boolean notifyStartup()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneCollector: boolean isPresent(java.lang.'annotation'.Annotation)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.type.MapLikeType withStaticTyping()>
<com.github.mikephil.charting.components.YAxis$YAxisLabelPosition: com.github.mikephil.charting.components.YAxis$YAxisLabelPosition[] values()>
<org.osmdroid.config.IConfigurationProvider: short getTileFileSystemThreads()>
<org.osmdroid.config.DefaultConfigurationProvider: void setTileDownloadThreads(short)>
<kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: java.lang.Object prepare(java.lang.Object)>
<com.android.gpstest.GpsStatusFragment: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>
<org.osmdroid.util.Delay: long next()>
<org.osmdroid.views.overlay.Overlay: boolean onSingleTapUp(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.views.overlay.Marker: void <init>(org.osmdroid.views.MapView,android.content.Context)>
<kotlinx.coroutines.android.HandlerDispatcher: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<com.android.gpstest.GpsTestActivity: void onSaveInstanceState(android.os.Bundle)>
<com.fasterxml.jackson.core.io.IOContext: void _verifyRelease(char[],char[])>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Boolean _findRequired()>
<com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter withAlwaysAsId(boolean)>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility: com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Class getRawPrimaryType()>
<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: void complete(kotlinx.coroutines.internal.LockFreeLinkedListNode,java.lang.Object)>
<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] quoteAsString(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withFilterId(java.lang.Object)>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>
<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator iterator()>
<kotlin.jvm.internal.CallableReference: java.util.List getAnnotations()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean _nonEmpty(java.util.Collection)>
<kotlinx.coroutines.YieldContext: void <init>()>
<org.osmdroid.tileprovider.util.StorageUtils: boolean isWritable(java.io.File)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.reflect.Member getMember()>
<org.osmdroid.util.MapTileArea$1: java.lang.Object next()>
<org.osmdroid.util.BoundingBox$1: org.osmdroid.util.BoundingBox[] newArray(int)>
<com.github.mikephil.charting.data.DataSet: void <init>(java.util.List,java.lang.String)>
<org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper: void putScaledTileIntoCache(long,android.graphics.Bitmap)>
<com.fasterxml.jackson.databind.util.TokenBuffer: boolean canWriteObjectId()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeRaw(char)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class getRawType()>
<kotlinx.coroutines.UndispatchedCoroutine: void afterResume(java.lang.Object)>
<kotlinx.coroutines.EventLoopImplBase: java.lang.Runnable dequeue()>
<org.osmdroid.util.RectL: long getRotatedX(long,long,long,long,double,double)>
<kotlin.reflect.KCallable: kotlin.reflect.KVisibility getVisibility()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void <init>(int,java.lang.Class)>
<kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.reflect.Member getMember()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy: java.lang.String nameForConstructorParameter(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedParameter,java.lang.String)>
<com.fasterxml.jackson.'annotation'.JsonIdentityInfo: java.lang.String property()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$EmptyCollector: com.fasterxml.jackson.databind.introspect.AnnotationMap asAnnotationMap()>
<org.osmdroid.views.overlay.Overlay: boolean onTouchEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<kotlin.collections.EmptyList: java.lang.Object set(int,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: void removeIgnorableTypes(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.exc.InvalidDefinitionException: void <init>(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)>
<com.github.mikephil.charting.formatter.DefaultFillFormatter: float getFillLinePosition(com.github.mikephil.charting.interfaces.datasets.ILineDataSet,com.github.mikephil.charting.interfaces.dataprovider.LineDataProvider)>
<kotlinx.coroutines.TimeSourceKt: kotlinx.coroutines.TimeSource getTimeSource()>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: com.fasterxml.jackson.databind.JsonSerializer unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)>
<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: java.lang.Object invokeSuspend(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: boolean hasOneOf(java.lang.Class[])>
<org.osmdroid.util.MapTileArea: int cleanValue(int)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setMinOffset(float)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: java.lang.String name()>
<com.github.mikephil.charting.listener.ChartTouchListener: void endAction(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.ser.Serializers: com.fasterxml.jackson.databind.JsonSerializer findCollectionLikeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.CollectionLikeType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.github.mikephil.charting.renderer.BarChartRenderer: void prepareBarHighlight(float,float,float,float,com.github.mikephil.charting.utils.Transformer)>
<com.sothree.slidinguppanel.ViewDragHelper: void releaseViewForPointerUp()>
<org.osmdroid.tileprovider.modules.SqlTileWriter: void catchException(java.lang.Exception)>
<org.osmdroid.views.overlay.TilesOverlay$OverlayTileLooper: void initialiseLoop()>
<kotlinx.coroutines.internal.FastServiceLoader: java.lang.Object getProviderInstance(java.lang.String,java.lang.ClassLoader,java.lang.Class)>
<org.osmdroid.config.DefaultConfigurationProvider: java.util.Map getAdditionalHttpRequestProperties()>
<org.osmdroid.config.DefaultConfigurationProvider: short getTileFileSystemThreads()>
<org.osmdroid.views.MapView: boolean onTrackballEvent(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Inclusion: com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Inclusion valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void <init>(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.core.io.SerializedString)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.String toString()>
<com.github.mikephil.charting.utils.ObjectPool: void resizePool()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.ReferenceType withContentTypeHandler(java.lang.Object)>
<kotlinx.coroutines.JobSupport: java.lang.String toString()>
<kotlin.text.Regex$Companion: void <init>()>
<com.android.gpstest.GpsTestActivity: void addStatusListener()>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionType withTypeHandler(java.lang.Object)>
<kotlin.jvm.internal.Reflection: java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean isEnumType(java.lang.Class)>
<com.fasterxml.jackson.databind.PropertyName: boolean hasNamespace()>
<org.osmdroid.views.Projection: long getMercatorFromTile(int)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value withContentInclusion(com.fasterxml.jackson.'annotation'.JsonInclude$Include)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings: void <clinit>()>
<com.fasterxml.jackson.databind.type.ArrayType: boolean hasGenericTypes()>
<com.fasterxml.jackson.core.PrettyPrinter: void writeEndArray(com.fasterxml.jackson.core.JsonGenerator,int)>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo: java.lang.Class defaultImpl()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _removeUnwantedProperties(java.util.Map)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeStartObject(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerators$PropertyGenerator: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer withContentInclusion(java.lang.Object,boolean)>
<org.osmdroid.views.MapView: boolean isAnimating()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromParamType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.jackson.databind.type.TypeBindings)>
<org.osmdroid.views.MapView$MapViewZoomListener: void <init>(org.osmdroid.views.MapView,org.osmdroid.views.MapView$1)>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>
<com.fasterxml.jackson.core.util.InternCache: void <init>()>
<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>
<kotlinx.coroutines.DispatchedContinuation: java.lang.Object takeState$kotlinx_coroutines_core()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setScaleYEnabled(boolean)>
<org.metalev.multitouch.controller.MultiTouchController: void <clinit>()>
<com.fasterxml.jackson.core.io.CharTypes: char[] copyHexChars()>
<com.fasterxml.jackson.core.util.ThreadLocalBufferManager: com.fasterxml.jackson.core.util.ThreadLocalBufferManager instance()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.'annotation'.Annotation _findAnnotation(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>
<com.github.mikephil.charting.charts.Chart: float getYMax()>
<org.osmdroid.views.overlay.OverlayWithIW: void setTitle(java.lang.String)>
<com.github.mikephil.charting.data.BaseDataSet: java.lang.String getLabel()>
<org.osmdroid.tileprovider.BitmapPool: void <init>()>
<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean canZoomInMoreX()>
<org.osmdroid.views.overlay.LineDrawer: void <init>(int)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.util.Converter findSerializationConverter()>
<com.fasterxml.jackson.databind.ser.std.FileSerializer: void <init>()>
<com.fasterxml.jackson.databind.type.TypeBindings: int hashCode()>
<kotlinx.coroutines.CompletionHandlerBase: void <init>()>
<com.sothree.slidinguppanel.ViewDragHelper: int getTouchSlop()>
<com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider: com.github.mikephil.charting.data.BarData getBarData()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdSerializer)>
<com.github.mikephil.charting.charts.BarChart: void init()>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionType withStaticTyping()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType getContentType()>
<com.github.mikephil.charting.renderer.BarChartRenderer: void drawValues(android.graphics.Canvas)>
<com.fasterxml.jackson.core.Base64Variant: void <init>(com.fasterxml.jackson.core.Base64Variant,java.lang.String,int)>
<kotlin.Result$Failure: java.lang.String toString()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: boolean isDrawIconsEnabled()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: com.fasterxml.jackson.databind.ser.impl.IteratorSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion(java.lang.Class,com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsTop(float)>
<kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUndispatched(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>
<kotlinx.coroutines.EventLoopImplBase: boolean isEmpty()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.PropertyMetadata getMetadata()>
<org.metalev.multitouch.controller.MultiTouchController$MultiTouchObjectCanvas: java.lang.Object getDraggableObjectAtPoint(org.metalev.multitouch.controller.MultiTouchController$PointInfo)>
<kotlinx.coroutines.JobCancellationException: java.lang.Throwable createCopy()>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<kotlin.collections.ArraysKt: java.util.List sortedWith(java.lang.Object[],java.util.Comparator)>
<org.osmdroid.views.CustomZoomButtonsDisplay$VerticalPosition: void <clinit>()>
<org.metalev.multitouch.controller.MultiTouchController$PositionAndScale: float getXOff()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.Result$Failure: void <init>(java.lang.Throwable)>
<com.github.mikephil.charting.renderer.BarChartRenderer: void <init>(com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider,com.github.mikephil.charting.animation.ChartAnimator,com.github.mikephil.charting.utils.ViewPortHandler)>
<kotlin.jvm.internal.MutablePropertyReference1Impl: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>
<org.osmdroid.views.MapView: boolean canZoomOut()>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedMember findAnyGetter()>
<org.osmdroid.views.MapController: void <init>(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.PropertyMetadata getMetadata()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder _property(java.util.Map,com.fasterxml.jackson.databind.PropertyName)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: float getCircleHoleRadius()>
<com.fasterxml.jackson.databind.DeserializationContext: java.lang.Object reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)>
<com.github.mikephil.charting.data.BarData: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serializeContents(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.FailingSerializer: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy: void <init>()>
<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.android.gpstest.model.SatelliteMetadata: void <init>(int,int,int,int,int,int)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore fillPlaceholder(int,java.lang.Object)>
<kotlin.collections.EmptyIterator: boolean hasPrevious()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeStringASCII(int,int)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapLikeType withStaticTyping()>
<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>
<org.osmdroid.util.GEMFFile$GEMFInputStream: void <init>(org.osmdroid.util.GEMFFile,java.lang.String,long,int)>
<org.osmdroid.util.GeoPoint: void <init>(double,double,double)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: boolean isHighlightEnabled()>
<com.fasterxml.jackson.databind.JavaType: boolean isPrimitive()>
<com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSubTypeOf(java.lang.Class)>
<kotlin.jvm.internal.MutablePropertyReference1: java.lang.Object getDelegate(java.lang.Object)>
<kotlinx.coroutines.scheduling.TaskImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.type.MapLikeType withKeyType(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.data.BaseEntry: android.graphics.drawable.Drawable getIcon()>
<com.fasterxml.jackson.core.util.Separators: char getObjectEntrySeparator()>
<org.osmdroid.tileprovider.modules.TileDownloader: long computeExpirationTime(java.lang.String,java.lang.String,long)>
<kotlinx.coroutines.CompletedExceptionally: java.lang.String toString()>
<kotlin.collections.IntIterator: int nextInt()>
<org.osmdroid.config.DefaultConfigurationProvider: long getTileFileSystemCacheTrimBytes()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation: int size()>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.core.json.JsonWriteContext: void <init>(int,com.fasterxml.jackson.core.json.JsonWriteContext,com.fasterxml.jackson.core.json.DupDetector,java.lang.Object)>
<com.android.gpstest.DeviceInfoViewModel: com.android.gpstest.model.ConstellationFamily getSatellitesFromStatuses(java.util.List)>
<com.fasterxml.jackson.databind.type.ReferenceType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<com.fasterxml.jackson.core.PrettyPrinter: void writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)>
<kotlin.collections.EmptyMap: int hashCode()>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: int compareTo(kotlinx.coroutines.EventLoopImplBase$DelayedTask)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter: void <init>(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.util.NameTransformer)>
<com.fasterxml.jackson.databind.PropertyName: void <clinit>()>
<kotlinx.coroutines.CompletedExceptionally: void <clinit>()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeLongString(java.lang.String)>
<com.android.gpstest.GpsTestActivity$7: void <init>(com.android.gpstest.GpsTestActivity)>
<org.osmdroid.views.overlay.TilesOverlay: boolean setViewPort(android.graphics.Canvas,org.osmdroid.views.Projection)>
<kotlinx.coroutines.JobSupport: java.lang.Object makeCompletingOnce$kotlinx_coroutines_core(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream: int available()>
<com.android.gpstest.GpsTestActivity: void checkGnssAntennaOutput(android.content.SharedPreferences)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeNumber(java.math.BigInteger)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.overlay.Marker$OnMarkerDragListener: void onMarkerDrag(org.osmdroid.views.overlay.Marker)>
<com.github.mikephil.charting.charts.Chart: boolean isHighlightPerTapEnabled()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: java.lang.String toString()>
<com.android.gpstest.util.SatelliteUtils: boolean isForceFullGnssMeasurementsSupported()>
<com.sothree.slidinguppanel.ViewDragHelper: float distanceInfluenceForSnapDuration(float)>
<org.osmdroid.util.LineBuilder: int getSize()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: java.io.IOException _wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.lang.Exception)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(float)>
<org.metalev.multitouch.controller.MultiTouchController: void decodeTouchEvent(int,float[],float[],float[],int[],int,boolean,long)>
<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As getTypeInclusion()>
<org.osmdroid.tileprovider.BitmapPool$1: void run()>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.introspect.ClassIntrospector defaultClassIntrospector()>
<org.osmdroid.views.MapView: void scrollBy(int,int)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeFactory,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>
<kotlin.text.StringsKt: java.lang.String substringBefore$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>
<org.osmdroid.views.Projection: long getMercatorYFromPixel(int)>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: void drawZeroLine(android.graphics.Canvas)>
<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,long,java.lang.String)>
<kotlin.collections.EmptyMap: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.android.gpstest.util.SatelliteUtils: boolean isAccumulatedDeltaRangeStateValid(int)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType containedTypeOrUnknown(int)>
<org.metalev.multitouch.controller.MultiTouchController$MultiTouchObjectCanvas: boolean setPositionAndScale(java.lang.Object,org.metalev.multitouch.controller.MultiTouchController$PositionAndScale,org.metalev.multitouch.controller.MultiTouchController$PointInfo)>
<com.fasterxml.jackson.core.util.ThreadLocalBufferManager: java.lang.ref.SoftReference wrapAndTrack(com.fasterxml.jackson.core.util.BufferRecycler)>
<com.fasterxml.jackson.databind.ObjectMapper: void <init>(com.fasterxml.jackson.core.JsonFactory,com.fasterxml.jackson.databind.ser.DefaultSerializerProvider,com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)>
<org.osmdroid.util.GeoPoint: org.osmdroid.util.GeoPoint clone()>
<com.fasterxml.jackson.databind.BeanProperty$Bogus: com.fasterxml.jackson.'annotation'.JsonFormat$Value findPropertyFormat(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: void <clinit>()>
<org.osmdroid.tileprovider.MapTileCache: void setStressedMemory(boolean)>
<com.android.gpstest.model.SatelliteStatus: boolean getHasEphemeris()>
<kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean isExplicitlyNamed()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildArrayContext(java.lang.Object)>
<org.osmdroid.views.MapView: void myOnLayout(boolean,int,int,int,int)>
<kotlinx.coroutines.internal.ArrayQueue: java.lang.Object removeFirstOrNull()>
<com.fasterxml.jackson.databind.ser.std.BooleanSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.CoroutineDispatcher createDefaultDispatcher()>
<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _makeReadOnlyLookupMap()>
<kotlinx.coroutines.BuildersKt__Builders_commonKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotatedClass resolveWithoutSuperTypes()>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: void <init>()>
<com.fasterxml.jackson.databind.type.MapType: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,java.lang.Object,java.lang.Object,boolean)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2: void <init>(java.lang.reflect.Constructor)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: java.lang.String toString()>
<org.osmdroid.views.overlay.DefaultOverlayManager: void onShowPress(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.core.io.IOContext: byte[] allocBase64Buffer()>
<kotlinx.coroutines.AbstractCoroutine: void onCancelled(java.lang.Throwable,boolean)>
<kotlin.collections.ArraysKt: java.lang.Object singleOrNull(java.lang.Object[])>
<com.github.mikephil.charting.data.DataSet: com.github.mikephil.charting.data.Entry getEntryForIndex(int)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean parkedWorkersStackPush$kotlinx_coroutines_core(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>
<com.fasterxml.jackson.'annotation'.PropertyAccessor: void <clinit>()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeStringASCII(char[],int,int,int)>
<org.osmdroid.config.DefaultConfigurationProvider: void setTileFileSystemThreads(short)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.PropertyBuilder constructPropertyBuilder(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void setNonTrivialBaseType(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>
<kotlinx.coroutines.JobSupport: void onCompletionInternal(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: com.fasterxml.jackson.databind.ser.std.SqlDateSerializer withFormat(java.lang.Boolean,java.text.DateFormat)>
<org.osmdroid.views.MapView$MapViewZoomListener: void onZoom(boolean)>
<com.fasterxml.jackson.databind.ext.Java7Handlers: void <clinit>()>
<org.osmdroid.util.TileSystem: int getInputTileZoomLevel(double)>
<kotlinx.coroutines.ExecutorCoroutineDispatcher$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<kotlinx.coroutines.CoroutineDispatcher: void releaseInterceptedContinuation(kotlin.coroutines.Continuation)>
<org.osmdroid.views.MapView: void setMinZoomLevel(java.lang.Double)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.introspect.ClassIntrospector getClassIntrospector()>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isFullyZoomedOut()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1: void <clinit>()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSecondarySerializer(java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.views.CustomZoomButtonsDisplay: boolean isTouched(boolean,boolean,float)>
<com.fasterxml.jackson.databind.jsontype.NamedType: int hashCode()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void <init>()>
<com.fasterxml.jackson.core.Base64Variant: boolean equals(java.lang.Object)>
<org.osmdroid.tileprovider.MapTilePreCache: void fill()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addCtor(com.fasterxml.jackson.databind.introspect.AnnotatedParameter,com.fasterxml.jackson.databind.PropertyName,boolean,boolean,boolean)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void serializeContents(java.lang.String[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: kotlinx.coroutines.internal.ThreadState invoke(kotlinx.coroutines.internal.ThreadState,kotlin.coroutines.CoroutineContext$Element)>
<com.github.mikephil.charting.renderer.LineChartRenderer$DataSetImageCache: android.graphics.Bitmap getBitmap(int)>
<com.github.mikephil.charting.listener.OnChartValueSelectedListener: void onValueSelected(com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.highlight.Highlight)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: boolean isViewUnder(android.view.View,int,int)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setAnyGetter(com.fasterxml.jackson.databind.ser.AnyGetterWriter)>
<kotlinx.coroutines.internal.ScopeCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>
<kotlin.coroutines.jvm.internal.CoroutineStackFrame: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>
<org.osmdroid.views.overlay.Overlay: boolean onTrackballEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1: void <clinit>()>
<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)>
<kotlinx.coroutines.JobSupport: java.lang.Throwable getExceptionOrNull(java.lang.Object)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy: java.lang.String nameForGetterMethod(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String)>
<kotlinx.coroutines.scheduling.TaskImpl: void <init>(java.lang.Runnable,long,kotlinx.coroutines.scheduling.TaskContext)>
<kotlin.collections.EmptyList: boolean removeAll(java.util.Collection)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase$1: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.util.MapTileList: boolean contains(long)>
<com.sothree.slidinguppanel.ViewDragHelper$1: float getInterpolation(float)>
<org.osmdroid.tileprovider.tilesource.ITileSource: android.graphics.drawable.Drawable getDrawable(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void <clinit>()>
<org.osmdroid.config.IConfigurationProvider: boolean isDebugMode()>
<org.osmdroid.util.TileSystem: android.graphics.Rect getTileFromMercator(org.osmdroid.util.RectL,double,android.graphics.Rect)>
<org.osmdroid.views.overlay.Overlay: boolean onSingleTapConfirmed(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.views.MapController: void animateTo(org.osmdroid.api.IGeoPoint)>
<com.fasterxml.jackson.databind.JavaType: java.lang.Object getValueHandler()>
<com.fasterxml.jackson.core.Base64Variant: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: void <init>(com.fasterxml.jackson.databind.type.ReferenceType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: float getMultiTouchAngle()>
<com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.type.CollectionLikeType withContentTypeHandler(java.lang.Object)>
<org.osmdroid.util.SegmentClipper: long clip(long,long,long)>
<com.github.mikephil.charting.renderer.HorizontalBarChartRenderer: void prepareBarHighlight(float,float,float,float,com.github.mikephil.charting.utils.Transformer)>
<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>
<kotlinx.coroutines.EventLoop: void shutdown()>
<org.osmdroid.views.overlay.LineDrawer: void flush()>
<org.osmdroid.views.MapView: float getMapOrientation()>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase$LowMemoryException: void <init>(java.lang.Throwable)>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: com.fasterxml.jackson.databind.introspect.Annotated withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Prop: com.fasterxml.jackson.'annotation'.JsonInclude$Include include()>
<com.fasterxml.jackson.databind.type.TypeBase: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],int,java.lang.Object,java.lang.Object,boolean)>
<kotlinx.coroutines.JobSupport$Finishing: boolean isCancelling()>
<kotlinx.coroutines.JobSupportKt: void <clinit>()>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: void clearArcives()>
<com.android.gpstest.GpsStatusFragment: void setSortByClause(int)>
<kotlinx.coroutines.NonDisposableHandle: boolean childCancelled(java.lang.Throwable)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _releaseBuffers()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getSetter()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver construct(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection,boolean,boolean)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Typing findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TypeKey: int typedHash(java.lang.Class)>
<kotlin.jvm.internal.ClassReference: void <init>(java.lang.Class)>
<com.android.gpstest.GpsTestActivity: void maybeShowMeasurementsSupportToast(java.lang.String)>
<kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String getPackageName(java.lang.Class)>
<com.github.mikephil.charting.data.Entry: void <init>(float,float)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$6: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$WithMember: java.lang.Object withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.core.JsonParser asParser(com.fasterxml.jackson.core.ObjectCodec)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector: void <init>(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver,boolean)>
<com.github.mikephil.charting.interfaces.dataprovider.BarLineScatterCandleBubbleDataProvider: float getLowestVisibleX()>
<org.osmdroid.util.TileSystem: double getTileSize(double)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class getRawParameterType(int)>
<org.osmdroid.config.DefaultConfigurationProvider: void setAnimationSpeedDefault(int)>
<org.osmdroid.views.overlay.LinearRing: void setClipArea(long,long,long,long)>
<kotlin.collections.MapsKt__MapsJVMKt: int mapCapacity(int)>
<kotlinx.coroutines.internal.ThreadState: void start()>
<com.android.gpstest.dialog.UploadDeviceInfoFragment: void onViewCreated(android.view.View,android.os.Bundle)>
<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>
<com.github.mikephil.charting.components.YAxis: float getRequiredHeightSpace(android.graphics.Paint)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.MapView: org.osmdroid.views.Projection getProjection()>
<org.osmdroid.util.RectL: boolean equals(java.lang.Object)>
<com.github.mikephil.charting.renderer.LineChartRenderer$1: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: void <init>(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.type.TypeFactory,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver,boolean)>
<org.osmdroid.views.overlay.OverlayManager: boolean onKeyUp(int,android.view.KeyEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.core.util.DefaultIndenter: void <init>(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String toString()>
<kotlin.collections.EmptyIterator: void set(java.lang.Object)>
<com.fasterxml.jackson.databind.'annotation'.JsonNaming: java.lang.Class value()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal(boolean)>
<kotlinx.coroutines.JobSupport: java.lang.Object cancelMakeCompleting(java.lang.Object)>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>
<kotlin.jvm.internal.CallableReference: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: boolean _isStdJDKCollection(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked append(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo createInitial(int)>
<com.github.mikephil.charting.data.Entry: int describeContents()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>
<org.osmdroid.config.DefaultConfigurationProvider: void setTileFileSystemCacheTrimBytes(long)>
<org.osmdroid.util.MapTileArea: int getWidth()>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: void <init>()>
<kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>
<com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl: com.fasterxml.jackson.databind.cfg.ContextAttributes getEmpty()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setRendererRightYAxis(com.github.mikephil.charting.renderer.YAxisRenderer)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findPrimaryPropertySerializer(java.lang.Class,com.fasterxml.jackson.databind.BeanProperty)>
<com.android.gpstest.dialog.ShareLocationFragment$onViewCreated$1: void <init>(com.google.android.material.chip.Chip,com.google.android.material.chip.Chip,com.google.android.material.chip.Chip,android.location.Location,android.widget.TextView)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: com.fasterxml.jackson.databind.JavaType getParameterType(int)>
<kotlinx.coroutines.DispatchedCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.reflect.Member getMember()>
<org.osmdroid.views.MapController: boolean zoomToFixing(double,int,int,java.lang.Long)>
<org.osmdroid.views.overlay.infowindow.InfoWindow: void open(java.lang.Object,org.osmdroid.util.GeoPoint,int,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.JavaType getType()>
<com.github.mikephil.charting.renderer.XAxisRendererHorizontalBarChart: void <init>(com.github.mikephil.charting.utils.ViewPortHandler,com.github.mikephil.charting.components.XAxis,com.github.mikephil.charting.utils.Transformer,com.github.mikephil.charting.charts.BarChart)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: java.lang.String getPropertyName()>
<kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeNull()>
<org.osmdroid.util.ListPointL$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.PropertyName _propNameFromSimple(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.TypeBase: void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.'annotation'.JsonFormat$Value getDefaultPropertyFormat(java.lang.Class)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsISO8601(java.lang.String,java.text.ParsePosition)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.'annotation'.JsonInclude: java.lang.Class valueFilter()>
<org.osmdroid.config.IConfigurationProvider: long getTileGCBulkPauseInMillis()>
<kotlinx.coroutines.android.HandlerDispatcherKt: android.os.Handler asHandler(android.os.Looper,boolean)>
<org.osmdroid.views.overlay.Marker: android.graphics.drawable.Drawable getImage()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Value withLenient(java.lang.Boolean)>
<org.osmdroid.util.TileLooper: void setHorizontalWrapEnabled(boolean)>
<kotlinx.coroutines.CompletedExceptionally: boolean getHandled()>
<com.github.mikephil.charting.data.ChartData: void clearValues()>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: void <init>(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.introspect.TypeResolutionContext,boolean)>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: com.fasterxml.jackson.'annotation'.ObjectIdGenerator newForSerialization(java.lang.Object)>
<kotlin.collections.MapsKt__MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion(java.lang.Class)>
<kotlinx.coroutines.scheduling.NonBlockingContext: void <init>()>
<org.osmdroid.util.TileSystem: void <clinit>()>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: int getViewVerticalDragRange(android.view.View)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void setCurrentValue(java.lang.Object)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Inclusion include()>
<com.github.mikephil.charting.data.DataSet: com.github.mikephil.charting.data.Entry getEntryForXValue(float,float)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.JavaType resolveType(java.lang.reflect.Type)>
<org.osmdroid.views.MapView: void setVerticalMapRepetitionEnabled(boolean)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.util.Set findExplicitNames()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std defaultInstance()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Iterator)>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value merge(com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value,com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value)>
<kotlin.coroutines.CombinedContext: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Empty: void <clinit>()>
<org.osmdroid.tileprovider.ExpirableBitmapDrawable: void <clinit>()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType getReferencedType()>
<kotlin.UninitializedPropertyAccessException: void <init>(java.lang.String)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeQuotedShort(short)>
<kotlin.internal.ProgressionUtilKt: int differenceModulo(int,int,int)>
<org.osmdroid.views.overlay.LinearRing: void <init>(org.osmdroid.util.LineBuilder)>
<kotlinx.coroutines.JobCancellationException: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.json.DupDetector: boolean isDup(java.lang.String)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.introspect.AnnotatedMethod resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<org.osmdroid.views.MapView: void setMultiTouchScaleCurrentPoint(float,float)>
<kotlinx.coroutines.NonDisposableHandle: java.lang.String toString()>
<kotlinx.coroutines.JobSupport$Finishing: void <init>(kotlinx.coroutines.NodeList,boolean,java.lang.Throwable)>
<kotlinx.coroutines.AbstractCoroutine: void onCompleted(java.lang.Object)>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>
<kotlin.sequences.SequencesKt__SequencesKt: kotlin.sequences.Sequence constrainOnce(kotlin.sequences.Sequence)>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: float getMultiTouchDiameter()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy: java.lang.String translate(java.lang.String)>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings createIfNeeded(java.lang.Class,com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.views.overlay.Overlay: void onResume()>
<kotlinx.coroutines.CancellableContinuationImpl: void detachChild$kotlinx_coroutines_core()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<kotlinx.coroutines.internal.FastServiceLoaderKt: void <clinit>()>
<com.fasterxml.jackson.databind.type.MapLikeType: boolean isTrueMapType()>
<org.osmdroid.views.MapView: boolean isTilesScaledToDpi()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.Iterable memberMethods()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void <init>()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _appendValue(com.fasterxml.jackson.core.JsonToken,java.lang.Object)>
<org.osmdroid.events.ZoomEvent: java.lang.String toString()>
<kotlinx.coroutines.internal.SystemPropsKt: long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object findSerializer(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateNextCopy(long)>
<com.fasterxml.jackson.databind.ser.ContainerSerializer: void <init>(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String idFromValue(java.lang.Object)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setOnDrawListener(com.github.mikephil.charting.listener.OnDrawListener)>
<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator: void <init>()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations: int size()>
<kotlin.ranges.IntRange: java.lang.String toString()>
<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>
<org.osmdroid.util.BoundingBox$1: void <init>()>
<org.osmdroid.views.overlay.LinearRing: void setPoints(java.util.List)>
<com.fasterxml.jackson.databind.JavaType: boolean isMapLikeType()>
<com.github.mikephil.charting.charts.Chart: void setExtraBottomOffset(float)>
<kotlin.collections.IntIterator: void remove()>
<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter: void <init>()>
<com.fasterxml.jackson.databind.introspect.MemberKey: java.lang.String toString()>
<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: void <init>()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig,boolean,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.lang.String)>
<kotlinx.coroutines.Unconfined: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>
<kotlin.collections.CollectionsKt: java.util.List emptyList()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.BeanDescription getBeanDescription()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: float getValueTextSize()>
<kotlin.jvm.internal.PropertyReference: boolean isConst()>
<com.github.mikephil.charting.components.Description: android.graphics.Paint$Align getTextAlign()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setVisibleXRangeMaximum(float)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean _anyIgnorals(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<org.osmdroid.util.LineBuilder: void innerFlush()>
<kotlinx.coroutines.internal.ThreadSafeHeap: void siftUpFrom(int)>
<org.osmdroid.views.overlay.DefaultOverlayManager$1$1: java.lang.Object next()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void <clinit>()>
<kotlin.collections.EmptySet: boolean remove(java.lang.Object)>
<kotlin.reflect.KCallable: kotlin.reflect.KType getReturnType()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.databind.type.MapType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<kotlin.ranges.RangesKt___RangesKt: long coerceAtLeast(long,long)>
<kotlin.collections.EmptyIterator: void remove()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMember getPrimaryMember()>
<com.fasterxml.jackson.databind.BeanDescription: java.util.List findProperties()>
<com.fasterxml.jackson.databind.util.EnumValues: com.fasterxml.jackson.databind.util.EnumValues construct(java.lang.Class,com.fasterxml.jackson.core.SerializableString[])>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.Object invokeSuspend(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonCreator: com.fasterxml.jackson.'annotation'.JsonCreator$Mode mode()>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.type.ArrayType: boolean hasHandlers()>
<org.osmdroid.config.DefaultConfigurationProvider: boolean isDebugMapView()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers: com.fasterxml.jackson.databind.JsonSerializer findStandardImpl(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.util.Set)>
<com.fasterxml.jackson.databind.ser.SerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeFieldName(java.lang.String)>
<com.fasterxml.jackson.databind.util.ArrayIterator: void <init>(java.lang.Object[])>
<com.fasterxml.jackson.core.json.JsonWriteContext: void <init>(int,com.fasterxml.jackson.core.json.JsonWriteContext,com.fasterxml.jackson.core.json.DupDetector)>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: org.osmdroid.tileprovider.modules.MapTileFilesystemProvider$TileLoader getTileLoader()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(java.math.BigDecimal)>
<org.osmdroid.util.GeoPoint: void setCoords(double,double)>
<org.osmdroid.views.CustomZoomButtonsDisplay$VerticalPosition: org.osmdroid.views.CustomZoomButtonsDisplay$VerticalPosition[] values()>
<kotlinx.coroutines.scheduling.LimitingDispatcher: void <clinit>()>
<com.github.mikephil.charting.renderer.XAxisRendererHorizontalBarChart: void renderAxisLabels(android.graphics.Canvas)>
<kotlin.sequences.SequencesKt__SequencesKt: kotlin.sequences.Sequence asSequence(java.util.Iterator)>
<org.osmdroid.util.GEMFFile: void <init>(java.lang.String)>
<kotlin.jvm.internal.ClassReference: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.SerializerFactory: void <init>()>
<com.fasterxml.jackson.'annotation'.JsonFormat: java.lang.String pattern()>
<com.fasterxml.jackson.databind.ser.BeanSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter,java.lang.Object)>
<org.osmdroid.config.DefaultConfigurationProvider: java.io.File getOsmdroidBasePath()>
<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object[])>
<org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper: void <init>(org.osmdroid.tileprovider.MapTileProviderBase,org.osmdroid.tileprovider.MapTileProviderBase$1)>
<kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object _throwWrapped(java.lang.Exception,java.lang.String,java.lang.Object)>
<org.osmdroid.views.MapView: void onLayout(boolean,int,int,int,int)>
<org.osmdroid.views.MapView: void setBuiltInZoomControls(boolean)>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo: java.lang.String property()>
<org.osmdroid.util.UrlBackoff: void <init>()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,boolean[])>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig)>
<com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.views.overlay.Marker: org.osmdroid.util.GeoPoint getPosition()>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$As: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As[] values()>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: com.fasterxml.jackson.databind.introspect.AnnotationMap getParameterAnnotations(int)>
<org.osmdroid.views.overlay.TilesOverlay: int getMaximumZoomLevel()>
<org.osmdroid.views.MapView: void <init>(android.content.Context,org.osmdroid.tileprovider.MapTileProviderBase,android.os.Handler,android.util.AttributeSet,boolean)>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: boolean getAlwaysAsId()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: org.osmdroid.tileprovider.modules.MapTileApproximater$TileLoader getTileLoader()>
<kotlinx.coroutines.AbstractCoroutine: void onStartInternal$kotlinx_coroutines_core()>
<org.osmdroid.views.MapView: int getMapCenterOffsetY()>
<com.fasterxml.jackson.core.JsonFactory: void <init>()>
<org.osmdroid.views.CustomZoomButtonsDisplay: boolean isTouched(int,int,boolean)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void setupGridPaint()>
<kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect: com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility isGetterVisibility()>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.tilesource.ITileSource,long,int,int)>
<org.osmdroid.util.MapTileArea: boolean contains(long)>
<com.fasterxml.jackson.databind.SerializerProvider: void <clinit>()>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.core.PrettyPrinter constructDefaultPrettyPrinter()>
<com.fasterxml.jackson.databind.cfg.ConfigOverrides: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatDefaults(java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Boolean hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.github.mikephil.charting.data.ChartData: void addEntry(com.github.mikephil.charting.data.Entry,int)>
<kotlin.jvm.internal.MutablePropertyReference1: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.'annotation'.JsonFormat$Value getDefaultPropertyFormat(java.lang.Class)>
<org.osmdroid.views.overlay.DefaultOverlayManager: void <init>(org.osmdroid.views.overlay.TilesOverlay)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void <init>(com.fasterxml.jackson.core.util.DefaultPrettyPrinter)>
<com.github.mikephil.charting.data.BaseDataSet: void <init>()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<kotlinx.coroutines.JobSupport: java.lang.Throwable getFinalRootCause(kotlinx.coroutines.JobSupport$Finishing,java.util.List)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.IteratorSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<kotlinx.coroutines.ChildHandle: boolean childCancelled(java.lang.Throwable)>
<org.osmdroid.views.MapView: void setMapOrientation(float,boolean)>
<com.fasterxml.jackson.core.base.GeneratorBase: void setCurrentValue(java.lang.Object)>
<org.osmdroid.views.CustomZoomButtonsController$4: void <clinit>()>
<org.osmdroid.views.Projection: android.graphics.Point unrotateAndScalePoint(int,int,android.graphics.Point)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void <init>(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.tileprovider.ExpirableBitmapDrawable: int getState(android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.'annotation'.JsonInclude$Value findInclusion()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object findFilterId(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setGridBackgroundColor(int)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: void <clinit>()>
<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.lang.String)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.util.BoundingBox$1: java.lang.Object[] newArray(int)>
<kotlin.coroutines.ContinuationKt: void startCoroutine(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeEndObject()>
<com.fasterxml.jackson.core.JsonGenerator: void writeRawValue(java.lang.String)>
<com.fasterxml.jackson.databind.util.NameTransformer$1: java.lang.String transform(java.lang.String)>
<kotlinx.coroutines.DispatchedContinuation: void resumeWith(java.lang.Object)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.EnumSetSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.type.ArrayType construct(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeBindings,java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>
<com.fasterxml.jackson.databind.jsontype.TypeIdResolver: java.lang.String idFromValue(java.lang.Object)>
<kotlinx.coroutines.DispatchedContinuation: void <init>(kotlinx.coroutines.CoroutineDispatcher,kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void assignTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.tileprovider.modules.MapTileDownloader: int getMaximumZoomLevel()>
<com.android.gpstest.GpsTestActivity: void checkHaveFix()>
<org.osmdroid.tileprovider.MapTilePreCache: void addProvider(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken[] values()>
<com.github.mikephil.charting.data.BaseDataSet: com.github.mikephil.charting.utils.MPPointF getIconsOffset()>
<org.osmdroid.config.DefaultConfigurationProvider: void setMapViewHardwareAccelerated(boolean)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parse(java.lang.String)>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: com.fasterxml.jackson.databind.JsonSerializer modifySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionLikeType withStaticTyping()>
<org.osmdroid.events.ScrollEvent: java.lang.String toString()>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: void <init>(com.fasterxml.jackson.'annotation'.JsonInclude$Include,com.fasterxml.jackson.'annotation'.JsonInclude$Include,java.lang.Class,java.lang.Class)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: com.fasterxml.jackson.databind.introspect.AnnotationMap collectAnnotations(com.fasterxml.jackson.databind.util.ClassUtil$Ctor,com.fasterxml.jackson.databind.util.ClassUtil$Ctor)>
<org.osmdroid.tileprovider.tilesource.XYTileSource: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String[],java.lang.String,org.osmdroid.tileprovider.tilesource.TileSourcePolicy)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.String[] findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<org.osmdroid.tileprovider.MapTileCache: void clear()>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: java.util.List _findPotentialConstructors(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: java.lang.String toString()>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: void <clinit>()>
<com.android.gpstest.GpsTestActivity: void checkGnssMeasurementOutput(android.content.SharedPreferences)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void _clearFormats()>
<org.osmdroid.views.MapView$MapViewGestureDetectorListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean canZoomInMoreY()>
<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>
<org.osmdroid.views.overlay.Polygon: void setStrokeWidth(float)>
<com.fasterxml.jackson.databind.ser.BeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView: com.fasterxml.jackson.databind.ser.BeanPropertyWriter rename(com.fasterxml.jackson.databind.util.NameTransformer)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: java.lang.Class[] findViews()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean couldDeserialize()>
<kotlin.reflect.KVisibility: kotlin.reflect.KVisibility valueOf(java.lang.String)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: java.lang.String toString()>
<kotlin.jvm.internal.PropertyReference: java.lang.String toString()>
<org.osmdroid.util.GEMFFile$GEMFRange: void <init>(org.osmdroid.util.GEMFFile,org.osmdroid.util.GEMFFile$1)>
<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter: void <init>(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.util.Annotations,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.'annotation'.JsonInclude$Value,java.lang.Class[])>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2: java.lang.Throwable invoke(java.lang.Throwable)>
<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer: void <init>(boolean)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int secondaryCount()>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<kotlin.coroutines.jvm.internal.ModuleNameRetriever: void <init>()>
<org.osmdroid.tileprovider.util.CloudmadeUtil: java.lang.String getCloudmadeToken()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.String findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.github.mikephil.charting.renderer.LineRadarRenderer: void drawFilledPath(android.graphics.Canvas,android.graphics.Path,int,int)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonProperty$Access findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated)>
<org.osmdroid.views.overlay.Polyline: void <init>(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: com.fasterxml.jackson.databind.JavaType getType()>
<kotlinx.coroutines.EventLoopImplBase: void closeQueue()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.util.List getConstructors()>
<org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader: void <init>(org.osmdroid.tileprovider.modules.MapTileDownloader)>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.interfaces.datasets.IBarLineScatterCandleBubbleDataSet getDataSetByTouchPoint(float,float)>
<kotlin.collections.EmptyList: void add(int,java.lang.Object)>
<kotlin.jvm.internal.PackageReference: void <init>(java.lang.Class,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>
<kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: void <init>(kotlin.coroutines.Continuation)>
<kotlinx.coroutines.YieldKt: void checkCompletion(kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers: void <init>()>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: void <clinit>()>
<org.osmdroid.tileprovider.tilesource.TileSourceFactory: void <clinit>()>
<kotlin.reflect.KCallable: java.util.List getParameters()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.lang.Class[] findDefaultViews()>
<com.fasterxml.jackson.'annotation'.JsonProperty: int index()>
<kotlinx.coroutines.JobSupport$Finishing: kotlinx.coroutines.NodeList getList()>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: void tileLoadedScaled(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>
<kotlinx.coroutines.TimeSource: long nanoTime()>
<kotlinx.coroutines.JobImpl: boolean getHandlesException$kotlinx_coroutines_core()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter: boolean isInline()>
<kotlinx.coroutines.InactiveNodeList: java.lang.String toString()>
<org.osmdroid.views.overlay.OverlayManager: void onDraw(android.graphics.Canvas,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Include: com.fasterxml.jackson.'annotation'.JsonInclude$Include valueOf(java.lang.String)>
<com.github.mikephil.charting.highlight.BarHighlighter: int getClosestStackIndex(com.github.mikephil.charting.highlight.Range[],float)>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: void <init>()>
<kotlin.collections.SetsKt__SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: void tileLoadedExpired(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Boolean isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.DatabindContext: java.lang.Object reportBadDefinition(java.lang.Class,java.lang.String)>
<com.github.mikephil.charting.components.YAxis$AxisDependency: com.github.mikephil.charting.components.YAxis$AxisDependency[] values()>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.cfg.MapperConfigBase _withMapperFeatures(int)>
<kotlinx.coroutines.internal.MainDispatcherFactory: java.lang.String hintOnError()>
<com.android.gpstest.model.SatelliteStatus: float getCn0DbHz()>
<org.osmdroid.util.GeoPoint: void <init>(double,double)>
<com.github.mikephil.charting.data.BarLineScatterCandleBubbleDataSet: void setHighLightColor(int)>
<com.github.mikephil.charting.data.DataSet: float getXMin()>
<kotlin.jvm.internal.Reflection: void <clinit>()>
<org.osmdroid.config.DefaultConfigurationProvider: boolean isDebugMapTileDownloader()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>
<com.fasterxml.jackson.core.TreeCodec: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: boolean _shouldUnwrapSingle(com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerByLookup(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<org.osmdroid.util.MapTileArea: org.osmdroid.util.MapTileArea set(org.osmdroid.util.MapTileArea)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector$MethodBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMethod build()>
<kotlin.jvm.internal.PackageReference: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ext.Java7Handlers: com.fasterxml.jackson.databind.ext.Java7Handlers instance()>
<com.fasterxml.jackson.databind.util.NameTransformer$2: java.lang.String toString()>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onSingleTapConfirmed(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: void <init>(java.lang.Object,java.lang.Class,java.lang.'annotation'.Annotation,java.lang.Class,java.lang.'annotation'.Annotation)>
<kotlinx.coroutines.JobSupport: void notifyCompletion(kotlinx.coroutines.NodeList,java.lang.Throwable)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape valueOf(java.lang.String)>
<org.osmdroid.tileprovider.tilesource.CloudmadeTileSource: java.lang.String pathBase()>
<kotlin.collections.EmptyMap: boolean containsKey(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Boolean hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.std.MapProperty: void reset(java.lang.Object,java.lang.Object,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.core.base.GeneratorBase: void <clinit>()>
<kotlinx.coroutines.internal.ThreadSafeHeapNode: int getIndex()>
<com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature[] values()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Integer _findIndex()>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMember getPrimaryMember()>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value withValueInclusion(com.fasterxml.jackson.'annotation'.JsonInclude$Include)>
<com.fasterxml.jackson.databind.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerByPrimaryType(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<kotlinx.coroutines.DefaultExecutor: boolean isShutdownRequested()>
<kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1: void <init>(java.util.Iterator)>
<org.osmdroid.tileprovider.tilesource.ITileSource: android.graphics.drawable.Drawable getDrawable(java.io.InputStream)>
<kotlinx.coroutines.internal.SystemPropsKt: boolean systemProp(java.lang.String,boolean)>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.SimpleType withStaticTyping()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder _findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter: void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.metalev.multitouch.controller.MultiTouchController$PositionAndScale: void set(float,float,boolean,float,boolean,float,float,boolean,float)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector nopInstance()>
<com.fasterxml.jackson.'annotation'.JsonFormat: java.lang.String timezone()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean _anyExplicits(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.String getPattern()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: java.lang.Class getRawPrimaryType()>
<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<org.osmdroid.views.overlay.Overlay: void draw(android.graphics.Canvas,org.osmdroid.views.MapView,boolean)>
<org.osmdroid.views.MapView: double getLongitudeSpanDouble()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonGenerator _createGenerator(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)>
<kotlin.jvm.internal.Intrinsics: void throwNpe()>
<com.fasterxml.jackson.core.type.WritableTypeId: void <init>(java.lang.Object,com.fasterxml.jackson.core.JsonToken)>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators collectCreators(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.introspect.TypeResolutionContext,com.fasterxml.jackson.databind.JavaType,java.lang.Class,boolean)>
<com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase: com.fasterxml.jackson.'annotation'.JsonFormat$Value findPropertyFormat(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromWellKnownClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate$kotlinx_coroutines_core(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: boolean _serializeAsIndex(com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>
<com.android.gpstest.GpsTestActivity: void handleLegacyNavMessageStatus(int)>
<com.github.mikephil.charting.renderer.DataRenderer: void drawValues(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ext.Java7Support: com.fasterxml.jackson.databind.ext.Java7Support instance()>
<com.fasterxml.jackson.databind.deser.DeserializerFactory: void <init>()>
<kotlin.jvm.internal.TypeIntrinsics: boolean isFunctionOfArity(java.lang.Object,int)>
<com.fasterxml.jackson.databind.ext.NioPathSerializer: void serializeWithType(java.nio.file.Path,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.tileprovider.tilesource.XYTileSource: java.lang.String toString()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findRenameByField(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedField,com.fasterxml.jackson.databind.PropertyName)>
<kotlinx.coroutines.DispatchedCoroutine: boolean tryResume()>
<kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: java.lang.Iterable serializers()>
<org.metalev.multitouch.controller.MultiTouchController: void <init>(org.metalev.multitouch.controller.MultiTouchController$MultiTouchObjectCanvas,boolean)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: com.fasterxml.jackson.databind.util.TokenBufferReadContext createRootContext(com.fasterxml.jackson.core.JsonStreamContext)>
<com.android.gpstest.dialog.ShareDialogFragment$onCreateDialog$builder$1: void onClick(android.content.DialogInterface,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: com.fasterxml.jackson.databind.JavaType getParameterType(int)>
<org.osmdroid.util.GeoPoint: void writeToParcel(android.os.Parcel,int)>
<org.osmdroid.views.overlay.OverlayWithIW: void setRelatedObject(java.lang.Object)>
<org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,int,int)>
<com.fasterxml.jackson.databind.type.PlaceholderForType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,com.fasterxml.jackson.databind.JsonMappingException$Reference)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$9: com.fasterxml.jackson.'annotation'.JsonProperty$Access withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.lang.Object instantiateBean(boolean)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: java.lang.String idFromValue(java.lang.Object)>
<com.fasterxml.jackson.databind.JavaType: boolean isJavaLangObject()>
<kotlinx.coroutines.internal.ThreadSafeHeap: int getSize()>
<com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter: void <init>(java.lang.String,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.util.Annotations,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>
<com.fasterxml.jackson.databind.SerializationFeature: boolean enabledByDefault()>
<org.osmdroid.views.MapView$MapViewGestureDetectorListener: void onShowPress(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.JobKt__JobKt: void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)>
<com.fasterxml.jackson.core.JsonProcessingException: java.lang.Object getProcessor()>
<com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer: void <init>()>
<kotlin.ranges.IntProgression: kotlin.collections.IntIterator iterator()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: float getFormSize()>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: void serialize(com.fasterxml.jackson.databind.JsonSerializable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.CustomZoomButtonsController$Visibility: org.osmdroid.views.CustomZoomButtonsController$Visibility[] values()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void _serializeNull(com.fasterxml.jackson.core.JsonGenerator)>
<kotlinx.coroutines.AbstractCoroutine: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int addLast(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void trimByVisibility()>
<com.github.mikephil.charting.listener.OnChartGestureListener: void onChartDoubleTapped(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: java.util.List changeProperties(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: boolean onSingleTapUp(android.view.MotionEvent)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>()>
<kotlin.collections.EmptyIterator: java.lang.Void previous()>
<com.fasterxml.jackson.core.io.IOContext: void <init>(com.fasterxml.jackson.core.util.BufferRecycler,java.lang.Object,boolean)>
<kotlin.reflect.KProperty1: kotlin.reflect.KProperty1$Getter getGetter()>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<com.android.gpstest.util.SortUtil$Companion: java.util.List sortByGnssThenId(java.util.List)>
<org.osmdroid.tileprovider.MapTileProviderArray: int getMinimumZoomLevel()>
<org.osmdroid.views.MapController: void animateTo(int,int)>
<org.osmdroid.views.overlay.DefaultOverlayManager: void onDraw(android.graphics.Canvas,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$5: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder inclusion(com.fasterxml.jackson.'annotation'.JsonTypeInfo$As)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void onRestoreInstanceState(android.os.Parcelable)>
<org.osmdroid.util.BoundingBox: boolean overlaps(org.osmdroid.util.BoundingBox,double)>
<com.fasterxml.jackson.core.JsonGenerator: boolean canWriteBinaryNatively()>
<kotlin.collections.CollectionsKt: java.util.List sortedWith(java.lang.Iterable,java.util.Comparator)>
<org.osmdroid.views.overlay.OverlayManager: boolean onTouchEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.tileprovider.MapTilePreCache: void <init>(org.osmdroid.tileprovider.MapTileCache)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation: boolean has(java.lang.Class)>
<kotlinx.coroutines.CoroutineName: boolean equals(java.lang.Object)>
<org.osmdroid.util.MapTileArea: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$EmptyCollector: void <clinit>()>
<org.osmdroid.tileprovider.tilesource.CloudmadeTileSource: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String[])>
<com.fasterxml.jackson.core.util.BufferRecycler: void <clinit>()>
<org.osmdroid.tileprovider.modules.SqlTileWriter: java.lang.String[] getPrimaryKeyParameters(long,java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: java.lang.String toString()>
<org.osmdroid.util.TileSystem: double getLongitudeFromX01(double)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromAny(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)>
<com.github.mikephil.charting.interfaces.datasets.IBarDataSet: java.lang.String[] getStackLabels()>
<com.fasterxml.jackson.databind.util.EnumValues: com.fasterxml.jackson.databind.util.EnumValues constructFromName(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: java.lang.Class nullsUsing()>
<org.osmdroid.tileprovider.MapTileRequestState: org.osmdroid.tileprovider.IMapTileProviderCallback getCallback()>
<kotlinx.coroutines.DispatchedTask: void cancelResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int compareTo(java.lang.Object)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelSlideListener: void onPanelSlide(android.view.View,float)>
<com.android.gpstest.GpsTestActivity: void share()>
<com.fasterxml.jackson.'annotation'.Nulls: com.fasterxml.jackson.'annotation'.Nulls[] values()>
<kotlinx.coroutines.TimeSource: void trackTask()>
<org.osmdroid.tileprovider.MapTileCache: org.osmdroid.tileprovider.MapTilePreCache getPreCache()>
<com.github.mikephil.charting.components.LimitLine: com.github.mikephil.charting.components.LimitLine$LimitLabelPosition getLabelPosition()>
<com.android.gpstest.GpsTestActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.fasterxml.jackson.databind.cfg.ConfigFeature: int getMask()>
<com.github.mikephil.charting.charts.Chart: void setDragDecelerationFrictionCoef(float)>
<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException getCancellationException()>
<com.fasterxml.jackson.databind.DatabindContext: java.lang.String _truncate(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector: void _addMemberMethods(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,java.lang.Class,java.util.Map,java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$7: java.lang.String withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>
<kotlinx.coroutines.NonDisposableHandle: void <init>()>
<kotlinx.coroutines.ExecutorCoroutineDispatcher$Key: void <init>()>
<org.osmdroid.views.overlay.infowindow.BasicInfoWindow: void onOpen(java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: java.lang.Boolean getDefaultMergeable()>
<org.osmdroid.config.IConfigurationProvider: java.util.Map getAdditionalHttpRequestProperties()>
<kotlin.jvm.internal.PropertyReference1Impl: void <init>(java.lang.Class,java.lang.String,java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: boolean _verifyBigDecimalRange(com.fasterxml.jackson.core.JsonGenerator,java.math.BigDecimal)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void _writeNullKeyedEntry(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.github.mikephil.charting.jobs.MoveViewJob: com.github.mikephil.charting.jobs.MoveViewJob getInstance(com.github.mikephil.charting.utils.ViewPortHandler,float,float,com.github.mikephil.charting.utils.Transformer,android.view.View)>
<org.osmdroid.views.overlay.DefaultOverlayManager: void add(int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector)>
<kotlin.coroutines.jvm.internal.DebugMetadataKt: java.lang.StackTraceElement getStackTraceElement(kotlin.coroutines.jvm.internal.BaseContinuationImpl)>
<com.fasterxml.jackson.databind.type.MapLikeType: boolean equals(java.lang.Object)>
<com.github.mikephil.charting.data.Entry: void <init>()>
<com.fasterxml.jackson.core.JsonGenerator: void writeArray(int[],int,int)>
<com.fasterxml.jackson.databind.type.PlaceholderForType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.Class getRawType()>
<org.osmdroid.views.MapController: boolean zoomOut(java.lang.Long)>
<com.fasterxml.jackson.databind.'annotation'.NoClass: void <init>()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback: boolean tryCaptureView(android.view.View,int)>
<org.osmdroid.views.MapView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.gpstest.NavigationDrawerFragment$1: void onDrawerClosed(android.view.View)>
<com.fasterxml.jackson.core.type.ResolvedType: void <init>()>
<org.osmdroid.views.overlay.TilesOverlay: void clearLoadingTile()>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: com.fasterxml.jackson.'annotation'.Nulls nonDefaultContentNulls()>
<kotlinx.coroutines.Job$Key: void <init>()>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: void _verifyPrettyValueWrite(java.lang.String,int)>
<org.osmdroid.views.overlay.DefaultOverlayManager$1$1: void <init>(org.osmdroid.views.overlay.DefaultOverlayManager$1,java.util.ListIterator)>
<kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>
<kotlinx.coroutines.AbstractCoroutine: void onStart()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.String toString()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void <clinit>()>
<kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong getCOROUTINE_ID()>
<com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: com.fasterxml.jackson.core.type.WritableTypeId$Inclusion valueOf(java.lang.String)>
<kotlin.collections.EmptyList: boolean contains(java.lang.Void)>
<kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class[] getRawParameterTypes()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddKeySerializer(java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setOverlayed(boolean)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void onPanelDragged(int)>
<com.sothree.slidinguppanel.ViewDragHelper: void clearMotionHistory(int)>
<kotlinx.coroutines.scheduling.TaskContext: void afterTask()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void <clinit>()>
<kotlin.random.Random: void <init>()>
<com.android.gpstest.BenchmarkControllerImpl: void onGnssFirstFix(int)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: java.lang.String getName()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.PlaceholderForType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<org.osmdroid.tileprovider.MapTileCache: boolean shouldKeepTile(long)>
<org.osmdroid.util.MapTileArea: org.osmdroid.util.MapTileArea reset()>
<org.osmdroid.views.MapView: void checkZoomButtons()>
<com.fasterxml.jackson.databind.util.ArrayIterator: void remove()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState: com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState valueOf(java.lang.String)>
<com.github.mikephil.charting.data.LineDataSet: boolean isDrawCircleHoleEnabled()>
<com.fasterxml.jackson.databind.type.TypeBase: com.fasterxml.jackson.databind.type.TypeBindings getBindings()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: boolean hasAnyGetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.introspect.Annotated: java.lang.String getName()>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: void saveTouchStart(android.view.MotionEvent)>
<org.osmdroid.tileprovider.MapTileRequestState: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase getNextProvider()>
<com.github.mikephil.charting.data.ChartData: com.github.mikephil.charting.interfaces.datasets.IDataSet getDataSetByIndex(int)>
<com.github.mikephil.charting.data.LineRadarDataSet: void setFillAlpha(int)>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawCubicBezier(com.github.mikephil.charting.interfaces.datasets.ILineDataSet)>
<com.android.gpstest.dialog.ShareDialogFragment$Companion: java.lang.String getKEY_LOG_FILES()>
<kotlinx.coroutines.scheduling.TaskImpl: void run()>
<com.github.mikephil.charting.highlight.Highlight: boolean equalTo(com.github.mikephil.charting.highlight.Highlight)>
<com.fasterxml.jackson.databind.ser.ResolvableSerializer: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: void <clinit>()>
<kotlinx.coroutines.scheduling.WorkQueue: boolean pollTo(kotlinx.coroutines.scheduling.GlobalQueue)>
<kotlin.internal.jdk7.JDK7PlatformImplementations: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>
<com.fasterxml.jackson.databind.type.TypeBindings: java.lang.Object asKey(java.lang.Class)>
<com.android.gpstest.util.UIUtils: android.os.Bundle createBundleForShareDialog(android.location.Location,boolean,java.util.ArrayList,android.net.Uri)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsRight(float)>
<org.osmdroid.views.overlay.TilesOverlay: void setProjection(org.osmdroid.views.Projection)>
<kotlinx.coroutines.DispatchedCoroutine: void afterResume(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.TimeZone getTimeZone()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.ser.PropertyFilter findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serialize(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.EventLoopImplPlatform: java.lang.Thread getThread()>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: void <clinit>()>
<com.android.gpstest.BenchmarkViewModel: void addLocation(android.location.Location)>
<org.osmdroid.views.overlay.OverlayManager: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float,org.osmdroid.views.MapView)>
<org.osmdroid.api.IMapController: boolean zoomIn()>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: float[] getTransformedPositions()>
<org.osmdroid.views.MapView: double setZoomLevel(double)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: void setReference(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.charts.Chart: void calculateOffsets()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: com.fasterxml.jackson.databind.introspect.AnnotationCollector addOrOverride(java.lang.'annotation'.Annotation)>
<com.github.mikephil.charting.data.BaseDataSet: boolean needsFormatter()>
<kotlin.collections.IntIterator: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: boolean isExplicitlyIncluded()>
<com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.MapTileProviderArray: boolean contains(long)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer: boolean notFinite(double)>
<org.osmdroid.util.SegmentIntersection: boolean check(double,double,double,double,double,double,double,double,org.osmdroid.util.PointL,double,double)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>
<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>
<com.android.gpstest.GpsTestActivity$3: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: int getEntryCount()>
<com.fasterxml.jackson.core.JsonFactory: boolean requiresPropertyOrdering()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.util.Converter _createConverter(java.lang.Object)>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType getContentType()>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: android.graphics.Path linePath(android.graphics.Path,int,float[])>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean hasNoDragOffset()>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.'annotation'.JsonAutoDetect$Value getVisibility()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: void removeSetterlessGetters(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Inclusion: void <clinit>()>
<com.fasterxml.jackson.databind.ser.PropertyWriter: void <init>(com.fasterxml.jackson.databind.PropertyMetadata)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void <clinit>()>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec)>
<kotlin.ranges.IntProgression: int hashCode()>
<com.fasterxml.jackson.core.JsonParser: void <init>(int)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)>
<org.osmdroid.views.CustomZoomButtonsDisplay$1: void <clinit>()>
<org.osmdroid.util.TileSystem: long getMercatorXFromLongitude(double,double,boolean)>
<com.github.mikephil.charting.charts.Chart: float getXRange()>
<kotlinx.coroutines.scheduling.WorkQueue: void decrementIfBlocking(kotlinx.coroutines.scheduling.Task)>
<com.android.gpstest.GpsTestActivity$5: void onStatusChanged(int)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.views.overlay.DefaultOverlayManager: void setTilesOverlay(org.osmdroid.views.overlay.TilesOverlay)>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicLongSerializer: void serialize(java.util.concurrent.atomic.AtomicLong,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: void <init>(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,java.lang.reflect.Field,com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer _createSerializer2(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: void <init>()>
<org.osmdroid.views.MapController: double setZoom(double)>
<com.fasterxml.jackson.databind.ser.Serializers: com.fasterxml.jackson.databind.JsonSerializer findReferenceSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.ReferenceType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.MapSerializer,java.lang.Object,boolean)>
<com.github.mikephil.charting.renderer.BarChartRenderer: void drawData(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.JsonMappingException$Reference: void <init>()>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: com.fasterxml.jackson.'annotation'.JsonSetter$Value empty()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.BasicBeanDescription forSerialization(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer construct(java.lang.Class,com.fasterxml.jackson.databind.util.EnumValues)>
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.Annotated: boolean hasOneOf(java.lang.Class[])>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerFromAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlinx.coroutines.InvokeOnCompletion: void invoke(java.lang.Throwable)>
<com.fasterxml.jackson.databind.BeanProperty$Std: void <init>(com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.PropertyMetadata)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void serializeContents(int[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.util.MapTileList: void <init>()>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: java.lang.String getName()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer getDefaultNullValueSerializer()>
<org.osmdroid.views.overlay.OverlayManager: boolean onSingleTapUp(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void <init>(java.lang.Class)>
<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.Class getAnnotated()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase: void <init>(java.lang.Class)>
<com.github.mikephil.charting.data.DataSet: float getYMax()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: void <init>(com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<kotlinx.coroutines.CoroutineName: void <clinit>()>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings emptyBindings()>
<com.fasterxml.jackson.databind.ser.impl.UnknownSerializer: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void <init>()>
<org.osmdroid.views.overlay.LinearRing: void clipAndStore(org.osmdroid.views.Projection,org.osmdroid.util.PointL,boolean,boolean,org.osmdroid.util.SegmentClipper)>
<com.android.gpstest.DeviceInfoViewModel: void setGotFirstFix(boolean)>
<com.android.gpstest.dialog.ShareLocationFragment$onViewCreated$3: void <init>(android.location.Location,android.widget.TextView,android.widget.CheckBox)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <clinit>()>
<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Key getKey()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.MainCoroutineDispatcher: java.lang.String toStringInternalImpl()>
<org.osmdroid.tileprovider.tilesource.TileSourcePolicy: boolean normalizesUserAgent()>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder init(com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)>
<org.osmdroid.tileprovider.ExpirableBitmapDrawable: void setState(android.graphics.drawable.Drawable,int)>
<org.osmdroid.tileprovider.modules.MapTileDownloader: java.lang.String getName()>
<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: void <init>()>
<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$kotlinx_coroutines_core()>
<com.github.mikephil.charting.charts.BarChart: void setDrawValueAboveBar(boolean)>
<com.android.gpstest.GpsStatusFragment: void onGnssFixAcquired()>
<com.fasterxml.jackson.core.PrettyPrinter: void writeEndObject(com.fasterxml.jackson.core.JsonGenerator,int)>
<org.osmdroid.util.SegmentClipper: void <init>()>
<com.github.mikephil.charting.data.ChartData: com.github.mikephil.charting.data.Entry getEntryForHighlight(com.github.mikephil.charting.highlight.Highlight)>
<com.android.gpstest.model.SatelliteMetadata: int getNumSatsInView()>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: com.fasterxml.jackson.databind.JsonSerializer modifyCollectionSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.CollectionType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.core.type.ResolvedType getReferencedType()>
<com.github.mikephil.charting.highlight.BarHighlighter: com.github.mikephil.charting.data.BarLineScatterCandleBubbleData getData()>
<com.fasterxml.jackson.databind.type.SimpleType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int hashCode()>
<org.osmdroid.tileprovider.modules.MapTileDownloader: org.osmdroid.tileprovider.tilesource.ITileSource getTileSource()>
<com.android.gpstest.util.PreferenceUtils: java.lang.String getCapabilityDescription(boolean)>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>
<kotlinx.coroutines.internal.MainDispatchersKt: java.lang.Void throwMissingMainDispatcherException()>
<org.osmdroid.util.PointAccepter: void add(long,long)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: void onMediaMounted()>
<com.sothree.slidinguppanel.ViewDragHelper: void captureChildView(android.view.View,int)>
<com.fasterxml.jackson.databind.JavaType: int hashCode()>
<org.osmdroid.tileprovider.MapTileCache: void <init>()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext getParent()>
<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>()>
<org.osmdroid.views.overlay.Overlay: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float,org.osmdroid.views.MapView)>
<kotlin.jvm.internal.MutablePropertyReference: void <init>()>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: boolean isMultiTouch()>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.type.MapLikeType withContentTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.Object getValue(java.lang.Object)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: com.github.mikephil.charting.data.Entry getEntryForXValue(float,float)>
<org.osmdroid.views.overlay.OverlayWithIW: void onDestroy()>
<com.fasterxml.jackson.core.util.TextBuffer: char[] resultArray()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: boolean isNonStaticInnerClass()>
<com.fasterxml.jackson.databind.util.TypeKey: java.lang.String toString()>
<org.osmdroid.views.overlay.Overlay: void <init>()>
<org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase$MyBroadcastReceiver: void <init>(org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase,org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase$1)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: java.lang.Class getValueFilter()>
<com.android.gpstest.GpsTestActivity: void addGnssMeasurementsListener()>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id[] values()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: boolean isTrueCollectionType()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.introspect.VisibilityChecker getDefaultVisibilityChecker()>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getSuperClass()>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream: void <init>(java.nio.ByteBuffer)>
<kotlin.ranges.RangesKt: int coerceIn(int,int,int)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer createRoot(int)>
<org.osmdroid.config.DefaultConfigurationProvider: void setMapViewRecyclerFriendly(boolean)>
<org.osmdroid.util.GeoPoint: double getLongitude()>
<com.github.mikephil.charting.components.YAxis$AxisDependency: com.github.mikephil.charting.components.YAxis$AxisDependency valueOf(java.lang.String)>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: int hashCode()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$5: java.lang.Object withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<org.osmdroid.views.MapView: void startAnimation()>
<com.github.mikephil.charting.components.AxisBase: com.github.mikephil.charting.formatter.IAxisValueFormatter getValueFormatter()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serialize(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.ObjectIdInfo getObjectIdInfo()>
<com.github.mikephil.charting.charts.BarLineChartBase: void autoScale()>
<kotlin.ResultKt: void throwOnFailure(java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: void <clinit>()>
<com.android.gpstest.GpsStatusFragment: void <clinit>()>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.databind.JavaType getType()>
<com.fasterxml.jackson.databind.cfg.ConfigOverrides: com.fasterxml.jackson.'annotation'.JsonSetter$Value getDefaultSetterInfo()>
<kotlinx.coroutines.JobNode: boolean isActive()>
<com.fasterxml.jackson.'annotation'.JsonFormat: com.fasterxml.jackson.'annotation'.JsonFormat$Feature[] without()>
<org.osmdroid.views.overlay.Polyline: org.osmdroid.util.GeoPoint getCloseTo(org.osmdroid.util.GeoPoint,double,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.core.JsonLocation: int hashCode()>
<org.osmdroid.config.DefaultConfigurationProvider: void setOsmdroidTileCache(java.io.File)>
<kotlinx.coroutines.CoroutineId: void <clinit>()>
<kotlin.text.Regex$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<org.osmdroid.util.GEMFFile$GEMFInputStream: long skip(long)>
<kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.modules.TileWriter: void setMaximumCachedFileAge(long)>
<kotlin.collections.MapsKt__MapsKt: void putAll(java.util.Map,java.lang.Iterable)>
<org.osmdroid.views.Projection: long getScrollableOffset(long,long,double,int,int)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.'annotation'.Annotation[] findClassAnnotations(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.SerializerCache: void <init>()>
<com.android.gpstest.dialog.UploadDeviceInfoFragment$onViewCreated$1: void onClick(android.view.View)>
<org.osmdroid.views.CustomZoomButtonsController: void setZoomOutEnabled(boolean)>
<com.fasterxml.jackson.databind.BeanProperty$Std: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void _ensureOverride(java.lang.String)>
<com.fasterxml.jackson.core.util.BufferRecyclers: void <clinit>()>
<com.fasterxml.jackson.databind.util.Annotations: java.lang.'annotation'.Annotation get(java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: java.lang.String toString()>
<org.osmdroid.util.Delay: void <init>(long[])>
<com.fasterxml.jackson.databind.type.PlaceholderForType: void <init>(int)>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: void serialize(java.util.Date,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.util.GarbageCollector: void <init>(java.lang.Runnable)>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: kotlin.Pair causeAndStacktrace(java.lang.Throwable)>
<kotlin.coroutines.jvm.internal.CompletedContinuation: java.lang.String toString()>
<kotlinx.coroutines.TimeSource: void unTrackTask()>
<kotlin.jvm.internal.CallableReference: java.lang.String getSignature()>
<org.osmdroid.views.overlay.gestures.RotationGestureOverlay: void <init>(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean equals(java.lang.Object)>
<com.github.mikephil.charting.buffer.AbstractBuffer: void <init>(int)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getSetter()>
<kotlin.random.jdk8.PlatformThreadLocalRandom: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: void <init>(int)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: android.graphics.drawable.Drawable getDrawable(java.lang.String)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: int getMinFlingVelocity()>
<com.fasterxml.jackson.databind.BeanDescription: void <init>(com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.tileprovider.modules.TileDownloader: android.graphics.drawable.Drawable downloadTile(long,int,java.lang.String,org.osmdroid.tileprovider.modules.IFilesystemCache,org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Include: void <clinit>()>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: void <clinit>()>
<com.fasterxml.jackson.databind.type.SimpleType: java.lang.String buildCanonicalName()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value empty()>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: int frameIndex(java.lang.StackTraceElement[],java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeObjectId(java.lang.Object)>
<org.osmdroid.views.Projection: org.osmdroid.util.GeoPoint getCurrentCenter()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: boolean usesStaticTyping(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.views.MapView: boolean canZoomIn()>
<com.android.gpstest.BenchmarkControllerImpl: void onGnssStarted()>
<org.osmdroid.util.LineBuilder: void <init>(int)>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<com.github.mikephil.charting.highlight.ChartHighlighter: com.github.mikephil.charting.highlight.Highlight getClosestHighlightByPixel(java.util.List,float,float,com.github.mikephil.charting.components.YAxis$AxisDependency,float)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: com.fasterxml.jackson.'annotation'.JsonFormat$Features construct(com.fasterxml.jackson.'annotation'.JsonFormat)>
<com.github.mikephil.charting.data.DataSet: float getXMax()>
<kotlin.collections.EmptyIterator: java.lang.Object previous()>
<com.fasterxml.jackson.databind.util.StdDateFormat: void pad3(java.lang.StringBuffer,int)>
<kotlin.collections.EmptyList: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.util.ClassUtil: void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void _format(java.util.TimeZone,java.util.Locale,java.util.Date,java.lang.StringBuffer)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.fasterxml.jackson.core.util.Separators: void <init>(char,char,char)>
<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>
<com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: boolean requiresObjectContext()>
<com.fasterxml.jackson.databind.type.PlaceholderForType: void actualType(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.ContainerSerializer: void <init>(java.lang.Class)>
<com.github.mikephil.charting.components.Legend: float getFormLineWidth()>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer$TypeSerializerRerouter: com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: void mergeRecoveredTraces(java.lang.StackTraceElement[],java.util.ArrayDeque)>
<com.github.mikephil.charting.data.LineScatterCandleRadarDataSet: android.graphics.DashPathEffect getDashPathEffectHighlight()>
<com.fasterxml.jackson.core.JsonProcessingException: void <init>(java.lang.String)>
<com.sothree.slidinguppanel.ViewDragHelper: boolean forceSettleCapturedViewAt(int,int,int,int)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: void <init>(java.lang.String,com.fasterxml.jackson.'annotation'.JsonFormat$Shape,java.lang.String,java.lang.String,com.fasterxml.jackson.'annotation'.JsonFormat$Features,java.lang.Boolean)>
<com.fasterxml.jackson.core.JsonLocation: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean _hasNullKey(java.util.Map)>
<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.core.JsonStreamContext: int getEntryCount()>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getContentType()>
<org.osmdroid.util.TileLooper: void finaliseLoop()>
<com.github.mikephil.charting.charts.Chart: void setUnbindEnabled(boolean)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: void <clinit>()>
<kotlin.text.StringsKt__StringsKt: java.lang.String substringBefore$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>
<org.osmdroid.util.PointAccepter: void end()>
<org.osmdroid.util.SegmentClipper: void clip(long,long,long,long)>
<com.fasterxml.jackson.databind.JavaType: boolean isCollectionLikeType()>
<com.fasterxml.jackson.core.type.ResolvedType: java.lang.String toCanonical()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.util.Set,boolean)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$3: java.lang.Object withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.util.Converter: java.lang.Object convert(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: com.fasterxml.jackson.databind.introspect.Annotated withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void serializeAsOmittedField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder,com.fasterxml.jackson.databind.PropertyName)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: void <init>(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,java.lang.Class,java.lang.String,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.ReferenceType withTypeHandler(java.lang.Object)>
<kotlin.collections.EmptyList: boolean remove(java.lang.Object)>
<kotlinx.coroutines.scheduling.WorkQueue: long tryStealLastScheduled(kotlinx.coroutines.scheduling.WorkQueue,boolean)>
<org.osmdroid.tileprovider.util.SimpleRegisterReceiver: void destroy()>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider$TileLoader: void <init>(org.osmdroid.tileprovider.modules.MapTileAssetsProvider,android.content.res.AssetManager)>
<com.github.mikephil.charting.data.BaseDataSet: void resetColors()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.renderer.DataRenderer getRenderer()>
<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.JavaType getContentType()>
<com.android.gpstest.GpsTestActivity$2: void onStopped()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: boolean equals(java.lang.Object)>
<com.github.mikephil.charting.buffer.AbstractBuffer: void setPhases(float,float)>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: void midPoint(com.github.mikephil.charting.utils.MPPointF,android.view.MotionEvent)>
<com.github.mikephil.charting.charts.BarLineChartBase: float getScaleX()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$5: java.lang.String withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void serializeContents(boolean[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setFadeOnClickListener(android.view.View$OnClickListener)>
<org.osmdroid.tileprovider.MapTileProviderArray: boolean getProviderExists(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)>
<kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class,boolean)>
<com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature[] values()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.tileprovider.ReusableBitmapDrawable: void <init>(android.graphics.Bitmap)>
<org.osmdroid.util.TileSystem: long getMercatorFromTile(int,double)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt$kotlinx_coroutines_core(int)>
<org.osmdroid.util.BoundingBox: java.lang.Object clone()>
<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable createFinalException(java.lang.Throwable,java.lang.Throwable,java.util.ArrayDeque)>
<com.fasterxml.jackson.databind.type.ReferenceType: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,java.lang.Object,java.lang.Object,boolean)>
<org.osmdroid.tileprovider.modules.ArchiveFileFactory: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.Class getDeclaringClass()>
<com.fasterxml.jackson.databind.type.ArrayType: boolean equals(java.lang.Object)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: java.lang.String getCopyrightNotice()>
<com.fasterxml.jackson.databind.PropertyName: void <init>(java.lang.String)>
<com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider: boolean isHighlightFullBarEnabled()>
<org.osmdroid.tileprovider.modules.MapTileDownloader: java.lang.String getThreadGroupName()>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean onTouchEvent(android.view.MotionEvent)>
<kotlin.Pair: java.lang.Object getFirst()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.JsonSerializer _findSerializer(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<org.osmdroid.views.MapView: void onAttachedToWindow()>
<com.github.mikephil.charting.charts.BarChart: void setFitBars(boolean)>
<org.osmdroid.views.overlay.DefaultOverlayManager: java.lang.Iterable overlaysReversed()>
<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject(java.lang.Object,int)>
<com.fasterxml.jackson.core.json.DupDetector: com.fasterxml.jackson.core.json.DupDetector rootDetector(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.type.TypeBindings$TypeParamStash: java.lang.reflect.TypeVariable[] paramsFor1(java.lang.Class)>
<kotlin.jvm.internal.PackageReference: int hashCode()>
<org.osmdroid.config.DefaultConfigurationProvider: java.lang.String getNormalizedUserAgent()>
<com.fasterxml.jackson.databind.ser.AnyGetterWriter: void <init>(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.type.MapLikeType: boolean isContainerType()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildArrayContext()>
<kotlinx.coroutines.internal.SystemPropsKt__SystemPropsKt: void <clinit>()>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.'annotation'.JsonInclude$Value getInclude()>
<com.github.mikephil.charting.data.Entry: void <clinit>()>
<com.github.mikephil.charting.highlight.Highlight: float getDrawX()>
<kotlinx.coroutines.EventLoopImplBase: void schedule(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)>
<com.fasterxml.jackson.databind.type.MapLikeType: boolean hasHandlers()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean _anyVisible(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneCollector: com.fasterxml.jackson.databind.util.Annotations asAnnotations()>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[] rename(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.util.NameTransformer)>
<com.fasterxml.jackson.databind.util.NameTransformer$NopTransformer: java.lang.String transform(java.lang.String)>
<org.osmdroid.views.overlay.gestures.RotationGestureDetector: void setEnabled(boolean)>
<kotlinx.coroutines.EventLoopImplBase: void <clinit>()>
<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: kotlinx.coroutines.ThreadContextElement invoke(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Element)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean hasEnclosingMethod(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,char[],int)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType[] _resolveSuperInterfaces(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings)>
<org.osmdroid.tileprovider.modules.INetworkAvailablityCheck: boolean getNetworkAvailable()>
<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>
<kotlinx.coroutines.JobImpl: boolean handlesException()>
<org.osmdroid.tileprovider.MapTileProviderArray: android.graphics.drawable.Drawable getMapTile(long)>
<org.osmdroid.views.overlay.DefaultOverlayManager: int size()>
<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.tileprovider.tilesource.ITileSource: int getMaximumZoomLevel()>
<com.github.mikephil.charting.charts.HorizontalBarChart: void setVisibleXRangeMinimum(float)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: void <clinit>()>
<kotlin.collections.EmptyMap: java.lang.Object get(java.lang.Object)>
<com.github.mikephil.charting.data.BaseDataSet: int getColor(int)>
<com.fasterxml.jackson.core.JsonFactory: void <clinit>()>
<org.osmdroid.util.PathBuilder: void init()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.Boolean getFeature(com.fasterxml.jackson.'annotation'.JsonFormat$Feature)>
<com.android.gpstest.GpsStatusFragment$GnssFilterDialog: void onClick(android.content.DialogInterface,int,boolean)>
<kotlin.collections.EmptyList: void <init>()>
<kotlin.internal.jdk8.JDK8PlatformImplementations: kotlin.random.Random defaultPlatformRandom()>
<kotlinx.coroutines.scheduling.DefaultScheduler: void <init>()>
<kotlinx.coroutines.CoroutineDispatcher$Key$1: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _newSimpleType(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<org.osmdroid.tileprovider.MapTileCache: org.osmdroid.util.MapTileArea getMapTileArea()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName _propertyName(java.lang.String,java.lang.String)>
<kotlin.text.StringsKt__StringsKt: java.lang.String substringBefore$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>
<kotlin.text.StringsKt__StringsKt: java.lang.String substringBefore(java.lang.String,java.lang.String,java.lang.String)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: java.lang.Object createInstance()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Multi: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap newWith(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: void <init>(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(long)>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isDragEnabled()>
<kotlinx.coroutines.JobSupport$Finishing: java.lang.Object getExceptionsHolder()>
<com.fasterxml.jackson.databind.JsonMappingException$Reference: void <init>(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<kotlin.collections.EmptySet: int getSize()>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: void tileLoaded(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver: void _collectAndResolve(com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.jsontype.NamedType,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.AnnotationIntrospector,java.util.HashMap)>
<com.android.gpstest.GpsTestActivity: void addOrientationSensorListener()>
<com.fasterxml.jackson.databind.ser.std.NullSerializer: void <clinit>()>
<org.metalev.multitouch.controller.MultiTouchController$MultiTouchObjectCanvas: void getPositionAndScale(java.lang.Object,org.metalev.multitouch.controller.MultiTouchController$PositionAndScale)>
<org.osmdroid.tileprovider.MapTileProviderBase: void mapTileRequestExpiredTile(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.type.TypeBase: void <clinit>()>
<org.metalev.multitouch.controller.MultiTouchController: boolean isPinching()>
<com.fasterxml.jackson.databind.util.RawValue: void _serialize(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.PropertyName: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.SimpleType withTypeHandler(java.lang.Object)>
<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: void <clinit>()>
<org.osmdroid.tileprovider.MapTilePreCache$1: void run()>
<com.fasterxml.jackson.core.io.IOContext: char[] allocConcatBuffer()>
<com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>
<org.osmdroid.views.MapView: void setMapListener(org.osmdroid.events.MapListener)>
<com.android.gpstest.GpsTestActivity: void forceTimeInjection()>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: int getCircleHoleColor()>
<org.osmdroid.views.overlay.TilesOverlay: android.graphics.Rect getCanvasRect()>
<com.github.mikephil.charting.data.PieEntry: java.lang.String getLabel()>
<com.fasterxml.jackson.databind.ext.Java7Support: void <clinit>()>
<kotlinx.coroutines.JobSupport: void cancel(java.util.concurrent.CancellationException)>
<org.osmdroid.util.BoundingBox: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: com.fasterxml.jackson.databind.ser.std.EnumSetSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.android.gpstest.dialog.ShareLocationFragment$onViewCreated$5: void <init>(com.android.gpstest.dialog.ShareLocationFragment,android.location.Location,android.widget.TextView)>
<com.fasterxml.jackson.databind.BeanProperty$Bogus: com.fasterxml.jackson.databind.PropertyMetadata getMetadata()>
<org.osmdroid.util.TileSystemWebMercator: double getMaxLongitude()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isIsGetterVisible(java.lang.reflect.Method)>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Attr: java.lang.String propName()>
<org.osmdroid.config.DefaultConfigurationProvider: void setMapTileDownloaderFollowRedirects(boolean)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)>
<org.osmdroid.views.overlay.OverlayManager: boolean onSnapToItem(int,int,android.graphics.Point,org.osmdroid.api.IMapView)>
<kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineResumed(kotlin.coroutines.Continuation)>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isInverted(com.github.mikephil.charting.components.YAxis$AxisDependency)>
<kotlinx.coroutines.EventLoopImplBase: boolean isCompleted()>
<com.github.mikephil.charting.charts.Chart: void highlightValue(com.github.mikephil.charting.highlight.Highlight,boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor getDefaultConstructor()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked _removeIgnored(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<org.osmdroid.tileprovider.modules.MapTileApproximater$TileLoader: android.graphics.drawable.Drawable loadTile(long)>
<org.osmdroid.config.IConfigurationProvider: java.text.SimpleDateFormat getHttpHeaderDateTimeFormat()>
<kotlinx.coroutines.JobSupport: java.lang.Object tryMakeCompleting(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: void <init>(com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase,java.lang.Boolean)>
<com.fasterxml.jackson.core.util.DefaultIndenter: boolean isInline()>
<kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>
<com.github.mikephil.charting.listener.OnChartGestureListener: void onChartLongPressed(android.view.MotionEvent)>
<kotlin.sequences.SequencesKt___SequencesKt: java.util.Collection toCollection(kotlin.sequences.Sequence,java.util.Collection)>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: com.fasterxml.jackson.'annotation'.Nulls nonDefaultValueNulls()>
<kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.core.JsonParser$NumberType: void <clinit>()>
<com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSuperTypeOf(java.lang.Class)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: int getMaximumZoomLevel()>
<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer: void serialize(java.net.InetAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback: int clampViewPositionVertical(android.view.View,int,int)>
<com.fasterxml.jackson.databind.util.NameTransformer$3: java.lang.String transform(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.'annotation'.OptBoolean: void <clinit>()>
<org.osmdroid.tileprovider.MapTileProviderBase: org.osmdroid.tileprovider.MapTileCache getTileCache()>
<kotlin.collections.EmptyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: void <clinit>()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: com.github.mikephil.charting.components.Legend$LegendForm getForm()>
<com.fasterxml.jackson.databind.util.TypeKey: int untypedHash(java.lang.Class)>
<com.android.gpstest.model.SatelliteStatus: float getCarrierFrequencyHz()>
<kotlinx.coroutines.JobSupport: void notifyCancelling(kotlinx.coroutines.NodeList,java.lang.Throwable)>
<org.osmdroid.views.MapView: int getMapCenterOffsetX()>
<kotlin.collections.CollectionsKt___CollectionsKt: java.util.Collection toCollection(java.lang.Iterable,java.util.Collection)>
<kotlinx.coroutines.internal.AtomicOp: java.lang.Object perform(java.lang.Object)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter: boolean isInline()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>
<org.osmdroid.views.overlay.Overlay: org.osmdroid.util.BoundingBox getBounds()>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: void <clinit>()>
<com.fasterxml.jackson.databind.JsonSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.tileprovider.modules.TileDownloader: java.lang.Long getHttpExpiresTime(java.lang.String)>
<kotlinx.coroutines.JobSupport: int startInternal(java.lang.Object)>
<org.osmdroid.views.MapController$ReplayController: void <init>(org.osmdroid.views.MapController,org.osmdroid.views.MapController$1)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$1: java.lang.Object withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.android.gpstest.util.CarrierFreqUtils$1: void <clinit>()>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: int tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.tileprovider.IMapTileProviderCallback: void mapTileRequestCompleted(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<org.osmdroid.views.MapView: void setProjection(org.osmdroid.views.Projection)>
<com.fasterxml.jackson.databind.ext.Java7SupportImpl: void <init>()>
<org.osmdroid.views.overlay.PolyOverlayWithIW: void showInfoWindow()>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend: com.fasterxml.jackson.databind.'annotation'.JsonAppend$Attr[] attrs()>
<com.github.mikephil.charting.charts.Chart: void addViewportJob(java.lang.Runnable)>
<kotlinx.coroutines.CancelledContinuation: boolean makeResumed()>
<kotlinx.coroutines.CoroutineStart$WhenMappings: void <clinit>()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.renderer.LegendRenderer getLegendRenderer()>
<com.fasterxml.jackson.databind.ser.impl.UnknownSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeBoolean(boolean)>
<com.android.gpstest.util.CarrierFreqUtils: void <clinit>()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.CollectionType constructCollectionType(java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.databind.util.ArrayIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotationCollector _addClassMixIns(com.fasterxml.jackson.databind.introspect.AnnotationCollector,java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String backticked(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class findEnumType(java.util.EnumMap)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)>
<com.github.mikephil.charting.renderer.XAxisRendererHorizontalBarChart: android.graphics.RectF getGridClippingRect()>
<kotlinx.coroutines.CoroutineDispatcher: void <init>()>
<org.osmdroid.views.CustomZoomButtonsDisplay: android.graphics.Bitmap getBitmap(boolean,boolean)>
<com.github.mikephil.charting.utils.Transformer: void pixelsToValue(float[])>
<org.osmdroid.tileprovider.tilesource.TileSourcePolicy: int getMaxConcurrent()>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder noTypeInfoBuilder()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Integer findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated)>
<org.osmdroid.views.MapView: void setExpectedCenter(org.osmdroid.api.IGeoPoint,long,long)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int getIndex()>
<kotlinx.coroutines.CoroutineDispatcher$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<org.osmdroid.tileprovider.util.CloudmadeUtil: void <clinit>()>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<org.osmdroid.views.overlay.LinearRing: void computeDistances()>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String getName()>
<com.github.mikephil.charting.interfaces.datasets.ILineScatterCandleRadarDataSet: android.graphics.DashPathEffect getDashPathEffectHighlight()>
<kotlinx.coroutines.CoroutineExceptionHandler: void <clinit>()>
<com.fasterxml.jackson.core.util.BufferRecycler: char[] calloc(int)>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: byte[] _asBytes(java.util.UUID)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: java.util.List getColors()>
<org.osmdroid.util.GEMFFile$GEMFInputStream: void close()>
<kotlin.jvm.internal.Lambda: java.lang.String toString()>
<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode[] realloc()>
<org.osmdroid.util.MapTileArea: int getRight()>
<org.osmdroid.util.TileSystem: double cleanLongitude(double)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[],int)>
<com.fasterxml.jackson.core.util.Separators: char getObjectFieldValueSeparator()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void close()>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: java.lang.String getCurrentName()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeFieldName(java.lang.String)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler)>
<com.fasterxml.jackson.databind.ext.NioPathSerializer: void <init>()>
<kotlin.collections.EmptyMap: java.util.Set entrySet()>
<org.osmdroid.views.overlay.Marker: void setDefaultIcon()>
<kotlinx.coroutines.internal.ThreadSafeHeap: boolean isEmpty()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void smoothToBottom()>
<org.osmdroid.tileprovider.MapTileProviderArray: void runAsyncNextProvider(org.osmdroid.tileprovider.MapTileRequestState)>
<org.osmdroid.views.MapView: android.view.MotionEvent rotateTouchEvent(android.view.MotionEvent)>
<com.android.gpstest.GpsTestActivity: void setupStartState(android.os.Bundle)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker withOverrides(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Value)>
<com.fasterxml.jackson.'annotation'.JsonSubTypes$Type: java.lang.Class value()>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<org.osmdroid.util.PointL: void set(org.osmdroid.util.PointL)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeString(char[],int,int)>
<kotlinx.coroutines.DispatchedTaskKt: boolean isCancellableMode(int)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean allowPrimitiveTypes(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.data.LineRadarDataSet: void setFillColor(int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withoutNext()>
<org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase: void acquire()>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Typing: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.ser.AnyGetterWriter getAnyGetter()>
<org.osmdroid.tileprovider.modules.IArchiveFile: void close()>
<com.github.mikephil.charting.utils.ViewPortHandler: void setMinimumScaleX(float)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateOrGetNextCopy(long)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: void <init>(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase)>
<org.osmdroid.views.CustomZoomButtonsDisplay$HorizontalPosition: void <init>(java.lang.String,int)>
<org.osmdroid.views.MapView: void addOnFirstLayoutListener(org.osmdroid.views.MapView$OnFirstLayoutListener)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.core.SerializableString compileString(java.lang.String)>
<com.android.gpstest.util.DateTimeUtils$Companion: boolean isTimeValid(long)>
<org.osmdroid.views.overlay.TilesOverlay: void protectDisplayedTilesForCache(android.graphics.Canvas,org.osmdroid.views.Projection)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void <init>(int)>
<org.osmdroid.views.overlay.infowindow.BasicInfoWindow$1: void <init>(org.osmdroid.views.overlay.infowindow.BasicInfoWindow)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: int collectFeatureDefaults(java.lang.Class)>
<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KCallable getReflected()>
<kotlinx.coroutines.internal.OpDescriptor: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>
<org.osmdroid.views.overlay.Marker: boolean onSingleTapConfirmed(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.core.util.BufferRecycler: void <init>(int,int)>
<com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider: boolean isDrawValueAboveBarEnabled()>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: com.fasterxml.jackson.'annotation'.JacksonInject$Value forId(java.lang.Object)>
<kotlinx.coroutines.ThreadContextElement: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>
<org.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck: void <init>(android.content.Context)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeNumber(int)>
<kotlinx.coroutines.TimeSource: void parkNanos(java.lang.Object,long)>
<com.github.mikephil.charting.data.Entry$1: java.lang.Object[] newArray(int)>
<com.fasterxml.jackson.core.io.NumberOutput: int outputLong(long,char[],int)>
<com.github.mikephil.charting.components.AxisBase: java.lang.String getFormattedLabel(int)>
<com.github.mikephil.charting.data.DataSet$Rounding: com.github.mikephil.charting.data.DataSet$Rounding[] values()>
<org.osmdroid.views.CustomZoomButtonsController: void startFadeOut()>
<kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(java.lang.Runnable,boolean)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.android.gpstest.util.IOUtils: java.lang.String getGnssHardwareModelName()>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: int getOrderedChildIndex(int)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.ser.ContainerSerializer buildIndexedListSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.views.overlay.LinearRing: void <init>(android.graphics.Path,boolean)>
<com.fasterxml.jackson.databind.util.RawValue: void <init>(java.lang.String)>
<com.github.mikephil.charting.components.Description: java.lang.String getText()>
<org.osmdroid.views.MapView: void onDetachedFromWindow()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Value withOverrides(com.fasterxml.jackson.'annotation'.JsonFormat$Value)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void <clinit>()>
<kotlin.jvm.internal.PropertyReference: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>
<org.osmdroid.util.SegmentClipper: boolean isOnTheSameSideOut(long,long,long,long)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.MapType constructMapType(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect: com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility creatorVisibility()>
<org.osmdroid.tileprovider.BitmapPool: void <clinit>()>
<kotlin.collections.EmptyList: java.lang.String toString()>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap$$ExternalSyntheticBackport0: java.util.Iterator m()>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.components.YAxis getAxis(com.github.mikephil.charting.components.YAxis$AxisDependency)>
<com.fasterxml.jackson.databind.type.TypeBase: java.lang.String toCanonical()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.jsontype.TypeIdResolver typeIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotationMap _getAllAnnotations(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<org.osmdroid.util.LineBuilder: float[] getLines()>
<org.osmdroid.util.GeoPoint: int hashCode()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.ser.impl.WritableObjectId findObjectId(java.lang.Object,com.fasterxml.jackson.'annotation'.ObjectIdGenerator)>
<com.android.gpstest.dialog.ShareDialogFragment$Companion: java.lang.String getKEY_LOCATION()>
<com.fasterxml.jackson.core.io.SerializedString: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSecondarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.introspect.VisibilityChecker findAutoDetectVisibility(com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.introspect.VisibilityChecker)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedField getField()>
<com.android.gpstest.dialog.ShareDialogFragment$Companion: java.lang.String getKEY_LOGGING_ENABLED()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer: com.fasterxml.jackson.databind.JsonSerializer bigDecimalAsStringSerializer()>
<org.osmdroid.util.GarbageCollector$1: void run()>
<org.osmdroid.views.overlay.gestures.RotationGestureOverlay: void <clinit>()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: boolean _empty(java.lang.Object,java.lang.Boolean)>
<org.osmdroid.util.MapTileAreaList: java.util.Iterator iterator()>
<com.github.mikephil.charting.components.YAxis: int getZeroLineColor()>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.renderer.XAxisRenderer getRendererXAxis()>
<com.github.mikephil.charting.data.BaseDataSet: float getFormLineWidth()>
<com.sothree.slidinguppanel.ViewDragHelper: int clampMag(int,int,int)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.util.concurrent.ConcurrentHashMap,java.util.HashMap)>
<com.fasterxml.jackson.databind.MapperFeature: void <clinit>()>
<kotlin.coroutines.CoroutineContext$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: void <init>(java.util.HashMap)>
<com.fasterxml.jackson.'annotation'.JsonIdentityInfo: java.lang.Class scope()>
<com.android.gpstest.map.MapViewModelController: java.lang.String getMode()>
<org.osmdroid.util.BoundingBox: double getLongitudeSpan()>
<kotlin.coroutines.EmptyCoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>
<com.fasterxml.jackson.databind.MapperFeature: boolean enabledByDefault()>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable unwrapImpl(java.lang.Throwable)>
<kotlin.jvm.internal.ClassReference$Companion: void <init>()>
<com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl: void <init>(java.util.Map,java.util.Map)>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<kotlin.reflect.KProperty1: java.lang.Object getDelegate(java.lang.Object)>
<com.fasterxml.jackson.databind.util.BeanUtil: java.lang.Object getDefaultValue(com.fasterxml.jackson.databind.JavaType)>
<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <clinit>()>
<com.github.mikephil.charting.data.BaseEntry: void <init>(float)>
<org.osmdroid.views.MapView: void setOverlayManager(org.osmdroid.views.overlay.OverlayManager)>
<org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase$MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.gpstest.GpsTestActivity: void autoShowWhatsNew()>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void flush()>
<org.osmdroid.tileprovider.MapTilePreCache: long next()>
<kotlinx.coroutines.EventLoopImplBase: void enqueue(java.lang.Runnable)>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<com.fasterxml.jackson.databind.ser.std.BooleanSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerators$None: void <init>()>
<kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext)>
<kotlin.jvm.internal.PropertyReference: kotlin.reflect.KProperty getReflected()>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: boolean _empty(com.fasterxml.jackson.'annotation'.Nulls,com.fasterxml.jackson.'annotation'.Nulls)>
<kotlin.ranges.IntProgression: int getLast()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String classNameOf(java.lang.Object)>
<kotlinx.coroutines.scheduling.NanoTimeSource: long nanoTime()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>
<com.github.mikephil.charting.utils.Utils: int getMaximumFlingVelocity()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$StringKeySerializer: void <init>()>
<com.github.mikephil.charting.data.BaseDataSet: com.github.mikephil.charting.formatter.IValueFormatter getValueFormatter()>
<kotlinx.coroutines.MainCoroutineDispatcher: java.lang.String toString()>
<org.metalev.multitouch.controller.MultiTouchController: boolean onTouchEvent(android.view.MotionEvent)>
<kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>
<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeFieldName(com.fasterxml.jackson.core.SerializableString)>
<com.github.mikephil.charting.data.BarData: float getBarWidth()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: com.fasterxml.jackson.databind.introspect.Annotated withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<org.osmdroid.util.MyMath: long floorToLong(double)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.'annotation'.JsonSetter$Value getDefaultSetterInfo()>
<org.osmdroid.util.BoundingBox: org.osmdroid.util.BoundingBox fromGeoPointsSafe(java.util.List)>
<org.osmdroid.util.MapTileArea$1: java.lang.Long next()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator emptyIterator()>
<com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl: void <init>(java.util.Map)>
<kotlinx.coroutines.StandaloneCoroutine: boolean handleJobException(java.lang.Throwable)>
<kotlinx.coroutines.Unconfined: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
<org.osmdroid.views.CustomZoomButtonsController: void draw(android.graphics.Canvas)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: boolean needsFormatter()>
<kotlinx.coroutines.DispatchedContinuationKt: void resumeCancellableWith(kotlin.coroutines.Continuation,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructWriter(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.ser.PropertyBuilder,boolean,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<org.osmdroid.tileprovider.modules.TileDownloader: void <init>()>
<kotlinx.coroutines.JobSupport: boolean isCompleted()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Boolean findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties: java.lang.String[] value()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)>
<com.android.gpstest.GpsTestActivity: void init()>
<kotlin.jvm.KotlinReflectionNotSupportedError: void <init>()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void afterTask(int)>
<org.osmdroid.tileprovider.MapTileProviderBase: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.cfg.MapperConfigBase _withMapperFeatures(int)>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: void <init>(com.fasterxml.jackson.databind.PropertyName,java.lang.Class,java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.databind.JavaType: boolean isContainerType()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMember getTypeId()>
<com.fasterxml.jackson.databind.JavaType: boolean isEnumType()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean anyIgnorals()>
<kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.overlay.TilesOverlay: void <init>(org.osmdroid.tileprovider.MapTileProviderBase,android.content.Context,boolean,boolean)>
<com.fasterxml.jackson.core.base.GeneratorBase: void writeRawValue(java.lang.String)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setMaxVisibleValueCount(int)>
<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle getParentHandle()>
<com.github.mikephil.charting.highlight.HorizontalBarHighlighter: java.util.List buildHighlights(com.github.mikephil.charting.interfaces.datasets.IDataSet,int,float,com.github.mikephil.charting.data.DataSet$Rounding)>
<com.github.mikephil.charting.listener.ChartTouchListener$ChartGesture: com.github.mikephil.charting.listener.ChartTouchListener$ChartGesture[] values()>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type: void <clinit>()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl: void <init>(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.github.mikephil.charting.data.ChartData: com.github.mikephil.charting.interfaces.datasets.IDataSet getFirstRight(java.util.List)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Class[] findViews()>
<org.osmdroid.util.GEMFFile$GEMFInputStream: int available()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _handleResolvable(com.fasterxml.jackson.databind.JsonSerializer)>
<com.github.mikephil.charting.charts.BarChart: boolean isHighlightFullBarEnabled()>
<org.osmdroid.util.MapTileAreaZoomComputer: void <init>(int)>
<org.osmdroid.views.overlay.OverlayWithIW: void closeInfoWindow()>
<com.github.mikephil.charting.renderer.BarLineScatterCandleBubbleRenderer: boolean shouldDrawValues(com.github.mikephil.charting.interfaces.datasets.IDataSet)>
<org.osmdroid.config.DefaultConfigurationProvider: void load(android.content.Context,android.content.SharedPreferences)>
<com.github.mikephil.charting.renderer.BarLineScatterCandleBubbleRenderer$XBounds: void set(com.github.mikephil.charting.interfaces.dataprovider.BarLineScatterCandleBubbleDataProvider,com.github.mikephil.charting.interfaces.datasets.IBarLineScatterCandleBubbleDataSet)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>
<com.android.gpstest.util.UIUtils$2: void onAnimationEnd(android.animation.Animator)>
<com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature[] values()>
<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeEndObject(com.fasterxml.jackson.core.JsonGenerator,int)>
<com.github.mikephil.charting.data.Entry: java.lang.String toString()>
<org.osmdroid.views.Projection: void <init>(org.osmdroid.views.MapView)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: boolean isDashedLineEnabled()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeWithType(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: int getMinimumZoomLevel()>
<com.fasterxml.jackson.databind.util.BeanUtil: boolean isCglibGetCallbacks(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap: void <init>()>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder typeProperty(java.lang.String)>
<com.android.gpstest.DeviceInfoViewModel: java.util.Set getSupportedSbas()>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: java.lang.String toString()>
<com.github.mikephil.charting.data.LineDataSet$Mode: com.github.mikephil.charting.data.LineDataSet$Mode[] values()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.type.CollectionLikeType withStaticTyping()>
<kotlin.coroutines.EmptyCoroutineContext: void <init>()>
<com.fasterxml.jackson.databind.util.ArrayIterator: java.lang.Object next()>
<kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>
<kotlinx.coroutines.SupervisorJobImpl: boolean childCancelled(java.lang.Throwable)>
<kotlin.ranges.RangesKt___RangesKt: long coerceAtMost(long,long)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeRawLong(java.lang.String)>
<org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String[])>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean isJacksonStdImpl(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$SingleView: void <init>(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.lang.Class)>
<com.android.gpstest.model.SbasType: void <clinit>()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.jsontype.TypeSerializer getTypeSerializer()>
<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: void complete(java.lang.Object,java.lang.Object)>
<org.osmdroid.util.Delay: boolean shouldWait()>
<com.android.gpstest.util.IOUtils: void <clinit>()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: java.lang.String toString()>
<org.osmdroid.views.overlay.milestones.MilestoneManager: void setDistances(double[])>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: java.lang.Object _getReferenced(java.util.concurrent.atomic.AtomicReference)>
<com.fasterxml.jackson.databind.JsonSerializable: void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.modules.TileWriter: boolean isSymbolicDirectoryLink(java.io.File,java.io.File)>
<kotlinx.coroutines.Job$DefaultImpls: java.lang.Object fold(kotlinx.coroutines.Job,java.lang.Object,kotlin.jvm.functions.Function2)>
<com.github.mikephil.charting.components.Legend$LegendDirection: com.github.mikephil.charting.components.Legend$LegendDirection[] values()>
<kotlinx.coroutines.scheduling.Task: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap _methods()>
<org.osmdroid.util.TileSystem: java.lang.String toStringLongitudeSpan()>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void <clinit>()>
<kotlinx.coroutines.Unconfined: void <clinit>()>
<org.osmdroid.util.SegmentIntersection: boolean divisionByZeroSideEffectX(double,double,double,double,double,double,double,double,org.osmdroid.util.PointL)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromVariable(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.TypeVariable,com.fasterxml.jackson.databind.type.TypeBindings)>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.BeanDescription introspect(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer: void <init>(java.lang.Class)>
<com.fasterxml.jackson.core.Base64Variant: void encodeBase64Partial(java.lang.StringBuilder,int,int)>
<org.osmdroid.util.GeoPoint$1: java.lang.Object createFromParcel(android.os.Parcel)>
<org.osmdroid.tileprovider.modules.TileWriter: void onDetach()>
<com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver: java.lang.String idFromValue(java.lang.Object)>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition construct(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.PropertyMetadata,com.fasterxml.jackson.'annotation'.JsonInclude$Include)>
<com.fasterxml.jackson.databind.exc.InvalidDefinitionException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String,com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.views.CustomZoomButtonsDisplay: float getFirstTop(int)>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<org.osmdroid.views.CustomZoomButtonsController: void setZoomInEnabled(boolean)>
<com.fasterxml.jackson.databind.cfg.ConfigOverrides: com.fasterxml.jackson.databind.cfg.ConfigOverride findOverride(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>
<com.fasterxml.jackson.databind.type.MapLikeType: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,java.lang.Object,java.lang.Object,boolean)>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.JavaType[] typeParameterArray()>
<org.osmdroid.views.MapView: double getZoomLevelDouble()>
<com.android.gpstest.model.GnssType: void <clinit>()>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: com.fasterxml.jackson.databind.JsonSerializer modifyMapSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.MapType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Include getValueInclusion()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setDragOffsetX(float)>
<com.github.mikephil.charting.interfaces.datasets.ILineScatterCandleRadarDataSet: float getHighlightLineWidth()>
<com.fasterxml.jackson.'annotation'.JacksonInject: java.lang.String value()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.cfg.MapperConfigBase 'with'(com.fasterxml.jackson.databind.MapperFeature[])>
<com.fasterxml.jackson.'annotation'.JsonUnwrapped: java.lang.String prefix()>
<kotlinx.coroutines.YieldContext$Key: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withFilterId(java.lang.Object)>
<org.osmdroid.views.overlay.infowindow.InfoWindow: void close()>
<com.fasterxml.jackson.databind.util.NameTransformer$1: void <init>(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.core.JsonStreamContext: java.lang.String toString()>
<kotlinx.coroutines.android.HandlerContext: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.type.ClassKey: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
<org.osmdroid.views.overlay.MapEventsOverlay: boolean onSingleTapConfirmed(android.view.MotionEvent,org.osmdroid.views.MapView)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore removeSlowPath(int,int)>
<com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>
<org.osmdroid.tileprovider.MapTileProviderBase: int getMinimumZoomLevel()>
<com.github.mikephil.charting.data.BaseDataSet: com.github.mikephil.charting.components.YAxis$AxisDependency getAxisDependency()>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: void performHighlightDrag(android.view.MotionEvent)>
<kotlinx.coroutines.internal.ThreadContextKt: void <clinit>()>
<com.fasterxml.jackson.'annotation'.JsonPropertyOrder: java.lang.String[] value()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.ser.std.CollectionSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionType withContentTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<org.osmdroid.tileprovider.MapTileProviderBasic: void detach()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer: com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.tileprovider.tilesource.TileSourceFactory$2: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String[],java.lang.String)>
<com.sothree.slidinguppanel.ViewDragHelper: int computeSettleDuration(android.view.View,int,int,int,int)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: float getFormLineWidth()>
<com.github.mikephil.charting.data.BaseDataSet: void setAxisDependency(com.github.mikephil.charting.components.YAxis$AxisDependency)>
<kotlin.internal.PlatformImplementations: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView: void assignNullSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<com.github.mikephil.charting.interfaces.datasets.ILineRadarDataSet: float getLineWidth()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter: com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter rename(com.fasterxml.jackson.databind.util.NameTransformer)>
<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>
<com.fasterxml.jackson.databind.util.RawValue: int hashCode()>
<org.osmdroid.tileprovider.IMapTileProviderCallback: void mapTileRequestFailedExceedsMaxQueueSize(org.osmdroid.tileprovider.MapTileRequestState)>
<com.android.gpstest.model.Satellite: void <init>(java.lang.String,java.util.Map)>
<kotlinx.coroutines.CoroutineExceptionHandlerImplKt: void handleCoroutineExceptionImpl(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>
<org.osmdroid.util.BoundingBox$1: org.osmdroid.util.BoundingBox createFromParcel(android.os.Parcel)>
<com.android.gpstest.GpsTestActivity$2: void onFirstFix(int)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
<kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>
<kotlinx.coroutines.JobSupport$Finishing: java.util.ArrayList allocateList()>
<com.android.gpstest.io.BaseFileLogger: java.io.File getFile()>
<org.osmdroid.util.MapTileIndex: int getX(long)>
<org.osmdroid.util.MapTileArea: int getBottom()>
<org.osmdroid.util.GeoPoint$1: org.osmdroid.util.GeoPoint createFromParcel(android.os.Parcel)>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,android.content.res.AssetManager,org.osmdroid.tileprovider.tilesource.ITileSource,int,int)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isSetterVisible(java.lang.reflect.Method)>
<kotlin.UninitializedPropertyAccessException: void <init>()>
<kotlinx.coroutines.JobSupport: java.lang.Object finalizeFinishingState(kotlinx.coroutines.JobSupport$Finishing,java.lang.Object)>
<kotlinx.coroutines.EventLoopKt: kotlinx.coroutines.EventLoop createEventLoop()>
<com.fasterxml.jackson.databind.ser.std.BooleanSerializer$AsNumber: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getReferencedType()>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: com.fasterxml.jackson.'annotation'.JacksonInject$Value construct(java.lang.Object,java.lang.Boolean)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean hasGetter()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.JavaType: boolean hasHandlers()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer$TypeSerializerRerouter: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As getTypeInclusion()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void _serialize(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: com.fasterxml.jackson.databind.introspect.AnnotatedMethod constructFactoryCreator(java.lang.reflect.Method,java.lang.reflect.Method)>
<kotlin.collections.EmptyMap: java.util.Set keySet()>
<org.osmdroid.views.overlay.Polygon: void <init>(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeNull()>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onKeyUp(int,android.view.KeyEvent,org.osmdroid.views.MapView)>
<kotlin.collections.ArraysKt___ArraysJvmKt: void sortWith(java.lang.Object[],java.util.Comparator)>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: java.util.Set _merge(java.util.Set,java.util.Set)>
<org.osmdroid.tileprovider.BitmapPool$1: void <init>(org.osmdroid.tileprovider.BitmapPool,android.graphics.drawable.Drawable)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>
<org.osmdroid.views.MapView: void resetMultiTouchScale()>
<com.fasterxml.jackson.databind.type.ArrayType: boolean isArrayType()>
<com.android.gpstest.model.SatelliteMetadata: int getNumSignalsUsed()>
<org.osmdroid.api.IMapController: boolean zoomOut()>
<com.fasterxml.jackson.'annotation'.JsonProperty: com.fasterxml.jackson.'annotation'.JsonProperty$Access access()>
<org.osmdroid.views.overlay.infowindow.InfoWindow: java.lang.Object getRelatedObject()>
<kotlinx.coroutines.internal.AtomicOp: java.lang.Object decide(java.lang.Object)>
<org.osmdroid.tileprovider.modules.MapTileApproximater: android.graphics.Bitmap getTileBitmap(int)>
<com.github.mikephil.charting.listener.OnChartGestureListener: void onChartScale(android.view.MotionEvent,float,float)>
<com.github.mikephil.charting.highlight.BarHighlighter: com.github.mikephil.charting.highlight.Highlight getHighlight(float,float)>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.utils.ViewPortHandler getViewPortHandler()>
<org.osmdroid.tileprovider.MapTileRequestState: long getMapTile()>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: void renderAxisLabels(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: java.lang.Object getCurrentValue()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getSetter()>
<org.osmdroid.views.overlay.OverlayManager: void onResume()>
<com.github.mikephil.charting.charts.BarLineChartBase: float getLowestVisibleX()>
<com.fasterxml.jackson.core.io.JsonStringEncoder: int _appendNumeric(int,char[])>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.JavaType getPrimaryType()>
<com.android.gpstest.GpsStatusFragment: void lambda$showSortByDialog$2(android.content.DialogInterface,int)>
<com.fasterxml.jackson.core.JsonGenerator: void writeRawValue(com.fasterxml.jackson.core.SerializableString)>
<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.MPPointD getPixelForValues(float,float)>
<org.osmdroid.util.GeoPoint$1: org.osmdroid.util.GeoPoint[] newArray(int)>
<org.osmdroid.util.MapTileAreaList: boolean contains(long)>
<kotlinx.coroutines.Job: boolean isActive()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.jsontype.SubtypeResolver getSubtypeResolver()>
<org.osmdroid.views.overlay.Marker: void draw(android.graphics.Canvas,org.osmdroid.views.Projection)>
<com.github.mikephil.charting.renderer.YAxisRenderer: void drawZeroLine(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.JavaType getSerializationType()>
<kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>
<org.osmdroid.config.DefaultConfigurationProvider: java.io.File getOsmdroidTileCache()>
<org.osmdroid.views.overlay.TilesOverlay$OverlayTileLooper: void finaliseLoop()>
<com.github.mikephil.charting.renderer.LineRadarRenderer: void drawFilledPath(android.graphics.Canvas,android.graphics.Path,android.graphics.drawable.Drawable)>
<org.osmdroid.views.overlay.Polyline: void onDetach(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<kotlin.jvm.internal.PropertyReference1Impl: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Single: void <init>(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<com.android.gpstest.GpsStatusFragment: void onGnssStarted()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: java.util.TimeZone getTimeZone()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setDragYEnabled(boolean)>
<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object getAttribute(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonValue: boolean value()>
<org.osmdroid.views.MapView: void setExpectedCenter(org.osmdroid.api.IGeoPoint)>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: java.lang.String getThreadGroupName()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: android.graphics.Bitmap approximateTileFromLowerZoom(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase,long,int)>
<com.github.mikephil.charting.utils.Utils: int getDecimals(float)>
<kotlin.collections.EmptySet: void <init>()>
<org.osmdroid.util.Distance: double getProjectionFactorToSegment(double,double,double,double,double,double)>
<com.fasterxml.jackson.'annotation'.SimpleObjectIdResolver: void <init>()>
<kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>
<org.osmdroid.views.overlay.OverlayManager: void onDetach(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void <init>(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.views.overlay.Polygon: void setPoints(java.util.List)>
<kotlin.NoWhenBranchMatchedException: void <init>()>
<kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer withFilterId(java.lang.Object)>
<kotlin.jvm.internal.PropertyReference: boolean isLateinit()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer,java.lang.Boolean)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serialize(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.util.TileSystem: org.osmdroid.util.GeoPoint getGeoFromMercator(long,long,double,org.osmdroid.util.GeoPoint,boolean,boolean)>
<org.osmdroid.views.MapView: java.lang.Object getDraggableObjectAtPoint(org.metalev.multitouch.controller.MultiTouchController$PointInfo)>
<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,java.lang.String)>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: java.lang.String getName()>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer$1: void <clinit>()>
<com.android.gpstest.GpsTestActivity: void checkLocationOutput(android.content.SharedPreferences)>
<kotlinx.coroutines.JobKt: void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)>
<com.github.mikephil.charting.charts.Chart: void setOnTouchListener(com.github.mikephil.charting.listener.ChartTouchListener)>
<org.osmdroid.views.Projection: android.graphics.Point rotateAndScalePoint(int,int,android.graphics.Point)>
<com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver: com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver construct(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>
<com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructGeneralizedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<kotlinx.coroutines.Job$Key: void <clinit>()>
<org.osmdroid.api.IGeoPoint: double getLatitude()>
<com.github.mikephil.charting.buffer.BarBuffer: void setInverted(boolean)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.android.gpstest.GpsTestActivity$2: void onSatelliteStatusChanged(android.location.GnssStatus)>
<com.android.gpstest.GpsTestActivity$6: void onClick(android.view.View)>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerators$Base: java.lang.Class getScope()>
<kotlinx.coroutines.internal.ThreadContextKt$updateState$1: void <init>()>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id valueOf(java.lang.String)>
<org.osmdroid.config.IConfigurationProvider: short getTileDownloadMaxQueueSize()>
<org.osmdroid.tileprovider.tilesource.ITileSource: java.lang.String getTileRelativeFilenameString(long)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findKeySerializer(java.lang.Class,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Chunk(int,char[],int)>
<kotlinx.coroutines.JobSupport$Finishing: void setRootCause(java.lang.Throwable)>
<org.osmdroid.views.drawing.MapSnapshot: boolean isUIThread()>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer$TypeSerializerRerouter: com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>
<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>
<com.fasterxml.jackson.databind.ser.impl.WritableObjectId: void writeAsField(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<kotlinx.coroutines.Empty: boolean isActive()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: android.graphics.Typeface getValueTypeface()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker 'with'(com.fasterxml.jackson.'annotation'.JsonAutoDetect)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotatedClass resolve(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nameOf(java.lang.Class)>
<com.github.mikephil.charting.charts.BarChart: com.github.mikephil.charting.data.BarData getBarData()>
<org.osmdroid.util.TileSystem: double getMinLatitude()>
<com.fasterxml.jackson.core.util.BufferRecycler: void releaseCharBuffer(int,char[])>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: com.fasterxml.jackson.databind.util.Annotations asAnnotations()>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void releaseIntercepted()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.core.JsonGenerator getGenerator()>
<kotlinx.coroutines.ThreadContextElement$DefaultImpls: java.lang.Object fold(kotlinx.coroutines.ThreadContextElement,java.lang.Object,kotlin.jvm.functions.Function2)>
<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.'annotation'.JsonSetter$Value getSetterInfo()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeNumber(short)>
<org.osmdroid.views.Projection: boolean setMapScroll(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.ser.BeanSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.metalev.multitouch.controller.MultiTouchController$MultiTouchObjectCanvas: void selectObject(java.lang.Object,org.metalev.multitouch.controller.MultiTouchController$PointInfo)>
<kotlinx.coroutines.YieldContext$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<kotlinx.coroutines.JobSupport: java.lang.String toDebugString()>
<com.fasterxml.jackson.databind.BeanProperty$Std: com.fasterxml.jackson.databind.JavaType getType()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.animation.ChartAnimator getAnimator()>
<kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker withGetterVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.core.JsonToken: void <init>(java.lang.String,int,java.lang.String,int)>
<com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledByDefault()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: void findAndAddVirtualProperties(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.util.List)>
<kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaObjectType(kotlin.reflect.KClass)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>
<com.github.mikephil.charting.buffer.BarBuffer: void <init>(int,int,boolean)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: void findAndAddVirtualProperties(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.util.List)>
<kotlin.jvm.internal.ReflectionFactory: java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda)>
<com.github.mikephil.charting.data.BaseEntry: java.lang.Object getData()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCountOrDefault(java.lang.Class,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.Object getValue(java.lang.Object)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: boolean smoothSlideTo(float,int)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.core.Base64Variant getBase64Variant()>
<org.osmdroid.views.MapView: void setTilesScaledToDpi(boolean)>
<kotlinx.coroutines.internal.LockFreeLinkedListKt: void <clinit>()>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: java.lang.Class getContentFilter()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$LowerCaseStrategy: java.lang.String translate(java.lang.String)>
<kotlin.Result: void <clinit>()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findBeanOrAddOnSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.'annotation'.JsonInclude$Value findInclusion()>
<org.osmdroid.tileprovider.MapTileProviderBase$ZoomOutTileLooper: void computeTile(long,int,int)>
<org.osmdroid.views.MapView: double getLatitudeSpanDouble()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String getFullName()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: java.lang.String buildCanonicalName()>
<kotlinx.coroutines.NonDisposableHandle: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: java.util.List _findPotentialFactories(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<org.osmdroid.util.MapTileIndex: long getTileIndex(int,int,int)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.android.gpstest.util.MathUtils: boolean fuzzyEquals(double,double,double)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$LongSerializer: void <init>(java.lang.Class)>
<org.osmdroid.tileprovider.IRegisterReceiver: void unregisterReceiver(android.content.BroadcastReceiver)>
<org.osmdroid.views.Projection: void refresh()>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: void _addRawSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As include()>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onTouchEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.tileprovider.MapTileProviderBase: org.osmdroid.tileprovider.tilesource.ITileSource getTileSource()>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider$TileLoader: void <init>(org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeSegment(int)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<kotlinx.coroutines.internal.ThreadSafeHeap: void addImpl(kotlinx.coroutines.internal.ThreadSafeHeapNode)>
<kotlin.collections.IntIterator: java.lang.Integer next()>
<com.github.mikephil.charting.data.LineDataSet: com.github.mikephil.charting.formatter.IFillFormatter getFillFormatter()>
<kotlinx.coroutines.InactiveNodeList: void <init>(kotlinx.coroutines.NodeList)>
<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>
<kotlin.Result: boolean isFailure-impl(java.lang.Object)>
<org.osmdroid.views.Projection: android.graphics.Point toPixels(org.osmdroid.api.IGeoPoint,android.graphics.Point,boolean)>
<com.fasterxml.jackson.databind.PropertyName: java.lang.String getSimpleName()>
<kotlinx.coroutines.CoroutineName$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<kotlin.comparisons.ComparisonsKt__ComparisonsKt: int compareValuesByImpl$ComparisonsKt__ComparisonsKt(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1[])>
<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<org.osmdroid.views.MapController$ZoomAnimationListener: void onAnimationStart(android.view.animation.Animation)>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext: void <init>(com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.deser.DeserializerCache)>
<org.osmdroid.util.MapTileArea$1: void remove()>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void close()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setPanelStateInternal(com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState)>
<com.github.mikephil.charting.data.LineRadarDataSet: int getFillAlpha()>
<com.github.mikephil.charting.jobs.ViewPortJob: void <init>(com.github.mikephil.charting.utils.ViewPortHandler,float,float,com.github.mikephil.charting.utils.Transformer,android.view.View)>
<com.fasterxml.jackson.databind.type.TypeBase: int containedTypeCount()>
<com.fasterxml.jackson.core.JsonGenerator: int writeBinary(java.io.InputStream,int)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: java.util.List getProperties()>
<org.osmdroid.views.MapView$OnFirstLayoutListener: void onFirstLayout(android.view.View,int,int,int,int)>
<kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>
<com.github.mikephil.charting.listener.OnChartValueSelectedListener: void onNothingSelected()>
<org.osmdroid.util.TileSystem: double getLatitudeFromY01(double,boolean)>
<com.android.gpstest.GpsStatusFragment: void onOrientationChanged(double,double)>
<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: void <init>(java.lang.Class,java.lang.Boolean,java.text.DateFormat)>
<kotlinx.coroutines.CoroutineId: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>
<com.github.mikephil.charting.renderer.XAxisRendererHorizontalBarChart: void drawLabels(android.graphics.Canvas,float,com.github.mikephil.charting.utils.MPPointF)>
<kotlinx.coroutines.ChildHandleNode: void <init>(kotlinx.coroutines.JobSupport,kotlinx.coroutines.ChildJob)>
<com.android.gpstest.GpsTestActivity: void addNavMessageListener()>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: int hashCode()>
<org.osmdroid.util.MapTileList: void clear()>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: boolean canUseFor(com.fasterxml.jackson.'annotation'.ObjectIdGenerator)>
<kotlin.jvm.internal.CallableReference: java.util.List getParameters()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$LongSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.MemberKey: void <init>(java.lang.reflect.Method)>
<org.osmdroid.util.MyMath: int getNextSquareNumberAbove(float)>
<com.android.gpstest.GpsStatusFragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<org.osmdroid.views.overlay.Marker: void showInfoWindow()>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer$TypeSerializerRerouter: void <init>(com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder inclusion(com.fasterxml.jackson.'annotation'.JsonTypeInfo$As)>
<com.github.mikephil.charting.data.Entry$1: void <init>()>
<com.fasterxml.jackson.'annotation'.OptBoolean: com.fasterxml.jackson.'annotation'.OptBoolean[] values()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.DeserializationFeature: boolean enabledByDefault()>
<com.android.gpstest.GpsStatusFragment: void sortLists()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.ConfigOverride getConfigOverride(java.lang.Class)>
<com.fasterxml.jackson.core.JsonGenerator: void writeArray(long[],int,int)>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.databind.JavaType getType()>
<org.osmdroid.util.GeoPoint: double getLatitude()>
<org.osmdroid.util.BoundingBox: org.osmdroid.util.BoundingBox clone()>
<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>
<kotlinx.coroutines.JobSupport: kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean,boolean,kotlin.jvm.functions.Function1)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String toString()>
<com.github.mikephil.charting.charts.BarChart: boolean isDrawBarShadowEnabled()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class getRawReturnType()>
<org.osmdroid.views.MapController$ReplayController: void zoomToSpan(double,double)>
<com.github.mikephil.charting.highlight.IHighlighter: com.github.mikephil.charting.highlight.Highlight getHighlight(float,float)>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer: void serialize(java.util.concurrent.atomic.AtomicInteger,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.android.gpstest.util.MathUtils: double checkNonNegative(java.lang.String,double)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.type.MapLikeType withValueHandler(java.lang.Object)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setDragView(int)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: boolean isContainerType()>
<com.github.mikephil.charting.components.LimitLine: float getLineWidth()>
<org.osmdroid.views.overlay.Marker: boolean onTouchEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.tileprovider.MapTileProviderBasic: void <init>(android.content.Context,org.osmdroid.tileprovider.tilesource.ITileSource,org.osmdroid.tileprovider.modules.IFilesystemCache)>
<kotlinx.coroutines.LazyStandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>
<org.osmdroid.views.Projection: boolean isVerticalWrapEnabled()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromWellKnownInterface(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: int getColor()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class findEnumType(java.lang.Enum)>
<kotlinx.coroutines.JobSupport: void parentCancelled(kotlinx.coroutines.ParentJob)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void drawGridLine(android.graphics.Canvas,float,float,android.graphics.Path)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Boolean hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value 'from'(com.fasterxml.jackson.'annotation'.JsonInclude)>
<org.osmdroid.views.overlay.Polygon: boolean onClickDefault(org.osmdroid.views.overlay.Polygon,org.osmdroid.views.MapView,org.osmdroid.util.GeoPoint)>
<org.osmdroid.views.CustomZoomButtonsDisplay: boolean isTouched(android.view.MotionEvent,boolean)>
<com.fasterxml.jackson.databind.PropertyName: com.fasterxml.jackson.core.SerializableString simpleAsEncoded(com.fasterxml.jackson.databind.cfg.MapperConfig)>
<com.fasterxml.jackson.databind.JavaType: boolean equals(java.lang.Object)>
<kotlinx.coroutines.DispatchedTask: kotlin.coroutines.Continuation getDelegate$kotlinx_coroutines_core()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.listener.OnChartGestureListener getOnChartGestureListener()>
<kotlinx.coroutines.EventLoop: boolean isUnconfinedQueueEmpty()>
<com.android.gpstest.GpsTestActivity: void handleLegacyMeasurementStatus(int)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.String toString()>
<com.github.mikephil.charting.components.Legend$LegendPosition: void <init>(java.lang.String,int)>
<kotlinx.coroutines.JobSupport$ChildCompletion: void <init>(kotlinx.coroutines.JobSupport,kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>
<com.github.mikephil.charting.utils.ColorTemplate: int rgb(java.lang.String)>
<kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)>
<org.osmdroid.tileprovider.MapTileProviderBase: boolean useDataConnection()>
<org.osmdroid.tileprovider.ReusableBitmapDrawable: void finishUsingDrawable()>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder typeIdVisibility(boolean)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$SingleView: void assignNullSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.tileprovider.modules.MBTilesFileArchive: java.io.InputStream getInputStream(org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _appendEndMarker(com.fasterxml.jackson.core.JsonToken)>
<com.sothree.slidinguppanel.ScrollableViewHelper: int getScrollableViewScrollPosition(android.view.View,boolean)>
<org.osmdroid.views.Projection: long getMercatorXFromPixel(int)>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext withDupDetector(com.fasterxml.jackson.core.json.DupDetector)>
<org.osmdroid.util.TileSystem: java.lang.String toStringLatitudeSpan()>
<kotlinx.coroutines.EventLoop: long getNextTime()>
<com.fasterxml.jackson.core.Base64Variant: void <init>(com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,int)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)>
<org.osmdroid.config.DefaultConfigurationProvider: boolean isMapViewHardwareAccelerated()>
<kotlin.coroutines.CombinedContext$toString$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<org.osmdroid.util.GeoPoint: org.osmdroid.util.GeoPoint destinationPoint(double,double)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>
<com.android.gpstest.model.ConstellationFamily: java.util.Map getSatellites()>
<org.osmdroid.tileprovider.tilesource.TileSourceFactory: org.osmdroid.tileprovider.tilesource.ITileSource getTileSource(java.lang.String)>
<com.android.gpstest.GpsTestActivity$2: void onStarted()>
<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()>
<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: int getCircleColorCount()>
<com.fasterxml.jackson.'annotation'.JsonProperty: java.lang.String value()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter: void <init>()>
<kotlin.jvm.internal.MutablePropertyReference1: void <init>()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: com.github.mikephil.charting.components.YAxis$AxisDependency getAxisDependency()>
<com.fasterxml.jackson.core.base.GeneratorBase: void <init>(int,com.fasterxml.jackson.core.ObjectCodec)>
<kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext)>
<kotlin.coroutines.jvm.internal.ModuleNameRetriever: java.lang.String getModuleName(kotlin.coroutines.jvm.internal.BaseContinuationImpl)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void _serializeObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.ser.impl.WritableObjectId)>
<com.android.gpstest.dialog.ShareLocationFragment$onViewCreated$4: void <init>(android.location.Location,android.widget.TextView,android.widget.CheckBox)>
<com.android.gpstest.model.SatelliteMetadata: int getNumSignalsInView()>
<org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper: void handleTile(long,int,int)>
<org.osmdroid.views.Projection: double getProjectedPowerDifference()>
<kotlin.collections.ArraysUtilJVM: java.util.List asList(java.lang.Object[])>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations: void <init>()>
<org.osmdroid.util.MapTileArea: org.osmdroid.util.MapTileArea set(int,int,int,int,int)>
<kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()>
<kotlinx.coroutines.JobSupport$Finishing: void setCompleting(boolean)>
<org.osmdroid.views.overlay.DefaultOverlayManager$1: void <init>(org.osmdroid.views.overlay.DefaultOverlayManager)>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object)>
<org.osmdroid.util.SegmentClipper: void add(long,long)>
<com.android.gpstest.GpsTestActivity$5: void <init>(com.android.gpstest.GpsTestActivity)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean canZoomOutMoreY()>
<com.github.mikephil.charting.data.LineRadarDataSet: float getLineWidth()>
<org.osmdroid.api.IGeoPoint: double getLongitude()>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: boolean inverted()>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: long getEventTime()>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.CollectionSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<kotlin.coroutines.jvm.internal.DebugMetadata: java.lang.String c()>
<com.fasterxml.jackson.databind.PropertyMetadata: java.lang.Integer getIndex()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder typeResolverBuilderInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>
<org.osmdroid.views.MapView$MapViewZoomListener: void onVisibilityChanged(boolean)>
<com.fasterxml.jackson.databind.jsontype.NamedType: boolean equals(java.lang.Object)>
<org.osmdroid.util.TileSystemWebMercator: double getMinLongitude()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter: void writeIndentation(com.fasterxml.jackson.core.JsonGenerator,int)>
<com.github.mikephil.charting.charts.HorizontalBarChart: float getHighestVisibleX()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$1: java.lang.Class[] withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCount(java.lang.Class,int)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<kotlinx.coroutines.internal.ScopeCoroutine: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>
<com.fasterxml.jackson.databind.exc.InvalidDefinitionException: void <init>(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,com.fasterxml.jackson.databind.JavaType)>
<kotlin.text.StringsKt__StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>
<kotlinx.coroutines.internal.ThreadSafeHeap: boolean remove(kotlinx.coroutines.internal.ThreadSafeHeapNode)>
<org.osmdroid.config.IConfigurationProvider: java.io.File getOsmdroidBasePath()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase: java.lang.String nameForSetterMethod(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String)>
<kotlinx.coroutines.DispatchedCoroutine: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked _removeNonVisible(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<kotlinx.coroutines.CoroutineName: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.AnnotatedMember getJsonValueAccessor()>
<com.android.gpstest.GpsStatusFragment$1: void onChanged(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String getCurrentName()>
<com.github.mikephil.charting.highlight.ChartHighlighter: com.github.mikephil.charting.highlight.Highlight getHighlightForX(float,float,float)>
<org.osmdroid.util.Distance: double getProjectionFactorToLine(double,double,double,double,double,double)>
<com.fasterxml.jackson.core.io.IOContext: void releaseNameCopyBuffer(char[])>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.util.Set)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: boolean isNumeric()>
<com.fasterxml.jackson.databind.type.ReferenceType: boolean isReferenceType()>
<com.android.gpstest.util.SatelliteUtils: boolean isVerticalAccuracySupported(android.location.Location)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void assignSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler,long,int,java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)>
<kotlinx.coroutines.internal.OpDescriptor: void <init>()>
<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>
<com.android.gpstest.NavigationDrawerFragment$1: void onDrawerOpened(android.view.View)>
<com.fasterxml.jackson.core.io.SerializedString: void <clinit>()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void <init>(com.fasterxml.jackson.core.util.DefaultPrettyPrinter,com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.github.mikephil.charting.data.BaseDataSet: boolean isVisible()>
<org.osmdroid.views.MapController$ReplayController: void setCenter(org.osmdroid.api.IGeoPoint)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void serialize(int[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer: void serializeWithType(com.fasterxml.jackson.databind.util.TokenBuffer,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.tileprovider.MapTileProviderBasic: void <init>(android.content.Context,org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.github.mikephil.charting.charts.Chart: float[] getMarkerPosition(com.github.mikephil.charting.highlight.Highlight)>
<com.android.gpstest.model.SatelliteMetadata: int getNumSatsTotal()>
<com.github.mikephil.charting.charts.Chart: void setLogEnabled(boolean)>
<org.osmdroid.tileprovider.MapTileProviderArray: void mapTileRequestFailedExceedsMaxQueueSize(org.osmdroid.tileprovider.MapTileRequestState)>
<com.fasterxml.jackson.databind.ser.std.MapProperty: void <init>(com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.BeanProperty)>
<com.android.gpstest.DeviceInfoViewModel: boolean gotFirstFix()>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader getTileLoader()>
<org.osmdroid.util.TileSystem: org.osmdroid.util.PointL getMercatorFromGeo(double,double,double,org.osmdroid.util.PointL,boolean)>
<com.fasterxml.jackson.databind.jsontype.NamedType: void <init>(java.lang.Class)>
<com.github.mikephil.charting.buffer.BarBuffer: void setBarWidth(float)>
<org.osmdroid.tileprovider.modules.IArchiveFile: void init(java.io.File)>
<com.fasterxml.jackson.core.ObjectCodec: void <init>()>
<com.fasterxml.jackson.core.SerializableString: int appendQuoted(char[],int)>
<com.fasterxml.jackson.databind.type.TypeBindings: boolean isEmpty()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setClipValuesToContent(boolean)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.String[])>
<org.osmdroid.util.ListPointL: void <init>()>
<com.fasterxml.jackson.'annotation'.JsonSubTypes: com.fasterxml.jackson.'annotation'.JsonSubTypes$Type[] value()>
<kotlinx.coroutines.internal.FastServiceLoader: java.util.List loadProviders$kotlinx_coroutines_core(java.lang.Class,java.lang.ClassLoader)>
<com.github.mikephil.charting.components.YAxis$YAxisLabelPosition: com.github.mikephil.charting.components.YAxis$YAxisLabelPosition valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isIsGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.github.mikephil.charting.data.DataSet: int getEntryCount()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartObject()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: void <init>(com.fasterxml.jackson.databind.deser.Deserializers[],com.fasterxml.jackson.databind.deser.KeyDeserializers[],com.fasterxml.jackson.databind.deser.BeanDeserializerModifier[],com.fasterxml.jackson.databind.AbstractTypeResolver[],com.fasterxml.jackson.databind.deser.ValueInstantiators[])>
<org.osmdroid.config.IConfigurationProvider: java.lang.String getUserAgentHttpHeader()>
<com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As getTypeInclusion()>
<org.osmdroid.views.overlay.DefaultOverlayManager: java.util.List overlays()>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType findSuperType(java.lang.Class)>
<kotlinx.coroutines.AbstractCoroutine: void initParentJob$kotlinx_coroutines_core()>
<kotlin.jvm.internal.PropertyReference1Impl: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer$TypeSerializerRerouter: java.lang.String getPropertyName()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase: java.lang.String translateLowerCaseWithSeparator(java.lang.String,char)>
<org.osmdroid.util.BoundingBox: double getActualNorth()>
<org.osmdroid.util.GeoPoint: void <init>(android.os.Parcel,org.osmdroid.util.GeoPoint$1)>
<org.osmdroid.views.MapController$MapAnimatorListener: void onAnimationStart(android.animation.Animator)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: java.lang.String getName()>
<com.fasterxml.jackson.databind.JsonSerializer: com.fasterxml.jackson.databind.JsonSerializer unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)>
<com.fasterxml.jackson.databind.ser.SerializerCache: void addTypedSerializer(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>
<kotlinx.coroutines.JobImpl: void <init>(kotlinx.coroutines.Job)>
<kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: void <init>(com.fasterxml.jackson.databind.cfg.BaseSettings,int)>
<com.github.mikephil.charting.charts.BarLineChartBase: float getHighestVisibleX()>
<org.osmdroid.util.BoundingBox: org.osmdroid.util.BoundingBox readFromParcel(android.os.Parcel)>
<com.github.mikephil.charting.charts.Chart: void setExtraTopOffset(float)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: void onViewReleased(android.view.View,float,float)>
<org.osmdroid.views.overlay.Marker: void setAnchor(float,float)>
<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: java.lang.Object invoke(java.lang.Object,kotlin.coroutines.CoroutineContext$Element)>
<org.osmdroid.util.GEMFFile$GEMFRange: java.lang.String toString()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$SimplePanelSlideListener: void onPanelStateChanged(android.view.View,com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState,com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String toString()>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: float getY()>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: void <init>(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,java.lang.reflect.Constructor,com.fasterxml.jackson.databind.introspect.AnnotationMap,com.fasterxml.jackson.databind.introspect.AnnotationMap[])>
<kotlin.reflect.KCallable: boolean isAbstract()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void close()>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: float spacing(android.view.MotionEvent)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: int getMaximumZoomLevel()>
<org.osmdroid.tileprovider.modules.SqlTileWriter: long getIndex(long)>
<com.android.gpstest.GpsTestActivity: void addNmeaListenerAndroidN()>
<com.fasterxml.jackson.databind.type.PlaceholderForType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.fasterxml.jackson.databind.cfg.ConfigOverrides: com.fasterxml.jackson.databind.introspect.VisibilityChecker getDefaultVisibility()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.String findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>
<kotlinx.coroutines.JobSupport: boolean start()>
<kotlinx.coroutines.internal.ThreadSafeHeapNode: void setHeap(kotlinx.coroutines.internal.ThreadSafeHeap)>
<org.osmdroid.views.overlay.infowindow.MarkerInfoWindow: void <init>(int,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.core.io.CharTypes$AltEscapes: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>
<com.github.mikephil.charting.charts.HorizontalBarChart: void prepareValuePxMatrix()>
<com.github.mikephil.charting.interfaces.dataprovider.BarLineScatterCandleBubbleDataProvider: boolean isInverted(com.github.mikephil.charting.components.YAxis$AxisDependency)>
<org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader: android.graphics.drawable.Drawable downloadTile(long,int,java.lang.String)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.BeanDescription introspectClassAnnotations(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isScaleXEnabled()>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader getTileLoader()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.String[] findEnumValues(java.lang.Class,java.lang.Enum[],java.lang.String[])>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo: boolean visible()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: java.lang.reflect.Member getMember()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: boolean isDrawSteppedEnabled()>
<com.github.mikephil.charting.utils.MPPointD: java.lang.String toString()>
<com.fasterxml.jackson.databind.ObjectMapper: void <clinit>()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: int getMaximumZoomLevel()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: int hashCode()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.Class getRawType()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.reflect.Method getMember()>
<com.android.gpstest.util.UIUtils: boolean canManageDialog(android.app.Activity)>
<org.osmdroid.config.IConfigurationProvider: long getTileFileSystemCacheMaxBytes()>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,boolean)>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Attr: boolean required()>
<kotlinx.coroutines.CompletedIdempotentResult: java.lang.String toString()>
<kotlin.ExceptionsKt__ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: boolean _primitiveAndWrapper(java.lang.Class,java.lang.Class)>
<com.github.mikephil.charting.formatter.DefaultValueFormatter: java.lang.String getFormattedValue(float,com.github.mikephil.charting.data.Entry,int,com.github.mikephil.charting.utils.ViewPortHandler)>
<org.osmdroid.util.MapTileArea: org.osmdroid.util.MapTileArea set(int,android.graphics.Rect)>
<com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String toString()>
<kotlin.collections.EmptyList: java.lang.Object[] toArray()>
<com.fasterxml.jackson.databind.util.TypeKey: java.lang.Class getRawType()>
<com.fasterxml.jackson.databind.type.TypeBindings: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.TypeResolutionContext: com.fasterxml.jackson.databind.JavaType resolveType(java.lang.reflect.Type)>
<kotlinx.coroutines.JobSupport$ChildCompletion: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators _creators()>
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int)>
<com.fasterxml.jackson.databind.util.RootNameLookup: void <init>()>
<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: com.fasterxml.jackson.databind.introspect.Annotated withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer: void <init>()>
<org.osmdroid.util.MapTileContainer: boolean contains(long)>
<kotlin.ranges.IntProgression: java.lang.String toString()>
<com.fasterxml.jackson.databind.JavaType: boolean isArrayType()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerByAddonType(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature valueOf(java.lang.String)>
<com.fasterxml.jackson.core.JsonGenerator: void writeString(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _resolveSuperClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.core.base.GeneratorBase: void close()>
<com.github.mikephil.charting.data.LineData: void <init>()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class[] _interfaces(java.lang.Class)>
<kotlinx.coroutines.CoroutineStart: boolean isLazy()>
<com.github.mikephil.charting.data.ChartData: void notifyDataChanged()>
<kotlin.Pair: int hashCode()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1: java.lang.Throwable invoke(java.lang.Throwable)>
<com.github.mikephil.charting.data.DataSet: void calcMinMaxY(com.github.mikephil.charting.data.Entry)>
<org.osmdroid.views.overlay.Overlay: boolean onDoubleTapEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>
<com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String buildCanonicalName()>
<org.osmdroid.util.MapTileArea: int computeSize(int,int)>
<org.osmdroid.views.overlay.infowindow.MarkerInfoWindow: org.osmdroid.views.overlay.Marker getMarkerReference()>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: boolean timeToExecute(long)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.databind.exc.InvalidDefinitionException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException 'from'(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,com.fasterxml.jackson.databind.JavaType)>
<kotlin.text.CharsKt__CharJVMKt: int digitOf(char,int)>
<kotlin.jvm.internal.Lambda: int getArity()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer,java.util.Set)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: void run()>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>
<com.fasterxml.jackson.'annotation'.JsonSetter: java.lang.String value()>
<org.osmdroid.views.MapView: void scrollTo(int,int)>
<com.fasterxml.jackson.core.io.SerializedString: int appendUnquoted(char[],int)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector: com.fasterxml.jackson.databind.introspect.AnnotationCollector emptyCollector()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer withContentInclusion(java.lang.Object,boolean)>
<kotlinx.coroutines.JobSupport: void setParentHandle$kotlinx_coroutines_core(kotlinx.coroutines.ChildHandle)>
<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter: void <init>(com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter,com.fasterxml.jackson.databind.util.NameTransformer,com.fasterxml.jackson.core.io.SerializedString)>
<com.fasterxml.jackson.databind.util.TypeKey: void <init>()>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: boolean hasSerializerModifiers()>
<com.fasterxml.jackson.'annotation'.JsonAnyGetter: boolean enabled()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeRaw(char[],int,int)>
<org.osmdroid.views.MapController: boolean zoomInFixing(int,int,java.lang.Long)>
<com.fasterxml.jackson.databind.ext.OptionalHandlerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.github.mikephil.charting.renderer.DataRenderer: void drawValue(android.graphics.Canvas,com.github.mikephil.charting.formatter.IValueFormatter,float,com.github.mikephil.charting.data.Entry,int,float,float,int)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: com.fasterxml.jackson.databind.JsonSerializer serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: int hashCode()>
<com.fasterxml.jackson.databind.JsonMappingException: java.lang.Object getProcessor()>
<org.osmdroid.util.TileSystem: double Clip(double,double,double)>
<kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: java.lang.Object prepare(kotlinx.coroutines.internal.LockFreeLinkedListNode)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isGetterVisible(java.lang.reflect.Method)>
<kotlin.coroutines.AbstractCoroutineContextKey: boolean isSubKey$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Key)>
<org.osmdroid.tileprovider.util.SimpleRegisterReceiver: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void _serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.type.TypeBindings: void <clinit>()>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsBottom(float)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Value forLeniency(boolean)>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: boolean hasMixIns()>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateTail(long,int)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _mapType(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: boolean hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.android.gpstest.model.SatelliteStatus: void setCarrierFrequencyHz(float)>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: void detach()>
<com.fasterxml.jackson.databind.type.ClassKey: int compareTo(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder init(com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)>
<com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer: java.lang.Class handledType()>
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.io.Closeable,java.lang.String)>
<org.osmdroid.views.MapController: void onFirstLayout(android.view.View,int,int,int,int)>
<org.osmdroid.views.overlay.Marker: void <init>(org.osmdroid.views.MapView)>
<org.osmdroid.views.CustomZoomButtonsDisplay: void setMarginPadding(float,float)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)>
<kotlinx.coroutines.scheduling.LimitingDispatcher: void execute(java.lang.Runnable)>
<com.fasterxml.jackson.core.JsonGenerator$Feature: int collectDefaults()>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView: void serializeAsElement(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: int hashCode()>
<com.github.mikephil.charting.data.LineDataSet: void resetCircleColors()>
<com.github.mikephil.charting.data.ChartData: com.github.mikephil.charting.interfaces.datasets.IDataSet getFirstLeft(java.util.List)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.JavaType getType()>
<kotlin.jvm.internal.MutablePropertyReference1Impl: java.lang.Object get(java.lang.Object)>
<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName _findConstructorName(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addMethods(java.util.Map)>
<kotlinx.coroutines.JobSupport: boolean childCancelled(java.lang.Throwable)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void <clinit>()>
<org.osmdroid.config.DefaultConfigurationProvider: void save(android.content.Context,android.content.SharedPreferences)>
<com.android.gpstest.GpsStatusFragment: java.lang.String formatFixTimeDate(long)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.PropertyMetadata _getSetterInfo(com.fasterxml.jackson.databind.PropertyMetadata)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: java.lang.Object findFilterId(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<org.osmdroid.views.overlay.Polygon: java.util.ArrayList pointsAsCircle(org.osmdroid.util.GeoPoint,double)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeQuotedLong(long)>
<com.fasterxml.jackson.databind.type.ClassStack: void resolveSelfReferences(com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.views.MapView: boolean onTouchEvent(android.view.MotionEvent)>
<org.osmdroid.views.MapView: void setMultiTouchControls(boolean)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback: void onViewCaptured(android.view.View,int)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: com.fasterxml.jackson.core.util.DefaultPrettyPrinter withSeparators(com.fasterxml.jackson.core.util.Separators)>
<com.github.mikephil.charting.data.BarLineScatterCandleBubbleData: void <init>()>
<com.fasterxml.jackson.databind.type.ClassStack: void addSelfReference(com.fasterxml.jackson.databind.type.ResolvedRecursiveType)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: void <init>(java.lang.String,int,int,int,java.lang.String)>
<com.fasterxml.jackson.core.util.BufferRecycler: char[] allocCharBuffer(int)>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerator: com.fasterxml.jackson.'annotation'.ObjectIdGenerator newForSerialization(java.lang.Object)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback: void onViewDragStateChanged(int)>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: void dispose()>
<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer: com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: void <init>()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildMapSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.MapType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.JavaType findBoundType(java.lang.String)>
<com.github.mikephil.charting.charts.Chart: float getXChartMax()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.highlight.IHighlighter getHighlighter()>
<com.github.mikephil.charting.listener.ChartTouchListener: void setLastHighlighted(com.github.mikephil.charting.highlight.Highlight)>
<com.fasterxml.jackson.databind.type.SimpleType: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],java.lang.Object,java.lang.Object,boolean)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void dispatchOnPanelSlide(android.view.View)>
<kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getDefault()>
<org.osmdroid.tileprovider.tilesource.XYTileSource: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String[],java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.reflect.Member getMember()>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView: void <init>(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.lang.Class[])>
<org.osmdroid.views.overlay.gestures.RotationGestureDetector: void <init>(org.osmdroid.views.overlay.gestures.RotationGestureDetector$RotationListener)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: long getIndex(long,long,long)>
<com.fasterxml.jackson.databind.type.TypeFactory: java.lang.String _resolveTypePlaceholders(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.views.MapView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<org.osmdroid.tileprovider.modules.MapTileDownloader: org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader getTileLoader()>
<org.osmdroid.util.GEMFFile$GEMFRange: void <init>(org.osmdroid.util.GEMFFile)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.util.Annotations getClassAnnotations()>
<com.github.mikephil.charting.highlight.ChartHighlighter: com.github.mikephil.charting.highlight.Highlight getHighlight(float,float)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Boolean hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker withSetterVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.databind.JavaType: void <init>(java.lang.Class,int,java.lang.Object,java.lang.Object,boolean)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serialize(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: void <clinit>()>
<com.github.mikephil.charting.components.XAxis: boolean isAvoidFirstLastClippingEnabled()>
<com.github.mikephil.charting.utils.MPPointF: com.github.mikephil.charting.utils.MPPointF getInstance()>
<org.osmdroid.views.MapView: void setZoomRounding(boolean)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setClipPanel(boolean)>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean isNonStaticInnerClass(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartArray()>
<com.fasterxml.jackson.databind.PropertyName: com.fasterxml.jackson.databind.PropertyName construct(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.JsonLocation: long getByteOffset()>
<com.android.gpstest.GpsTestActivity: void onLocationChanged(android.location.Location)>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: com.fasterxml.jackson.databind.introspect.AnnotationMap[] collectAnnotations(java.lang.'annotation'.Annotation[][],java.lang.'annotation'.Annotation[][])>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory$1: void <clinit>()>
<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)>
<org.osmdroid.tileprovider.modules.MapTileDownloader: void <init>(org.osmdroid.tileprovider.tilesource.ITileSource,org.osmdroid.tileprovider.modules.IFilesystemCache,org.osmdroid.tileprovider.modules.INetworkAvailablityCheck,int,int)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void <init>(int,boolean,int,boolean)>
<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Attr: java.lang.String value()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCount$default(java.lang.Class,int,int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$7: java.lang.Object withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<kotlin.jvm.internal.PropertyReference: int hashCode()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.String[] findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.cfg.ConfigOverrides: void <init>(java.util.Map,com.fasterxml.jackson.'annotation'.JsonInclude$Value,com.fasterxml.jackson.'annotation'.JsonSetter$Value,com.fasterxml.jackson.databind.introspect.VisibilityChecker,java.lang.Boolean,java.lang.Boolean)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseAsISO8601(java.lang.String,java.text.ParsePosition)>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: android.graphics.RectF getGridClippingRect()>
<org.osmdroid.tileprovider.modules.SqlTileWriter$1: void <init>(org.osmdroid.tileprovider.modules.SqlTileWriter)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: com.fasterxml.jackson.'annotation'.JsonFormat$Features empty()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: java.lang.String getName()>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean isBogusClass(java.lang.Class)>
<org.osmdroid.views.MapView: void selectObject(java.lang.Object,org.metalev.multitouch.controller.MultiTouchController$PointInfo)>
<com.android.gpstest.GpsStatusFragment: void onSatelliteStatusChanged(android.location.GnssStatus)>
<com.github.mikephil.charting.data.DataSet: boolean addEntry(com.github.mikephil.charting.data.Entry)>
<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Long toLongOrNull(java.lang.String,int)>
<org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase: void release()>
<org.osmdroid.views.overlay.Marker$OnMarkerClickListener: boolean onMarkerClick(org.osmdroid.views.overlay.Marker,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: java.lang.reflect.Member getMember()>
<com.github.mikephil.charting.renderer.BarChartRenderer: void drawHighlighted(android.graphics.Canvas,com.github.mikephil.charting.highlight.Highlight[])>
<com.sothree.slidinguppanel.ViewDragHelper: boolean isDragging()>
<com.fasterxml.jackson.core.JsonGenerator: void writeArray(double[],int,int)>
<org.osmdroid.views.overlay.milestones.MilestoneManager: void init()>
<kotlinx.coroutines.CoroutineName: java.lang.String getName()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _unknownType()>
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: long _timestamp(java.sql.Date)>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.utils.MPPointF getCenter()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: java.text.DateFormat getDateFormat()>
<kotlinx.coroutines.ThreadLocalEventLoop: void resetEventLoop$kotlinx_coroutines_core()>
<com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getMessage()>
<org.osmdroid.tileprovider.IMapTileProviderCallback: void mapTileRequestFailed(org.osmdroid.tileprovider.MapTileRequestState)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void serializeContents(short[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.MapTileProviderArray: void <init>(org.osmdroid.tileprovider.tilesource.ITileSource,org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.modules.MapTileModuleProviderBase[])>
<com.fasterxml.jackson.'annotation'.JsonFormat$Feature: com.fasterxml.jackson.'annotation'.JsonFormat$Feature[] values()>
<org.osmdroid.views.overlay.OverlayManager: boolean onDown(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void serializeFields(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView: boolean _inView(java.lang.Class)>
<kotlin.collections.EmptySet: void <clinit>()>
<kotlinx.coroutines.JobSupport: java.lang.Throwable createCauseException(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.BeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withIgnorals(java.util.Set)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeRaw(com.fasterxml.jackson.core.SerializableString)>
<kotlin.collections.EmptyIterator: java.lang.Void next()>
<com.android.gpstest.dialog.ShareCollectionAdapter: void setListener(com.android.gpstest.dialog.ShareDialogFragment$Listener)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.util.List findSuperClasses(java.lang.Class,java.lang.Class,boolean)>
<kotlinx.coroutines.JobSupport: void removeNode$kotlinx_coroutines_core(kotlinx.coroutines.JobNode)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.core.Base64Variant getBase64Variant()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeStartObject()>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.PropertyMetadata getMetadata()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>
<org.osmdroid.util.TileSystem: double getFactor(double)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: void onViewDragStateChanged(int)>
<org.osmdroid.views.overlay.Marker: void setPosition(org.osmdroid.util.GeoPoint)>
<org.osmdroid.tileprovider.tilesource.TileSourcePolicy: void <init>()>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawCubicFill(android.graphics.Canvas,com.github.mikephil.charting.interfaces.datasets.ILineDataSet,android.graphics.Path,com.github.mikephil.charting.utils.Transformer,com.github.mikephil.charting.renderer.BarLineScatterCandleBubbleRenderer$XBounds)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value getDefaultPropertyIgnorals(java.lang.Class)>
<com.fasterxml.jackson.databind.JavaType: java.lang.Object getTypeHandler()>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isDragXEnabled()>
<kotlin.collections.CollectionsKt__MutableCollectionsJVMKt: void sortWith(java.util.List,java.util.Comparator)>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: void <init>(com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.config.IConfigurationProvider: int getAnimationSpeedDefault()>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.core.type.WritableTypeId _typeIdDef(com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object,com.fasterxml.jackson.core.JsonToken)>
<org.osmdroid.util.Distance: double getSquaredDistanceToSegment(double,double,double,double,double,double)>
<org.osmdroid.views.overlay.infowindow.InfoWindow: void draw()>
<org.osmdroid.util.Distance: double getSquaredDistanceToProjection(double,double,double,double,double,double,double)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: void <init>(java.lang.String,com.fasterxml.jackson.'annotation'.JsonFormat$Shape,java.util.Locale,java.lang.String,java.util.TimeZone,com.fasterxml.jackson.'annotation'.JsonFormat$Features,java.lang.Boolean)>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: void onMediaUnmounted()>
<kotlin.collections.EmptySet: java.util.Iterator iterator()>
<kotlinx.coroutines.EventLoop_commonKt: void <clinit>()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback: void onViewReleased(android.view.View,float,float)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _renameWithWrappers(java.util.Map)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: com.fasterxml.jackson.databind.JavaType getType()>
<com.fasterxml.jackson.'annotation'.JacksonInject: com.fasterxml.jackson.'annotation'.OptBoolean useInput()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer construct(java.util.Set,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector$FieldBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedField build()>
<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(com.fasterxml.jackson.core.SerializableString)>
<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task pollBuffer()>
<org.osmdroid.views.Projection: org.osmdroid.util.RectL getMercatorViewPort(org.osmdroid.util.RectL)>
<kotlinx.coroutines.android.HandlerDispatcherKt: void <clinit>()>
<com.fasterxml.jackson.databind.type.CollectionType: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],com.fasterxml.jackson.databind.JavaType,java.lang.Object,java.lang.Object,boolean)>
<org.osmdroid.views.CustomZoomButtonsDisplay$VerticalPosition: org.osmdroid.views.CustomZoomButtonsDisplay$VerticalPosition valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.Class getDeclaringClass()>
<kotlin.jvm.internal.Intrinsics: void throwUninitializedProperty(java.lang.String)>
<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(java.lang.Class)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class primitiveType(java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.BasicBeanDescription forClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartArray(java.lang.Object)>
<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildArraySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.ArrayType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.tileprovider.MapTileCache: void remove(long)>
<org.osmdroid.tileprovider.MapTilePreCache: void refresh()>
<kotlin.reflect.KVisibility: kotlin.reflect.KVisibility[] values()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.JobSupport: java.lang.String stateString(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<kotlinx.coroutines.JobCancellationException: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: void <init>(com.fasterxml.jackson.databind.util.Converter,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.android.gpstest.model.SatelliteStatus: void <init>(int,com.android.gpstest.model.GnssType,float,boolean,boolean,boolean,float,float)>
<com.android.gpstest.dialog.ShareLocationFragment$onViewCreated$2: void <init>(android.widget.TextView,android.location.Location,android.widget.CheckBox)>
<org.osmdroid.tileprovider.util.SimpleInvalidationHandler: void handleMessage(android.os.Message)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: void _addSuperTypes(com.fasterxml.jackson.databind.JavaType,java.util.List,boolean)>
<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: void drawYLabels(android.graphics.Canvas,float,float[],float)>
<org.osmdroid.tileprovider.modules.MBTilesFileArchive: void setIgnoreTileSource(boolean)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withIgnorals(java.util.Set)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.PropertyName getWrapperName()>
<org.osmdroid.tileprovider.MapTileProviderBase: void <init>(org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String toString()>
<org.osmdroid.util.TileSystem: void setTileSize(int)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.JsonSerializer findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<kotlinx.coroutines.scheduling.TasksKt: void <clinit>()>
<org.osmdroid.views.CustomZoomButtonsDisplay: android.graphics.Bitmap getIcon(boolean)>
<com.fasterxml.jackson.core.io.IOContext: boolean isResourceManaged()>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void serializeFieldsFiltered(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.IRegisterReceiver: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.Class getDeclaringClass()>
<com.fasterxml.jackson.core.type.ResolvedType: boolean isReferenceType()>
<com.android.gpstest.dialog.UploadDeviceInfoFragment$Companion: void <init>()>
<com.android.gpstest.GpsStatusFragment: void updateFilterView()>
<kotlinx.coroutines.ChildJob: void parentCancelled(kotlinx.coroutines.ParentJob)>
<com.android.gpstest.GpsTestActivity: void addGnssStatusListener()>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: int getMinimumZoomLevel()>
<com.github.mikephil.charting.interfaces.datasets.IBarDataSet: int getBarBorderColor()>
<org.osmdroid.tileprovider.modules.ConfigurablePriorityThreadFactory: void <init>(int,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serializeContentsUsing(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException toCancellationException(java.lang.Throwable,java.lang.String)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: boolean hasIgnoreMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.android.gpstest.dialog.UploadDeviceInfoFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.fasterxml.jackson.'annotation'.JsonFormat: com.fasterxml.jackson.'annotation'.JsonFormat$Feature[] 'with'()>
<com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.'annotation'.JsonProperty: java.lang.String defaultValue()>
<com.github.mikephil.charting.charts.Chart: java.util.ArrayList getJobs()>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.util.NameTransformer,java.lang.Object,boolean)>
<kotlin.jvm.internal.PropertyReference1: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl: com.fasterxml.jackson.databind.cfg.ContextAttributes nonSharedInstance(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasTimeZone()>
<kotlinx.coroutines.JobSupport$Finishing: void setExceptionsHolder(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase: void detach()>
<com.github.mikephil.charting.charts.BarChart: void setHighlightFullBarEnabled(boolean)>
<org.osmdroid.tileprovider.MapTileProviderBase: java.util.Collection getTileRequestCompleteHandlers()>
<kotlin.reflect.KCallable: java.lang.Object callBy(java.util.Map)>
<kotlin.collections.EmptySet: java.lang.Object[] toArray()>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void serializeContentsSlow(java.lang.String[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.util.NameTransformer: void <init>()>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: void performDrag(android.view.MotionEvent,float,float)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int primaryCount()>
<com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase: com.fasterxml.jackson.databind.PropertyMetadata getMetadata()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _cloneFormat(java.text.DateFormat,java.lang.String,java.util.TimeZone,java.util.Locale,java.lang.Boolean)>
<kotlinx.coroutines.AbstractCoroutine: java.lang.String cancellationExceptionMessage()>
<com.sothree.slidinguppanel.ViewDragHelper: boolean smoothSlideViewTo(android.view.View,int,int)>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: com.fasterxml.jackson.'annotation'.JsonSetter$Value construct(com.fasterxml.jackson.'annotation'.Nulls,com.fasterxml.jackson.'annotation'.Nulls)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: java.lang.Class keyAs()>
<kotlinx.coroutines.CompletionHandlerBase: void invoke(java.lang.Throwable)>
<com.android.gpstest.util.PreferenceUtils: int getSatSortOrderFromPreferences()>
<com.fasterxml.jackson.databind.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)>
<kotlin.coroutines.CoroutineContext$plus$1: void <init>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: boolean hasIgnoreMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: void serialize(java.util.Calendar,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.BeanProperty: void <clinit>()>
<com.fasterxml.jackson.databind.type.TypeBindings$AsKey: void <init>(java.lang.Class,com.fasterxml.jackson.databind.JavaType[],int)>
<org.osmdroid.views.MapView: void <init>(android.content.Context)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setXAxisRenderer(com.github.mikephil.charting.renderer.XAxisRenderer)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasPattern()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setMinFlingVelocity(int)>
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility: com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility[] values()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()>
<kotlinx.coroutines.ChildHandleNode: void invoke(java.lang.Throwable)>
<kotlinx.coroutines.CoroutineId: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker withIsGetterVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.databind.introspect.CollectorBase: com.fasterxml.jackson.databind.introspect.AnnotationCollector collectAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationCollector,java.lang.'annotation'.Annotation[])>
<kotlinx.coroutines.DispatchedContinuation: kotlinx.coroutines.CancellableContinuationImpl getReusableCancellableContinuation()>
<org.osmdroid.views.overlay.gestures.RotationGestureDetector: void onTouch(android.view.MotionEvent)>
<com.android.gpstest.GpsTestActivity$$ExternalSyntheticLambda4: void onNmeaMessage(java.lang.String,long)>
<com.android.gpstest.GpsTestActivity$$ExternalSyntheticLambda4: void <init>(com.android.gpstest.GpsTestActivity)>
<com.github.mikephil.charting.highlight.BarHighlighter: void <init>(com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void <init>()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.PropertyName findRootName(java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.SimpleMixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>
<com.github.mikephil.charting.formatter.IAxisValueFormatter: java.lang.String getFormattedValue(float,com.github.mikephil.charting.components.AxisBase)>
<com.github.mikephil.charting.renderer.XAxisRenderer: android.graphics.RectF getGridClippingRect()>
<org.metalev.multitouch.controller.MultiTouchController$PositionAndScale: float getYOff()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: void <init>(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap)>
<com.fasterxml.jackson.databind.ser.std.NullSerializer: void <init>()>
<com.github.mikephil.charting.utils.ViewPortHandler: void setDragOffsetY(float)>
<org.osmdroid.tileprovider.modules.IFilesystemCache: boolean saveFile(org.osmdroid.tileprovider.tilesource.ITileSource,long,java.io.InputStream,java.lang.Long)>
<org.osmdroid.util.TileSystem: long getMercatorYFromLatitude(double,double,boolean)>
<org.osmdroid.tileprovider.modules.MapTileApproximater$TileLoader: void <init>(org.osmdroid.tileprovider.modules.MapTileApproximater)>
<org.osmdroid.tileprovider.modules.ZipFileArchive: void close()>
<com.android.gpstest.NavigationDrawerFragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.fasterxml.jackson.databind.JsonSerializer$None: void <init>()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: java.util.List findBeanProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: boolean includeFilterSuppressNulls(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: com.fasterxml.jackson.databind.introspect.AnnotationMap merge(com.fasterxml.jackson.databind.introspect.AnnotationMap,com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String getInternalName()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void runWorker()>
<kotlinx.coroutines.CompletedExceptionally: boolean makeHandled()>
<org.osmdroid.views.overlay.Polygon: void onDetach(org.osmdroid.views.MapView)>
<com.android.gpstest.dialog.UploadDeviceInfoFragment$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<kotlinx.coroutines.Unconfined: java.lang.String toString()>
<com.github.mikephil.charting.data.BaseDataSet: java.util.List getColors()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: void <init>(boolean)>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: void <init>(com.fasterxml.jackson.databind.introspect.ObjectIdInfo,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)>
<com.android.gpstest.util.UIUtils: int dpToPixels(android.content.Context,float)>
<kotlinx.coroutines.JobSupport: void promoteSingleToNodeList(kotlinx.coroutines.JobNode)>
<com.github.mikephil.charting.utils.Utils: void drawXAxisValue(android.graphics.Canvas,java.lang.String,float,float,android.graphics.Paint,com.github.mikephil.charting.utils.MPPointF,float)>
<com.android.gpstest.DeviceInfoViewModel: java.util.Set getSupportedGnss()>
<org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper: void computeTile(long,int,int)>
<org.osmdroid.util.GeoPoint: java.lang.String toString()>
<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Class getActiveView()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: java.lang.String getName()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value construct(java.util.Set,boolean,boolean,boolean,boolean)>
<com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getOriginalMessage()>
<com.fasterxml.jackson.databind.type.ClassStack: com.fasterxml.jackson.databind.type.ClassStack find(java.lang.Class)>
<kotlin.random.FallbackThreadLocalRandom: java.util.Random getImpl()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation: void <init>(java.lang.Class,java.lang.'annotation'.Annotation)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean inStack()>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.BasicBeanDescription _findStdTypeDesc(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix getValueToPixelMatrix()>
<com.android.gpstest.model.GnssType: com.android.gpstest.model.GnssType[] values()>
<org.osmdroid.views.overlay.Overlay: void onShowPress(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>
<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List emptyList()>
<org.osmdroid.api.IMapController: boolean zoomInFixing(int,int)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapType construct(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.views.overlay.PolyOverlayWithIW: void <init>(org.osmdroid.views.MapView,boolean,boolean)>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object threadContextElements(kotlin.coroutines.CoroutineContext)>
<org.osmdroid.tileprovider.MapTileCache: org.osmdroid.util.MapTileAreaList getAdditionalMapTileList()>
<org.osmdroid.tileprovider.MapTileCache: void <init>(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeRawValue(java.lang.String)>
<org.osmdroid.views.MapView: void setInitCenter(org.osmdroid.api.IGeoPoint)>
<org.osmdroid.tileprovider.MapTileProviderBase: void setUseDataConnection(boolean)>
<org.osmdroid.views.overlay.Overlay: void <clinit>()>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.DeserializationConfig _withMapperFeatures(int)>
<kotlinx.coroutines.internal.AtomicOp: java.lang.Object prepare(java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.ConfigOverrides: java.lang.Boolean getDefaultMergeable()>
<kotlin.coroutines.ContinuationInterceptor$Key: void <clinit>()>
<kotlin.jvm.internal.CallableReference: kotlin.reflect.KVisibility getVisibility()>
<org.osmdroid.views.overlay.TilesOverlay: org.osmdroid.views.Projection getProjection()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Empty: com.fasterxml.jackson.databind.JsonSerializer serializerFor(java.lang.Class)>
<com.fasterxml.jackson.databind.util.LRUMap: void clear()>
<org.osmdroid.tileprovider.tilesource.TileSourceFactory$1: java.lang.String getTileURLString(long)>
<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,short[])>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryTerminateWorker()>
<kotlinx.coroutines.TimeSource: java.lang.Runnable wrapTask(java.lang.Runnable)>
<org.osmdroid.config.DefaultConfigurationProvider: long getTileFileSystemCacheMaxBytes()>
<com.fasterxml.jackson.core.util.TextBuffer: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addAll(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: void <init>(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility,com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility,com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility,com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility,com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean isJDKClass(java.lang.Class)>
<kotlin.random.Random: void <clinit>()>
<kotlinx.coroutines.DispatchedCoroutine: java.lang.Object getResult()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfIOE(java.lang.Throwable)>
<kotlin.jvm.internal.Ref$ObjectRef: java.lang.String toString()>
<com.android.gpstest.dialog.ShareCollectionAdapter: int getItemCount()>
<org.metalev.multitouch.controller.MultiTouchController$PositionAndScale: void set(float,float,float,float,float,float)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker(long)>
<org.osmdroid.util.MapTileAreaList$1: java.lang.Long next()>
<com.fasterxml.jackson.databind.util.TypeKey: boolean isTyped()>
<kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Key)>
<kotlin.coroutines.CombinedContext: boolean equals(java.lang.Object)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <init>(int,boolean)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void updateObscuredViewVisibility()>
<com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: java.lang.Object _getReferenced(java.lang.Object)>
<kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>
<org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper: void loop(double,org.osmdroid.util.RectL,double,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.util.List getFactoryMethods()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: void <init>(java.util.Set,boolean,boolean,boolean,boolean)>
<com.fasterxml.jackson.databind.ext.Java7HandlersImpl: com.fasterxml.jackson.databind.JsonSerializer getSerializerForJavaNioFilePath(java.lang.Class)>
<org.osmdroid.views.overlay.infowindow.InfoWindow: void <init>(int,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value 'from'(com.fasterxml.jackson.'annotation'.JsonIgnoreProperties)>
<org.osmdroid.tileprovider.ReusableBitmapDrawable: boolean isBitmapValid()>
<org.osmdroid.util.MapTileArea: int getHeight()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: boolean hasSerializer()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<org.osmdroid.views.overlay.gestures.RotationGestureOverlay: void setEnabled(boolean)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeString(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <clinit>()>
<com.fasterxml.jackson.databind.JsonMappingException: void prependPath(com.fasterxml.jackson.databind.JsonMappingException$Reference)>
<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>
<com.fasterxml.jackson.core.JsonGenerator$1: void <clinit>()>
<com.fasterxml.jackson.databind.BeanDescription: java.lang.Class[] findDefaultViews()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeQuotedInt(int)>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()>
<org.osmdroid.views.MapView: void onResume()>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder typeProperty(java.lang.String)>
<com.android.gpstest.GpsTestActivity$2: void <init>(com.android.gpstest.GpsTestActivity)>
<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandleNode nextChild(kotlinx.coroutines.internal.LockFreeLinkedListNode)>
<com.fasterxml.jackson.core.ObjectCodec: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>
<kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: void <init>()>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader getTileLoader()>
<com.fasterxml.jackson.databind.MapperFeature: int getMask()>
<kotlin.jvm.internal.FunctionBase: int getArity()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void <init>()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler,int)>
<kotlin.collections.ArraysKt___ArraysKt: java.lang.Object[] sortedArrayWith(java.lang.Object[],java.util.Comparator)>
<kotlin.jvm.internal.Intrinsics: int compare(int,int)>
<com.android.gpstest.NavigationDrawerFragment$3: void onClick(android.view.View)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$6: java.lang.Integer withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<kotlin.collections.EmptyList: boolean containsAll(java.util.Collection)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.util.TileSystem: double getY01FromLatitude(double,boolean)>
<kotlin.jvm.internal.MutablePropertyReference1Impl: void set(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker withGetterVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)>
<kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: void _reportCantWriteValueExpectName(java.lang.String)>
<org.osmdroid.util.Distance: double dotProduct(double,double,double,double,double,double)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: void serializeAsArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.coroutines.CombinedContext: boolean containsAll(kotlin.coroutines.CombinedContext)>
<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor constructNonDefaultConstructor(com.fasterxml.jackson.databind.util.ClassUtil$Ctor,com.fasterxml.jackson.databind.util.ClassUtil$Ctor)>
<com.github.mikephil.charting.buffer.BarBuffer: void setDataSet(int)>
<com.fasterxml.jackson.databind.util.EnumValues: java.lang.Class getEnumClass()>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: void computeAxis(float,float,boolean)>
<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.CustomZoomButtonsDisplay$HorizontalPosition: org.osmdroid.views.CustomZoomButtonsDisplay$HorizontalPosition valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<org.osmdroid.util.MapTileArea: boolean contains(int,int,int)>
<kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: void <init>(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.highlight.Highlight: java.lang.String toString()>
<kotlin.collections.EmptyList: boolean addAll(java.util.Collection)>
<com.fasterxml.jackson.core.Base64Variant: java.lang.String toString()>
<kotlinx.coroutines.EventLoopImplBase: void <init>()>
<com.android.gpstest.GpsTestActivity: boolean isCsvLoggingEnabled()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isAnnotationProcessingEnabled()>
<com.fasterxml.jackson.databind.PropertyMetadata: void <init>(java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.String,com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo,com.fasterxml.jackson.'annotation'.Nulls,com.fasterxml.jackson.'annotation'.Nulls)>
<kotlinx.coroutines.CommonPool: java.util.concurrent.Executor getOrCreatePoolSync()>
<kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>
<kotlin.jvm.internal.MutablePropertyReference: void <init>(java.lang.Object)>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onDoubleTap(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.android.gpstest.GpsTestActivity: void checkTimeAndDistance(android.content.SharedPreferences)>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Prop: java.lang.Class type()>
<com.fasterxml.jackson.databind.introspect.CollectorBase: com.fasterxml.jackson.databind.introspect.AnnotationCollector collectDefaultFromBundle(com.fasterxml.jackson.databind.introspect.AnnotationCollector,java.lang.'annotation'.Annotation)>
<org.osmdroid.util.SegmentClipper: void end()>
<org.osmdroid.views.MapController: void animateTo(org.osmdroid.api.IGeoPoint,java.lang.Double,java.lang.Long)>
<com.fasterxml.jackson.'annotation'.JsonCreator$Mode: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.JavaType getContentType()>
<com.fasterxml.jackson.'annotation'.JsonProperty$Access: com.fasterxml.jackson.'annotation'.JsonProperty$Access[] values()>
<com.fasterxml.jackson.databind.util.StdDateFormat: int _parse4D(java.lang.String,int)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String idFromClass(java.lang.Class)>
<org.osmdroid.views.MapView$MapViewDoubleClickListener: void <init>(org.osmdroid.views.MapView,org.osmdroid.views.MapView$1)>
<org.osmdroid.views.overlay.OverlayManager: boolean onKeyDown(int,android.view.KeyEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.CollectorBase: void <clinit>()>
<com.github.mikephil.charting.highlight.ChartHighlighter: java.util.List getHighlightsAtXValue(float,float,float)>
<kotlin.ranges.IntProgressionIterator: int nextInt()>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumMap)>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.Removed removed()>
<kotlin.collections.CollectionsKt: void throwIndexOverflow()>
<com.github.mikephil.charting.highlight.Highlight: float getX()>
<kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)>
<com.github.mikephil.charting.components.Legend$LegendForm: com.github.mikephil.charting.components.Legend$LegendForm valueOf(java.lang.String)>
<org.osmdroid.util.UrlBackoff: void next(java.lang.String)>
<com.fasterxml.jackson.'annotation'.PropertyAccessor: com.fasterxml.jackson.'annotation'.PropertyAccessor[] values()>
<com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<org.osmdroid.views.overlay.infowindow.BasicInfoWindow: void <init>(int,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.util.ArrayBuilders$1: void <init>(java.lang.Class,int,java.lang.Object)>
<com.github.mikephil.charting.data.LineDataSet: float getCircleRadius()>
<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.CancelledContinuation resumeImpl(java.lang.Object,int)>
<org.osmdroid.config.DefaultConfigurationProvider: void setOsmdroidBasePath(java.io.File)>
<org.osmdroid.views.MapView: void resetScrollableAreaLimitLatitude()>
<com.android.gpstest.GpsTestActivity: android.app.Dialog onCreateDialog(int)>
<com.github.mikephil.charting.charts.BarChart: void calcMinMax()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: java.lang.Object includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class)>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>
<com.github.mikephil.charting.utils.Transformer: void pathValueToPixel(android.graphics.Path)>
<org.osmdroid.views.overlay.LinearRing: java.util.ArrayList getPoints()>
<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>
<com.fasterxml.jackson.databind.util.ClassUtil: void <clinit>()>
<org.osmdroid.views.overlay.OverlayManager: boolean onLongPress(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: int hashCode()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: void <clinit>()>
<com.fasterxml.jackson.core.JsonGenerator: void writeRaw(java.lang.String)>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode correctPrev(kotlinx.coroutines.internal.OpDescriptor)>
<org.osmdroid.views.MapController: boolean zoomInFixing(int,int)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void <init>(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.databind.DatabindContext: java.lang.String _quotedString(java.lang.String)>
<com.android.gpstest.util.UIUtils: boolean isFragmentAttached(androidx.fragment.app.Fragment)>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer$1: void <clinit>()>
<com.fasterxml.jackson.databind.util.StdDateFormat: void pad4(java.lang.StringBuffer,int)>
<org.osmdroid.views.overlay.DefaultOverlayManager: void add(int,org.osmdroid.views.overlay.Overlay)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<org.osmdroid.config.DefaultConfigurationProvider: long getExpirationExtendedDuration()>
<org.osmdroid.views.MapView: void onMeasure(int,int)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.collections.MapsKt__MapsJVMKt: java.util.Map mapOf(kotlin.Pair)>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.jvm.internal.CallableReference: java.lang.Object getBoundReceiver()>
<com.github.mikephil.charting.charts.Chart: float getXChartMin()>
<com.fasterxml.jackson.databind.ser.std.ByteArraySerializer: void serialize(byte[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: void detach()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(java.lang.String)>
<com.android.gpstest.dialog.ShareDialogFragment: void <clinit>()>
<org.osmdroid.views.CustomZoomButtonsController: void setVisibility(org.osmdroid.views.CustomZoomButtonsController$Visibility)>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider$TileLoader: android.graphics.drawable.Drawable loadTile(long)>
<com.fasterxml.jackson.databind.util.RootNameLookup: com.fasterxml.jackson.databind.PropertyName findRootName(java.lang.Class,com.fasterxml.jackson.databind.cfg.MapperConfig)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: java.lang.Boolean getDefaultMergeable()>
<org.osmdroid.config.DefaultConfigurationProvider: void setTileFileSystemCacheMaxBytes(long)>
<kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
<kotlinx.coroutines.InvokeOnCompletion: void <init>(kotlinx.coroutines.Job,kotlin.jvm.functions.Function1)>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: boolean _isIncludableField(java.lang.reflect.Field)>
<kotlin.jvm.internal.CollectionToArray: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonCreator$Mode findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers: java.util.Collection all()>
<com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.Object _unsupported()>
<com.fasterxml.jackson.databind.type.TypeBindings: int size()>
<org.osmdroid.tileprovider.BitmapPool: org.osmdroid.tileprovider.BitmapPool getInstance()>
<org.osmdroid.views.CustomZoomButtonsDisplay: void <init>(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.collections.EmptyList: int indexOf(java.lang.Void)>
<kotlinx.coroutines.CoroutineContextKt: java.lang.String getCoroutineName(kotlin.coroutines.CoroutineContext)>
<org.osmdroid.events.MapListener: boolean onScroll(org.osmdroid.events.ScrollEvent)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.tileprovider.modules.IArchiveFile: java.io.InputStream getInputStream(org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: java.lang.Boolean getIsIgnoredType()>
<org.osmdroid.views.MapView: double getMaxZoomLevel()>
<com.fasterxml.jackson.core.JsonLocation: void <clinit>()>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>
<com.github.mikephil.charting.utils.ViewPortHandler: void centerViewPort(float[],android.view.View)>
<kotlin.collections.EmptyMap: java.util.Set getKeys()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.ReferenceType withStaticTyping()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.scheduling.LimitingDispatcher: int getTaskMode()>
<org.osmdroid.views.overlay.MapEventsOverlay: boolean onLongPress(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.tileprovider.MapTileProviderBasic: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.modules.INetworkAvailablityCheck,org.osmdroid.tileprovider.tilesource.ITileSource,android.content.Context,org.osmdroid.tileprovider.modules.IFilesystemCache)>
<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>
<kotlinx.coroutines.JobSupport: boolean cancelParent(java.lang.Throwable)>
<org.osmdroid.views.overlay.OverlayManager: boolean onDoubleTapEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.github.mikephil.charting.charts.Chart: void setupDefaultFormatter(float,float)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: java.lang.String[] getPrimaryKeyParameters(long,org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>
<com.android.gpstest.GpsTestActivity: void checkTrueNorth(android.content.SharedPreferences)>
<org.osmdroid.config.DefaultConfigurationProvider: java.lang.Long getExpirationOverrideDuration()>
<kotlin.text.StringsKt__StringsKt: java.lang.String substringAfter(java.lang.String,java.lang.String,java.lang.String)>
<com.github.mikephil.charting.buffer.BarBuffer: void addBar(float,float,float,float)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonSetter$Value findSetterInfo(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.github.mikephil.charting.renderer.XAxisRenderer: void renderLimitLineLabel(android.graphics.Canvas,com.github.mikephil.charting.components.LimitLine,float[],float)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean _anyExplicitNames(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: void removeTileFromQueues(long)>
<org.osmdroid.util.MapTileArea: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter constructObjectIdHandler(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<kotlinx.coroutines.android.HandlerContext: int hashCode()>
<org.osmdroid.views.overlay.Overlay: boolean onDoubleTap(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.views.Projection: void restore(android.graphics.Canvas,boolean)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean hasSetter()>
<kotlin.internal.PlatformImplementations: kotlin.random.Random defaultPlatformRandom()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeNumber(double)>
<com.fasterxml.jackson.'annotation'.JsonCreator$Mode: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeWithType(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.JobKt__JobKt: void cancel$default(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException,int,java.lang.Object)>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.renderer.YAxisRenderer getRendererRightYAxis()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotatedClass resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: void <init>()>
<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector: com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap collect(com.fasterxml.jackson.databind.type.TypeFactory,com.fasterxml.jackson.databind.introspect.TypeResolutionContext,com.fasterxml.jackson.databind.JavaType,java.util.List,java.lang.Class)>
<kotlinx.coroutines.DefaultExecutor: void <clinit>()>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,java.util.Collection,boolean,boolean)>
<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.util.NameTransformer$Chained: void <init>(com.fasterxml.jackson.databind.util.NameTransformer,com.fasterxml.jackson.databind.util.NameTransformer)>
<com.github.mikephil.charting.data.PieEntry: float getX()>
<com.fasterxml.jackson.core.JsonProcessingException: void <init>(java.lang.String,com.fasterxml.jackson.core.JsonLocation,java.lang.Throwable)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: void findArchiveFiles()>
<kotlinx.coroutines.internal.FastServiceLoader: java.util.List loadMainDispatcherFactory$kotlinx_coroutines_core()>
<org.osmdroid.views.overlay.Overlay: boolean onKeyUp(int,android.view.KeyEvent,org.osmdroid.views.MapView)>
<org.osmdroid.views.overlay.Polyline: void setWidth(float)>
<org.osmdroid.views.overlay.OverlayManager: boolean onTrackballEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.android.gpstest.dialog.ShareDialogFragment$onCreateDialog$builder$1: void <init>()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setVisibleXRangeMinimum(float)>
<kotlinx.coroutines.JobSupport: boolean getHandlesException$kotlinx_coroutines_core()>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.util.Converter converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>
<com.fasterxml.jackson.databind.'annotation'.JsonTypeResolver: java.lang.Class value()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isFieldVisible(com.fasterxml.jackson.databind.introspect.AnnotatedField)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Object fromMemberAnnotations(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$WithMember)>
<com.fasterxml.jackson.'annotation'.JsonSetter: com.fasterxml.jackson.'annotation'.Nulls contentNulls()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],com.fasterxml.jackson.databind.JavaType,java.lang.Object,java.lang.Object,boolean)>
<kotlin.jvm.internal.PropertyReference1Impl: void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)>
<org.osmdroid.tileprovider.IMapTileProviderCallback: void mapTileRequestExpiredTile(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<kotlin.jvm.internal.ClassBasedDeclarationContainer: java.lang.Class getJClass()>
<com.github.mikephil.charting.data.BarEntry: boolean isStacked()>
<org.osmdroid.views.MapController$ZoomAnimationListener: void <init>(org.osmdroid.views.MapController)>
<org.osmdroid.tileprovider.modules.GEMFFileArchive: void init(java.io.File)>
<com.android.gpstest.dialog.ShareCollectionAdapter: void setArguments(android.os.Bundle)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: boolean hasAnyGetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<org.osmdroid.util.MyMath: int mod(int,int)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std withOverrides(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Value)>
<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: java.lang.String getName()>
<kotlinx.coroutines.internal.LockFreeTaskQueue: void <clinit>()>
<kotlinx.coroutines.ThreadLocalEventLoop: void setEventLoop$kotlinx_coroutines_core(kotlinx.coroutines.EventLoop)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void serialize(java.lang.String[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeStartObject(java.lang.Object)>
<org.osmdroid.util.SegmentClipper: void init()>
<org.osmdroid.tileprovider.MapTileCache: java.util.List getProtectedTileContainers()>
<com.fasterxml.jackson.databind.jsontype.NamedType: void <init>(java.lang.Class,java.lang.String)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeString(java.lang.String)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Include getContentInclusion()>
<kotlin.collections.EmptyList: java.util.ListIterator listIterator()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void <clinit>()>
<org.osmdroid.util.TileSystemWebMercator: double getMaxLatitude()>
<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<kotlin.jvm.internal.PropertyReference1: void <init>()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: java.lang.String valueToString(java.lang.Object)>
<org.osmdroid.util.LineBuilder: void end()>
<com.fasterxml.jackson.databind.ser.std.StringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider$TileLoader: void <init>(org.osmdroid.tileprovider.modules.MapTileFilesystemProvider)>
<com.fasterxml.jackson.databind.ext.Java7Handlers: void <init>()>
<kotlin.coroutines.CoroutineContext$plus$1: kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>
<com.fasterxml.jackson.core.util.InternCache: void <clinit>()>
<com.fasterxml.jackson.databind.util.NameTransformer: com.fasterxml.jackson.databind.util.NameTransformer chainedTransformer(com.fasterxml.jackson.databind.util.NameTransformer,com.fasterxml.jackson.databind.util.NameTransformer)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: android.graphics.drawable.Drawable loadTileIfReachable(long)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonInclude$Value _refinePropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: void <clinit>()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter,java.lang.Object)>
<com.github.mikephil.charting.data.LineDataSet: com.github.mikephil.charting.data.LineDataSet$Mode getMode()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeNumber(long)>
<com.fasterxml.jackson.'annotation'.JsonMerge: com.fasterxml.jackson.'annotation'.OptBoolean value()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: void <clinit>()>
<org.osmdroid.views.MapViewRepository: void add(org.osmdroid.views.overlay.infowindow.InfoWindow)>
<com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl: com.fasterxml.jackson.databind.cfg.ContextAttributes withPerCallAttribute(java.lang.Object,java.lang.Object)>
<kotlinx.coroutines.CommonPool: void <init>()>
<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean hasClass(java.lang.Object,java.lang.Class)>
<com.fasterxml.jackson.core.io.CharTypes$AltEscapes: void <init>()>
<kotlin.comparisons.ComparisonsKt__ComparisonsKt: java.util.Comparator compareBy(kotlin.jvm.functions.Function1[])>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onKeyDown(int,android.view.KeyEvent,org.osmdroid.views.MapView)>
<com.android.gpstest.GpsTestActivity: void showMapFragment()>
<com.fasterxml.jackson.core.io.CharTypes$AltEscapes: int[] escapesFor(int)>
<kotlin.random.FallbackThreadLocalRandom: void <init>()>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Typing: com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Typing valueOf(java.lang.String)>
<kotlinx.coroutines.JobCancellationException: kotlinx.coroutines.JobCancellationException createCopy()>
<org.osmdroid.util.BoundingBox: double getLonWest()>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.BasicBeanDescription forSerialization(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: com.fasterxml.jackson.databind.type.TypeBindings getBindings()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult: void <init>(com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap)>
<kotlin.collections.EmptySet: int size()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt: kotlin.jvm.functions.Function1 createConstructor(java.lang.reflect.Constructor)>
<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void <init>()>
<org.osmdroid.views.MapView$MapViewGestureDetectorListener: boolean onDown(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.collections.EmptyList: java.util.Iterator iterator()>
<org.osmdroid.util.LineBuilder: void init()>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.String toString()>
<kotlinx.coroutines.MainCoroutineDispatcher: void <init>()>
<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>
<com.github.mikephil.charting.data.BarEntry: com.github.mikephil.charting.highlight.Range[] getRanges()>
<com.fasterxml.jackson.databind.ser.std.BooleanSerializer$AsNumber: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.core.JsonProcessingException: com.fasterxml.jackson.core.JsonLocation getLocation()>
<kotlin.ranges.RangesKt___RangesKt: int coerceAtMost(int,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.util.List _fields()>
<com.fasterxml.jackson.'annotation'.PropertyAccessor: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$EmptyCollector: void <init>(java.lang.Object)>
<kotlin.collections.EmptyList: boolean equals(java.lang.Object)>
<kotlinx.coroutines.android.HandlerContext: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>
<org.osmdroid.views.overlay.OverlayManager: void onPause()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<kotlinx.coroutines.CoroutineDispatcher$Key: void <init>()>
<kotlin.jvm.internal.TypeIntrinsics: void <init>()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setConfig(com.fasterxml.jackson.databind.SerializationConfig)>
<kotlinx.coroutines.scheduling.LimitingDispatcher: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: boolean isSetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<org.osmdroid.views.MapViewRepository: org.osmdroid.views.overlay.infowindow.BasicInfoWindow getDefaultPolylineInfoWindow()>
<com.fasterxml.jackson.databind.introspect.MemberKey: void <clinit>()>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.ByteArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,byte[])>
<com.fasterxml.jackson.databind.ser.impl.WritableObjectId: boolean writeAsId(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper: void initialiseLoop()>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: int getMaximumZoomLevel()>
<org.metalev.multitouch.controller.MultiTouchController$PositionAndScale: void <init>()>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.type.ArrayType construct(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeBindings)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.cfg.ConfigOverride getConfigOverride(java.lang.Class)>
<com.android.gpstest.GpsStatusFragment: void showHaveFix()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Value empty()>
<com.github.mikephil.charting.charts.Chart: void clearValues()>
<org.osmdroid.tileprovider.modules.IFilesystemCache: void onDetach()>
<com.fasterxml.jackson.databind.util.Annotations: int size()>
<com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver: void <init>()>
<org.osmdroid.views.Projection: void save(android.graphics.Canvas,boolean,boolean)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addSetterMethod(java.util.Map,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.AnnotationIntrospector)>
<com.fasterxml.jackson.core.JsonStreamContext: java.lang.String typeDesc()>
<kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>
<org.osmdroid.views.overlay.PolyOverlayWithIW: void setDefaultInfoWindowLocation()>
<org.osmdroid.tileprovider.TileStates: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.TokenBuffer: int writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)>
<org.osmdroid.tileprovider.modules.MapTileDownloader: void detach()>
<org.osmdroid.views.overlay.Polygon: boolean contains(android.view.MotionEvent)>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext reset(int)>
<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: void <init>(java.lang.Class)>
<com.github.mikephil.charting.components.YAxis: float getZeroLineWidth()>
<com.sothree.slidinguppanel.ViewDragHelper: void processTouchEvent(android.view.MotionEvent)>
<org.osmdroid.util.TileSystem: long getMercatorFromXY01(double,double,boolean)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.Iterable fields()>
<org.osmdroid.views.overlay.DefaultOverlayManager: java.lang.Object set(int,java.lang.Object)>
<com.fasterxml.jackson.databind.JsonMappingException$Reference: void <init>(java.lang.Object,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotatedClass resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<org.osmdroid.tileprovider.modules.TileWriter$1: void <init>(org.osmdroid.tileprovider.modules.TileWriter)>
<kotlinx.coroutines.internal.LockFreeLinkedListHead: boolean isRemoved()>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<org.osmdroid.tileprovider.tilesource.TileSourceFactory$1: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String[],java.lang.String)>
<org.osmdroid.util.TileSystemWebMercator: double getX01FromLongitude(double)>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: void <init>(java.lang.Boolean,java.text.DateFormat)>
<com.github.mikephil.charting.data.LineDataSet: int getCircleColorCount()>
<kotlin.text.StringsKt__StringsKt: int lastIndexOf(java.lang.CharSequence,java.lang.String,int,boolean)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: void <init>(int,int)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<org.osmdroid.tileprovider.modules.ZipFileArchive: void setIgnoreTileSource(boolean)>
<kotlinx.coroutines.EventLoopImplBase: void rescheduleAllDelayed()>
<kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.github.mikephil.charting.data.DataSet$Rounding: void <init>(java.lang.String,int)>
<com.github.mikephil.charting.data.LineDataSet: android.graphics.DashPathEffect getDashPathEffect()>
<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.Continuation getDelegate$kotlinx_coroutines_core()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>
<com.android.gpstest.dialog.ShareDialogFragment$onCreateDialog$1: void onConfigureTab(com.google.android.material.tabs.TabLayout$Tab,int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers: com.fasterxml.jackson.databind.JsonSerializer getFallbackKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,java.lang.Class)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: void onTileLoaderShutdown()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _reportUnsupportedOperation()>
<kotlinx.coroutines.Job: kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.EnumSet)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Integer findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlin.random.AbstractPlatformRandom: void <init>()>
<com.github.mikephil.charting.listener.ChartTouchListener: void startAction(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean hasConstructorParameter()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty back(java.lang.String)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: java.lang.Class contentUsing()>
<com.fasterxml.jackson.databind.util.NameTransformer: java.lang.String transform(java.lang.String)>
<com.fasterxml.jackson.'annotation'.OptBoolean: boolean equals(java.lang.Boolean,java.lang.Boolean)>
<com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl: java.lang.Object getAttribute(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: com.fasterxml.jackson.databind.ser.std.EnumSerializer construct(java.lang.Class,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.'annotation'.JsonFormat$Value)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Inclusion: void <init>(java.lang.String,int)>
<kotlinx.coroutines.internal.OpDescriptor: boolean isEarlierThan(kotlinx.coroutines.internal.OpDescriptor)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<com.fasterxml.jackson.'annotation'.JsonIdentityInfo: java.lang.Class generator()>
<com.github.mikephil.charting.components.Description: com.github.mikephil.charting.utils.MPPointF getPosition()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartObject(java.lang.Object,int)>
<org.osmdroid.views.Projection: void adjustOffsets(org.osmdroid.api.IGeoPoint,android.graphics.PointF)>
<com.sothree.slidinguppanel.ViewDragHelper: boolean tryCaptureViewForDrag(android.view.View,int)>
<com.github.mikephil.charting.data.ChartData: float getYMax()>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBounds(float,float)>
<kotlinx.coroutines.internal.AtomicOp: long getOpSequence()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations: boolean hasOneOf(java.lang.Class[])>
<com.fasterxml.jackson.databind.type.TypeBindings: void <init>(java.lang.String[],com.fasterxml.jackson.databind.JavaType[],java.lang.String[])>
<kotlinx.coroutines.android.HandlerContext: java.lang.String toString()>
<org.osmdroid.tileprovider.modules.TileWriter$2: void <init>(org.osmdroid.tileprovider.modules.TileWriter)>
<kotlin.Unit: void <init>()>
<com.fasterxml.jackson.databind.introspect.MemberKey: int argCount()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeFactory)>
<kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Key)>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: boolean equals(java.lang.Object)>
<org.osmdroid.util.TileSystem: int truncateToInt(long)>
<com.github.mikephil.charting.components.Legend$1: void <clinit>()>
<kotlin.collections.EmptyMap: java.util.Set getEntries()>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: float getX()>
<kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.formatter.IValueFormatter getDefaultValueFormatter()>
<com.github.mikephil.charting.utils.MPPointF: com.github.mikephil.charting.utils.MPPointF getInstance(com.github.mikephil.charting.utils.MPPointF)>
<kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>
<com.github.mikephil.charting.utils.FSize: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$EmptyCollector: boolean isPresent(java.lang.'annotation'.Annotation)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer constructBeanOrAddOnSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<org.osmdroid.tileprovider.modules.GEMFFileArchive: void setIgnoreTileSource(boolean)>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.databind.util.ArrayBuilders: java.lang.Object getArrayComparator(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerByAnnotations(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<org.osmdroid.util.TileSystem: double getY01FromLatitude(double)>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: void <init>()>
<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)>
<com.fasterxml.jackson.core.JsonGenerator$Feature: boolean enabledByDefault()>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: void detach()>
<com.github.mikephil.charting.jobs.MoveViewJob: void <clinit>()>
<kotlin.collections.EmptyMap: int size()>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.JsonValueSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,boolean)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasShape()>
<com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: java.util.List getGradientColors()>
<com.github.mikephil.charting.interfaces.datasets.IBarDataSet: float getBarBorderWidth()>
<com.fasterxml.jackson.databind.ser.BeanSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.util.Set)>
<com.fasterxml.jackson.databind.ser.Serializers: com.fasterxml.jackson.databind.JsonSerializer findArraySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.ArrayType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<kotlinx.coroutines.internal.ThreadState: kotlin.coroutines.CoroutineContext getContext()>
<org.osmdroid.views.overlay.LinearRing: double[] getDistances()>
<kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void <init>(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)>
<com.fasterxml.jackson.core.JsonStreamContext: void setCurrentValue(java.lang.Object)>
<org.osmdroid.views.MapViewRepository: void <init>(org.osmdroid.views.MapView)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: int getMinimumZoomLevel()>
<kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: int systemProp(java.lang.String,int,int,int)>
<org.osmdroid.tileprovider.util.StorageUtils$StorageInfo: void <init>(java.lang.String,boolean,boolean,int)>
<com.android.gpstest.util.UIUtils: void hideViewWithAnimation(android.view.View,int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: int getCurrentParallaxOffset()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: boolean isAnnotationBundle(java.lang.'annotation'.Annotation)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: int getShadowHeight()>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: java.lang.String getName()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: com.github.mikephil.charting.model.GradientColor getGradientColor(int)>
<kotlin.collections.EmptyList: boolean retainAll(java.util.Collection)>
<org.osmdroid.util.MapTileArea: java.util.Iterator iterator()>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$As: void <clinit>()>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: com.github.mikephil.charting.formatter.IFillFormatter getFillFormatter()>
<org.osmdroid.views.MapView: void setTilesScaleFactor(float)>
<kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$1: int compare(java.lang.Object,java.lang.Object)>
<org.osmdroid.views.overlay.Overlay$Snappable: boolean onSnapToItem(int,int,android.graphics.Point,org.osmdroid.api.IMapView)>
<kotlinx.coroutines.CompletedWithCancellation: java.lang.String toString()>
<kotlinx.coroutines.internal.MainDispatchersKt: void <clinit>()>
<org.osmdroid.views.overlay.PolyOverlayWithIW: void setInfoWindowLocation(org.osmdroid.util.GeoPoint)>
<com.github.mikephil.charting.data.BarEntry: float getNegativeSum()>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long wo(long,long)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: com.github.mikephil.charting.data.LineDataSet$Mode getMode()>
<kotlin.ranges.IntProgression: int getStep()>
<kotlinx.coroutines.Empty: void <init>(boolean)>
<com.fasterxml.jackson.core.util.BufferRecycler: char[] allocCharBuffer(int,int)>
<kotlinx.coroutines.TimeSource: void unregisterTimeLoopThread()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeRaw(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: void <init>(java.lang.Class)>
<kotlinx.coroutines.ThreadLocalEventLoop: void <clinit>()>
<org.osmdroid.tileprovider.MapTileProviderArray: void mapTileRequestCompleted(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<kotlin.text.StringsKt__StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildIteratorSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.std.StringSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<kotlin.collections.EmptyMap: java.util.Collection values()>
<com.android.gpstest.model.SatelliteStatus: float getElevationDegrees()>
<com.github.mikephil.charting.buffer.HorizontalBarBuffer: void <init>(int,int,boolean)>
<com.github.mikephil.charting.buffer.BarBuffer: void feed(com.github.mikephil.charting.interfaces.datasets.IBarDataSet)>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder updateBuilder(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerator: java.lang.Class getScope()>
<kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>
<com.android.gpstest.dialog.UploadDeviceInfoFragment$onViewCreated$1: void <init>(com.android.gpstest.dialog.UploadDeviceInfoFragment,com.android.gpstest.DeviceInfoViewModel,kotlin.jvm.internal.Ref$ObjectRef,com.google.android.material.button.MaterialButton,android.widget.ProgressBar)>
<com.android.gpstest.util.PreferenceUtils: java.lang.String getCapabilityDescription(int)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: int clampViewPositionVertical(android.view.View,int,int)>
<com.fasterxml.jackson.databind.type.MapLikeType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>
<com.android.gpstest.util.SatelliteUtils: boolean isAutomaticGainControlSupported(android.location.GnssMeasurement)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean equals(java.lang.Object)>
<org.osmdroid.config.DefaultConfigurationProvider: void setCacheMapTileOvershoot(short)>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(java.lang.Class)>
<com.github.mikephil.charting.utils.MPPointF: void my_readFromParcel(android.os.Parcel)>
<com.fasterxml.jackson.databind.ser.std.BooleanSerializer: void <init>(boolean)>
<com.fasterxml.jackson.databind.SerializerProvider: java.util.TimeZone getTimeZone()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>
<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter: java.lang.Object value(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.MapController$ReplayController$ReplayClass: void <init>(org.osmdroid.views.MapController$ReplayController,org.osmdroid.views.MapController$ReplayType,android.graphics.Point,org.osmdroid.api.IGeoPoint)>
<com.fasterxml.jackson.'annotation'.OptBoolean: java.lang.Boolean asBoolean()>
<org.osmdroid.views.MapView: org.osmdroid.api.IGeoPoint getMapCenter(org.osmdroid.util.GeoPoint)>
<com.fasterxml.jackson.databind.SerializerProvider: void <init>()>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Prop: java.lang.Class value()>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty findReferenceType()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setFilteredProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<com.android.gpstest.util.MathUtils: float mod(float,float)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.PropertyName getWrapperName()>
<com.fasterxml.jackson.databind.DeserializationContext: void <init>(com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.deser.DeserializerCache)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.'annotation'.JsonFormat$Value getDefaultPropertyFormat(java.lang.Class)>
<org.osmdroid.tileprovider.modules.MapTileDownloader: void <init>(org.osmdroid.tileprovider.tilesource.ITileSource,org.osmdroid.tileprovider.modules.IFilesystemCache,org.osmdroid.tileprovider.modules.INetworkAvailablityCheck)>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: com.fasterxml.jackson.databind.introspect.AnnotationMap collectAnnotations(java.lang.reflect.AnnotatedElement,java.lang.reflect.AnnotatedElement)>
<org.osmdroid.views.MapView$MapViewDoubleClickListener: void <init>(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.PropertyName: boolean hasSimpleName(java.lang.String)>
<com.github.mikephil.charting.data.DataSet: void calcMinMaxX(com.github.mikephil.charting.data.Entry)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter: void assignSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<com.android.gpstest.NavigationDrawerFragment: void <clinit>()>
<com.fasterxml.jackson.databind.type.TypeBindings$AsKey: int hashCode()>
<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeBase: void serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<kotlin.text.StringsKt__StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>
<kotlin.jvm.internal.TypeIntrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>
<com.android.gpstest.BenchmarkControllerImpl: void onSatelliteStatusChanged(android.location.GnssStatus)>
<com.fasterxml.jackson.databind.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
<org.osmdroid.tileprovider.modules.TileWriter: java.io.File getFile(org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: java.util.TimeZone getTimeZone()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedMember findJsonValueAccessor()>
<kotlin.text.StringsKt__StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>
<org.osmdroid.views.overlay.TilesOverlay$OverlayTileLooper: void loop(double,org.osmdroid.util.RectL,android.graphics.Canvas)>
<kotlin.jvm.internal.PropertyReference: void <init>()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1: void <init>()>
<com.fasterxml.jackson.'annotation'.JsonSubTypes$Type: java.lang.String name()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void <clinit>()>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer: java.lang.String getPropertyName()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setKeepPositionOnRotation(boolean)>
<com.android.gpstest.dialog.ShareDialogFragment: void setListener(com.android.gpstest.dialog.ShareDialogFragment$Listener)>
<kotlin.jvm.internal.PropertyReference1: kotlin.reflect.KCallable computeReflected()>
<org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase: void <init>(java.lang.String,int,int,int,java.lang.String,java.lang.String[],java.lang.String,org.osmdroid.tileprovider.tilesource.TileSourcePolicy)>
<kotlin.ranges.IntProgressionIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.AnnotationIntrospector,boolean,com.fasterxml.jackson.databind.PropertyName)>
<org.osmdroid.views.CustomZoomButtonsController$3: void <init>(org.osmdroid.views.CustomZoomButtonsController)>
<com.github.mikephil.charting.highlight.ChartHighlighter: com.github.mikephil.charting.utils.MPPointD getValsForTouch(float,float)>
<org.osmdroid.tileprovider.MapTileProviderBase: void detach()>
<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void missing()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Boolean isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<org.osmdroid.tileprovider.tilesource.XYTileSource: java.lang.String getTileURLString(long)>
<org.osmdroid.views.MapView: void setHorizontalMapRepetitionEnabled(boolean)>
<kotlinx.coroutines.BlockingEventLoop: void <init>(java.lang.Thread)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object getDefaultBean()>
<kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>
<kotlinx.coroutines.internal.FastServiceLoader: java.util.List load(java.lang.Class,java.lang.ClassLoader)>
<com.fasterxml.jackson.core.JsonGenerator: void writeObjectRef(java.lang.Object)>
<com.github.mikephil.charting.data.ChartData: void calcMinMax()>
<com.github.mikephil.charting.highlight.HorizontalBarHighlighter: float getDistance(float,float,float,float)>
<kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>
<com.android.gpstest.util.SortUtil$Companion: java.util.List sortBySbasThenId(java.util.List)>
<com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic: void <init>(com.fasterxml.jackson.databind.type.TypeFactory,com.fasterxml.jackson.databind.type.TypeBindings)>
<kotlin.collections.EmptyIterator: int nextIndex()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: android.graphics.Bitmap approximateTileFromLowerZoom(android.graphics.drawable.BitmapDrawable,long,int)>
<kotlinx.coroutines.CommonPool: void close()>
<com.fasterxml.jackson.databind.introspect.Annotated: void <init>()>
<com.android.gpstest.util.UIUtils: java.lang.String getTtffString(int)>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.'annotation'.ObjectIdGenerator objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<kotlinx.coroutines.DispatchedTask: void <init>(int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withoutIgnored()>
<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap getReadOnlyLookupMap()>
<org.osmdroid.views.overlay.DefaultOverlayManager: org.osmdroid.views.overlay.Overlay get(int)>
<com.fasterxml.jackson.databind.util.ClassUtil$Ctor: void <init>(java.lang.reflect.Constructor)>
<kotlin.internal.PlatformImplementations$ReflectThrowable: void <init>()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeNumber(float)>
<com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer: void serialize(java.nio.ByteBuffer,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase asArraySerializer()>
<org.osmdroid.tileprovider.MapTileProviderBase: void rescaleCache(org.osmdroid.views.Projection,double,double,android.graphics.Rect)>
<org.osmdroid.views.overlay.gestures.RotationGestureDetector: float rotation(android.view.MotionEvent)>
<com.android.gpstest.dialog.ShareDialogFragment$Companion: java.lang.String getTAG()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void <init>(com.fasterxml.jackson.databind.util.TokenBuffer$Segment,com.fasterxml.jackson.core.ObjectCodec,boolean,boolean,com.fasterxml.jackson.core.JsonStreamContext)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4: java.lang.Throwable invoke(java.lang.Throwable)>
<com.github.mikephil.charting.interfaces.dataprovider.ChartInterface: int getMaxVisibleCount()>
<com.android.gpstest.dialog.UploadDeviceInfoFragment$onViewCreated$1$1: java.lang.Object invokeSuspend(java.lang.Object)>
<kotlin.reflect.KCallable: boolean isFinal()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildContainerSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicLongSerializer: void <init>()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>
<com.fasterxml.jackson.'annotation'.OptBoolean: com.fasterxml.jackson.'annotation'.OptBoolean valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>
<com.fasterxml.jackson.core.JsonGenerator: void _verifyOffsets(int,int,int)>
<kotlin.coroutines.EmptyCoroutineContext: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers: com.fasterxml.jackson.databind.JsonSerializer getStdKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,java.lang.Class,boolean)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer: void <init>()>
<kotlinx.coroutines.JobSupport: java.lang.String cancellationExceptionMessage()>
<com.android.gpstest.GpsStatusFragment: void onGnssFirstFix(int)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeString2(com.fasterxml.jackson.core.SerializableString)>
<kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandleNode firstChild(kotlinx.coroutines.Incomplete)>
<com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,com.fasterxml.jackson.core.JsonGenerator)>
<org.osmdroid.views.MapView: int getZoomLevel()>
<com.github.mikephil.charting.jobs.MoveViewJob: void <init>(com.github.mikephil.charting.utils.ViewPortHandler,float,float,com.github.mikephil.charting.utils.Transformer,android.view.View)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setShadowHeight(int)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Feature: void <init>(java.lang.String,int)>
<com.github.mikephil.charting.listener.OnChartGestureListener: void onChartSingleTapped(android.view.MotionEvent)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask(boolean)>
<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>
<kotlin.jvm.internal.CallableReference: java.lang.Object call(java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serialize(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.config.DefaultConfigurationProvider: java.text.SimpleDateFormat getHttpHeaderDateTimeFormat()>
<com.fasterxml.jackson.databind.ser.BeanSerializer: com.fasterxml.jackson.databind.ser.BeanSerializer createDummy(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: void clearQueue()>
<kotlin.reflect.KCallable: boolean isSuspend()>
<org.metalev.multitouch.controller.MultiTouchController$PositionAndScale: float getScale()>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader getTileLoader()>
<org.osmdroid.tileprovider.BitmapPool: void applyReusableOptions(android.graphics.BitmapFactory$Options,int,int)>
<org.osmdroid.views.Projection: float getOrientation()>
<com.fasterxml.jackson.core.JsonGenerator: boolean canWriteTypeId()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: boolean addEntry(com.github.mikephil.charting.data.Entry)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations: boolean hasOneOf(java.lang.Class[])>
<com.fasterxml.jackson.core.util.BufferRecycler: byte[] allocByteBuffer(int,int)>
<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Typing: com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Typing[] values()>
<org.osmdroid.util.TileSystem: boolean isValidLatitude(double)>
<org.osmdroid.views.MapView: void resetScrollableAreaLimitLongitude()>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.UUID)>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl: void <init>(com.fasterxml.jackson.databind.deser.DeserializerFactory)>
<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>
<kotlin.collections.EmptyIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.ser.std.NullSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.views.MapView: void updateTileSizeForDensity(org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.databind.ser.std.ByteArraySerializer: void serializeWithType(byte[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long markFrozen()>
<com.android.gpstest.BenchmarkControllerImpl: void onGnssStopped()>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.Class _notNullClass(java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addGetterMethod(java.util.Map,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.AnnotationIntrospector)>
<kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.JobSupport,java.lang.Object)>
<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.'annotation'.JsonFormat$Value findPropertyFormat(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<org.osmdroid.tileprovider.MapTileProviderArray: void mapTileRequestFailed(org.osmdroid.tileprovider.MapTileRequestState)>
<com.github.mikephil.charting.formatter.DefaultAxisValueFormatter: int getDecimalDigits()>
<org.osmdroid.views.overlay.DefaultOverlayManager$1: java.util.Iterator iterator()>
<kotlinx.coroutines.JobSupport: void completeStateFinalization(kotlinx.coroutines.Incomplete,java.lang.Object)>
<com.fasterxml.jackson.core.json.DupDetector: com.fasterxml.jackson.core.json.DupDetector child()>
<org.osmdroid.views.MapView: void <init>(android.content.Context,org.osmdroid.tileprovider.MapTileProviderBase,android.os.Handler,android.util.AttributeSet)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer: void serialize(java.lang.Number,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.android.gpstest.BenchmarkControllerImpl: void gpsStart()>
<com.github.mikephil.charting.charts.BarLineChartBase: void setHighlightPerDragEnabled(boolean)>
<kotlin.ranges.RangesKt: long coerceAtLeast(long,long)>
<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.'annotation'.JsonManagedReference: java.lang.String value()>
<com.github.mikephil.charting.charts.HorizontalBarChart: void setVisibleXRangeMaximum(float)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: boolean isDrawCirclesEnabled()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.components.Legend$LegendOrientation: com.github.mikephil.charting.components.Legend$LegendOrientation valueOf(java.lang.String)>
<kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void <init>()>
<com.fasterxml.jackson.core.JsonGenerator: boolean canOmitFields()>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.data.DataSet: float getYMin()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)>
<kotlin.collections.EmptySet: boolean containsAll(java.util.Collection)>
<com.sothree.slidinguppanel.ViewDragHelper: boolean checkTouchSlop(android.view.View,float,float)>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.databind.introspect.ObjectIdInfo getObjectIdInfo()>
<org.osmdroid.util.MapTileAreaZoomComputer: org.osmdroid.util.MapTileArea computeFromSource(org.osmdroid.util.MapTileArea,org.osmdroid.util.MapTileArea)>
<org.osmdroid.views.MapView: org.osmdroid.views.MapViewRepository getRepository()>
<com.android.gpstest.util.SatelliteUtils: boolean isCarrierPhaseSupported(android.location.GnssMeasurement)>
<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable,boolean)>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.Object get(java.lang.Object,java.lang.reflect.Field)>
<com.fasterxml.jackson.databind.JsonMappingException: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>
<org.osmdroid.tileprovider.modules.ZipFileArchive: void init(java.io.File)>
<org.osmdroid.views.MapView: void computeScroll()>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: int scheduleTask(long,kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue,kotlinx.coroutines.EventLoopImplBase)>
<org.osmdroid.util.BoundingBox$1: java.lang.Object createFromParcel(android.os.Parcel)>
<org.osmdroid.util.MapTileArea: int getZoom()>
<org.osmdroid.views.overlay.Overlay: void onPause()>
<com.fasterxml.jackson.core.JsonGenerator$Feature: boolean enabledIn(int)>
<org.osmdroid.util.MapTileAreaList$1: java.lang.Object next()>
<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.android.gpstest.dialog.ShareDialogFragment$Companion: void <init>()>
<com.android.gpstest.util.UIUtils: java.lang.String getGnssDisplayName(android.content.Context,com.android.gpstest.model.GnssType)>
<kotlinx.coroutines.CoroutineId: int hashCode()>
<org.osmdroid.util.GEMFFile: void <init>(java.io.File)>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend: boolean prepend()>
<com.fasterxml.jackson.databind.util.TypeKey: int typedHash(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: int getColor(int)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer: void serialize(java.sql.Time,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withValue(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.utils.ViewPortHandler: float getScaleY()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeStartArray(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withoutNonVisible()>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onLongPress(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer: void <init>(java.lang.Class)>
<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] _qbuf()>
<com.fasterxml.jackson.databind.type.SimpleType: boolean isContainerType()>
<org.osmdroid.util.ListPointL$1: org.osmdroid.util.PointL next()>
<kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties: boolean allowSetters()>
<kotlin.collections.SetsKt__SetsKt: java.util.Set emptySet()>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$1: void <clinit>()>
<kotlinx.coroutines.scheduling.WorkQueue: void offloadAllWorkTo(kotlinx.coroutines.scheduling.GlobalQueue)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setPinchZoom(boolean)>
<com.fasterxml.jackson.databind.ser.PropertyWriter: void <init>(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic: com.fasterxml.jackson.databind.JavaType resolveType(java.lang.reflect.Type)>
<kotlinx.coroutines.scheduling.TimeSource: void <init>()>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty: boolean isBackReference()>
<kotlinx.coroutines.scheduling.Task: void <init>(long,kotlinx.coroutines.scheduling.TaskContext)>
<kotlin.collections.EmptyList: boolean contains(java.lang.Object)>
<org.osmdroid.views.CustomZoomButtonsController: void onDetach()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: int hashCode()>
<org.osmdroid.util.TileSystem: double getLatitudeFromY01(double)>
<com.github.mikephil.charting.charts.HorizontalBarChart: void init()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$SnakeCaseStrategy: void <init>()>
<org.osmdroid.util.TileSystem: long ClipToLong(double,double,boolean)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializer: void <init>()>
<kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext getImmediate()>
<org.osmdroid.views.MapView: org.osmdroid.tileprovider.MapTileProviderBase getTileProvider()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: void <init>(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.PropertyMetadata,com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfError(java.lang.Throwable)>
<org.osmdroid.util.MapTileAreaList: void <init>()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void <init>(com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Object getValue(java.lang.Object)>
<com.fasterxml.jackson.databind.type.ReferenceType: java.lang.String toString()>
<kotlinx.coroutines.CommonPool: void <clinit>()>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class,com.fasterxml.jackson.databind.JavaType)>
<kotlin.Pair: java.lang.Object component1()>
<kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>
<com.github.mikephil.charting.interfaces.dataprovider.BarLineScatterCandleBubbleDataProvider: float getHighestVisibleX()>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: java.util.ArrayDeque createStackTrace(kotlin.coroutines.jvm.internal.CoroutineStackFrame)>
<com.fasterxml.jackson.databind.ser.AnyGetterWriter: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.JavaType: int containedTypeCount()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.AnnotatedMember getAnyGetter()>
<org.osmdroid.util.SegmentIntersection: double middle(double,double,double,double)>
<org.osmdroid.util.TileSystem: double cleanLatitude(double)>
<kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()>
<org.osmdroid.util.SegmentIntersection: boolean intersection(double,double,double,double,double,double,double,double,org.osmdroid.util.PointL)>
<kotlin.jvm.internal.ClassReference: void <clinit>()>
<com.github.mikephil.charting.utils.ViewPortHandler: void zoom(float,float,float,float,android.graphics.Matrix)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: java.lang.String toString()>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalCpuWork$kotlinx_coroutines_core()>
<com.github.mikephil.charting.renderer.DataRenderer: void initBuffers()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion(java.lang.Class)>
<com.fasterxml.jackson.databind.JsonMappingException: java.lang.StringBuilder getPathReference(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.DeserializationFeature: int getMask()>
<org.osmdroid.tileprovider.util.SimpleInvalidationHandler: void <init>(android.view.View)>
<com.fasterxml.jackson.core.util.DefaultIndenter: void writeIndentation(com.fasterxml.jackson.core.JsonGenerator,int)>
<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder withSimpleName(java.lang.String)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder typeIdVisibility(boolean)>
<org.osmdroid.tileprovider.modules.CantContinueException: void <init>(java.lang.Throwable)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: float getXMax()>
<com.fasterxml.jackson.core.io.IOContext: void _verifyRelease(byte[],byte[])>
<org.osmdroid.util.BoundingBox: org.osmdroid.util.BoundingBox fromGeoPoints(java.util.List)>
<kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue: void <init>(long)>
<com.fasterxml.jackson.core.io.CharTypes: void appendQuoted(java.lang.StringBuilder,java.lang.String)>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: org.osmdroid.tileprovider.modules.MapTileAssetsProvider$TileLoader getTileLoader()>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onTrackballEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<kotlin.coroutines.ContinuationInterceptor: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Boolean isTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: void <init>(int,int)>
<com.android.gpstest.dialog.ShareCollectionAdapter$createFragment$1: void <init>(com.android.gpstest.dialog.ShareCollectionAdapter)>
<org.osmdroid.views.MapView: void onDetach()>
<kotlinx.coroutines.scheduling.DefaultScheduler: java.lang.String toString()>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.ser.FilterProvider getFilterProvider()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void <init>(com.fasterxml.jackson.databind.JavaType,java.lang.Class,java.util.List,java.lang.Class,com.fasterxml.jackson.databind.util.Annotations,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver,com.fasterxml.jackson.databind.type.TypeFactory,boolean)>
<com.github.mikephil.charting.utils.Utils: com.github.mikephil.charting.formatter.IValueFormatter getDefaultValueFormatter()>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: void <init>(java.lang.String,int,java.lang.String)>
<com.fasterxml.jackson.core.io.SerializedString: int hashCode()>
<com.github.mikephil.charting.data.ChartData: void addDataSet(com.github.mikephil.charting.interfaces.datasets.IDataSet)>
<kotlinx.coroutines.CopyableThrowable: java.lang.Throwable createCopy()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback: void onViewPositionChanged(android.view.View,int,int,int,int)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker withFieldVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.internal.ThreadContextKt$countAll$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>
<kotlin.jvm.internal.CallableReference: boolean isFinal()>
<kotlinx.coroutines.EventLoopImplBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
<kotlin.ranges.IntRange: boolean equals(java.lang.Object)>
<com.github.mikephil.charting.data.BaseEntry: float getY()>
<com.sothree.slidinguppanel.ViewDragHelper: void abort()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.android.gpstest.BenchmarkControllerImpl: void onNmeaMessage(java.lang.String,long)>
<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>
<org.osmdroid.tileprovider.MapTileProviderArray: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<kotlinx.coroutines.JobSupport: boolean handleJobException(java.lang.Throwable)>
<com.github.mikephil.charting.renderer.LineRadarRenderer: boolean clipPathSupported()>
<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task addLast(kotlinx.coroutines.scheduling.Task)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1: void <init>(java.lang.reflect.Constructor)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<kotlin.jvm.internal.Reflection: java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda)>
<org.osmdroid.util.TileSystem: long getCleanMercator(long,double,boolean)>
<com.fasterxml.jackson.databind.PropertyMetadata: com.fasterxml.jackson.databind.PropertyMetadata construct(java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.String)>
<org.osmdroid.util.GEMFFile$GEMFInputStream: int read()>
<kotlin.ranges.RangesKt: kotlin.ranges.IntProgression downTo(int,int)>
<kotlin.sequences.SequencesKt___SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>
<org.osmdroid.views.MapView: void setBackgroundColor(int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$7: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.Writer,char)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: void fixAccess(boolean)>
<kotlin.reflect.KProperty: boolean isLateinit()>
<com.fasterxml.jackson.databind.JsonMappingException: java.lang.String getMessage()>
<com.github.mikephil.charting.interfaces.datasets.ILineScatterCandleRadarDataSet: boolean isVerticalHighlightIndicatorEnabled()>
<org.osmdroid.tileprovider.modules.SqlTileWriter$1: void run()>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerators$Base: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.type.MapLikeType: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.NameTransformer$3: java.lang.String toString()>
<kotlinx.coroutines.Incomplete: kotlinx.coroutines.NodeList getList()>
<com.github.mikephil.charting.renderer.BarChartRenderer: void drawDataSet(android.graphics.Canvas,com.github.mikephil.charting.interfaces.datasets.IBarDataSet,int)>
<org.osmdroid.tileprovider.util.StreamUtils: void closeStream(java.io.Closeable)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Object,boolean)>
<com.github.mikephil.charting.utils.ViewPortHandler: com.github.mikephil.charting.utils.MPPointF getContentCenter()>
<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>
<org.osmdroid.views.Projection: long getLongPixelYFromMercator(long,boolean)>
<org.osmdroid.views.overlay.TilesOverlay: void draw(android.graphics.Canvas,org.osmdroid.views.Projection)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: java.lang.Class getDeclaringClass()>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawLinearFill(android.graphics.Canvas,com.github.mikephil.charting.interfaces.datasets.ILineDataSet,com.github.mikephil.charting.utils.Transformer,com.github.mikephil.charting.renderer.BarLineScatterCandleBubbleRenderer$XBounds)>
<com.github.mikephil.charting.renderer.HorizontalBarChartRenderer: void initBuffers()>
<com.fasterxml.jackson.core.io.IOContext: void _verifyAlloc(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: java.lang.Object _getReferenced(java.lang.Object)>
<com.github.mikephil.charting.utils.Utils: float roundToNextSignificant(double)>
<kotlinx.coroutines.EventLoopImplBase: long getNextTime()>
<kotlinx.coroutines.CancellableContinuationImpl: void cancelResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)>
<kotlinx.coroutines.Job: void <clinit>()>
<com.android.gpstest.GpsStatusFragment: void onGnssStopped()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.util.NameTransformer)>
<com.github.mikephil.charting.components.LimitLine$LimitLabelPosition: com.github.mikephil.charting.components.LimitLine$LimitLabelPosition valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.util.Converter: com.fasterxml.jackson.databind.JavaType getOutputType(com.fasterxml.jackson.databind.type.TypeFactory)>
<com.fasterxml.jackson.databind.type.ArrayType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>
<com.fasterxml.jackson.core.SerializableString: char[] asQuotedChars()>
<com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer: void serialize(java.util.TimeZone,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.events.ZoomEvent: void <init>(org.osmdroid.views.MapView,double)>
<org.osmdroid.views.overlay.LinearRing: void setClipArea(org.osmdroid.views.Projection)>
<com.fasterxml.jackson.core.JsonProcessingException: java.lang.String toString()>
<com.android.gpstest.util.IOUtils: java.lang.String getGnssHardwareYear()>
<com.sothree.slidinguppanel.ViewDragHelper: void cancel()>
<com.github.mikephil.charting.data.DataSet: java.util.List getValues()>
<com.fasterxml.jackson.core.PrettyPrinter: void writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionType construct(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.tileprovider.ExpirableBitmapDrawable: boolean setState(int[])>
<kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()>
<kotlinx.coroutines.scheduling.WorkQueue: long tryStealFrom(kotlinx.coroutines.scheduling.WorkQueue)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: void serialize(java.sql.Date,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.ClassStack: com.fasterxml.jackson.databind.type.ClassStack child(java.lang.Class)>
<kotlinx.coroutines.NodeList: boolean isActive()>
<kotlinx.coroutines.DefaultExecutor: java.lang.Thread createThreadSync()>
<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend: com.fasterxml.jackson.databind.'annotation'.JsonAppend$Prop[] props()>
<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: void <init>(java.lang.Throwable,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.util.NameTransformer findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder$1: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void serializeContents(float[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<org.osmdroid.views.MapView: float getMapScale()>
<kotlinx.coroutines.CoroutineId: java.lang.String updateThreadContext(kotlin.coroutines.CoroutineContext)>
<org.osmdroid.views.MapController$MapAnimatorListener: void onAnimationRepeat(android.animation.Animator)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: boolean hasAnnotations()>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: boolean isUnwrappingSerializer()>
<kotlinx.coroutines.JobSupport: boolean addLastAtomic(java.lang.Object,kotlinx.coroutines.NodeList,kotlinx.coroutines.JobNode)>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean isRemoved()>
<org.osmdroid.views.MapController: void onAnimationStart()>
<com.fasterxml.jackson.'annotation'.JsonInclude: java.lang.Class contentFilter()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void <init>(java.lang.Class)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: float getYMax()>
<com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException 'from'(com.fasterxml.jackson.core.JsonGenerator,java.lang.String)>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: int hashCode()>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsRFC1123(java.lang.String,java.text.ParsePosition)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: int ordinal()>
<kotlin.coroutines.ContinuationInterceptor: void releaseInterceptedContinuation(kotlin.coroutines.Continuation)>
<org.osmdroid.views.overlay.gestures.RotationGestureDetector$RotationListener: void onRotate(float)>
<com.github.mikephil.charting.charts.Chart: void setNoDataTextTypeface(android.graphics.Typeface)>
<kotlinx.coroutines.JobSupport: boolean isActive()>
<org.osmdroid.config.DefaultConfigurationProvider: short getTileFileSystemMaxQueueSize()>
<org.osmdroid.views.MapController: void setCenter(org.osmdroid.api.IGeoPoint)>
<com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver: java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)>
<kotlinx.coroutines.CoroutineContextKt: void <clinit>()>
<org.osmdroid.tileprovider.MapTileProviderBase: org.osmdroid.tileprovider.MapTileCache createTileCache()>
<org.osmdroid.tileprovider.BitmapPool: void syncRecycle(android.graphics.drawable.Drawable)>
<kotlin.collections.EmptySet: boolean removeAll(java.util.Collection)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: boolean hasKnownClassAnnotations()>
<com.fasterxml.jackson.core.json.DupDetector: java.lang.Object getSource()>
<com.fasterxml.jackson.databind.SerializationFeature: void <init>(java.lang.String,int,boolean)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void _formatBCEYear(java.lang.StringBuffer,int)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,kotlinx.coroutines.scheduling.Task,boolean)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.core.util.BufferRecycler: byte[] balloc(int)>
<kotlinx.coroutines.CompletedExceptionallyKt: java.lang.Object toState(java.lang.Object)>
<org.osmdroid.tileprovider.tilesource.TileSourcePolicy: boolean acceptsUserAgent(java.lang.String)>
<org.osmdroid.util.ListPointL: org.osmdroid.util.PointL get(int)>
<org.osmdroid.util.ListPointL$1: void remove()>
<kotlinx.coroutines.internal.LockFreeTaskQueue: int getSize()>
<com.github.mikephil.charting.components.Legend: android.graphics.DashPathEffect getFormLineDashEffect()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int _getterPriority(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<org.osmdroid.tileprovider.modules.MapTileApproximater: int getMinimumZoomLevel()>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: java.util.Map _findFields(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,com.fasterxml.jackson.databind.JavaType,java.util.Map)>
<com.fasterxml.jackson.databind.jsontype.TypeIdResolver: void init(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: com.fasterxml.jackson.databind.introspect.AnnotationMap getAllAnnotations()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<kotlinx.coroutines.CoroutineId$Key: void <init>()>
<com.github.mikephil.charting.highlight.Highlight: void <init>(float,float,float,float,int,int,com.github.mikephil.charting.components.YAxis$AxisDependency)>
<kotlinx.coroutines.internal.ScopeCoroutine: void afterCompletion(java.lang.Object)>
<kotlin.coroutines.jvm.internal.DebugMetadataKt: void checkDebugMetadataVersion(int,int)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task createTask$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void setLenient(boolean)>
<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <clinit>()>
<kotlin.collections.EmptyMap: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo createInitial(int)>
<org.osmdroid.util.MapTileList: void put(long)>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: void performZoom(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.type.ReferenceType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>
<org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase: java.lang.String getBaseUrl()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void <init>(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.PropertyName)>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: java.lang.Object getId()>
<org.osmdroid.tileprovider.MapTileProviderArray: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase findNextAppropriateProvider(org.osmdroid.tileprovider.MapTileRequestState)>
<com.fasterxml.jackson.databind.MapperFeature: boolean enabledIn(int)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter: void writeIndentation(com.fasterxml.jackson.core.JsonGenerator,int)>
<com.android.gpstest.NavigationDrawerFragment: void onSaveInstanceState(android.os.Bundle)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType)>
<kotlinx.coroutines.CoroutineStart: void invoke(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.'annotation'.JsonFormat$Value findExpectedFormat(com.fasterxml.jackson.'annotation'.JsonFormat$Value)>
<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode removeFirstOrNull()>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: com.fasterxml.jackson.core.JsonGenerator setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.type.ArrayType withContentTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean _equal(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withNext(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int tertiaryCount()>
<com.fasterxml.jackson.databind.type.TypeFactory: void <init>(com.fasterxml.jackson.databind.util.LRUMap)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: java.lang.Iterable customSerializers()>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer$TypeSerializerRerouter: com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: boolean isExplicitlyIncluded()>
<kotlin.collections.EmptyList: int size()>
<org.osmdroid.tileprovider.ReusableBitmapDrawable: android.graphics.Bitmap tryRecycle()>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void <init>(kotlin.coroutines.Continuation)>
<kotlinx.coroutines.JobNode: void <init>(kotlinx.coroutines.Job)>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value withOverrides(com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value)>
<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat clone()>
<org.osmdroid.util.SegmentClipper: boolean isInClipArea(long,long)>
<org.osmdroid.views.overlay.PolyOverlayWithIW: void drawWithPath(android.graphics.Canvas,org.osmdroid.views.Projection)>
<com.fasterxml.jackson.databind.ser.SerializerCache: void addAndResolveNonTypedSerializer(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.MapView: boolean setPositionAndScale(java.lang.Object,org.metalev.multitouch.controller.MultiTouchController$PositionAndScale,org.metalev.multitouch.controller.MultiTouchController$PointInfo)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.introspect.AnnotatedMethod resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<kotlinx.coroutines.EventLoopImplPlatform: void unpark()>
<kotlin.jvm.internal.Intrinsics: void <init>()>
<org.osmdroid.tileprovider.modules.SqlTileWriter: android.graphics.drawable.Drawable loadTile(org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<com.fasterxml.jackson.databind.JavaType: boolean hasGenericTypes()>
<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$SingleView: void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.ClassStack: void <init>(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class)>
<com.android.gpstest.dialog.ShareDialogFragment$Companion: java.lang.String getKEY_ALTERNATE_FILE_URI()>
<com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer: void <init>()>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: void renderLimitLines(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: java.lang.Object getValue(java.lang.Object)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.JavaType refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase: void <init>(com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase)>
<kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.CoroutineDispatcher getIO()>
<com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeFactory,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>
<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: void <init>(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)>
<org.osmdroid.config.DefaultConfigurationProvider: int getAnimationSpeedShort()>
<com.fasterxml.jackson.databind.PropertyName: int hashCode()>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.type.ArrayType withTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: boolean equals(java.lang.Object)>
<org.osmdroid.views.Projection: long getCleanMercator(long,boolean)>
<kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker withCreatorVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1: void <init>()>
<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable compute()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.'annotation'.JsonSerialize$Typing findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.'annotation'.JacksonInject$Value findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class getOuterClass(java.lang.Class)>
<kotlin.jvm.internal.Reflection: kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapType withStaticTyping()>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalBlockingWork(boolean)>
<com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<kotlinx.coroutines.EventLoopImplPlatform: void reschedule(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)>
<org.osmdroid.util.TileSystemWebMercator: double getMinLatitude()>
<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toList(java.lang.Iterable)>
<org.osmdroid.util.TileSystemWebMercator: double getLongitudeFromX01(double)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: float getAnchorPoint()>
<com.fasterxml.jackson.databind.ser.BeanSerializer: com.fasterxml.jackson.databind.JsonSerializer unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: void setValueFormatter(com.github.mikephil.charting.formatter.IValueFormatter)>
<com.fasterxml.jackson.databind.exc.InvalidDefinitionException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException 'from'(com.fasterxml.jackson.core.JsonParser,java.lang.String,com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.util.GeoPoint$1: void <init>()>
<com.github.mikephil.charting.renderer.BarChartRenderer: void initBuffers()>
<org.osmdroid.config.DefaultConfigurationProvider: boolean isDebugTileProviders()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _removeUnwantedAccessor(java.util.Map)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>
<kotlinx.coroutines.JobSupportKt: java.lang.Object boxIncomplete(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector constructPropertyCollector(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.JavaType,boolean,java.lang.String)>
<com.fasterxml.jackson.databind.ser.BeanSerializer: java.lang.String toString()>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode removeOrNext()>
<com.fasterxml.jackson.databind.util.TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.data.BarLineScatterCandleBubbleData getData()>
<kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>
<org.metalev.multitouch.controller.MultiTouchController: void anchorAtThisPositionAndScale()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String toString()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createRootContext(com.fasterxml.jackson.core.json.DupDetector)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.Class getRawType()>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void <clinit>()>
<com.fasterxml.jackson.'annotation'.JsonIdentityInfo: java.lang.Class resolver()>
<com.fasterxml.jackson.core.util.TextBuffer: com.fasterxml.jackson.core.util.TextBuffer fromInitial(char[])>
<com.github.mikephil.charting.charts.Chart: void disableScroll()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.JsonParser$NumberType: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: boolean isTypeId()>
<com.github.mikephil.charting.charts.HorizontalBarChart: void calculateOffsets()>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.StackTraceElement artificialFrame(java.lang.String)>
<com.android.gpstest.GpsTestActivity: void updateGeomagneticField()>
<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>
<org.osmdroid.tileprovider.modules.MBTilesFileArchive: void <init>()>
<org.osmdroid.tileprovider.util.StreamUtils: long copy(java.io.InputStream,java.io.OutputStream)>
<kotlinx.coroutines.CancellableContinuationImpl: void setParentHandle(kotlinx.coroutines.DisposableHandle)>
<kotlinx.coroutines.Incomplete: boolean isActive()>
<com.android.gpstest.dialog.UploadDeviceInfoFragment: void <clinit>()>
<com.fasterxml.jackson.databind.DeserializationConfig: void <clinit>()>
<org.osmdroid.tileprovider.modules.ConfigurablePriorityThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector: void <init>(java.lang.Object)>
<kotlinx.coroutines.CommonPool$createPlainPool$1: void <init>(java.util.concurrent.atomic.AtomicInteger)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String getName()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties: boolean ignoreUnknown()>
<kotlin.collections.EmptySet: boolean addAll(java.util.Collection)>
<com.github.mikephil.charting.interfaces.datasets.ILineRadarDataSet: int getFillColor()>
<com.github.mikephil.charting.renderer.XAxisRenderer: void drawLabel(android.graphics.Canvas,java.lang.String,float,float,com.github.mikephil.charting.utils.MPPointF,float)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: boolean isFieldVisible(com.fasterxml.jackson.databind.introspect.AnnotatedField)>
<com.fasterxml.jackson.databind.type.SimpleType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.SerializerProvider: void <init>(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)>
<com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: void <clinit>()>
<kotlin.collections.EmptyList: int lastIndexOf(java.lang.Void)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.PropertyNamingStrategy getPropertyNamingStrategy()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.util.Set _findExplicitNames(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked,java.util.Set)>
<kotlin.Result$Failure: boolean equals(java.lang.Object)>
<org.osmdroid.tileprovider.modules.DatabaseFileArchive: void <init>()>
<org.osmdroid.tileprovider.MapTileProviderArray: void <init>(org.osmdroid.tileprovider.tilesource.ITileSource,org.osmdroid.tileprovider.IRegisterReceiver)>
<kotlin.jvm.internal.Intrinsics: void throwParameterIsNullNPE(java.lang.String)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getKeyType()>
<com.android.gpstest.io.DevicePropertiesUploader: void logFailure(java.lang.String,java.io.IOException)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.AnnotatedClass getClassDef()>
<org.osmdroid.views.MapView: android.graphics.Rect getScreenRect(android.graphics.Rect)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.ser.BeanPropertyWriter _new(com.fasterxml.jackson.databind.PropertyName)>
<org.osmdroid.views.Projection: android.graphics.Rect getPixelFromTile(int,int,android.graphics.Rect)>
<com.fasterxml.jackson.core.io.JsonStringEncoder: void <init>()>
<com.github.mikephil.charting.data.Entry: void writeToParcel(android.os.Parcel,int)>
<kotlinx.coroutines.internal.LockFreeTaskQueue: void <init>(boolean)>
<kotlin.coroutines.jvm.internal.SuspendLambda: int getArity()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: boolean _empty(java.util.Set,boolean,boolean,boolean,boolean)>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: void <init>(java.lang.Class,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: boolean getUsesDataConnection()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String _defaultTypeId(java.lang.Class)>
<org.osmdroid.views.overlay.DefaultOverlayManager: void onResume()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter: void writeIndentation(com.fasterxml.jackson.core.JsonGenerator,int)>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.fasterxml.jackson.databind.util.TokenBuffer: boolean canWriteTypeId()>
<kotlinx.coroutines.JobNode: void dispose()>
<com.github.mikephil.charting.data.DataSet: java.util.List getEntriesForXValue(float)>
<org.osmdroid.tileprovider.modules.ZipFileArchive: java.lang.String getTileRelativeFilenameString(long,java.lang.String)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: void <init>(com.fasterxml.jackson.databind.cfg.BaseSettings,com.fasterxml.jackson.databind.jsontype.SubtypeResolver,com.fasterxml.jackson.databind.introspect.SimpleMixInResolver,com.fasterxml.jackson.databind.util.RootNameLookup,com.fasterxml.jackson.databind.cfg.ConfigOverrides)>
<com.github.mikephil.charting.renderer.LineChartRenderer$DataSetImageCache: void <init>(com.github.mikephil.charting.renderer.LineChartRenderer,com.github.mikephil.charting.renderer.LineChartRenderer$1)>
<kotlinx.coroutines.EventLoopImplBase: boolean enqueueImpl(java.lang.Runnable)>
<org.osmdroid.views.overlay.infowindow.MarkerInfoWindow: void onClose()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: void computeZoomLevels()>
<kotlinx.coroutines.EventLoopImplPlatform: void <init>()>
<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String toString()>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value getIgnorals()>
<com.fasterxml.jackson.databind.util.Annotations: boolean has(java.lang.Class)>
<com.fasterxml.jackson.'annotation'.JsonSetter$Value: com.fasterxml.jackson.'annotation'.JsonSetter$Value 'from'(com.fasterxml.jackson.'annotation'.JsonSetter)>
<com.github.mikephil.charting.utils.MPPointF: void <init>()>
<kotlinx.coroutines.JobSupport: void continueCompleting(kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: boolean isCollectionLikeType()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer withContentInclusion(java.lang.Object,boolean)>
<kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: java.util.List orderProperties(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<com.fasterxml.jackson.databind.BeanProperty$Std: com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>
<com.github.mikephil.charting.data.BaseDataSet: void <init>(java.lang.String)>
<kotlinx.coroutines.Unconfined: void <init>()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion(java.lang.Class)>
<kotlin.reflect.KCallable: java.lang.Object call(java.lang.Object[])>
<kotlin.coroutines.jvm.internal.DebugMetadata: java.lang.String f()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase: java.lang.String nameForField(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedField,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.util.Annotations resolveClassAnnotations(java.util.List)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _updateCreatorProperty(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder,java.util.List)>
<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.MPPointD getValuesByTouchPoint(float,float)>
<kotlinx.coroutines.DispatchedTask: java.lang.Throwable getExceptionalResult$kotlinx_coroutines_core(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String getName()>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.util.NameTransformer)>
<org.osmdroid.tileprovider.tilesource.ITileSource: java.lang.String name()>
<org.osmdroid.views.overlay.Polyline: boolean onSingleTapConfirmed(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$LayoutParams: void <init>()>
<org.osmdroid.views.MapController$MapAnimatorListener: void <init>(org.osmdroid.views.MapController,java.lang.Double,java.lang.Double,org.osmdroid.api.IGeoPoint,org.osmdroid.api.IGeoPoint,java.lang.Float,java.lang.Float,java.lang.Boolean)>
<org.osmdroid.views.MapController: boolean zoomTo(double,java.lang.Long)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void serialize(double[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>
<org.osmdroid.views.CustomZoomButtonsDisplay: void setBitmaps(android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)>
<com.github.mikephil.charting.charts.Chart: android.graphics.RectF getContentRect()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: boolean isAnnotationBundle(java.lang.'annotation'.Annotation)>
<org.osmdroid.views.CustomZoomButtonsController$1: void onAnimationUpdate(android.animation.ValueAnimator)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$10: void <clinit>()>
<org.osmdroid.tileprovider.modules.MapTileApproximater: org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader getTileLoader()>
<com.github.mikephil.charting.data.DataSet$Rounding: void <clinit>()>
<com.fasterxml.jackson.core.JsonGenerator: void close()>
<com.fasterxml.jackson.databind.SerializerProvider: java.text.DateFormat _dateFormat()>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean remove()>
<org.osmdroid.config.IConfigurationProvider: java.net.Proxy getHttpProxy()>
<com.fasterxml.jackson.databind.type.TypeBase: java.util.List getInterfaces()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder withName(com.fasterxml.jackson.databind.PropertyName)>
<com.fasterxml.jackson.'annotation'.JsonFormat: java.lang.String locale()>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.github.mikephil.charting.data.BaseDataSet: boolean isDrawValuesEnabled()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void idleReset(int)>
<com.fasterxml.jackson.databind.JavaType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.lang.Throwable tryCopyException(java.lang.Throwable)>
<org.osmdroid.config.DefaultConfigurationProvider: void load(android.content.SharedPreferences,java.util.Map,java.lang.String)>
<org.osmdroid.util.RectL: void <init>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView: void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std withIsGetterVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Single: com.fasterxml.jackson.databind.JsonSerializer serializerFor(java.lang.Class)>
<org.osmdroid.views.overlay.infowindow.MarkerInfoWindow: void onOpen(java.lang.Object)>
<org.osmdroid.views.Projection: org.osmdroid.api.IGeoPoint fromPixels(int,int,org.osmdroid.util.GeoPoint,boolean)>
<com.fasterxml.jackson.core.util.VersionUtil: void throwInternal()>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.BeanDescription forSerialization(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<kotlinx.coroutines.BlockingEventLoop: java.lang.Thread getThread()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: java.lang.String getLabel()>
<kotlinx.coroutines.CoroutineDispatcher$Key$1: kotlinx.coroutines.CoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element)>
<com.github.mikephil.charting.charts.Chart: void unbindDrawables(android.view.View)>
<com.sothree.slidinguppanel.ViewDragHelper: void saveLastMotion(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.BeanProperty$Bogus: com.fasterxml.jackson.databind.JavaType getType()>
<com.github.mikephil.charting.utils.Utils: int getMinimumFlingVelocity()>
<kotlinx.coroutines.scheduling.DefaultScheduler: void close()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void <clinit>()>
<org.osmdroid.views.overlay.infowindow.InfoWindow: void onOpen(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.CollectorBase: boolean _ignorableAnnotation(java.lang.'annotation'.Annotation)>
<org.osmdroid.views.overlay.Overlay: void draw(android.graphics.Canvas,org.osmdroid.views.Projection)>
<kotlin.ranges.IntProgression: boolean isEmpty()>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility: void <clinit>()>
<com.fasterxml.jackson.core.io.JsonStringEncoder: com.fasterxml.jackson.core.io.JsonStringEncoder getInstance()>
<com.github.mikephil.charting.data.BarLineScatterCandleBubbleDataSet: int getHighLightColor()>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3: java.lang.Throwable invoke(java.lang.Throwable)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider$TileLoader: void <init>(org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider)>
<com.fasterxml.jackson.databind.type.TypeBase: com.fasterxml.jackson.databind.JavaType getSuperClass()>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionLikeType withTypeHandler(java.lang.Object)>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: boolean getUsesDataConnection()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$EmptyCollector: com.fasterxml.jackson.databind.introspect.AnnotationCollector addOrOverride(java.lang.'annotation'.Annotation)>
<org.osmdroid.tileprovider.modules.TileWriter: void cutCurrentCache()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder getDefaultTyper(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.renderer.HorizontalBarChartRenderer: void drawValue(android.graphics.Canvas,java.lang.String,float,float,int)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Object clone()>
<com.fasterxml.jackson.databind.type.ClassKey: boolean equals(java.lang.Object)>
<kotlinx.coroutines.CommonPool$isGoodCommonPool$1: void <clinit>()>
<org.osmdroid.tileprovider.MapTileProviderBase$ScaleTileLooper: void computeTile(long,int,int)>
<kotlinx.coroutines.DispatchedTask: java.lang.Object takeState$kotlinx_coroutines_core()>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float,org.osmdroid.views.MapView)>
<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonFactory disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>
<kotlin.random.jdk8.PlatformThreadLocalRandom: java.util.Random getImpl()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value findPropertyIgnorals(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: boolean hasAnnotation(java.lang.Class)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapType withKeyType(com.fasterxml.jackson.databind.JavaType)>
<kotlinx.coroutines.CoroutineDispatcher$Key$1: void <init>()>
<com.fasterxml.jackson.core.util.BufferRecycler: void releaseByteBuffer(int,byte[])>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void assignNullSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView: void assignSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.utils.Transformer getTransformer(com.github.mikephil.charting.components.YAxis$AxisDependency)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: com.fasterxml.jackson.databind.JavaType findSerializationType(com.fasterxml.jackson.databind.introspect.Annotated,boolean,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.BasicBeanDescription _findStdJdkCollectionDesc(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.util.NameTransformer)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.JsonSerializer serializerFor(java.lang.Class)>
<com.fasterxml.jackson.databind.SerializationConfig: void <init>(com.fasterxml.jackson.databind.cfg.BaseSettings,com.fasterxml.jackson.databind.jsontype.SubtypeResolver,com.fasterxml.jackson.databind.introspect.SimpleMixInResolver,com.fasterxml.jackson.databind.util.RootNameLookup,com.fasterxml.jackson.databind.cfg.ConfigOverrides)>
<kotlin.jvm.internal.TypeIntrinsics: int getFunctionArity(java.lang.Object)>
<kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.lang.Object initialValue()>
<org.osmdroid.util.MapTileArea$1: boolean hasNext()>
<com.android.gpstest.util.NmeaUtils: java.lang.Double getAltitudeMeanSeaLevel(java.lang.String)>
<com.android.gpstest.util.UIUtils: java.lang.String formatLocationForDisplay(android.location.Location,android.widget.TextView,boolean,com.google.android.material.chip.Chip,com.google.android.material.chip.Chip,com.google.android.material.chip.Chip,java.lang.String)>
<com.github.mikephil.charting.utils.Utils: void drawImage(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateHead(long,int)>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.android.gpstest.GpsTestActivity: void maybeShowNavMessageSupportToast(java.lang.String)>
<com.github.mikephil.charting.highlight.Highlight: int getDataSetIndex()>
<com.fasterxml.jackson.databind.util.TokenBuffer: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer: void serialize(com.fasterxml.jackson.databind.util.TokenBuffer,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,double[])>
<org.osmdroid.tileprovider.modules.TileWriter$1: void run()>
<org.osmdroid.views.overlay.TilesOverlay: android.graphics.drawable.Drawable getLoadingTile()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findValueSerializer(java.lang.Class)>
<kotlinx.coroutines.CoroutineId: void <init>(long)>
<com.fasterxml.jackson.databind.RuntimeJsonMappingException: void <init>(com.fasterxml.jackson.databind.JsonMappingException)>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void <init>()>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float,org.osmdroid.views.MapView)>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.String toString()>
<org.osmdroid.tileprovider.BitmapPool: void asyncRecycle(android.graphics.drawable.Drawable)>
<com.android.gpstest.dialog.ShareCollectionAdapter: androidx.fragment.app.Fragment createFragment(int)>
<com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer: void serializeWithType(java.net.InetSocketAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.views.MapView: org.osmdroid.util.TileSystem getTileSystem()>
<com.fasterxml.jackson.databind.JsonMappingException: java.lang.String _buildMessage()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.highlight.Highlight getHighlightByTouchPoint(float,float)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer getUnknownTypeSerializer(java.lang.Class)>
<com.fasterxml.jackson.databind.type.PlaceholderForType: java.lang.String buildCanonicalName()>
<kotlinx.coroutines.InactiveNodeList: boolean isActive()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildObjectContext(java.lang.Object)>
<org.osmdroid.util.PathBuilder: void <init>(android.graphics.Path)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: boolean saveFile(org.osmdroid.tileprovider.tilesource.ITileSource,long,java.io.InputStream,java.lang.Long)>
<com.fasterxml.jackson.databind.DatabindContext: java.lang.String _format(java.lang.String,java.lang.Object[])>
<com.fasterxml.jackson.databind.type.TypeBase: com.fasterxml.jackson.databind.JavaType containedType(int)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findValueSerializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.IterableSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: java.lang.Class findMixInClassFor(java.lang.Class)>
<com.fasterxml.jackson.databind.ext.OptionalHandlerFactory: void <init>()>
<com.fasterxml.jackson.'annotation'.JsonProperty$Access: void <init>(java.lang.String,int)>
<org.osmdroid.views.MapController: void animateTo(org.osmdroid.api.IGeoPoint,java.lang.Double,java.lang.Long,java.lang.Float)>
<com.github.mikephil.charting.data.DataSet: int getEntryIndex(float,float,com.github.mikephil.charting.data.DataSet$Rounding)>
<com.fasterxml.jackson.databind.type.PlaceholderForType: com.fasterxml.jackson.databind.JavaType actualType()>
<kotlin.reflect.KVisibility: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: boolean isIncludableConstructor(java.lang.reflect.Constructor)>
<com.android.gpstest.GpsStatusFragment: void updateFixTime()>
<com.fasterxml.jackson.databind.ser.std.StringSerializer: void <init>()>
<org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader: android.graphics.drawable.Drawable loadTile(long)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: com.fasterxml.jackson.databind.JavaType getType()>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: java.lang.Class keyUsing()>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void <init>(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlin.coroutines.CombinedContext: java.lang.String toString()>
<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty,java.lang.String)>
<kotlin.jvm.internal.MutablePropertyReference1: java.lang.Object invoke(java.lang.Object)>
<org.osmdroid.views.MapView: android.os.Handler getTileRequestCompleteHandler()>
<com.android.gpstest.dialog.ShareLocationFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.fasterxml.jackson.databind.ser.SerializerCache: void addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,float[])>
<com.fasterxml.jackson.core.util.Separators: char getArrayValueSeparator()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer withContentInclusion(java.lang.Object,boolean)>
<org.osmdroid.views.MapView: void setScrollableAreaLimitDouble(org.osmdroid.util.BoundingBox)>
<com.android.gpstest.dialog.ShareLocationFragment$onViewCreated$7: void <init>(com.android.gpstest.dialog.ShareLocationFragment,android.location.Location,android.widget.CheckBox)>
<com.fasterxml.jackson.databind.util.BeanUtil: java.lang.String okNameForGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,boolean)>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getGetter()>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean isDragYEnabled()>
<kotlinx.coroutines.CoroutineExceptionHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>
<com.fasterxml.jackson.core.util.ThreadLocalBufferManager: void <init>()>
<com.fasterxml.jackson.core.Base64Variants: void <clinit>()>
<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(int)>
<com.fasterxml.jackson.core.io.CharTypes: int[] get7BitOutputEscapes(int)>
<org.osmdroid.views.Projection: long getLongPixelXFromMercator(long,boolean)>
<com.fasterxml.jackson.databind.JsonSerializable: void serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: kotlinx.coroutines.internal.ThreadSafeHeap getHeap()>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: com.fasterxml.jackson.databind.ser.std.DateSerializer withFormat(java.lang.Boolean,java.text.DateFormat)>
<kotlinx.coroutines.internal.AtomicOp: void complete(java.lang.Object,java.lang.Object)>
<kotlinx.coroutines.DispatchedContinuation: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>
<com.github.mikephil.charting.utils.MPPointF$1: com.github.mikephil.charting.utils.MPPointF[] newArray(int)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Class[] findViews(com.fasterxml.jackson.databind.introspect.Annotated)>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: int getMaximumZoomLevel()>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer,java.lang.Boolean)>
<org.osmdroid.tileprovider.MapTilePreCache$1: void <init>(org.osmdroid.tileprovider.MapTilePreCache)>
<org.osmdroid.views.overlay.LinearRing: void computeProjected(org.osmdroid.views.Projection)>
<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext reset(int,java.lang.Object)>
<kotlinx.coroutines.JobSupportKt: java.lang.Object unboxState(java.lang.Object)>
<com.fasterxml.jackson.databind.JsonNode: void <init>()>
<org.osmdroid.util.PointL: void <init>()>
<org.osmdroid.views.overlay.Overlay: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.PropertyMetadata: com.fasterxml.jackson.databind.PropertyMetadata withMergeInfo(com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo)>
<org.osmdroid.views.MapView: long getMapScrollX()>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer createRoot()>
<org.osmdroid.views.MapView: void dispatchDraw(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: com.fasterxml.jackson.databind.JsonSerializer unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)>
<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>
<kotlinx.coroutines.internal.Symbol: java.lang.String toString()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _prependOrWriteCharacterEscape(char[],int,int,char,int)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: void <init>(com.fasterxml.jackson.databind.ser.Serializers[],com.fasterxml.jackson.databind.ser.Serializers[],com.fasterxml.jackson.databind.ser.BeanSerializerModifier[])>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean anyVisible()>
<com.fasterxml.jackson.core.util.InternCache: java.lang.String intern(java.lang.String)>
<kotlinx.coroutines.EventLoopImplBase: boolean shouldUnpark(kotlinx.coroutines.EventLoopImplBase$DelayedTask)>
<com.fasterxml.jackson.databind.type.MapLikeType: com.fasterxml.jackson.databind.JavaType getContentType()>
<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: java.lang.Object getFilterId()>
<com.github.mikephil.charting.data.DataSet: java.lang.String toSimpleString()>
<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findSerializer(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlin.collections.ArraysKt___ArraysKt: char single(char[])>
<com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer: void serialize(java.util.concurrent.atomic.AtomicBoolean,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.jvm.internal.Intrinsics: void throwJavaNpe()>
<kotlinx.coroutines.JobSupport: boolean tryFinalizeSimpleState(kotlinx.coroutines.Incomplete,java.lang.Object)>
<org.osmdroid.views.CustomZoomButtonsController: void setOnZoomListener(org.osmdroid.views.CustomZoomButtonsController$OnZoomListener)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeString(char[],int,int)>
<kotlin.collections.EmptyList: java.util.List subList(int,int)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.PropertyNamingStrategy getPropertyNamingStrategy()>
<com.github.mikephil.charting.data.ChartData: void <init>()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setAnchorPoint(float)>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: void <init>(com.fasterxml.jackson.databind.util.EnumValues,java.lang.Boolean)>
<com.fasterxml.jackson.core.io.SerializedString: char[] asQuotedChars()>
<org.osmdroid.config.IConfigurationProvider: short getTileFileSystemMaxQueueSize()>
<org.osmdroid.views.Projection: boolean isHorizontalWrapEnabled()>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector$FieldBuilder: void <init>(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,java.lang.reflect.Field)>
<org.osmdroid.views.MapView: void getPositionAndScale(java.lang.Object,org.metalev.multitouch.controller.MultiTouchController$PositionAndScale)>
<com.fasterxml.jackson.databind.util.ClassUtil: void verifyMustOverride(java.lang.Class,java.lang.Object,java.lang.String)>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.fasterxml.jackson.databind.util.NameTransformer$Chained: java.lang.String toString()>
<org.osmdroid.tileprovider.modules.MapTileDownloader$TileLoader: void tileLoaded(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector: void <clinit>()>
<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode firstImpl()>
<org.osmdroid.util.SegmentIntersection: boolean divisionByZeroSideEffectY(double,double,double,double,double,double,double,double,org.osmdroid.util.PointL)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector: void _addMethodMixIns(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,java.lang.Class,java.util.Map,java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>
<com.android.gpstest.model.SbasType: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo withAlwaysAsId(boolean)>
<kotlin.collections.EmptySet: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.std.ByteArraySerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.introspect.ClassIntrospector: void <init>()>
<org.osmdroid.views.MapView: boolean isHorizontalMapRepetitionEnabled()>
<com.fasterxml.jackson.databind.ser.BeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withFilterId(java.lang.Object)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[])>
<com.github.mikephil.charting.highlight.Highlight: void <init>(float,float,float,float,int,com.github.mikephil.charting.components.YAxis$AxisDependency)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<org.osmdroid.views.overlay.Polyline: boolean onClickDefault(org.osmdroid.views.overlay.Polyline,org.osmdroid.views.MapView,org.osmdroid.util.GeoPoint)>
<com.github.mikephil.charting.charts.Chart: void setHighlightPerTapEnabled(boolean)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.cfg.MapperConfigBase without(com.fasterxml.jackson.databind.MapperFeature[])>
<org.osmdroid.config.DefaultConfigurationProvider: void setGpsWaitTime(long)>
<com.github.mikephil.charting.renderer.YAxisRendererHorizontalBarChart: void renderAxisLine(android.graphics.Canvas)>
<kotlinx.coroutines.internal.ScopeCoroutine: java.lang.StackTraceElement getStackTraceElement()>
<org.metalev.multitouch.controller.MultiTouchController: void multiTouchController()>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildEnumSetSerializer(com.fasterxml.jackson.databind.JavaType)>
<kotlinx.coroutines.internal.MainDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _renameUsing(java.util.Map,com.fasterxml.jackson.databind.PropertyNamingStrategy)>
<com.fasterxml.jackson.core.io.IOContext: void releaseConcatBuffer(char[])>
<kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>
<com.github.mikephil.charting.data.LineRadarDataSet: void <init>(java.util.List,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector: java.util.List collectFields(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.introspect.TypeResolutionContext,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver,com.fasterxml.jackson.databind.type.TypeFactory,com.fasterxml.jackson.databind.JavaType,boolean)>
<org.osmdroid.events.ScrollEvent: void <init>(org.osmdroid.views.MapView,int,int)>
<com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>
<com.sothree.slidinguppanel.ViewDragHelper: void reportNewEdgeDrags(float,float,int)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void serialize(char[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlinx.coroutines.JobSupport$Finishing: void addExceptionLocked(java.lang.Throwable)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)>
<com.github.mikephil.charting.utils.MPPointF$1: java.lang.Object[] newArray(int)>
<kotlinx.coroutines.scheduling.GlobalQueue: void <init>()>
<kotlin.Pair: java.lang.Object component2()>
<org.osmdroid.util.RectL: long getRotatedY(long,long,long,long,double,double)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings)>
<com.android.gpstest.GpsStatusFragment: void updateListVisibility()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.String[] findEnumValues(java.lang.Class,java.lang.Enum[],java.lang.String[])>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<kotlin.reflect.KProperty1: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.util.Converter$None: void <init>()>
<org.osmdroid.views.MapView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<kotlin.collections.CollectionsKt___CollectionsKt: java.util.Set toSet(java.lang.Iterable)>
<com.fasterxml.jackson.core.util.BufferRecycler: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: com.fasterxml.jackson.databind.introspect.AnnotationMap of(java.lang.Class,java.lang.'annotation'.Annotation)>
<org.osmdroid.config.IConfigurationProvider: long getTileGCFrequencyInMillis()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$4: java.lang.Boolean withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.JsonSerializer findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeString(char[],int,int)>
<org.osmdroid.tileprovider.modules.TileWriter: void <clinit>()>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: boolean has(java.lang.Class)>
<kotlin.ranges.IntRange$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<com.github.mikephil.charting.renderer.XAxisRendererHorizontalBarChart: void renderAxisLine(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withIgnorals(java.util.Set)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartArray(java.lang.Object,int)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$SimplePanelSlideListener: void <init>()>
<org.osmdroid.config.IConfigurationProvider: boolean isDebugMapView()>
<com.github.mikephil.charting.renderer.HorizontalBarChartRenderer: boolean isDrawingValuesAllowed(com.github.mikephil.charting.interfaces.dataprovider.ChartInterface)>
<com.android.gpstest.BenchmarkControllerImpl: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Base: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap: void <init>(java.util.Map)>
<org.osmdroid.tileprovider.modules.MBTilesFileArchive: void close()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std withSetterVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.github.mikephil.charting.charts.Chart: void setOnChartValueSelectedListener(com.github.mikephil.charting.listener.OnChartValueSelectedListener)>
<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: com.fasterxml.jackson.databind.JsonSerializer modifyEnumSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.util.PathBuilder: void end()>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value construct(com.fasterxml.jackson.'annotation'.JsonInclude$Include,com.fasterxml.jackson.'annotation'.JsonInclude$Include)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<kotlin.Unit: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.TypeFactory: boolean _verifyAndResolvePlaceholders(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.impl.UnknownSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.github.mikephil.charting.charts.BarLineChartBase: float getMinOffset()>
<kotlinx.coroutines.internal.SystemPropsKt: long systemProp(java.lang.String,long,long,long)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4: void <init>(java.lang.reflect.Constructor)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: com.fasterxml.jackson.core.JsonGenerator getGenerator()>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder: void <init>(int)>
<org.osmdroid.config.IConfigurationProvider: java.lang.String getNormalizedUserAgent()>
<org.osmdroid.tileprovider.modules.SqlTileWriter: void createIndex(android.database.sqlite.SQLiteDatabase)>
<com.github.mikephil.charting.interfaces.datasets.IBarDataSet: int getHighLightAlpha()>
<com.fasterxml.jackson.core.JsonGenerator: void writeObjectId(java.lang.Object)>
<org.osmdroid.views.overlay.PolyOverlayWithIW: void drawWithLines(android.graphics.Canvas,org.osmdroid.views.Projection)>
<com.android.gpstest.GpsStatusFragment$$ExternalSyntheticLambda0: void onClick(android.content.DialogInterface,int)>
<kotlinx.coroutines.DispatchedCoroutine: boolean trySuspend()>
<com.android.gpstest.dialog.ShareLogFragment: void setListener(com.android.gpstest.dialog.ShareLogFragment$Listener)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.introspect.ClassIntrospector getClassIntrospector()>
<com.github.mikephil.charting.utils.ViewPortHandler: void setMaximumScaleY(float)>
<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>
<kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>
<com.github.mikephil.charting.components.IMarker: void draw(android.graphics.Canvas,float,float)>
<org.osmdroid.tileprovider.MapTileCache: java.util.List getProtectedTileComputers()>
<com.android.gpstest.BenchmarkControllerImpl: void onGnssFixAcquired()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,char[])>
<org.osmdroid.views.MapView: boolean onKeyDown(int,android.view.KeyEvent)>
<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: void <init>(com.fasterxml.jackson.databind.ser.std.ArraySerializerBase,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider$TileLoader: android.graphics.drawable.Drawable loadTile(long)>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: java.lang.Iterable serializerModifiers()>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.type.SimpleType withTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.core.io.NumberInput: boolean inLongRange(java.lang.String,boolean)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.'annotation'.JsonInclude$Value _findInclusionWithContent(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<org.osmdroid.util.MapTileAreaBorderComputer: org.osmdroid.util.MapTileArea computeFromSource(org.osmdroid.util.MapTileArea,org.osmdroid.util.MapTileArea)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.core.io.SerializedString: int appendQuoted(char[],int)>
<org.osmdroid.util.ListPointL$1: boolean hasNext()>
<kotlinx.coroutines.internal.ThreadState: void <init>(kotlin.coroutines.CoroutineContext,int)>
<com.android.gpstest.GpsStatusFragment: void showFilterDialog()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.util.List)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: boolean hasNullSerializer()>
<org.osmdroid.views.overlay.OverlayManager: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float,org.osmdroid.views.MapView)>
<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getSuccessfulResult$kotlinx_coroutines_core(java.lang.Object)>
<kotlinx.coroutines.android.AndroidExceptionPreHandler: void <init>()>
<com.fasterxml.jackson.core.JsonStreamContext: void <init>(int,int)>
<com.github.mikephil.charting.charts.Chart: void setMaxHighlightDistance(float)>
<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter: boolean _suppressNulls(com.fasterxml.jackson.'annotation'.JsonInclude$Value)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String getTypeDescription(com.fasterxml.jackson.databind.JavaType)>
<com.github.mikephil.charting.listener.OnChartGestureListener: void onChartGestureStart(android.view.MotionEvent,com.github.mikephil.charting.listener.ChartTouchListener$ChartGesture)>
<com.fasterxml.jackson.core.JsonGenerator: void setCurrentValue(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer$1: void <clinit>()>
<org.osmdroid.views.CustomZoomButtonsController$Visibility: org.osmdroid.views.CustomZoomButtonsController$Visibility valueOf(java.lang.String)>
<com.android.gpstest.util.PreferenceUtils: void saveInt(java.lang.String,int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>
<org.osmdroid.tileprovider.ReusableBitmapDrawable: void beginUsingDrawable()>
<org.osmdroid.tileprovider.tilesource.ITileSource: int getMinimumZoomLevel()>
<com.android.gpstest.util.SortUtil$Companion$sortByGnssThenId$2: java.lang.Object get(java.lang.Object)>
<kotlin.Result$Companion: void <init>()>
<com.github.mikephil.charting.utils.FSize: void <clinit>()>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.type.SimpleType withValueHandler(java.lang.Object)>
<kotlin.jvm.internal.CallableReference: java.lang.String getName()>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: java.io.InputStream getInputStream(long,org.osmdroid.tileprovider.tilesource.ITileSource)>
<kotlinx.coroutines.DispatchedContinuationKt: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<com.fasterxml.jackson.core.io.NumberOutput: int _outputUptoMillion(char[],int,int,int)>
<kotlinx.coroutines.internal.ThreadSafeHeap: void swap(int,int)>
<org.osmdroid.util.UrlBackoff: void <clinit>()>
<org.osmdroid.views.overlay.DefaultOverlayManager: boolean onDoubleTapEvent(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.github.mikephil.charting.data.LineDataSet: void setCircleColor(int)>
<com.fasterxml.jackson.databind.BeanDescription: java.lang.Class getBeanClass()>
<com.github.mikephil.charting.listener.ChartTouchListener: float distance(float,float,float,float)>
<com.github.mikephil.charting.listener.ChartTouchListener: void performHighlight(com.github.mikephil.charting.highlight.Highlight,android.view.MotionEvent)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void <clinit>()>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedClass getClassInfo()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Dynamic: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.charts.Chart: void setMarkerView(com.github.mikephil.charting.components.IMarker)>
<kotlinx.coroutines.CoroutineStart: void <clinit>()>
<kotlinx.coroutines.DefaultExecutor: void <init>()>
<org.osmdroid.tileprovider.MapTileProviderBase: void mapTileRequestCompleted(org.osmdroid.tileprovider.MapTileRequestState,android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void serialize(java.util.UUID,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper: void <init>(org.osmdroid.tileprovider.MapTileProviderBase,org.osmdroid.tileprovider.MapTileProviderBase$1)>
<org.osmdroid.tileprovider.modules.MBTilesFileArchive: void init(java.io.File)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: com.fasterxml.jackson.databind.JsonSerializer unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)>
<org.osmdroid.config.IConfigurationProvider: int getTileGCBulkSize()>
<kotlin.jvm.internal.MutablePropertyReference1: kotlin.reflect.KProperty1$Getter getGetter()>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.io.IOContext _createContext(java.lang.Object,boolean)>
<com.fasterxml.jackson.'annotation'.JsonProperty$Access: void <clinit>()>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: java.lang.String toString()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.CollectionType constructCollectionType(java.lang.Class,com.fasterxml.jackson.databind.JavaType)>
<com.android.gpstest.GpsStatusFragment: void refreshViews()>
<com.fasterxml.jackson.databind.type.SimpleType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>
<org.osmdroid.config.DefaultConfigurationProvider: void <init>()>
<com.fasterxml.jackson.core.json.JsonWriteContext: int writeValue()>
<kotlinx.coroutines.JobKt: void cancel$default(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException,int,java.lang.Object)>
<org.osmdroid.util.SegmentClipper: void nextVertex(long,long)>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: void serializeWithType(com.fasterxml.jackson.databind.JsonSerializable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.'annotation'.JsonFilter: java.lang.String value()>
<com.android.gpstest.BenchmarkControllerImpl: void onLocationChanged(android.location.Location)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: void stopDeceleration()>
<org.osmdroid.config.DefaultConfigurationProvider: java.lang.String getUserAgentValue()>
<kotlinx.coroutines.Dispatchers: void <init>()>
<com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType[] values()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std withCreatorVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildEnumSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.core.base.GeneratorBase: void _verifyValueWrite(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std 'with'(com.fasterxml.jackson.'annotation'.JsonAutoDetect)>
<org.osmdroid.util.TileSystem: double getMaxLatitude()>
<org.osmdroid.views.CustomZoomButtonsController: boolean checkJustActivated()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMember getPrimaryMemberUnchecked()>
<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.views.overlay.infowindow.InfoWindow: void setRelatedObject(java.lang.Object)>
<org.osmdroid.views.MapController$ReplayController: void animateTo(org.osmdroid.api.IGeoPoint,java.lang.Double,java.lang.Long,java.lang.Float,java.lang.Boolean)>
<kotlinx.coroutines.CancellableContinuationImpl: java.lang.String nameString()>
<kotlin.collections.EmptySet: int hashCode()>
<com.fasterxml.jackson.databind.type.TypeBindings$AsKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.Class getRawType()>
<org.osmdroid.views.MapView$MapViewGestureDetectorListener: void <init>(org.osmdroid.views.MapView)>
<kotlinx.coroutines.internal.Removed: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>
<kotlin.ranges.IntProgression: void <init>(int,int,int)>
<com.github.mikephil.charting.charts.BarLineChartBase: float getYChartMin()>
<kotlin.jvm.internal.CallableReference: boolean isSuspend()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations: java.lang.'annotation'.Annotation get(java.lang.Class)>
<com.github.mikephil.charting.data.LineDataSet: boolean isDrawSteppedEnabled()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers: void <clinit>()>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryPark()>
<org.osmdroid.views.overlay.DefaultOverlayManager: java.lang.Object remove(int)>
<org.osmdroid.api.IMapController: void animateTo(org.osmdroid.api.IGeoPoint)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildCollectionSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.type.CollectionType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.views.MapView: java.util.List getOverlays()>
<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation getDelegate$kotlinx_coroutines_core()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: void <init>()>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: com.fasterxml.jackson.databind.ser.std.IterableSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<com.github.mikephil.charting.formatter.IFillFormatter: float getFillLinePosition(com.github.mikephil.charting.interfaces.datasets.ILineDataSet,com.github.mikephil.charting.interfaces.dataprovider.LineDataProvider)>
<org.osmdroid.views.Projection: long getLongPixelFromMercator(long,boolean,long,int,int)>
<org.osmdroid.util.GeoPoint: void <init>(org.osmdroid.util.GeoPoint)>
<org.osmdroid.views.overlay.TilesOverlay: int getMinimumZoomLevel()>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver: com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver construct(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _createAndCacheUntypedSerializer(java.lang.Class)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setAllChildrenVisible()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.github.mikephil.charting.data.LineDataSet: void <init>(java.util.List,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: void <init>(com.fasterxml.jackson.databind.PropertyName,java.lang.Class,java.lang.Class,boolean,java.lang.Class)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: void <clinit>()>
<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>
<com.fasterxml.jackson.databind.introspect.CollectorBase: com.fasterxml.jackson.databind.introspect.AnnotationMap _emptyAnnotationMap()>
<org.osmdroid.tileprovider.MapTileCache$TileRemovedListener: void onTileRemoved(long)>
<org.osmdroid.tileprovider.tilesource.TileSourcePolicy: boolean acceptsMeaninglessUserAgent()>
<org.osmdroid.views.Projection: org.osmdroid.util.BoundingBox getBoundingBox()>
<kotlinx.coroutines.CancellableContinuationImpl: void <clinit>()>
<org.osmdroid.views.CustomZoomButtonsDisplay$HorizontalPosition: void <clinit>()>
<com.fasterxml.jackson.core.JsonFactory$Feature: int collectDefaults()>
<org.osmdroid.config.DefaultConfigurationProvider: boolean isMapViewRecyclerFriendly()>
<com.fasterxml.jackson.databind.type.TypeBase: java.lang.String buildCanonicalName()>
<org.osmdroid.util.BoundingBox: void <init>()>
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<kotlinx.coroutines.JobSupport: kotlinx.coroutines.JobNode makeNode(kotlin.jvm.functions.Function1,boolean)>
<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As getTypeInclusion()>
<org.osmdroid.views.CustomZoomButtonsController$2: void <init>(org.osmdroid.views.CustomZoomButtonsController)>
<org.osmdroid.tileprovider.ExpirableBitmapDrawable: void <init>(android.graphics.Bitmap)>
<com.fasterxml.jackson.'annotation'.OptBoolean: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer: void serializeWithType(java.net.InetAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.util.SegmentIntersection: boolean divisionByZeroSideEffect(double,double,double,double,double,double,double,double,org.osmdroid.util.PointL)>
<kotlin.coroutines.jvm.internal.SuspendLambda: java.lang.String toString()>
<com.fasterxml.jackson.databind.JsonSerializer: boolean isUnwrappingSerializer()>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: void serialize(java.lang.Enum,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.charts.Chart: void setDragDecelerationEnabled(boolean)>
<com.fasterxml.jackson.databind.'annotation'.JsonSerialize: java.lang.Class contentConverter()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.PropertyName,boolean,boolean,boolean)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<com.github.mikephil.charting.charts.Chart: void setHardwareAccelerationEnabled(boolean)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.'annotation'.JsonProperty$Access removeNonVisible(boolean)>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: boolean couldDeserialize()>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: com.fasterxml.jackson.databind.ser.std.EnumSetSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.views.overlay.Polygon: boolean onSingleTapConfirmed(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: java.lang.'annotation'.Annotation get(java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector: void <clinit>()>
<com.fasterxml.jackson.databind.type.ArrayType: com.fasterxml.jackson.databind.type.ArrayType withStaticTyping()>
<kotlin.coroutines.AbstractCoroutineContextElement: void <init>(kotlin.coroutines.CoroutineContext$Key)>
<kotlin.Unit: void <clinit>()>
<com.github.mikephil.charting.data.LineScatterCandleRadarDataSet: void <init>(java.util.List,java.lang.String)>
<kotlin.Pair: java.lang.Object getSecond()>
<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>
<org.osmdroid.views.CustomZoomButtonsController: long nowInMillis()>
<com.github.mikephil.charting.charts.Chart: boolean isLogEnabled()>
<com.fasterxml.jackson.databind.type.TypeParser: void <init>(com.fasterxml.jackson.databind.type.TypeFactory)>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.'annotation'.JsonInclude$Value getIncludeAsProperty()>
<com.fasterxml.jackson.databind.util.ClassUtil$Ctor: int getParamCount()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void <clinit>()>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: void onViewCaptured(android.view.View,int)>
<kotlin.collections.CollectionsKt: java.util.List sorted(java.lang.Iterable)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void <clinit>()>
<org.osmdroid.util.GarbageCollector$1: void <init>(org.osmdroid.util.GarbageCollector)>
<org.osmdroid.views.overlay.Marker: void onDetach(org.osmdroid.views.MapView)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _appendCharacterEscape(char,int)>
<com.android.gpstest.util.SortUtil$Companion$sortByGnssThenId$1: java.lang.Object get(java.lang.Object)>
<kotlinx.coroutines.LazyStandaloneCoroutine: void onStart()>
<com.fasterxml.jackson.core.io.NumberOutput: int outputInt(int,char[],int)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer _findKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)>
<org.osmdroid.views.MapView: void <clinit>()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: boolean equals(java.lang.Object)>
<com.sothree.slidinguppanel.ViewDragHelper$2: void run()>
<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>
<com.fasterxml.jackson.core.io.NumberInput: void <clinit>()>
<org.osmdroid.tileprovider.modules.DatabaseFileArchive: byte[] getImage(org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<com.fasterxml.jackson.'annotation'.JsonCreator$Mode: com.fasterxml.jackson.'annotation'.JsonCreator$Mode valueOf(java.lang.String)>
<org.osmdroid.util.RectL: java.lang.String toString()>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: java.lang.String getThreadGroupName()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeStartArray(int)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker withCreatorVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<kotlinx.coroutines.InvokeOnCancelling: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.'annotation'.JsonAppend$Attr: com.fasterxml.jackson.'annotation'.JsonInclude$Include include()>
<org.osmdroid.util.MapTileIndex: int getY(long)>
<org.osmdroid.config.IConfigurationProvider: boolean isMapViewHardwareAccelerated()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean equals(java.lang.Object)>
<kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>
<kotlinx.coroutines.intrinsics.UndispatchedKt: java.lang.Object startUndispatchedOrReturn(kotlinx.coroutines.internal.ScopeCoroutine,java.lang.Object,kotlin.jvm.functions.Function2)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapLikeType withContentTypeHandler(java.lang.Object)>
<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.Continuation,kotlin.jvm.functions.Function2,java.lang.Object)>
<com.fasterxml.jackson.core.io.NumberOutput: int _outputUptoBillion(int,char[],int)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsX(float)>
<com.fasterxml.jackson.databind.type.ClassStack: void <init>(java.lang.Class)>
<kotlinx.coroutines.CommonPool: boolean isGoodCommonPool$kotlinx_coroutines_core(java.lang.Class,java.util.concurrent.ExecutorService)>
<com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature[] values()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: int getCoveredFadeColor()>
<org.osmdroid.views.overlay.milestones.MilestoneManager: void add(long,long)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked trimByVisibility()>
<com.fasterxml.jackson.databind.introspect.Annotated: boolean hasAnnotation(java.lang.Class)>
<org.osmdroid.views.MapView$LayoutParams: void <init>(int,int,org.osmdroid.api.IGeoPoint,int,int,int)>
<org.osmdroid.util.GeometryMath: double Min4(double,double,double,double)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean isExplicitlyIncluded()>
<kotlin.jvm.internal.PropertyReference: boolean equals(java.lang.Object)>
<kotlinx.coroutines.AbstractCoroutine: void afterResume(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlinx.coroutines.internal.ThreadContextKt$findOne$1: void <init>()>
<org.osmdroid.config.IConfigurationProvider: boolean isMapTileDownloaderFollowRedirects()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeSegmentASCII(int,int)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: void <clinit>()>
<com.fasterxml.jackson.core.PrettyPrinter: void writeStartArray(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.type.SimpleType withStaticTyping()>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams getOwner()>
<org.osmdroid.util.RectL: android.graphics.Rect getBounds(android.graphics.Rect,int,int,double,android.graphics.Rect)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Multi: com.fasterxml.jackson.databind.JsonSerializer serializerFor(java.lang.Class)>
<kotlin.collections.EmptyMap: java.lang.Void get(java.lang.Object)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<kotlin.internal.jdk7.JDK7PlatformImplementations: void <init>()>
<com.fasterxml.jackson.databind.type.PlaceholderForType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<org.osmdroid.views.MapController: boolean zoomOut()>
<com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter withSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility _defaultOrOverride(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility,com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.github.mikephil.charting.highlight.HorizontalBarHighlighter: com.github.mikephil.charting.highlight.Highlight getHighlight(float,float)>
<kotlinx.coroutines.android.HandlerContext: void <init>(android.os.Handler,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>
<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<org.osmdroid.util.BoundingBox: void writeToParcel(android.os.Parcel,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: java.lang.String getFullName()>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty,java.lang.String)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: boolean isTouchEnabled()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormat(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: boolean isPresent(java.lang.'annotation'.Annotation)>
<kotlin.collections.EmptyIterator: void add(java.lang.Object)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseDateFromLong(java.lang.String,java.text.ParsePosition)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class handledType()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findNullKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.android.gpstest.GpsTestActivity: void addNmeaListener()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findFilterId(com.fasterxml.jackson.databind.introspect.Annotated)>
<org.osmdroid.tileprovider.tilesource.IStyledTileSource: void setStyle(java.lang.String)>
<com.github.mikephil.charting.highlight.ChartHighlighter: float getDistance(float,float,float,float)>
<kotlin.jvm.internal.PropertyReference1: kotlin.reflect.KProperty$Getter getGetter()>
<com.fasterxml.jackson.databind.type.TypeBase: com.fasterxml.jackson.databind.JavaType findSuperType(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: void <init>(com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.tileprovider.MapTileProviderBase$ZoomInTileLooper: void <init>(org.osmdroid.tileprovider.MapTileProviderBase)>
<kotlinx.coroutines.CancellableContinuationImpl: java.lang.String toString()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap newWith(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.util.GarbageCollector: boolean isRunning()>
<com.github.mikephil.charting.data.LineRadarDataSet: android.graphics.drawable.Drawable getFillDrawable()>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<kotlin.random.Random$Default: void <init>()>
<org.osmdroid.views.MapView$MapViewGestureDetectorListener: boolean onSingleTapUp(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.TypeBindings _bindingsForSubtype(com.fasterxml.jackson.databind.JavaType,int,java.lang.Class,boolean)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: boolean usesObjectId()>
<org.osmdroid.views.MapController$1: void <clinit>()>
<com.github.mikephil.charting.highlight.Highlight: float getY()>
<com.fasterxml.jackson.databind.ser.BeanSerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.type.MapLikeType withTypeHandler(java.lang.Object)>
<com.github.mikephil.charting.interfaces.datasets.ILineRadarDataSet: boolean isDrawFilledEnabled()>
<com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.FileSerializer: void serialize(java.io.File,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator elements()>
<com.github.mikephil.charting.renderer.LegendRenderer: void drawLabel(android.graphics.Canvas,float,float,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.EventLoopImplBase$DelayedTask: void setHeap(kotlinx.coroutines.internal.ThreadSafeHeap)>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.String toString()>
<kotlin.collections.EmptyList: void <clinit>()>
<kotlin.coroutines.jvm.internal.DebugMetadataKt: kotlin.coroutines.jvm.internal.DebugMetadata getDebugMetadataAnnotation(kotlin.coroutines.jvm.internal.BaseContinuationImpl)>
<com.fasterxml.jackson.core.JsonStreamContext: void <init>()>
<com.fasterxml.jackson.core.JsonStreamContext: boolean inObject()>
<org.osmdroid.util.MapTileAreaList: int size()>
<org.osmdroid.events.MapEventsReceiver: boolean longPressHelper(org.osmdroid.util.GeoPoint)>
<com.github.mikephil.charting.data.LineRadarDataSet: boolean isDrawFilledEnabled()>
<com.fasterxml.jackson.databind.JsonSerializer: void <init>()>
<kotlinx.coroutines.AbstractCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo empty()>
<kotlinx.coroutines.JobSupport: void cancelInternal(java.lang.Throwable)>
<com.android.gpstest.util.UIUtils$3: void <clinit>()>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: com.fasterxml.jackson.core.JsonStreamContext getParent()>
<org.osmdroid.config.DefaultConfigurationProvider: java.net.Proxy getHttpProxy()>
<kotlin.collections.CollectionsKt: java.util.List optimizeReadOnlyList(java.util.List)>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: boolean onDoubleTap(android.view.MotionEvent)>
<kotlinx.coroutines.internal.AtomicOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>
<com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value: java.util.Set findIgnoredForSerialization()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: int getModifiers()>
<org.osmdroid.views.overlay.Marker: void setInfoWindow(org.osmdroid.views.overlay.infowindow.MarkerInfoWindow)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void <clinit>()>
<kotlinx.coroutines.JobSupport$Finishing: boolean isSealed()>
<com.fasterxml.jackson.databind.util.ClassUtil: com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] getConstructors(java.lang.Class)>
<com.fasterxml.jackson.databind.SerializationConfig: void <init>(com.fasterxml.jackson.databind.SerializationConfig,int,int,int,int,int,int)>
<com.android.gpstest.util.PreferenceUtils: void saveInt(android.content.SharedPreferences,java.lang.String,int)>
<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String)>
<org.osmdroid.views.MapController$ReplayController$ReplayClass: void <init>(org.osmdroid.views.MapController$ReplayController,org.osmdroid.views.MapController$ReplayType,android.graphics.Point,org.osmdroid.api.IGeoPoint,java.lang.Double,java.lang.Long,java.lang.Float,java.lang.Boolean)>
<org.osmdroid.tileprovider.MapTileCache: void refreshAdditionalLists()>
<org.osmdroid.util.MapTileIndex: java.lang.String toString(long)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: void <init>(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)>
<com.github.mikephil.charting.components.AxisBase: boolean isGranularityEnabled()>
<com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView: com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView rename(com.fasterxml.jackson.databind.util.NameTransformer)>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: void <init>(java.lang.Boolean,java.text.DateFormat)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: int getMaximumZoomLevel()>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesTyped(java.lang.Class)>
<com.fasterxml.jackson.core.PrettyPrinter: void writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.ser.impl.FailingSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.EnumValues: com.fasterxml.jackson.core.SerializableString serializedValueFor(java.lang.Enum)>
<kotlinx.coroutines.internal.MainDispatcherLoader: void <init>()>
<com.github.mikephil.charting.data.BaseDataSet: boolean isDrawIconsEnabled()>
<com.fasterxml.jackson.core.JsonToken: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotationCollector _addFromBundleIfNotPresent(com.fasterxml.jackson.databind.introspect.AnnotationCollector,java.lang.'annotation'.Annotation)>
<kotlinx.coroutines.internal.ArrayQueue: void ensureCapacity()>
<org.osmdroid.views.overlay.Polyline: void <init>()>
<com.github.mikephil.charting.renderer.BarChartRenderer: void setHighlightDrawPos(com.github.mikephil.charting.highlight.Highlight,android.graphics.RectF)>
<org.osmdroid.tileprovider.modules.TileWriter: void calculateDirectorySize(java.io.File)>
<org.osmdroid.util.MapTileIndex: void throwIllegalValue(int,int,java.lang.String)>
<org.osmdroid.util.GEMFFile$GEMFInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void _serialize(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.PropertyName)>
<org.osmdroid.views.Projection: int getScreenCenterY()>
<kotlinx.coroutines.internal.ThreadState: void append(java.lang.Object)>
<com.github.mikephil.charting.animation.ChartAnimator: float getPhaseX()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$EmptyCollector: com.fasterxml.jackson.databind.util.Annotations asAnnotations()>
<org.osmdroid.views.overlay.LinearRing: void getBestOffset(double,double,double,double,double,org.osmdroid.util.PointL)>
<kotlin.KotlinNullPointerException: void <init>()>
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.JavaType getType()>
<kotlin.jvm.internal.PropertyReference1: java.lang.Object getDelegate(java.lang.Object)>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider$TileLoader getTileLoader()>
<com.fasterxml.jackson.core.io.NumberOutput: int _outputSmallestL(char[],int)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeTypeId(java.lang.Object)>
<org.osmdroid.util.TileSystem: double getX01FromLongitude(double)>
<kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Long toLongOrNull(java.lang.String)>
<org.osmdroid.tileprovider.MapTileCache: void putTile(long,android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$6: java.lang.Object withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.util.NameTransformer$Chained: java.lang.String transform(java.lang.String)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.ser.BeanPropertyWriter rename(com.fasterxml.jackson.databind.util.NameTransformer)>
<kotlin.collections.EmptySet: boolean isEmpty()>
<kotlin.Pair: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value empty()>
<org.osmdroid.views.MapView$MapViewGestureDetectorListener: void onLongPress(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.ser.std.ByteArraySerializer: void <init>()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter: void <init>()>
<com.github.mikephil.charting.highlight.HorizontalBarHighlighter: void <init>(com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: boolean getUsesDataConnection()>
<kotlin.sequences.Sequence: java.util.Iterator iterator()>
<com.sothree.slidinguppanel.ViewDragHelper: boolean checkNewEdgeDrag(float,float,int,int)>
<com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId typeId(java.lang.Object,java.lang.Class,com.fasterxml.jackson.core.JsonToken)>
<kotlinx.coroutines.internal.FastServiceLoader: java.util.List parseFile(java.io.BufferedReader)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object removeFirstOrNull()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _applyModifiers(java.lang.reflect.Type,com.fasterxml.jackson.databind.JavaType)>
<kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)>
<kotlin.collections.EmptyList: boolean add(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: void <init>()>
<com.android.gpstest.GpsTestActivity: void hideStatusFragment()>
<kotlin.collections.ArraysKt___ArraysKt: java.util.List sortedWith(java.lang.Object[],java.util.Comparator)>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo$As: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As valueOf(java.lang.String)>
<com.android.gpstest.util.SatelliteUtils: boolean isSpeedAndBearingAccuracySupported()>
<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.core.JsonStreamContext: int getCurrentIndex()>
<org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase: void onMediaMounted()>
<kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>
<org.osmdroid.util.PointL: void set(long,long)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.config.DefaultConfigurationProvider: int getTileGCBulkSize()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.introspect.VisibilityChecker findAutoDetectVisibility(com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.introspect.VisibilityChecker)>
<org.osmdroid.tileprovider.MapTileProviderBase: android.graphics.drawable.Drawable getMapTile(long)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.NameTransformer$1: java.lang.String toString()>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: void <clinit>()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLenient()>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: void <init>()>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: android.graphics.drawable.Drawable getDrawable(java.io.InputStream)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()>
<org.osmdroid.views.CustomZoomButtonsController$1: void <init>(org.osmdroid.views.CustomZoomButtonsController)>
<com.fasterxml.jackson.databind.type.SimpleType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<org.osmdroid.views.overlay.LinearRing: void addPoint(org.osmdroid.util.GeoPoint)>
<org.osmdroid.util.BoundingBox: void <clinit>()>
<com.fasterxml.jackson.databind.util.RawValue: void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As getTypeInclusion()>
<com.android.gpstest.GpsStatusFragment$$ExternalSyntheticLambda0: void <init>(com.android.gpstest.GpsStatusFragment)>
<com.github.mikephil.charting.data.BaseDataSet: void setValueTextSize(float)>
<org.osmdroid.tileprovider.modules.GEMFFileArchive: void close()>
<kotlinx.coroutines.UndispatchedCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>
<com.fasterxml.jackson.databind.jsontype.SubtypeResolver: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector: com.fasterxml.jackson.databind.util.Annotations emptyAnnotations()>
<org.osmdroid.views.Projection: long getCloserPixel(long,int,int,double)>
<org.osmdroid.util.GeometryMath: android.graphics.Rect getBoundingBoxForRotatatedRectangle(android.graphics.Rect,int,int,float,android.graphics.Rect)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$SimplePanelSlideListener: void onPanelSlide(android.view.View,float)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer createRoot()>
<com.fasterxml.jackson.core.PrettyPrinter: void writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)>
<org.osmdroid.tileprovider.modules.TileWriter: void <init>()>
<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)>
<com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember: java.lang.Object getValue(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter: com.fasterxml.jackson.databind.ser.BeanPropertyWriter rename(com.fasterxml.jackson.databind.util.NameTransformer)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer: void <clinit>()>
<org.osmdroid.config.DefaultConfigurationProvider: void setTileFileSystemMaxQueueSize(short)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer withIgnorals(java.util.Set)>
<com.fasterxml.jackson.databind.ser.std.ClassSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseDate(java.lang.String,java.text.ParsePosition)>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<kotlinx.coroutines.scheduling.WorkQueue: long tryStealBlockingFrom(kotlinx.coroutines.scheduling.WorkQueue)>
<kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>
<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withIgnorals(java.util.Set)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.SerializerProvider: boolean includeFilterSuppressNulls(java.lang.Object)>
<kotlinx.coroutines.JobSupport: void onCancelling(java.lang.Throwable)>
<com.github.mikephil.charting.charts.BarLineChartBase: void moveViewToX(float)>
<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase withFilterId(java.lang.Object)>
<com.fasterxml.jackson.'annotation'.JsonTypeName: java.lang.String value()>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value construct(com.fasterxml.jackson.'annotation'.JsonInclude$Include,com.fasterxml.jackson.'annotation'.JsonInclude$Include,java.lang.Class,java.lang.Class)>
<kotlinx.coroutines.Empty: java.lang.String toString()>
<kotlin.sequences.ConstrainedOnceSequence: void <init>(kotlin.sequences.Sequence)>
<org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase: java.lang.String getTileURLString(long)>
<org.osmdroid.views.overlay.TilesOverlay: void setUseDataConnection(boolean)>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.type.PlaceholderForType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <init>()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: void handleMissingId(java.lang.Object)>
<com.fasterxml.jackson.databind.type.SimpleType: void <init>(java.lang.Class)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectReferenceInfo(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)>
<kotlin.jvm.internal.CallableReference$NoReceiver: void <clinit>()>
<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
<com.fasterxml.jackson.'annotation'.Nulls: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeDateKey(long,com.fasterxml.jackson.core.JsonGenerator)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean canZoomOutMoreX()>
<com.fasterxml.jackson.core.json.JsonWriteContext: void setCurrentValue(java.lang.Object)>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider$TileLoader: android.graphics.drawable.Drawable loadTile(long)>
<kotlin.collections.EmptySet: boolean contains(java.lang.Void)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean hasField()>
<org.osmdroid.views.MapView: void setScrollableAreaLimitLongitude(double,double,int)>
<com.android.gpstest.model.SatelliteStatus$Companion: void <init>()>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.components.IMarker getMarker()>
<com.github.mikephil.charting.renderer.HorizontalBarChartRenderer: void drawValues(android.graphics.Canvas)>
<kotlin.coroutines.jvm.internal.DebugProbesKt: kotlin.coroutines.Continuation probeCoroutineCreated(kotlin.coroutines.Continuation)>
<org.osmdroid.views.overlay.OverlayManager: void onShowPress(android.view.MotionEvent,org.osmdroid.views.MapView)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: boolean _hasOneOf(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class[])>
<kotlinx.coroutines.ChildHandleNode: boolean childCancelled(java.lang.Throwable)>
<kotlinx.coroutines.internal.StackTraceRecoveryKt: boolean elementWiseEquals(java.lang.StackTraceElement,java.lang.StackTraceElement)>
<com.fasterxml.jackson.databind.type.TypeBindings$TypeParamStash: void <clinit>()>
<kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object)>
<org.osmdroid.config.IConfigurationProvider: int getAnimationSpeedShort()>
<com.fasterxml.jackson.core.JsonStreamContext: boolean inArray()>
<org.osmdroid.util.SegmentIntersection: boolean parallelSideEffectSameX(double,double,double,double,double,double,double,double,org.osmdroid.util.PointL)>
<com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder defaultImpl(java.lang.Class)>
<kotlinx.coroutines.InactiveNodeList: kotlinx.coroutines.NodeList getList()>
<kotlinx.coroutines.scheduling.NanoTimeSource: void <init>()>
<com.android.gpstest.util.SatelliteUtils: boolean isRotationVectorSensorSupported(android.content.Context)>
<org.osmdroid.tileprovider.modules.MapTileApproximater: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.String findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: boolean _asTimestamp(com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _readMore(java.io.InputStream,byte[],int,int,int)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void <init>(int)>
<com.fasterxml.jackson.databind.ext.OptionalHandlerFactory: boolean hasSuperClassStartingWith(java.lang.Class,java.lang.String)>
<org.osmdroid.views.CustomZoomButtonsDisplay: void setPositions(boolean,org.osmdroid.views.CustomZoomButtonsDisplay$HorizontalPosition,org.osmdroid.views.CustomZoomButtonsDisplay$VerticalPosition)>
<kotlinx.coroutines.JobSupport: java.lang.Object makeCancelling(java.lang.Object)>
<com.android.gpstest.GpsStatusFragment: void updateLocationAccuracies(android.location.Location)>
<kotlinx.coroutines.ThreadLocalEventLoop: void <init>()>
<com.android.gpstest.model.SatelliteStatus: com.android.gpstest.model.GnssType getGnssType()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl: void <init>()>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesUntyped(java.lang.Class)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.DeserializationFeature: void <clinit>()>
<com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver: java.lang.String idFromValue(java.lang.Object)>
<com.github.mikephil.charting.utils.Transformer: void rectToPixelPhaseHorizontal(android.graphics.RectF,float)>
<kotlin.collections.EmptyMap: void putAll(java.util.Map)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeFieldNameTail(com.fasterxml.jackson.core.SerializableString)>
<kotlinx.coroutines.internal.ThreadContextKt$restoreState$1: void <clinit>()>
<com.android.gpstest.GpsTestActivity: void showProgressBar()>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: com.fasterxml.jackson.databind.introspect.AnnotatedParameter replaceParameterAnnotations(int,com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: boolean hasHandlers()>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: int getParameterCount()>
<kotlinx.coroutines.AbstractCoroutine: java.lang.String nameString$kotlinx_coroutines_core()>
<com.github.mikephil.charting.renderer.LineChartRenderer$DataSetImageCache: boolean init(com.github.mikephil.charting.interfaces.datasets.ILineDataSet)>
<com.fasterxml.jackson.databind.BeanProperty$Std: com.fasterxml.jackson.databind.PropertyMetadata getMetadata()>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: void <clinit>()>
<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>
<com.github.mikephil.charting.data.BaseDataSet: float getValueTextSize()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeString(java.lang.String)>
<org.osmdroid.views.overlay.DefaultOverlayManager$1$1: boolean hasNext()>
<org.osmdroid.tileprovider.modules.SqlTileWriter: void runCleanupOperation(long,int,long,boolean)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: com.fasterxml.jackson.'annotation'.JsonFormat$Features withOverrides(com.fasterxml.jackson.'annotation'.JsonFormat$Features)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$TypeAndSerializer: void <init>(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.tileprovider.modules.MBTilesFileArchive: java.lang.String toString()>
<org.osmdroid.util.UrlBackoff: boolean shouldWait(java.lang.String)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder defaultImpl(java.lang.Class)>
<org.osmdroid.views.overlay.infowindow.InfoWindow: void onDetach()>
<kotlin.collections.EmptyList: java.lang.Object[] toArray(java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeWithType(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.osmdroid.util.GeoPoint: void setLatitude(double)>
<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class,boolean)>
<kotlinx.coroutines.CoroutineDispatcher: java.lang.String toString()>
<kotlinx.coroutines.ThreadContextElement: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.String,java.lang.Object[])>
<com.fasterxml.jackson.core.util.TextBuffer: void <init>(com.fasterxml.jackson.core.util.BufferRecycler,char[])>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _findWellKnownSimple(java.lang.Class)>
<org.osmdroid.tileprovider.MapTileProviderBase: void putTileIntoCache(long,android.graphics.drawable.Drawable,int)>
<kotlinx.coroutines.InvokeOnCompletion: java.lang.Object invoke(java.lang.Object)>
<com.fasterxml.jackson.databind.util.BeanUtil: java.lang.String okNameForMutator(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String,boolean)>
<com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.ClassIntrospector: com.fasterxml.jackson.databind.BeanDescription forSerialization(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,int[])>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector: com.fasterxml.jackson.databind.util.Annotations asAnnotations()>
<com.fasterxml.jackson.databind.jsontype.TypeIdResolver: java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setRendererLeftYAxis(com.github.mikephil.charting.renderer.YAxisRenderer)>
<org.osmdroid.views.MapView: void setFlingEnabled(boolean)>
<com.android.gpstest.dialog.ShareCollectionAdapter: void <init>(androidx.fragment.app.Fragment)>
<org.osmdroid.views.overlay.TilesOverlay: void drawTiles(android.graphics.Canvas,org.osmdroid.views.Projection,double,org.osmdroid.util.RectL)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeQuotedRaw(java.lang.String)>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase: java.lang.String translate(java.lang.String)>
<kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: java.lang.Object invokeSuspend(java.lang.Object)>
<com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType valueOf(java.lang.String)>
<org.osmdroid.util.PointAccepter: void init()>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: long _timestamp(java.util.Date)>
<org.osmdroid.util.TileLooper: void setVerticalWrapEnabled(boolean)>
<com.github.mikephil.charting.components.Legend$LegendPosition: com.github.mikephil.charting.components.Legend$LegendPosition valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.BooleanSerializer$AsNumber: void <init>(boolean)>
<com.github.mikephil.charting.charts.Chart: float getDragDecelerationFrictionCoef()>
<org.osmdroid.views.overlay.TilesOverlay: void onTileReadyToDraw(android.graphics.Canvas,android.graphics.drawable.Drawable,android.graphics.Rect)>
<kotlinx.coroutines.internal.SystemPropsKt__SystemPropsKt: int getAVAILABLE_PROCESSORS()>
<kotlinx.coroutines.scheduling.CoroutineScheduler: int getCreatedWorkers()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _appendNativeIds(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeWithoutTypeInfo(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMember getPrimaryMember()>
<com.github.mikephil.charting.listener.OnChartGestureListener: void onChartGestureEnd(android.view.MotionEvent,com.github.mikephil.charting.listener.ChartTouchListener$ChartGesture)>
<com.github.mikephil.charting.interfaces.datasets.IBarDataSet: int getBarShadowColor()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<org.osmdroid.tileprovider.IRegisterReceiver: void destroy()>
<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter: com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter withConfig(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.ObjectIdInfo getObjectIdInfo()>
<org.osmdroid.util.Distance: double getSquaredDistanceToPoint(double,double,double,double)>
<com.fasterxml.jackson.databind.DatabindContext: void <init>()>
<kotlinx.coroutines.internal.ThreadSafeHeap: void setSize(int)>
<org.osmdroid.tileprovider.modules.DatabaseFileArchive: void <clinit>()>
<com.fasterxml.jackson.databind.ext.Java7Support: com.fasterxml.jackson.databind.PropertyName findConstructorName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)>
<com.android.gpstest.GpsTestActivity: void onSensorChanged(android.hardware.SensorEvent)>
<kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>
<com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>
<kotlinx.coroutines.CoroutineExceptionHandler$Key: void <clinit>()>
<com.sothree.slidinguppanel.SlidingUpPanelLayout$1: void onClick(android.view.View)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeObject(java.lang.Object)>
<com.sothree.slidinguppanel.ViewDragHelper: int computeAxisDuration(int,int,int)>
<com.github.mikephil.charting.charts.Chart: float getMaxHighlightDistance()>
<kotlinx.coroutines.NodeList: java.lang.String toString()>
<kotlin.coroutines.CombinedContext$toString$1: java.lang.String invoke(java.lang.String,kotlin.coroutines.CoroutineContext$Element)>
<com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter: java.lang.Object value(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: float getCircleRadius()>
<com.fasterxml.jackson.databind.ser.std.BooleanSerializer$AsNumber: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.scheduling.LimitingDispatcher: void <init>(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher,int,java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.github.mikephil.charting.utils.ColorTemplate: void <clinit>()>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean hasChartDimens()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy: java.lang.String nameForSetterMethod(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String)>
<org.osmdroid.views.Projection: org.osmdroid.api.IGeoPoint fromPixels(int,int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotationMap _mergeAnnotations(int,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked[])>
<org.osmdroid.config.IConfigurationProvider: boolean isDebugTileProviders()>
<kotlinx.coroutines.internal.ArrayQueue: boolean isEmpty()>
<kotlin.ranges.IntProgressionIterator: void <init>(int,int,int)>
<com.github.mikephil.charting.data.LineDataSet: void setCircleRadius(float)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt: void <clinit>()>
<com.fasterxml.jackson.databind.ObjectMapper: void <init>(com.fasterxml.jackson.core.JsonFactory)>
<com.github.mikephil.charting.charts.Chart: com.github.mikephil.charting.listener.ChartTouchListener getOnTouchListener()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _constructSimple(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<org.osmdroid.views.CustomZoomButtonsController: void invalidate()>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String canBeABeanType(java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$2: void <init>(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType withStaticTyping()>
<org.osmdroid.views.MapView: org.osmdroid.views.CustomZoomButtonsController getZoomController()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: boolean isTransient()>
<org.osmdroid.tileprovider.modules.MapTileAssetsProvider: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,android.content.res.AssetManager,org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.core.io.NumberInput: long parseLong(java.lang.String)>
<org.osmdroid.views.MapController$MapAnimatorListener: void onAnimationEnd(android.animation.Animator)>
<com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>
<com.fasterxml.jackson.core.JsonGenerator: void writeOmittedField(java.lang.String)>
<kotlin.ranges.RangesKt: long coerceAtMost(long,long)>
<org.osmdroid.views.overlay.TilesOverlay: void setLoadingBackgroundColor(int)>
<com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector$1: void <init>()>
<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: java.lang.Class getRawPrimaryType()>
<com.fasterxml.jackson.core.io.SerializedString: void <init>(java.lang.String)>
<kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.String)>
<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>
<com.sothree.slidinguppanel.ViewDragHelper: boolean settleCapturedViewAt(int,int)>
<com.android.gpstest.util.IOUtils: void writeNmeaToAndroidStudio(java.lang.String,long)>
<com.android.gpstest.model.ConstellationFamily: void <init>(java.util.Map,com.android.gpstest.model.SatelliteMetadata)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<kotlinx.coroutines.SupervisorKt: kotlinx.coroutines.CompletableJob SupervisorJob$default(kotlinx.coroutines.Job,int,java.lang.Object)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.introspect.VisibilityChecker getDefaultVisibilityChecker(java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>
<kotlin.collections.EmptySet: boolean contains(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer: void <init>()>
<kotlinx.coroutines.scheduling.CoroutineScheduler: void execute(java.lang.Runnable)>
<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: com.fasterxml.jackson.databind.JsonSerializer _findSerializer(java.lang.Object,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.ReferenceType: com.fasterxml.jackson.databind.type.ReferenceType construct(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[],com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: void <init>(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.TypeResolutionContext,com.fasterxml.jackson.databind.introspect.AnnotationMap,int)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Double: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap newWith(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<kotlinx.coroutines.scheduling.WorkQueue: int getSize$kotlinx_coroutines_core()>
<com.android.gpstest.GpsStatusFragment: void showSortByDialog()>
<com.fasterxml.jackson.databind.type.ClassKey: int compareTo(com.fasterxml.jackson.databind.type.ClassKey)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<kotlin.text.Regex: void <init>(java.util.regex.Pattern)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
<org.osmdroid.tileprovider.util.StorageUtils: java.io.File getStorage()>
<org.osmdroid.tileprovider.modules.MapTileSqlCacheProvider: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.databind.util.TypeKey: com.fasterxml.jackson.databind.JavaType getType()>
<com.android.gpstest.model.SatelliteStatus: float getAzimuthDegrees()>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap emptyForProperties()>
<com.fasterxml.jackson.databind.ser.Serializers: com.fasterxml.jackson.databind.JsonSerializer findCollectionSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.CollectionType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.util.SegmentClipper: long clipX(long)>
<com.android.gpstest.model.SatelliteStatus: boolean getHasAlmanac()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.android.gpstest.util.PreferenceUtils: void saveString(java.lang.String,java.lang.String)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void dispatchOnPanelStateChanged(android.view.View,com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState,com.sothree.slidinguppanel.SlidingUpPanelLayout$PanelState)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: com.fasterxml.jackson.'annotation'.JsonFormat$Features construct(com.fasterxml.jackson.'annotation'.JsonFormat$Feature[],com.fasterxml.jackson.'annotation'.JsonFormat$Feature[])>
<com.fasterxml.jackson.databind.MappingJsonFactory: com.fasterxml.jackson.databind.ObjectMapper getCodec()>
<com.fasterxml.jackson.core.SerializableString: int appendUnquoted(char[],int)>
<com.github.mikephil.charting.components.LimitLine: int getLineColor()>
<com.fasterxml.jackson.databind.ser.std.BooleanSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.type.ClassKey: int hashCode()>
<org.osmdroid.views.overlay.PolyOverlayWithIW: void draw(android.graphics.Canvas,org.osmdroid.views.Projection)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void <init>(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.util.Set)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.'annotation'.JsonSetter$Value getDefaultSetterInfo()>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>
<kotlin.coroutines.intrinsics.CoroutineSingletons: void <init>(java.lang.String,int)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: java.text.DateFormat getDateFormat()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean _neitherNull(java.lang.Object,java.lang.Object)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: android.graphics.DashPathEffect getDashPathEffect()>
<org.osmdroid.views.MapController$ZoomAnimationListener: void onAnimationRepeat(android.view.animation.Animation)>
<kotlinx.coroutines.scheduling.TimeSource: long nanoTime()>
<kotlin.reflect.KVisibility: void <clinit>()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void <init>(java.util.Set,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerator: com.fasterxml.jackson.'annotation'.ObjectIdGenerator forScope(java.lang.Class)>
<com.sothree.slidinguppanel.ViewDragHelper: android.view.View findTopChildUnder(int,int)>
<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Value merge(com.fasterxml.jackson.'annotation'.JsonFormat$Value,com.fasterxml.jackson.'annotation'.JsonFormat$Value)>
<org.osmdroid.util.GEMFFile$GEMFInputStream: boolean markSupported()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void <clinit>()>
<com.fasterxml.jackson.core.json.JsonWriteContext: int writeFieldName(java.lang.String)>
<com.fasterxml.jackson.databind.util.NameTransformer$2: void <init>(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations: boolean has(java.lang.Class)>
<com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature[] values()>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: void <init>()>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: com.fasterxml.jackson.databind.JsonSerializer _findCachedSerializer(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Class)>
<kotlinx.coroutines.CoroutineContextKt: kotlin.coroutines.CoroutineContext newCoroutineContext(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext)>
<com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer: void <init>()>
<com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.'annotation'.JsonProperty$Access findAccess()>
<com.github.mikephil.charting.charts.BarLineChartBase: boolean hasNoDragOffset()>
<kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeRaw(java.lang.String)>
<org.osmdroid.util.TileLooper: void initialiseLoop()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>
<org.osmdroid.util.TileSystem: int getMaximumZoomLevel()>
<com.fasterxml.jackson.databind.PropertyMetadata: com.fasterxml.jackson.databind.PropertyMetadata withDescription(java.lang.String)>
<com.fasterxml.jackson.core.JsonGenerator$Feature: int getMask()>
<com.fasterxml.jackson.databind.ser.Serializers: com.fasterxml.jackson.databind.JsonSerializer findMapSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.MapType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.android.gpstest.GpsMapFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.github.mikephil.charting.data.Entry: float getX()>
<com.github.mikephil.charting.charts.BarLineChartBase: com.github.mikephil.charting.renderer.YAxisRenderer getRendererLeftYAxis()>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: com.fasterxml.jackson.databind.introspect.AnnotationMap asAnnotationMap()>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Dynamic: void <init>()>
<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>
<org.osmdroid.views.MapView$MapViewDoubleClickListener: boolean onDoubleTap(android.view.MotionEvent)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _verifyValueWrite(java.lang.String)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findValueSerializer(java.lang.Class,com.fasterxml.jackson.databind.BeanProperty)>
<kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)>
<kotlin.jvm.internal.Lambda: void <init>(int)>
<com.fasterxml.jackson.databind.util.StdDateFormat: int hashCode()>
<kotlin.coroutines.jvm.internal.CompletedContinuation: void <clinit>()>
<com.android.gpstest.util.UIUtils$2: void <init>(android.view.View)>
<com.github.mikephil.charting.data.BaseDataSet: void setValueFormatter(com.github.mikephil.charting.formatter.IValueFormatter)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: int getCircleColor(int)>
<kotlin.collections.CollectionsKt__CollectionsKt: java.util.List optimizeReadOnlyList(java.util.List)>
<org.osmdroid.tileprovider.modules.SqlTileWriter: android.database.Cursor getTileCursor(java.lang.String[],java.lang.String[])>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$StringKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Boolean hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.core.JsonGenerator: void writeRaw(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>
<kotlinx.coroutines.internal.FastServiceLoader: void <init>()>
<com.fasterxml.jackson.core.util.TextBuffer: char[] contentsAsArray()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: boolean isGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.github.mikephil.charting.components.XAxis$XAxisPosition: com.github.mikephil.charting.components.XAxis$XAxisPosition[] values()>
<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _equals(java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor constructDefaultConstructor(com.fasterxml.jackson.databind.util.ClassUtil$Ctor,com.fasterxml.jackson.databind.util.ClassUtil$Ctor)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>
<com.fasterxml.jackson.databind.PropertyName: com.fasterxml.jackson.databind.PropertyName withSimpleName(java.lang.String)>
<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void <init>(com.fasterxml.jackson.core.JsonStreamContext,com.fasterxml.jackson.core.JsonLocation)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder _constructNoTypeResolverBuilder()>
<kotlin.coroutines.AbstractCoroutineContextKey: void <init>(kotlin.coroutines.CoroutineContext$Key,kotlin.jvm.functions.Function1)>
<kotlinx.coroutines.internal.SystemPropsKt: int systemProp(java.lang.String,int,int,int)>
<kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable,java.util.Map)>
<org.osmdroid.util.BoundingBox: double getLatitudeSpan()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void <clinit>()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.JavaType refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>
<kotlin.internal.PlatformImplementations$ReflectThrowable: void <clinit>()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void serializeAsElement(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>
<com.android.gpstest.BenchmarkControllerImpl: void gpsStop()>
<com.fasterxml.jackson.core.util.BufferRecycler: int byteBufferLength(int)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.TypeFactory defaultInstance()>
<com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter: com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter construct(java.lang.String,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.util.Annotations,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setProperties(java.util.List)>
<com.fasterxml.jackson.core.JsonGenerator: void _reportError(java.lang.String)>
<com.android.gpstest.GpsStatusFragment: void $r8$lambda$H87n4BLr0_tLhGzYw590fBGZVRI(com.android.gpstest.GpsStatusFragment,android.content.DialogInterface,int)>
<com.github.mikephil.charting.interfaces.dataprovider.BarDataProvider: boolean isDrawBarShadowEnabled()>
<kotlin.ranges.IntProgression$Companion: void <init>()>
<com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>
<com.android.gpstest.dialog.UploadDeviceInfoFragment: void <init>()>
<com.fasterxml.jackson.'annotation'.JacksonInject$Value: com.fasterxml.jackson.'annotation'.JacksonInject$Value withId(java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.String findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated)>
<org.osmdroid.views.CustomZoomButtonsDisplay: void draw(android.graphics.Canvas,float,boolean,boolean)>
<kotlinx.coroutines.scheduling.LimitingDispatcher: void close()>
<com.fasterxml.jackson.databind.ser.impl.UnknownSerializer: void <init>()>
<com.github.mikephil.charting.charts.BarChart: void setDrawBarShadow(boolean)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeString(java.lang.String)>
<com.android.gpstest.util.UIUtils: void showViewWithAnimation(android.view.View,int)>
<org.osmdroid.views.CustomZoomButtonsDisplay$HorizontalPosition: org.osmdroid.views.CustomZoomButtonsDisplay$HorizontalPosition[] values()>
<com.fasterxml.jackson.'annotation'.JsonView: java.lang.Class[] value()>
<org.osmdroid.tileprovider.util.SimpleRegisterReceiver: void <init>(android.content.Context)>
<org.osmdroid.util.BoundingBox: void <init>(double,double,double,double)>
<com.fasterxml.jackson.'annotation'.JsonTypeInfo: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id use()>
<org.osmdroid.views.MapView: void setMapCenter(org.osmdroid.api.IGeoPoint)>
<com.github.mikephil.charting.interfaces.datasets.ILineDataSet: float getCubicIntensity()>
<com.fasterxml.jackson.databind.ser.PropertyFilter: void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyWriter)>
<com.fasterxml.jackson.core.JsonGenerator: void flush()>
<com.fasterxml.jackson.databind.util.NameTransformer$NopTransformer: void <init>()>
<kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>
<com.fasterxml.jackson.databind.PropertyName: com.fasterxml.jackson.databind.PropertyName construct(java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil$Ctor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>
<com.fasterxml.jackson.databind.util.Annotations: boolean hasOneOf(java.lang.Class[])>
<org.osmdroid.util.ListPointL$1: void <init>(org.osmdroid.util.ListPointL)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromWildcard(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.WildcardType,com.fasterxml.jackson.databind.type.TypeBindings)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$1: void <init>(org.osmdroid.tileprovider.modules.MapTileModuleProviderBase,int,float,boolean,int)>
<org.osmdroid.views.MapViewRepository: org.osmdroid.views.overlay.infowindow.MarkerInfoWindow getDefaultMarkerInfoWindow()>
<com.github.mikephil.charting.data.Entry$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: boolean hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.Serializers: com.fasterxml.jackson.databind.JsonSerializer findMapLikeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.MapLikeType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.BasicBeanDescription forOtherUse(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.github.mikephil.charting.utils.FSize: int hashCode()>
<org.osmdroid.util.BoundingBox: double getActualSouth()>
<com.fasterxml.jackson.databind.util.ClassUtil$Ctor: java.lang.Class getDeclaringClass()>
<com.fasterxml.jackson.databind.util.RawValue: boolean equals(java.lang.Object)>
<org.osmdroid.views.overlay.Marker: boolean hitTest(android.view.MotionEvent,org.osmdroid.views.MapView)>
<org.osmdroid.views.MapView: boolean isLayoutOccurred()>
<kotlin.collections.EmptyList: int lastIndexOf(java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(short)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonSetter$Value findSetterInfo(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlin.text.StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>
<org.osmdroid.views.overlay.Polygon: void setOnClickListener(org.osmdroid.views.overlay.Polygon$OnClickListener)>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<org.osmdroid.tileprovider.MapTileProviderArray: int getMaximumZoomLevel()>
<org.osmdroid.views.overlay.DefaultOverlayManager$1$1: void remove()>
<com.fasterxml.jackson.'annotation'.JsonFormat: com.fasterxml.jackson.'annotation'.OptBoolean lenient()>
<com.android.gpstest.GpsStatusFragment$GnssFilterDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase: void setTileSource(org.osmdroid.tileprovider.tilesource.ITileSource)>
<com.fasterxml.jackson.databind.PropertyNamingStrategy: java.lang.String nameForField(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedField,java.lang.String)>
<org.osmdroid.views.overlay.milestones.MilestoneManager: void end()>
<com.fasterxml.jackson.databind.PropertyNamingStrategy$LowerDotCaseStrategy: java.lang.String translate(java.lang.String)>
<kotlinx.coroutines.scheduling.DefaultScheduler: void <clinit>()>
<org.osmdroid.util.GeoPoint: double distanceToAsDouble(org.osmdroid.api.IGeoPoint)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: boolean hasOneOf(java.lang.Class[])>
<com.github.mikephil.charting.data.LineDataSet: boolean isDrawCirclesEnabled()>
<org.osmdroid.views.overlay.TilesOverlay: void <clinit>()>
<com.fasterxml.jackson.core.JsonFactory: void <init>(com.fasterxml.jackson.core.ObjectCodec)>
<com.android.gpstest.GpsTestActivity$7: void onClick(android.content.DialogInterface,int)>
<com.fasterxml.jackson.databind.ext.NioPathSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation getCompletion()>
<org.osmdroid.views.overlay.infowindow.InfoWindow: void onClose()>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)>
<org.osmdroid.views.MapController$ReplayType: org.osmdroid.views.MapController$ReplayType[] values()>
<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>
<org.osmdroid.config.DefaultConfigurationProvider: void setDebugTileProviders(boolean)>
<org.osmdroid.tileprovider.MapTileCache: void populateSyncCachedTiles(org.osmdroid.util.MapTileList)>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionLikeType withValueHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer: void <clinit>()>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void <clinit>()>
<org.osmdroid.tileprovider.util.StorageUtils: java.util.Set getAllStorageLocationsRevised()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: java.lang.Object _getReferencedIfPresent(java.util.concurrent.atomic.AtomicReference)>
<kotlin.jvm.JvmClassMappingKt: kotlin.reflect.KClass getKotlinClass(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: void <clinit>()>
<org.osmdroid.tileprovider.modules.SqlTileWriter: boolean isFunctionalException(android.database.sqlite.SQLiteException)>
<com.android.gpstest.util.PermissionUtils: boolean hasGrantedFileWritePermission(android.app.Activity)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>
<com.fasterxml.jackson.databind.ser.BeanSerializerModifier: com.fasterxml.jackson.databind.JsonSerializer modifyArraySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.ArrayType,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JsonSerializer)>
<org.osmdroid.util.GEMFFile: void close()>
<kotlinx.coroutines.Job: kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean,boolean,kotlin.jvm.functions.Function1)>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.'annotation'.JsonFormat$Value getFormat()>
<kotlinx.coroutines.Empty: kotlinx.coroutines.NodeList getList()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeFieldName(com.fasterxml.jackson.core.SerializableString,boolean)>
<com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException 'from'(com.fasterxml.jackson.core.JsonGenerator,java.lang.String,java.lang.Throwable)>
<org.osmdroid.util.GeoPoint: void <init>(android.os.Parcel)>
<com.fasterxml.jackson.databind.cfg.ConfigOverride: java.lang.Boolean getMergeable()>
<com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator: void <init>()>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: void set(int,float[],float[],float[],int[],int,boolean,long)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String _findDefaultValue()>
<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<com.fasterxml.jackson.'annotation'.ObjectIdGenerator: boolean canUseFor(com.fasterxml.jackson.'annotation'.ObjectIdGenerator)>
<kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)>
<org.osmdroid.tileprovider.MapTileCache: void setAutoEnsureCapacity(boolean)>
<kotlinx.coroutines.InvokeOnCompletion: java.lang.String toString()>
<org.osmdroid.views.CustomZoomButtonsDisplay: void refreshPixelMargins()>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _referenceType(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<com.github.mikephil.charting.data.LineDataSet: int getCircleHoleColor()>
<com.fasterxml.jackson.'annotation'.JsonFormat$Features: java.lang.Boolean get(com.fasterxml.jackson.'annotation'.JsonFormat$Feature)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector$MethodBuilder: void <init>(com.fasterxml.jackson.databind.introspect.TypeResolutionContext,java.lang.reflect.Method,com.fasterxml.jackson.databind.introspect.AnnotationCollector)>
<com.github.mikephil.charting.utils.FSize: boolean equals(java.lang.Object)>
<org.osmdroid.config.DefaultConfigurationProvider: int getAnimationSpeedDefault()>
<com.android.gpstest.util.IOUtils: java.lang.String createLocationShare(android.location.Location,boolean)>
<com.github.mikephil.charting.utils.MPPointF$1: com.github.mikephil.charting.utils.MPPointF createFromParcel(android.os.Parcel)>
<com.sothree.slidinguppanel.SlidingUpPanelLayout: void setPanelHeight(int)>
<org.osmdroid.tileprovider.tilesource.BitmapTileSourceBase: java.lang.String getTileRelativeFilenameString(long)>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>
<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.databind.PropertyMetadata getMetadata()>
<com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase: java.lang.String valueToString(java.lang.Object)>
<org.osmdroid.util.TileSystem: double getLongitudeFromX01(double,boolean)>
<com.github.mikephil.charting.charts.Chart: boolean isDragDecelerationEnabled()>
<org.osmdroid.util.PathBuilder: void add(long,long)>
<org.osmdroid.tileprovider.tilesource.TileSourcePolicy: void <init>(int,int)>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: void <init>()>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.JavaType refine(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])>
<kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addSetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.PropertyName,boolean,boolean,boolean)>
<org.osmdroid.util.TileSystem: double MapSize(double)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: void tileLoadedFailed(org.osmdroid.tileprovider.MapTileRequestState)>
<com.github.mikephil.charting.data.LineDataSet: float getCubicIntensity()>
<com.fasterxml.jackson.'annotation'.JsonPropertyDescription: java.lang.String value()>
<com.github.mikephil.charting.utils.HorizontalViewPortHandler: void <init>()>
<org.osmdroid.util.MapTileArea: int getTop()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Boolean hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated)>
<kotlin.jvm.internal.PropertyReference: void <init>(java.lang.Object)>
<com.fasterxml.jackson.databind.type.ReferenceType: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getCoroutineContext()>
<kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)>
<com.fasterxml.jackson.databind.introspect.MemberKey: void <init>(java.lang.reflect.Constructor)>
<org.osmdroid.tileprovider.MapTileProviderBasic: org.osmdroid.tileprovider.modules.MapTileFileStorageProviderBase getMapTileFileStorageProviderBase(org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.tilesource.ITileSource,org.osmdroid.tileprovider.modules.IFilesystemCache)>
<com.github.mikephil.charting.listener.BarLineChartTouchListener: float getYDist(android.view.MotionEvent)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$4: java.lang.Object withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.github.mikephil.charting.buffer.HorizontalBarBuffer: void feed(com.github.mikephil.charting.interfaces.datasets.IBarDataSet)>
<com.fasterxml.jackson.databind.JavaType: java.util.List getInterfaces()>
<kotlin.coroutines.jvm.internal.CompletedContinuation: void <init>()>
<com.android.gpstest.dialog.ShareLocationFragment$onViewCreated$6: void <init>(com.android.gpstest.dialog.ShareLocationFragment,android.location.Location)>
<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int getSize()>
<com.github.mikephil.charting.utils.MPPointD: void recycleInstance(com.github.mikephil.charting.utils.MPPointD)>
<org.osmdroid.views.overlay.DefaultOverlayManager: void onDrawHelper(android.graphics.Canvas,org.osmdroid.views.MapView,org.osmdroid.views.Projection)>
<com.github.mikephil.charting.renderer.LineChartRenderer: void drawDataSet(android.graphics.Canvas,com.github.mikephil.charting.interfaces.datasets.ILineDataSet)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findTypedValueSerializer(java.lang.Class,boolean,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: boolean isUnwrappingSerializer()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType unknownType()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.BeanPropertyWriter constructFilteredBeanWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.lang.Class[])>
<com.github.mikephil.charting.charts.Chart: void setExtraLeftOffset(float)>
<org.osmdroid.views.MapView: void setDestroyMode(boolean)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.PropertyName getFullName()>
<com.github.mikephil.charting.charts.Chart: android.graphics.Bitmap getChartBitmap()>
<kotlin.collections.EmptyMap: void <init>()>
<com.fasterxml.jackson.databind.ext.Java7SupportImpl: com.fasterxml.jackson.databind.PropertyName findConstructorName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)>
<kotlin.coroutines.CombinedContext: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: boolean isDrawValuesEnabled()>
<kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std withGetterVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<kotlin.collections.EmptySet: boolean retainAll(java.util.Collection)>
<kotlin.jvm.internal.ReflectionFactory: java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)>
<com.fasterxml.jackson.databind.util.ClassUtil: boolean isProxyType(java.lang.Class)>
<org.osmdroid.tileprovider.modules.MapTileFilesystemProvider: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.tilesource.ITileSource,long)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.util.List _properties()>
<kotlinx.coroutines.JobSupport: void initParentJobInternal$kotlinx_coroutines_core(kotlinx.coroutines.Job)>
<com.github.mikephil.charting.charts.BarLineChartBase: void setAutoScaleMinMaxEnabled(boolean)>
<org.osmdroid.tileprovider.modules.MapTileModuleProviderBase$TileLoader: void onTileLoaderInit()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,long[])>
<com.github.mikephil.charting.data.BaseEntry: void <init>()>
<kotlinx.coroutines.InvokeOnCancelling: void invoke(java.lang.Throwable)>
<com.github.mikephil.charting.highlight.Highlight: void setDraw(float,float)>
<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>
<com.fasterxml.jackson.databind.type.ResolvedRecursiveType: void <init>(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.util.TokenBuffer: boolean canWriteBinaryNatively()>
<com.sothree.slidinguppanel.ViewDragHelper: float clampMag(float,float,float)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: void serializeContents(java.util.EnumSet,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.github.mikephil.charting.data.DataSet$Rounding: com.github.mikephil.charting.data.DataSet$Rounding valueOf(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void <init>()>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: com.fasterxml.jackson.databind.introspect.AnnotatedParameter getParameter(int)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.type.CollectionLikeType: com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings createIfNeeded(java.lang.Class,com.fasterxml.jackson.databind.JavaType[])>
<com.github.mikephil.charting.formatter.DefaultFillFormatter: void <init>()>
<org.osmdroid.config.IConfigurationProvider: boolean isMapViewRecyclerFriendly()>
<org.osmdroid.config.IConfigurationProvider: java.io.File getOsmdroidTileCache()>
<com.fasterxml.jackson.databind.util.NameTransformer$3: void <init>(java.lang.String)>
<kotlin.text.StringsKt__StringsKt: java.lang.String substringBefore(java.lang.String,char,java.lang.String)>
<kotlin.collections.CollectionsKt___CollectionsKt: java.util.List sorted(java.lang.Iterable)>
<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.String toString()>
<com.github.mikephil.charting.interfaces.datasets.IDataSet: java.util.List getEntriesForXValue(float)>
<com.fasterxml.jackson.'annotation'.JsonAutoDetect$1: void <clinit>()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value getDefaultPropertyIgnorals(java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.ser.impl.UnknownSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.osmdroid.views.Projection: void adjustOffsets(double,double,boolean,int)>
<kotlinx.coroutines.NodeList: kotlinx.coroutines.NodeList getList()>
<com.fasterxml.jackson.databind.util.RawValue: java.lang.String toString()>
<com.android.gpstest.util.IOUtils: boolean forcePsdsInjection(android.location.LocationManager)>
<com.fasterxml.jackson.'annotation'.JsonRootName: java.lang.String namespace()>
<org.osmdroid.views.CustomZoomButtonsDisplay: float getFirstLeft(int)>
<kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>
<kotlinx.coroutines.android.HandlerContext: void <init>(android.os.Handler,java.lang.String,boolean)>
<com.github.mikephil.charting.data.BarEntry: float getY()>
<com.android.gpstest.BenchmarkControllerImpl: void onOrientationChanged(double,double)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(int)>
<com.fasterxml.jackson.core.json.DupDetector: void reset()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.reflect.Field getAnnotated()>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type: com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type[] values()>
<kotlinx.coroutines.JobSupport: kotlinx.coroutines.NodeList getOrPromoteCancellingList(kotlinx.coroutines.Incomplete)>
<com.fasterxml.jackson.core.io.NumberOutput: int _outputFullBillion(int,char[],int)>
<org.metalev.multitouch.controller.MultiTouchController$PointInfo: float getMultiTouchDiameterSq()>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)>
<kotlin.jvm.internal.MutablePropertyReference1: kotlin.reflect.KMutableProperty1$Setter getSetter()>
<com.github.mikephil.charting.data.DataSet: com.github.mikephil.charting.data.Entry getEntryForXValue(float,float,com.github.mikephil.charting.data.DataSet$Rounding)>
<kotlin.ranges.IntRange$Companion: void <init>()>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Class[] findViews(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.github.mikephil.charting.utils.ViewPortHandler: boolean isFullyZoomedOut()>
<org.osmdroid.config.DefaultConfigurationProvider: java.lang.String getUserAgentHttpHeader()>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker: com.fasterxml.jackson.databind.introspect.VisibilityChecker withIsGetterVisibility(com.fasterxml.jackson.'annotation'.JsonAutoDetect$Visibility)>
<com.fasterxml.jackson.databind.type.CollectionType: com.fasterxml.jackson.databind.type.CollectionType withValueHandler(java.lang.Object)>
<kotlinx.coroutines.CoroutineId: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>
<org.osmdroid.views.Projection: android.graphics.Point applyMatrixToPoint(int,int,android.graphics.Point,android.graphics.Matrix,boolean)>
<org.osmdroid.tileprovider.MapTileCache: void garbageCollection()>
<kotlin.jvm.internal.ClassReference: int hashCode()>
<com.fasterxml.jackson.databind.ser.std.NullSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Value: void <clinit>()>
<org.osmdroid.events.MapListener: boolean onZoom(org.osmdroid.events.ZoomEvent)>
<com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer: void <init>(com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter construct(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.'annotation'.ObjectIdGenerator,boolean)>
<com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String getDescription()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>
<kotlin.coroutines.EmptyCoroutineContext: int hashCode()>
<com.android.gpstest.util.SatelliteUtils: com.android.gpstest.model.GnssType getGnssConstellationType(int)>
<com.fasterxml.jackson.'annotation'.JsonInclude$Include: com.fasterxml.jackson.'annotation'.JsonInclude$Include[] values()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addCreators(java.util.Map)>
<com.fasterxml.jackson.databind.introspect.AnnotationCollector: com.fasterxml.jackson.databind.introspect.AnnotationMap asAnnotationMap()>
<com.fasterxml.jackson.core.io.NumberOutput: int _full3(int,char[],int)>
<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1: java.lang.Void invoke(java.lang.Throwable)>
<kotlinx.coroutines.scheduling.WorkQueue: void <clinit>()>
<org.osmdroid.tileprovider.modules.MapTileFileArchiveProvider: void <init>(org.osmdroid.tileprovider.IRegisterReceiver,org.osmdroid.tileprovider.tilesource.ITileSource,org.osmdroid.tileprovider.modules.IArchiveFile[],boolean)>
<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverStart()>
<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>
<com.sothree.slidinguppanel.ViewDragHelper$Callback: void onViewPositionChanged(android.view.View,int,int,int,int)>
<com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer: void serializeWithType(java.util.TimeZone,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: boolean equals(java.lang.Object)>
<com.android.gpstest.model.SatelliteStatus$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
<kotlin.text.StringsKt: java.lang.Integer toIntOrNull(java.lang.String)>
<kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>
<org.osmdroid.tileprovider.ExpirableBitmapDrawable: boolean isStateful()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: java.util.List removeOverlappingTypeIds(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder,java.util.List)>
<org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase: org.osmdroid.tileprovider.tilesource.TileSourcePolicy getTileSourcePolicy()>
<kotlin.jvm.internal.MutablePropertyReference1Impl: void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)>
<com.fasterxml.jackson.core.io.NumberOutput: int _outputSmallestI(char[],int)>
<com.github.mikephil.charting.data.BaseDataSet: android.graphics.DashPathEffect getFormLineDashEffect()>
<com.android.gpstest.model.SatelliteStatus: void setHasCarrierFrequency(boolean)>
<com.android.gpstest.GpsStatusFragment: void updateSpeedAndBearingAccuracies(android.location.Location)>
<org.osmdroid.util.TileSystem: void <init>()>
<kotlin.jvm.internal.ClassReference: java.lang.Class getJClass()>
<com.github.mikephil.charting.utils.ColorTemplate: int getHoloBlue()>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.MapperFeature,boolean)>
<kotlinx.coroutines.scheduling.LimitingDispatcher: void afterTask()>
<org.osmdroid.tileprovider.modules.MapTileDownloader: boolean getUsesDataConnection()>
<org.osmdroid.util.BoundingBox: void set(double,double,double,double)>
<kotlin.jvm.internal.Intrinsics: java.lang.String createParameterIsNullExceptionMessage(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int findSize(int)>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()>
<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.cfg.ContextAttributes getAttributes()>
<com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<kotlin.collections.ArraysKt: char single(char[])>
