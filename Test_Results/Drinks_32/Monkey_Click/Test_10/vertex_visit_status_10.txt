---------- Controls Visited (2) ----------
Unknown
refresh

---------- Controls Not Visited (32) ----------
wikipedia
wikipedia
error
Unknown
image
recycler
webview
progress_bar
tab_layout
Unknown
image
pager
recycler
toolbar
instructions
error
name
ingredients
history
related_drinks_title
version
Unknown
refresh
history
progress_bar
Unknown
toolbar
scroll
image
empty
toolbar
recycler

---------- Methods Visited (878) ----------
<retrofit2.adapter.rxjava.HttpException: void <init>(retrofit2.Response)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.Util: java.lang.Object throwIfNull(java.lang.Object)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void displayLoadingState()>
<okhttp3.OkHttpClient$1: okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: void clearFilter()>
<okio.ByteString: okio.ByteString of(byte[])>
<okhttp3.Cache$1: void trackResponse(okhttp3.internal.cache.CacheStrategy)>
<com.facebook.stetho.server.LocalSocketServer: java.lang.String getName()>
<rx.internal.operators.BackpressureUtils: long getAndAddRequest(java.util.concurrent.atomic.AtomicLong,long)>
<okio.Timeout: boolean hasDeadline()>
<okhttp3.internal.connection.RouteDatabase: void connected(okhttp3.Route)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueueL0Pad: void <init>()>
<rx.Subscriber: void addToRequested(long)>
<okhttp3.internal.io.FileSystem$1: void delete(java.io.File)>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$2: void <init>(rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool)>
<rx.internal.schedulers.CachedThreadScheduler$ThreadWorker: void <init>(java.util.concurrent.ThreadFactory)>
<okhttp3.HttpUrl: java.lang.String encodedFragment()>
<okhttp3.internal.cache.DiskLruCache: okio.BufferedSink newJournalWriter()>
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder addConverterFactory(retrofit2.Converter$Factory)>
<okhttp3.internal.platform.AndroidPlatform: void <init>(java.lang.Class,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod)>
<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>
<rx.internal.schedulers.NewThreadWorker: boolean isUnsubscribed()>
<okio.ByteString: void <clinit>()>
<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>
<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>
<rx.subscriptions.Subscriptions: rx.Subscription unsubscribed()>
<okio.Buffer: void <init>()>
<okhttp3.Response: okhttp3.Response$Builder newBuilder()>
<rx.internal.util.RxThreadFactory: void <init>(java.lang.String)>
<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>
<rx.Subscriber: void unsubscribe()>
<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>
<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber$1: void request(long)>
<okhttp3.HttpUrl: int hashCode()>
<okhttp3.internal.Version: java.lang.String userAgent()>
<rx.plugins.RxJavaErrorHandler: void <init>()>
<rx.plugins.RxJavaSchedulersHook: void <clinit>()>
<okio.Okio: okio.Sink sink(java.net.Socket)>
<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>
<retrofit2.ServiceMethod$Builder: void parseHttpMethodAndPath(java.lang.String,java.lang.String,boolean)>
<okhttp3.OkHttpClient: int readTimeoutMillis()>
<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>
<okhttp3.internal.connection.StreamAllocation: void cancel()>
<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>
<okhttp3.internal.connection.StreamAllocation: void acquire(okhttp3.internal.connection.RealConnection)>
<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder onlyIfCached()>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool: void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit)>
<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder callFactory(okhttp3.Call$Factory)>
<okhttp3.internal.cache.CacheStrategy: boolean isCacheable(okhttp3.Response,okhttp3.Request)>
<rx.internal.schedulers.ScheduledAction$FutureCompleter: void unsubscribe()>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory: retrofit2.CallAdapter getCallAdapter(java.lang.reflect.Type,rx.Scheduler)>
<retrofit2.CallAdapter$Factory: java.lang.reflect.Type getParameterUpperBound(int,java.lang.reflect.ParameterizedType)>
<okio.ByteString: void <init>(byte[])>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber: void call()>
<okhttp3.internal.http.RealResponseBody: long contentLength()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: void <clinit>()>
<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>
<okhttp3.CacheControl$Builder: void <init>()>
<retrofit2.Retrofit: okhttp3.Call$Factory callFactory()>
<okhttp3.Headers: int size()>
<rx.Scheduler$Worker: void <init>()>
<rx.observers.SafeSubscriber: void _onError(java.lang.Throwable)>
<rx.plugins.RxJavaSchedulersHook: rx.Scheduler createIoScheduler(java.util.concurrent.ThreadFactory)>
<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>
<okhttp3.ResponseBody$1: void <init>(okhttp3.MediaType,long,okio.BufferedSource)>
<rx.internal.operators.OperatorSubscribeOn$1$1: void onCompleted()>
<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>
<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>
<rx.Observable: rx.Observable subscribeOn(rx.Scheduler)>
<fr.masciulli.drinks.DrinksApplication: void onCreate()>
<rx.Observable: rx.Observable create(rx.Observable$OnSubscribe)>
<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection)>
<okhttp3.Response: void <init>(okhttp3.Response$Builder)>
<retrofit2.OkHttpCall: void <init>(retrofit2.ServiceMethod,java.lang.Object[])>
<okhttp3.internal.io.FileSystem$1: void rename(java.io.File,java.io.File)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: void clear()>
<rx.Subscriber: void add(rx.Subscription)>
<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>
<okhttp3.Response: okhttp3.Request request()>
<okio.Buffer: okio.Buffer writeByte(int)>
<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>
<retrofit2.OkHttpCall$NoContentResponseBody: void <init>(okhttp3.MediaType,long)>
<rx.android.schedulers.LooperScheduler$HandlerWorker: void unsubscribe()>
<retrofit2.OkHttpCall: void cancel()>
<rx.internal.util.ObjectPool: void <init>(int,int,long)>
<okhttp3.internal.connection.RealConnection: void <init>(okhttp3.Route)>
<fr.masciulli.drinks.ui.activity.MainActivity$1: android.support.v4.app.Fragment getItem(int)>
<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>
<okio.RealBufferedSource: java.lang.String readUtf8LineStrict()>
<fr.masciulli.drinks.net.ConnectivityChecker: boolean isConnectedOrConnecting()>
<okio.RealBufferedSource: long readAll(okio.Sink)>
<okhttp3.MediaType: void <clinit>()>
<retrofit2.converter.gson.GsonResponseBodyConverter: void <init>(com.google.gson.Gson,com.google.gson.TypeAdapter)>
<okhttp3.internal.http.HttpHeaders: void receiveHeaders(okhttp3.CookieJar,okhttp3.HttpUrl,okhttp3.Headers)>
<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>
<rx.plugins.RxJavaPlugins: java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties)>
<fr.masciulli.drinks.net.CustomCacheControlInterceptor: void <init>(fr.masciulli.drinks.net.ConnectivityChecker)>
<fr.masciulli.drinks.ui.activity.MainActivity: void <init>()>
<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>
<rx.plugins.RxJavaSchedulersHook: rx.functions.Action0 onSchedule(rx.functions.Action0)>
<okio.AsyncTimeout$Watchdog: void <init>()>
<okio.Buffer: long indexOf(byte,long)>
<rx.plugins.RxJavaSchedulersHook: rx.Scheduler createComputationScheduler(java.util.concurrent.ThreadFactory)>
<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>
<com.facebook.stetho.inspector.network.NetworkPeerManager: com.facebook.stetho.inspector.network.NetworkPeerManager getInstanceOrNull()>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: long calcElementOffset(long)>
<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>
<retrofit2.Response: int code()>
<rx.plugins.RxJavaObservableExecutionHook: rx.Observable$OnSubscribe onSubscribeStart(rx.Observable,rx.Observable$OnSubscribe)>
<retrofit2.CallAdapter$Factory: void <init>()>
<rx.internal.util.unsafe.UnsafeAccess: long addressOf(java.lang.Class,java.lang.String)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: long calcElementOffset(long,long)>
<rx.internal.util.unsafe.SpscArrayQueueProducerFields: void <init>(int)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void onDestroyOptionsMenu()>
<okio.AsyncTimeout: boolean exit()>
<okhttp3.internal.Util: java.util.List immutableList(java.util.List)>
<okhttp3.internal.cache.DiskLruCache: boolean isClosed()>
<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.cache.CacheStrategy$1)>
<okhttp3.internal.connection.ConnectInterceptor: void <init>(okhttp3.OkHttpClient)>
<rx.internal.util.SubscriptionList: void <init>()>
<okhttp3.internal.cache.DiskLruCache: void <init>(okhttp3.internal.io.FileSystem,java.io.File,int,int,long,java.util.concurrent.Executor)>
<okhttp3.internal.http.Http1xStream: void finishRequest()>
<rx.plugins.RxJavaSchedulersHook: rx.Scheduler createNewThreadScheduler()>
<okhttp3.CipherSuite: void <init>(java.lang.String)>
<rx.internal.schedulers.ScheduledAction$FutureCompleter: void <init>(rx.internal.schedulers.ScheduledAction,java.util.concurrent.Future)>
<okhttp3.internal.cache.DiskLruCache: void checkNotClosed()>
<okhttp3.Response: int code()>
<okio.RealBufferedSource: long indexOf(byte)>
<okhttp3.Headers: java.lang.String name(int)>
<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>
<com.facebook.stetho.server.AddressNameHelper: java.lang.String createCustomAddress(java.lang.String)>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber$1: void <init>(rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber)>
<retrofit2.OkHttpCall: boolean isCanceled()>
<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>
<okhttp3.Address: java.net.Proxy proxy()>
<rx.plugins.RxJavaObservableExecutionHook: void <init>()>
<rx.internal.util.ObjectPool: void <init>()>
<okio.Okio$3: void <init>(java.net.Socket)>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: boolean isForWebSocket()>
<rx.internal.util.unsafe.SpscArrayQueue: boolean isEmpty()>
<okhttp3.internal.Internal: void <init>()>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void showEmptyView()>
<okhttp3.internal.connection.RealConnection: java.net.Socket socket()>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>
<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>
<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>
<rx.internal.util.unsafe.MpmcArrayQueueConsumerField: long lvConsumerIndex()>
<okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>
<retrofit2.ServiceMethod: void <clinit>()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>
<rx.internal.operators.OperatorSubscribeOn: void call(java.lang.Object)>
<retrofit2.ServiceMethod: okhttp3.Request toRequest(java.lang.Object[])>
<okio.Timeout: okio.Timeout clearDeadline()>
<retrofit2.Platform$Android: void <init>()>
<retrofit2.Utils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>
<rx.internal.util.ObjectPool: void initialize(int)>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: void cancel()>
<okio.RealBufferedSource: long read(okio.Buffer,long)>
<rx.internal.operators.OperatorSubscribeOn$1$1: void setProducer(rx.Producer)>
<rx.internal.util.ActionSubscriber: void onError(java.lang.Throwable)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment$$Lambda$3: void call(java.lang.Object)>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError: retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError instance()>
<okio.Okio: void <clinit>()>
<okhttp3.Headers: java.lang.String get(java.lang.String)>
<retrofit2.ExecutorCallAdapterFactory: void <init>(java.util.concurrent.Executor)>
<retrofit2.ServiceMethod: java.util.Set parsePathParameters(java.lang.String)>
<okhttp3.HttpUrl: java.util.List encodedPathSegments()>
<rx.android.schedulers.LooperScheduler$ScheduledAction: void <init>(rx.functions.Action0,android.os.Handler)>
<okio.AsyncTimeout$Watchdog: void run()>
<okhttp3.internal.Util$1: java.lang.Thread newThread(java.lang.Runnable)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: android.support.v7.widget.RecyclerView$LayoutManager craftLayoutManager(android.content.Context)>
<okhttp3.CacheControl: void <clinit>()>
<okhttp3.HttpUrl: int defaultPort(java.lang.String)>
<okhttp3.internal.http.CallServerInterceptor: void <init>(boolean)>
<rx.internal.util.unsafe.SpscArrayQueue: long lvProducerIndex()>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber: void onCompleted()>
<rx.Observable: rx.Subscription unsafeSubscribe(rx.Subscriber)>
<okhttp3.HttpUrl: java.lang.String host()>
<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>
<com.squareup.leakcanary.LeakCanary: boolean isInAnalyzerProcess(android.content.Context)>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError: java.lang.Object call(java.lang.Object)>
<okhttp3.CookieJar: void <clinit>()>
<okio.AsyncTimeout$2: okio.Timeout timeout()>
<rx.internal.util.unsafe.MpmcArrayQueueL1Pad: void <init>(int)>
<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder noCache()>
<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.connection.RealConnection,long)>
<retrofit2.BuiltInConverters: void <init>()>
<okio.RealBufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>
<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>
<rx.internal.util.PlatformDependent: int getAndroidApiVersion()>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$CallOnSubscribe: void call(rx.Subscriber)>
<okio.ByteString: java.lang.String hex()>
<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>
<rx.internal.schedulers.EventLoopsScheduler: void <clinit>()>
<okhttp3.Request: void <init>(okhttp3.Request$Builder)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>
<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>
<retrofit2.converter.gson.GsonConverterFactory: void <init>(com.google.gson.Gson)>
<retrofit2.Retrofit: okhttp3.HttpUrl baseUrl()>
<rx.plugins.RxJavaObservableExecutionHook: rx.Observable$OnSubscribe onCreate(rx.Observable$OnSubscribe)>
<fr.masciulli.drinks.DrinksApplication: fr.masciulli.drinks.DrinksApplication get(android.content.Context)>
<fr.masciulli.drinks.ui.activity.MainActivity: void onCreate(android.os.Bundle)>
<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>
<okhttp3.Route: okhttp3.Address address()>
<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>
<rx.subscriptions.CompositeSubscription: void unsubscribe()>
<rx.internal.util.unsafe.SpscArrayQueue: java.lang.Object poll()>
<okhttp3.Request: okhttp3.RequestBody body()>
<retrofit2.ServiceMethod$Builder: retrofit2.CallAdapter createCallAdapter()>
<okio.Okio$1: void flush()>
<fr.masciulli.drinks.ui.activity.MainActivity: boolean onCreateOptionsMenu(android.view.Menu)>
<retrofit2.RequestBuilder: okhttp3.Request build()>
<okhttp3.Response$Builder: void <init>()>
<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>
<okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform findPlatform()>
<fr.masciulli.drinks.net.CustomCacheControlInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<rx.Observable: rx.Observable observeOn(rx.Scheduler,boolean,int)>
<okio.AsyncTimeout$1: void <init>(okio.AsyncTimeout,okio.Sink)>
<rx.plugins.RxJavaPlugins: rx.plugins.RxJavaObservableExecutionHook getObservableExecutionHook()>
<okio.AsyncTimeout: long remainingNanos(long)>
<com.squareup.leakcanary.RefWatcher: void <clinit>()>
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)>
<okhttp3.Headers$Builder: void <init>()>
<rx.internal.util.unsafe.UnsafeAccess: boolean isUnsafeAvailable()>
<okhttp3.OkHttpClient: okhttp3.internal.cache.InternalCache internalCache()>
<rx.Observable: void <clinit>()>
<okio.Timeout: void throwIfReached()>
<retrofit2.Platform$Android: retrofit2.CallAdapter$Factory defaultCallAdapterFactory(java.util.concurrent.Executor)>
<retrofit2.Utils: void <clinit>()>
<rx.android.schedulers.LooperScheduler$HandlerWorker: void <init>(android.os.Handler)>
<rx.plugins.RxJavaPlugins: void <init>()>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void displayErrorState()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker: void <init>(com.facebook.stetho.inspector.elements.android.ActivityTracker$1)>
<okhttp3.HttpUrl: java.lang.String toString()>
<rx.internal.schedulers.CachedThreadScheduler: void <init>(java.util.concurrent.ThreadFactory)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: void <init>(int)>
<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection()>
<okhttp3.Route: java.net.InetSocketAddress socketAddress()>
<rx.Subscriber: void <init>(rx.Subscriber,boolean)>
<rx.schedulers.Schedulers: rx.schedulers.Schedulers getInstance()>
<okhttp3.Response: java.lang.String message()>
<okhttp3.internal.connection.StreamAllocation: void deallocate(boolean,boolean,boolean)>
<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain()>
<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>
<okio.Okio: okio.AsyncTimeout timeout(java.net.Socket)>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$2: void run()>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void <clinit>()>
<rx.internal.util.PlatformDependent: boolean isAndroid()>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: void <init>()>
<okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>
<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.CacheRequest maybeCache(okhttp3.Response,okhttp3.Request,okhttp3.internal.cache.InternalCache)>
<retrofit2.Platform: retrofit2.Platform findPlatform()>
<rx.android.plugins.RxAndroidSchedulersHook: rx.functions.Action0 onSchedule(rx.functions.Action0)>
<okhttp3.internal.cache.DiskLruCache$4: void <init>()>
<fr.masciulli.drinks.ui.fragment.DrinksFragment$$Lambda$3: void call(java.lang.Object)>
<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.Platform buildIfSupported()>
<okhttp3.OkHttpClient$1: okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation)>
<okhttp3.Address: int hashCode()>
<okhttp3.RealCall: void cancel()>
<okio.SegmentPool: okio.Segment take()>
<rx.internal.util.unsafe.SpscArrayQueueConsumerField: void <init>(int)>
<rx.internal.schedulers.NewThreadScheduler: void <init>(java.util.concurrent.ThreadFactory)>
<okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>
<okio.SegmentPool: void recycle(okio.Segment)>
<okio.Timeout: void <clinit>()>
<okio.Buffer: byte getByte(long)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$RequestArbiter: void <init>(retrofit2.Call,rx.Subscriber)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment$$Lambda$1: void onClick(android.view.View)>
<okio.Okio: okio.BufferedSink buffer(okio.Sink)>
<okio.ForwardingTimeout: okio.ForwardingTimeout setDelegate(okio.Timeout)>
<okhttp3.Request: okhttp3.CacheControl cacheControl()>
<okhttp3.Response: boolean isSuccessful()>
<retrofit2.Retrofit: retrofit2.ServiceMethod loadServiceMethod(java.lang.reflect.Method)>
<rx.plugins.RxJavaPlugins: rx.plugins.RxJavaErrorHandler getErrorHandler()>
<rx.internal.util.unsafe.SpscArrayQueue: void <init>(int)>
<okhttp3.TlsVersion: void <clinit>()>
<okhttp3.OkHttpClient: java.net.Proxy proxy()>
<okhttp3.internal.io.FileSystem$1: okio.Sink appendingSink(java.io.File)>
<rx.internal.operators.OperatorSubscribeOn: void call(rx.Subscriber)>
<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>
<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>
<okhttp3.HttpUrl$Builder: int effectivePort()>
<okhttp3.ConnectionSpec: boolean equals(java.lang.Object)>
<retrofit2.Platform: void <clinit>()>
<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>
<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$SimpleCallAdapter: java.lang.reflect.Type responseType()>
<okio.RealBufferedSink: void flush()>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$SimpleCallAdapter: void <init>(java.lang.reflect.Type,rx.Scheduler)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: void setItemClickListener(fr.masciulli.drinks.ui.adapter.ItemClickListener)>
<rx.internal.util.unsafe.MpmcArrayQueue: int size()>
<okio.AsyncTimeout: void enter()>
<okhttp3.Route: java.net.Proxy proxy()>
<okio.AsyncTimeout: okio.AsyncTimeout awaitTimeout()>
<okhttp3.Cache: void trackResponse(okhttp3.internal.cache.CacheStrategy)>
<okhttp3.CookieJar$1: java.util.List loadForRequest(okhttp3.HttpUrl)>
<okio.Okio$1: void write(okio.Buffer,long)>
<okhttp3.Protocol: void <clinit>()>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void <init>()>
<okhttp3.HttpUrl: java.lang.String encodedUsername()>
<rx.android.schedulers.LooperScheduler: void <init>(android.os.Looper)>
<rx.internal.util.ObjectPool$1: void run()>
<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>
<rx.plugins.RxJavaSchedulersHook: void <init>()>
<rx.internal.util.RxRingBuffer: void <clinit>()>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void loadLiquors()>
<okhttp3.HttpUrl$Builder: void <init>()>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void displayLoadingState()>
<rx.Observable: rx.Subscription subscribe(rx.Subscriber)>
<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>
<okhttp3.Response: okhttp3.ResponseBody body()>
<okio.RealBufferedSink: okio.BufferedSink writeByte(int)>
<rx.internal.operators.OperatorSubscribeOn$1$1$1: void request(long)>
<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>
<rx.android.schedulers.LooperScheduler$ScheduledAction: void run()>
<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>
<fr.masciulli.drinks.ui.activity.MainActivity$1: java.lang.CharSequence getPageTitle(int)>
<rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue: void <clinit>()>
<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>
<okhttp3.internal.io.FileSystem$1: okio.Sink sink(java.io.File)>
<okhttp3.OkHttpClient$Builder: void <init>()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>
<okio.RealBufferedSink: okio.BufferedSink emitCompleteSegments()>
<rx.internal.schedulers.ScheduledAction: void unsubscribe()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: void <init>()>
<com.facebook.stetho.server.ServerManager$1: void <init>(com.facebook.stetho.server.ServerManager,java.lang.String,com.facebook.stetho.server.LocalSocketServer)>
<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection)>
<rx.internal.operators.OperatorSubscribeOn$1: void <init>(rx.internal.operators.OperatorSubscribeOn,rx.Subscriber,rx.Scheduler$Worker)>
<okhttp3.Request: okhttp3.HttpUrl url()>
<okhttp3.internal.cache.DiskLruCache: okhttp3.internal.cache.DiskLruCache create(okhttp3.internal.io.FileSystem,java.io.File,int,int,long)>
<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection findConnection(int,int,int,boolean)>
<fr.masciulli.drinks.ui.adapter.Placeholders: void <init>()>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber: void <init>(rx.Scheduler,rx.Subscriber,boolean,int)>
<okhttp3.internal.connection.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.connection.RouteDatabase)>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1: java.lang.Thread newThread(java.lang.Runnable)>
<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>
<okhttp3.internal.Util: void <clinit>()>
<okhttp3.ResponseBody: void <init>()>
<okhttp3.internal.cache.DiskLruCache: void <clinit>()>
<com.facebook.stetho.common.ProcessUtil: java.lang.String readProcessName()>
<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>
<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager)>
<okhttp3.ConnectionSpec: boolean isTls()>
<okhttp3.internal.connection.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$SimpleCallAdapter: java.lang.Object adapt(retrofit2.Call)>
<rx.android.schedulers.AndroidSchedulers: rx.Scheduler mainThread()>
<rx.internal.util.SubscriptionList: void unsubscribeFromAll(java.util.Collection)>
<okhttp3.internal.cache.DiskLruCache$2: void <init>(okhttp3.internal.cache.DiskLruCache,okio.Sink)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory: retrofit2.adapter.rxjava.RxJavaCallAdapterFactory create()>
<okhttp3.OkHttpClient: java.util.List interceptors()>
<okhttp3.Request$Builder: void <init>(okhttp3.Request)>
<okhttp3.internal.http.HttpHeaders: boolean hasBody(okhttp3.Response)>
<okhttp3.ConnectionSpec: void <clinit>()>
<okhttp3.RealCall: okhttp3.Response execute()>
<rx.subscriptions.CompositeSubscription: void <init>()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>
<okhttp3.OkHttpClient$1: void <init>()>
<retrofit2.Platform: void <init>()>
<okhttp3.Route: int hashCode()>
<rx.subscriptions.Subscriptions: void <clinit>()>
<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>
<rx.android.schedulers.LooperScheduler$HandlerWorker: boolean isUnsubscribed()>
<fr.masciulli.drinks.DrinksApplication: fr.masciulli.drinks.net.Client getClient()>
<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: boolean onQueryTextChange(java.lang.String)>
<okio.AsyncTimeout: void scheduleTimeout(okio.AsyncTimeout,long,boolean)>
<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>
<okhttp3.Response: java.lang.String header(java.lang.String)>
<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.HttpStream httpStream()>
<okhttp3.Request: okhttp3.Request$Builder newBuilder()>
<com.facebook.stetho.server.LocalSocketServer: void <init>(java.lang.String,java.lang.String,com.facebook.stetho.server.SocketHandler)>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError: void <clinit>()>
<okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>
<rx.schedulers.Schedulers: void <init>()>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1: void <init>(rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool,java.util.concurrent.ThreadFactory)>
<rx.internal.util.unsafe.UnsafeAccess: void <clinit>()>
<okio.ForwardingTimeout: void <init>(okio.Timeout)>
<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>
<rx.internal.util.unsafe.MpmcArrayQueueL2Pad: void <init>(int)>
<okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>
<okio.RealBufferedSink: void close()>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$RequestArbiter: void request(long)>
<fr.masciulli.drinks.net.Client: void <init>(android.content.Context,java.lang.String)>
<okio.Timeout: void <init>()>
<okhttp3.ResponseBody: void close()>
<retrofit2.ServiceMethod: void <init>(retrofit2.ServiceMethod$Builder)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond$1: void onActivityCreated(android.app.Activity,android.os.Bundle)>
<com.squareup.leakcanary.LeakCanary: com.squareup.leakcanary.RefWatcher install(android.app.Application)>
<fr.masciulli.drinks.ui.adapter.Placeholders: void <clinit>()>
<okhttp3.internal.connection.RealConnection: void establishProtocol(int,int,okhttp3.internal.connection.ConnectionSpecSelector)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: void <clinit>()>
<rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue: void soSequence(long[],long,long)>
<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>
<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>
<okio.RealBufferedSource: okio.Timeout timeout()>
<okhttp3.Dispatcher: void finished(okhttp3.RealCall)>
<okio.Segment: void <init>()>
<rx.internal.util.unsafe.SpscArrayQueueL3Pad: void <init>(int)>
<okhttp3.HttpUrl$Builder: java.lang.String toString()>
<okhttp3.internal.cache.DiskLruCache: okhttp3.internal.cache.DiskLruCache$Snapshot get(java.lang.String)>
<okio.AsyncTimeout$2: void <init>(okio.AsyncTimeout,okio.Source)>
<rx.android.schedulers.AndroidSchedulers: rx.android.schedulers.AndroidSchedulers getInstance()>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void onError(java.lang.Throwable)>
<okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>
<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>
<okhttp3.internal.http.HttpHeaders: int skipUntil(java.lang.String,int,java.lang.String)>
<rx.internal.util.unsafe.MpmcArrayQueueProducerField: void <init>(int)>
<rx.plugins.RxJavaSchedulersHook: rx.Scheduler createIoScheduler()>
<okhttp3.Cache$1: void <init>(okhttp3.Cache)>
<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>
<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>
<okio.AsyncTimeout$1: void write(okio.Buffer,long)>
<okhttp3.Address: javax.net.SocketFactory socketFactory()>
<com.facebook.stetho.Stetho$Initializer: void start()>
<okio.AsyncTimeout: okio.Sink sink(okio.Sink)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void loadDrinks()>
<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>
<retrofit2.RequestBuilder: void <init>(java.lang.String,okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.MediaType,boolean,boolean,boolean)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory: void <init>(rx.Scheduler)>
<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake()>
<okio.Timeout: long timeoutNanos()>
<rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue: long calcSequenceOffset(long)>
<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>
<rx.plugins.RxJavaObservableExecutionHookDefault: void <init>()>
<com.facebook.stetho.server.ServerManager: void startServer(com.facebook.stetho.server.LocalSocketServer)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void displayErrorState()>
<rx.Observable: rx.Observable observeOn(rx.Scheduler)>
<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>
<okhttp3.internal.http.BridgeInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpStream newStream(okhttp3.OkHttpClient,boolean)>
<okio.AsyncTimeout: void <init>()>
<rx.internal.operators.OperatorObserveOn: void <init>(rx.Scheduler,boolean,int)>
<okhttp3.OkHttpClient: int connectTimeoutMillis()>
<okhttp3.internal.io.FileSystem: void <clinit>()>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber: void onError(java.lang.Throwable)>
<retrofit2.ServiceMethod$Builder: retrofit2.ServiceMethod build()>
<rx.subscriptions.CompositeSubscription: void unsubscribeFromAll(java.util.Collection)>
<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>
<rx.internal.util.RxJavaPluginUtils: void handleException(java.lang.Throwable)>
<fr.masciulli.drinks.net.Client: void <init>(android.content.Context)>
<rx.internal.schedulers.EventLoopsScheduler$PoolWorker: void <init>(java.util.concurrent.ThreadFactory)>
<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>
<rx.internal.util.RxThreadFactory$1: void <init>()>
<com.facebook.stetho.Stetho$1: void <init>(android.content.Context,android.content.Context)>
<okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>
<okio.RealBufferedSink: okio.BufferedSink writeDecimalLong(long)>
<okhttp3.internal.connection.ConnectionSpecSelector: void <init>(java.util.List)>
<retrofit2.Platform: boolean isDefaultMethod(java.lang.reflect.Method)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond$1: void onActivityResumed(android.app.Activity)>
<okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>
<okhttp3.internal.http.RealInterceptorChain: void <init>(java.util.List,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpStream,okhttp3.Connection,int,okhttp3.Request)>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool: void shutdown()>
<okio.Segment: okio.Segment pop()>
<rx.schedulers.Schedulers: rx.Scheduler newThread()>
<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>
<okhttp3.internal.http.RealResponseBody: okio.BufferedSource source()>
<okio.Buffer: void <clinit>()>
<rx.Subscriber: void <init>(rx.Subscriber)>
<okio.Buffer: long size()>
<okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>
<rx.internal.schedulers.NewThreadWorker: void <init>(java.util.concurrent.ThreadFactory)>
<rx.internal.util.unsafe.MpmcArrayQueueProducerField: long lvProducerIndex()>
<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>
<okhttp3.Dispatcher: void finished(java.util.Deque,java.lang.Object,boolean)>
<rx.internal.operators.OnSubscribeLift: void call(java.lang.Object)>
<okhttp3.internal.connection.RealConnection: boolean isHealthy(boolean)>
<okhttp3.internal.http.HttpMethod: boolean invalidatesCache(java.lang.String)>
<retrofit2.Retrofit$Builder: retrofit2.Retrofit build()>
<rx.internal.schedulers.NewThreadScheduler: rx.Scheduler$Worker createWorker()>
<rx.internal.schedulers.ScheduledAction: void <init>(rx.functions.Action0)>
<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: void <init>(okhttp3.OkHttpClient)>
<okhttp3.internal.http.HttpHeaders: long contentLength(okhttp3.Headers)>
<com.facebook.stetho.Stetho: void initialize(com.facebook.stetho.Stetho$Initializer)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment$$Lambda$1: android.view.View$OnClickListener lambdaFactory$(fr.masciulli.drinks.ui.fragment.DrinksFragment)>
<rx.internal.schedulers.NewThreadWorker: void <clinit>()>
<rx.internal.operators.BackpressureUtils: long addCap(long,long)>
<okhttp3.internal.cache.DiskLruCache: void validateKey(java.lang.String)>
<rx.internal.operators.OperatorSubscribeOn$1$1: void <init>(rx.internal.operators.OperatorSubscribeOn$1,rx.Subscriber,java.lang.Thread)>
<rx.Subscriber: void onStart()>
<rx.android.schedulers.AndroidSchedulers: void <init>()>
<retrofit2.OkHttpCall: okhttp3.Call createRawCall()>
<rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue: void <init>(int)>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>
<okhttp3.internal.cache.DiskLruCache$2: void <clinit>()>
<rx.functions.Actions: rx.functions.Actions$EmptyAction empty()>
<okhttp3.HttpUrl: java.util.List pathSegments()>
<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder)>
<okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>
<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>
<rx.internal.schedulers.ScheduledAction: void add(java.util.concurrent.Future)>
<okhttp3.Cache: void <init>(java.io.File,long,okhttp3.internal.io.FileSystem)>
<okhttp3.internal.connection.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>
<rx.internal.util.RxThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>
<rx.internal.schedulers.NewThreadWorker: rx.internal.schedulers.ScheduledAction scheduleActual(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>
<okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>
<com.facebook.stetho.common.Util: void throwIfNot(boolean)>
<okhttp3.Cache: okhttp3.Response get(okhttp3.Request)>
<rx.plugins.RxJavaSchedulersHook: rx.Scheduler createNewThreadScheduler(java.util.concurrent.ThreadFactory)>
<okio.ForwardingSink: void <init>(okio.Sink)>
<okhttp3.Dispatcher: int runningCallsCount()>
<okio.Timeout$1: void <init>()>
<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>
<okio.AsyncTimeout: boolean cancelScheduledTimeout(okio.AsyncTimeout)>
<rx.android.plugins.RxAndroidSchedulersHook: rx.android.plugins.RxAndroidSchedulersHook getDefaultInstance()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker: com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker newInstanceIfPossible(android.app.Application,com.facebook.stetho.inspector.elements.android.ActivityTracker)>
<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>
<okhttp3.ConnectionPool: long cleanup(long)>
<rx.android.plugins.RxAndroidPlugins: rx.android.plugins.RxAndroidPlugins getInstance()>
<rx.internal.util.unsafe.MpmcArrayQueueConsumerField: void <init>(int)>
<com.facebook.stetho.Stetho$Initializer: void <init>(android.content.Context)>
<rx.Observable: rx.Observable observeOn(rx.Scheduler,int)>
<rx.Subscriber: void <init>()>
<rx.internal.operators.OperatorSubscribeOn: void <init>(rx.Observable,rx.Scheduler)>
<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>
<okhttp3.internal.platform.Platform: void <init>()>
<fr.masciulli.drinks.ui.fragment.DrinksFragment$$Lambda$1: void <init>(fr.masciulli.drinks.ui.fragment.DrinksFragment)>
<rx.internal.util.unsafe.SpscArrayQueueL2Pad: void <init>(int)>
<rx.internal.schedulers.EventLoopsScheduler: void start()>
<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>
<retrofit2.Utils: java.lang.reflect.Type getParameterUpperBound(int,java.lang.reflect.ParameterizedType)>
<rx.android.plugins.RxAndroidPlugins: void <clinit>()>
<okhttp3.OkHttpClient: javax.net.ssl.X509TrustManager systemDefaultTrustManager()>
<rx.internal.util.PlatformDependent: java.lang.ClassLoader getSystemClassLoader()>
<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>
<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>
<rx.internal.util.unsafe.MpmcArrayQueueConsumerField: void <clinit>()>
<okhttp3.ConnectionSpec: int hashCode()>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError: rx.Subscriber call(rx.Subscriber)>
<retrofit2.Retrofit: java.lang.Object create(java.lang.Class)>
<com.facebook.stetho.okhttp3.StethoInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>
<okio.Buffer: long completeSegmentByteCount()>
<rx.internal.operators.NotificationLite: void <init>()>
<okio.AsyncTimeout$1: okio.Timeout timeout()>
<com.facebook.stetho.Stetho$Initializer$RealSocketHandlerFactory: void <init>(com.facebook.stetho.Stetho$Initializer,com.facebook.stetho.Stetho$1)>
<rx.plugins.RxJavaSchedulersHook: rx.Scheduler getIOScheduler()>
<rx.plugins.RxJavaPlugins: rx.plugins.RxJavaSchedulersHook getSchedulersHook()>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool: void evictExpiredWorkers()>
<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RouteDatabase routeDatabase()>
<okhttp3.Cache$1: okhttp3.Response get(okhttp3.Request)>
<okhttp3.HttpUrl: boolean isHttps()>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void lambda$onCreateView$0(android.view.View)>
<rx.internal.operators.NotificationLite: void <clinit>()>
<rx.internal.util.unsafe.SpscArrayQueueColdField: void <init>(int)>
<rx.subscriptions.Subscriptions$Unsubscribed: void <init>()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond: void register()>
<rx.plugins.RxJavaObservableExecutionHook: rx.Observable$Operator onLift(rx.Observable$Operator)>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError$1: void onNext(java.lang.Object)>
<okhttp3.Request: java.lang.String header(java.lang.String)>
<retrofit2.Retrofit$1: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>
<okhttp3.CipherSuite: void <clinit>()>
<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>
<okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>
<retrofit2.Converter$Factory: void <init>()>
<rx.plugins.RxJavaObservableExecutionHookDefault: rx.plugins.RxJavaObservableExecutionHook getInstance()>
<okhttp3.Request$Builder: okhttp3.Request build()>
<rx.internal.operators.NotificationLite$2: void <init>()>
<okhttp3.internal.http.Http1xStream$FixedLengthSource: void close()>
<rx.observers.SafeSubscriber: void onError(java.lang.Throwable)>
<okhttp3.Address: okhttp3.HttpUrl url()>
<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>
<okhttp3.internal.http.BridgeInterceptor: void <init>(okhttp3.CookieJar)>
<okio.Okio: okio.Sink sink(java.io.File)>
<rx.internal.schedulers.NewThreadWorker: void deregisterExecutor(java.util.concurrent.ScheduledExecutorService)>
<okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>
<okhttp3.internal.cache.FaultHidingSink: void <init>(okio.Sink)>
<fr.masciulli.drinks.ui.activity.MainActivity$1: void <init>(fr.masciulli.drinks.ui.activity.MainActivity,android.support.v4.app.FragmentManager)>
<retrofit2.Utils: okhttp3.ResponseBody buffer(okhttp3.ResponseBody)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>
<okhttp3.internal.tls.OkHostnameVerifier: void <clinit>()>
<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>
<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>
<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>
<rx.internal.util.PlatformDependent: void <clinit>()>
<rx.internal.util.SubscriptionList: void add(rx.Subscription)>
<rx.internal.operators.OnSubscribeLift: void call(rx.Subscriber)>
<okhttp3.Request: okhttp3.Headers headers()>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError$1: void onCompleted()>
<rx.internal.schedulers.CachedThreadScheduler: void start()>
<retrofit2.ServiceMethod$Builder: retrofit2.Converter createResponseConverter()>
<rx.internal.schedulers.NewThreadWorker: rx.Subscription schedule(rx.functions.Action0)>
<okhttp3.HttpUrl: int port()>
<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.internal.cache.CacheStrategy getCandidate()>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<okhttp3.internal.cache.CacheInterceptor: okhttp3.Response cacheWritingResponse(okhttp3.internal.cache.CacheRequest,okhttp3.Response)>
<okhttp3.CacheControl: boolean onlyIfCached()>
<retrofit2.Platform$Android: java.util.concurrent.Executor defaultCallbackExecutor()>
<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: okhttp3.Request followUpRequest(okhttp3.Response)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond$1: void onActivityPaused(android.app.Activity)>
<fr.masciulli.drinks.net.Client: rx.Observable getLiquors()>
<okhttp3.internal.platform.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>
<okhttp3.OkHttpClient: java.util.List connectionSpecs()>
<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>
<rx.internal.util.unsafe.Pow2: int roundToPowerOfTwo(int)>
<rx.internal.util.PlatformDependent: int resolveAndroidApiVersion()>
<retrofit2.Response: void <init>(okhttp3.Response,java.lang.Object,okhttp3.ResponseBody)>
<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.StreamAllocation streamAllocation()>
<okhttp3.Response$Builder: void <init>(okhttp3.Response)>
<okhttp3.internal.connection.RealConnection: void connect(int,int,int,java.util.List,boolean)>
<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment$$Lambda$3: rx.functions.Action1 lambdaFactory$(fr.masciulli.drinks.ui.fragment.LiquorsFragment)>
<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void <clinit>()>
<okhttp3.internal.io.FileSystem$1: void <init>()>
<okhttp3.internal.connection.StreamAllocation: void release(okhttp3.internal.connection.RealConnection)>
<com.facebook.stetho.server.LazySocketHandler: void <init>(com.facebook.stetho.server.SocketHandlerFactory)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment$$Lambda$2: rx.functions.Action1 lambdaFactory$(fr.masciulli.drinks.ui.fragment.LiquorsFragment)>
<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>
<rx.android.schedulers.AndroidSchedulers: void <clinit>()>
<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>
<rx.internal.schedulers.ScheduledAction: void run()>
<okio.RealBufferedSink: void <init>(okio.Sink)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<com.facebook.stetho.common.Util: void close(java.io.Closeable,boolean)>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber: boolean checkTerminated(boolean,boolean,rx.Subscriber,java.util.Queue)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void <init>()>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$RequestArbiter: boolean isUnsubscribed()>
<okhttp3.HttpUrl: java.lang.String encodedQuery()>
<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>
<fr.masciulli.drinks.net.Client: rx.Observable getDrinks()>
<okio.Timeout: okio.Timeout clearTimeout()>
<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>
<okio.Buffer: void write(okio.Buffer,long)>
<okhttp3.internal.connection.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>
<okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void onCreate(android.os.Bundle)>
<retrofit2.Utils: boolean hasUnresolvableType(java.lang.reflect.Type)>
<rx.Observable: rx.Subscription subscribe(rx.Subscriber,rx.Observable)>
<okio.AsyncTimeout: okio.Source source(okio.Source)>
<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.internal.cache.CacheStrategy get()>
<okhttp3.HttpUrl: java.lang.String scheme()>
<okio.AsyncTimeout: void exit(boolean)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment$$Lambda$2: void <init>(fr.masciulli.drinks.ui.fragment.LiquorsFragment)>
<okhttp3.HttpUrl: java.lang.String encodedPassword()>
<rx.observers.SafeSubscriber: void <init>(rx.Subscriber)>
<rx.internal.operators.OperatorSubscribeOn$1: void call()>
<okhttp3.ResponseBody: okhttp3.ResponseBody create(okhttp3.MediaType,long,okio.BufferedSource)>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>
<okhttp3.CookieJar$1: void <init>()>
<rx.internal.operators.NotificationLite$1: void <init>()>
<okio.RealBufferedSource: long indexOf(byte,long)>
<okhttp3.internal.framed.FramedConnection$Listener$1: void <init>()>
<rx.internal.util.RxThreadFactory: void <clinit>()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: boolean beginTrackingIfPossible(android.app.Application)>
<rx.schedulers.Schedulers: void <clinit>()>
<okhttp3.Dispatcher: void <init>()>
<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>
<okhttp3.internal.connection.StreamAllocation: void release()>
<okhttp3.ConnectionPool: void put(okhttp3.internal.connection.RealConnection)>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber: void init()>
<rx.Subscriber: void setProducer(rx.Producer)>
<rx.internal.util.unsafe.SpscArrayQueue: long lvConsumerIndex()>
<okhttp3.internal.cache.CacheInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<okhttp3.internal.platform.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>
<rx.internal.util.SubscriptionList: boolean isUnsubscribed()>
<okhttp3.internal.http.RealInterceptorChain: okhttp3.Request request()>
<rx.internal.schedulers.ScheduledAction$FutureCompleter: boolean isUnsubscribed()>
<okhttp3.HttpUrl: java.lang.String encodedPath()>
<rx.internal.operators.NotificationLite: rx.internal.operators.NotificationLite instance()>
<rx.internal.operators.OperatorObserveOn: rx.Subscriber call(rx.Subscriber)>
<rx.plugins.RxJavaErrorHandler: void handleError(java.lang.Throwable)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment$$Lambda$3: void <init>(fr.masciulli.drinks.ui.fragment.LiquorsFragment)>
<okhttp3.OkHttpClient: okhttp3.Dns dns()>
<rx.android.plugins.RxAndroidSchedulersHook: void <clinit>()>
<rx.Scheduler: void <clinit>()>
<okio.RealBufferedSink: okio.Timeout timeout()>
<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$RequestArbiter: void unsubscribe()>
<rx.Observable: void <init>(rx.Observable$OnSubscribe)>
<retrofit2.Retrofit$Builder: void <init>()>
<okhttp3.internal.io.FileSystem$1: boolean exists(java.io.File)>
<retrofit2.OkHttpCall: retrofit2.Response execute()>
<okhttp3.Cache: void <init>(java.io.File,long)>
<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>
<rx.internal.schedulers.NewThreadWorker: void unsubscribe()>
<okio.Buffer: java.lang.String readUtf8(long)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: boolean isEnabled()>
<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>
<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError$1: void onNext(retrofit2.Response)>
<okhttp3.Address: boolean equals(java.lang.Object)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: java.lang.Object lvElement(java.lang.Object[],long)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker: void <init>()>
<rx.plugins.RxJavaSchedulersHook: rx.plugins.RxJavaSchedulersHook getDefaultInstance()>
<fr.masciulli.drinks.DrinksApplication: void <init>()>
<okio.Okio: okio.Sink sink(java.io.OutputStream)>
<retrofit2.RequestBuilder: void <clinit>()>
<okio.Buffer: java.lang.String readUtf8Line(long)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$CallOnSubscribe: void <init>(retrofit2.Call)>
<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>
<okhttp3.internal.cache.CacheInterceptor: void <init>(okhttp3.internal.cache.InternalCache)>
<okhttp3.internal.cache.DiskLruCache: void initialize()>
<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)>
<okhttp3.internal.cache.DiskLruCache: void rebuildJournal()>
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder client(okhttp3.OkHttpClient)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: int getItemCount()>
<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>
<okio.Okio$2: void <init>(okio.Timeout,java.io.InputStream)>
<okhttp3.Response$Builder: okhttp3.Response build()>
<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>
<retrofit2.OkHttpCall: retrofit2.OkHttpCall clone()>
<com.squareup.leakcanary.RefWatcher: void <init>()>
<okio.Buffer: okio.Buffer writeDecimalLong(long)>
<rx.internal.schedulers.NewThreadWorker: boolean tryEnableCancelPolicy(java.util.concurrent.ScheduledExecutorService)>
<rx.internal.operators.OnSubscribeLift: void <clinit>()>
<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>
<okhttp3.OkHttpClient: java.util.List protocols()>
<rx.Subscriber: boolean isUnsubscribed()>
<rx.android.plugins.RxAndroidSchedulersHook: rx.Scheduler getMainThreadScheduler()>
<okhttp3.internal.connection.RealConnection: okhttp3.Route route()>
<rx.internal.operators.OperatorSubscribeOn$1$1: void onError(java.lang.Throwable)>
<okhttp3.Request: java.lang.String method()>
<okhttp3.HttpUrl: boolean equals(java.lang.Object)>
<retrofit2.CallAdapter$Factory: java.lang.Class getRawType(java.lang.reflect.Type)>
<okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>
<okio.AsyncTimeout$1: void flush()>
<rx.plugins.RxJavaSchedulersHook: rx.Scheduler getNewThreadScheduler()>
<rx.internal.util.unsafe.MpmcArrayQueue: void <init>(int)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: com.facebook.stetho.inspector.network.NetworkPeerManager getPeerManagerIfEnabled()>
<okio.Okio: okio.BufferedSource buffer(okio.Source)>
<okio.RealBufferedSource: void close()>
<okio.Buffer: okio.Segment writableSegment(int)>
<okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpStream,okhttp3.Connection)>
<okhttp3.Request: boolean isHttps()>
<rx.internal.operators.OnSubscribeLift: void <init>(rx.Observable$OnSubscribe,rx.Observable$Operator)>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>
<okhttp3.internal.cache.DiskLruCache$1: void <init>(okhttp3.internal.cache.DiskLruCache)>
<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>
<okio.RealBufferedSource: void <init>(okio.Source)>
<okio.Okio$1: void <init>(okio.Timeout,java.io.OutputStream)>
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(okhttp3.HttpUrl)>
<okio.Buffer: void clear()>
<com.facebook.stetho.Stetho$Initializer$RealSocketHandlerFactory: void <init>(com.facebook.stetho.Stetho$Initializer)>
<retrofit2.Retrofit$1: void <init>(retrofit2.Retrofit,java.lang.Class)>
<retrofit2.ServiceMethod$Builder: void <init>(retrofit2.Retrofit,java.lang.reflect.Method)>
<rx.internal.util.RxRingBuffer$1: void <init>()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>
<okhttp3.internal.connection.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>
<okhttp3.Headers: java.lang.String value(int)>
<rx.plugins.RxJavaObservableExecutionHookDefault: void <clinit>()>
<rx.android.schedulers.LooperScheduler: rx.Scheduler$Worker createWorker()>
<rx.internal.operators.OperatorObserveOn: java.lang.Object call(java.lang.Object)>
<okio.Okio: okio.Source source(java.net.Socket)>
<okhttp3.internal.cache.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder addCallAdapterFactory(retrofit2.CallAdapter$Factory)>
<okhttp3.Address: java.util.List connectionSpecs()>
<rx.plugins.RxJavaObservableExecutionHook: rx.Subscription onSubscribeReturn(rx.Subscription)>
<okhttp3.internal.http.HttpHeaders: long contentLength(okhttp3.Response)>
<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>
<okhttp3.internal.connection.RealConnection: void buildConnection(int,int,int,okhttp3.internal.connection.ConnectionSpecSelector)>
<retrofit2.converter.gson.GsonConverterFactory: retrofit2.converter.gson.GsonConverterFactory create()>
<rx.internal.schedulers.NewThreadWorker: java.lang.reflect.Method findSetRemoveOnCancelPolicyMethod(java.util.concurrent.ScheduledExecutorService)>
<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>
<okhttp3.Route: boolean requiresTunnel()>
<okhttp3.OkHttpClient: java.util.List networkInterceptors()>
<okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void hideEmptyView()>
<okhttp3.internal.http.HttpHeaders: long stringToLong(java.lang.String)>
<retrofit2.OkHttpCall: retrofit2.Call clone()>
<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>
<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError: void <init>()>
<okhttp3.internal.connection.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>
<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>
<okhttp3.ConnectionPool: okhttp3.internal.connection.RealConnection get(okhttp3.Address,okhttp3.internal.connection.StreamAllocation)>
<com.facebook.stetho.server.ServerManager: void start()>
<okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>
<com.facebook.stetho.common.ProcessUtil: int indexOf(byte[],int,int,byte)>
<okhttp3.OkHttpClient: int writeTimeoutMillis()>
<retrofit2.Response: boolean isSuccessful()>
<okio.Buffer: long read(okio.Buffer,long)>
<rx.internal.schedulers.NewThreadWorker: rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.Stetho: void initializeWithDefaults(android.content.Context)>
<rx.android.plugins.RxAndroidPlugins: void <init>()>
<okhttp3.Request$Builder: void <init>()>
<okio.ForwardingTimeout: okio.Timeout delegate()>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$SimpleCallAdapter: rx.Observable adapt(retrofit2.Call)>
<rx.android.schedulers.LooperScheduler$HandlerWorker: rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<rx.plugins.RxJavaSchedulersHook: rx.Scheduler createComputationScheduler()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond$1: void onActivityStarted(android.app.Activity)>
<okhttp3.Cache: java.lang.String urlToKey(okhttp3.Request)>
<retrofit2.Retrofit: void <init>(okhttp3.Call$Factory,okhttp3.HttpUrl,java.util.List,java.util.List,java.util.concurrent.Executor,boolean)>
<rx.android.schedulers.LooperScheduler$HandlerWorker: rx.Subscription schedule(rx.functions.Action0)>
<com.facebook.stetho.server.ServerManager: void <init>(com.facebook.stetho.server.LocalSocketServer)>
<okio.Util: void checkOffsetAndCount(long,long,long)>
<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>
<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>
<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>
<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>
<retrofit2.Response: java.lang.String message()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond: void <init>(android.app.Application,com.facebook.stetho.inspector.elements.android.ActivityTracker)>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError$1: void <init>(retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError,rx.Subscriber,rx.Subscriber)>
<okhttp3.Address: java.net.ProxySelector proxySelector()>
<okhttp3.internal.connection.ConnectInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<okio.Okio: okio.Sink appendingSink(java.io.File)>
<okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>
<rx.plugins.RxJavaPlugins: rx.plugins.RxJavaPlugins getInstance()>
<okhttp3.internal.connection.RealConnection: void connectSocket(int,int)>
<com.facebook.stetho.common.ProcessUtil: java.lang.String getProcessName()>
<rx.android.plugins.RxAndroidSchedulersHook: void <init>()>
<okio.Okio: okio.Sink sink(java.io.OutputStream,okio.Timeout)>
<rx.Subscriber: void request(long)>
<okhttp3.internal.http.RealInterceptorChain: boolean sameConnection(okhttp3.HttpUrl)>
<okhttp3.HttpUrl: void <clinit>()>
<okio.Buffer: void skip(long)>
<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>
<rx.plugins.RxJavaPlugins: void <clinit>()>
<retrofit2.Platform: retrofit2.Platform get()>
<okhttp3.HttpUrl: java.net.URI uri()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: void filter(java.lang.String)>
<rx.internal.schedulers.CachedThreadScheduler: void <clinit>()>
<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>
<fr.masciulli.drinks.ui.activity.MainActivity$1: int getCount()>
<retrofit2.Utils: java.lang.Class getRawType(java.lang.reflect.Type)>
<rx.internal.util.unsafe.MpmcArrayQueueProducerField: void <clinit>()>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void onCreate(android.os.Bundle)>
<okio.Util: void <clinit>()>
<okio.Okio$1: void close()>
<okhttp3.internal.framed.FramedConnection$Listener: void <clinit>()>
<retrofit2.Response: retrofit2.Response error(okhttp3.ResponseBody,okhttp3.Response)>
<okhttp3.OkHttpClient: void <clinit>()>
<rx.Observable: rx.Subscription subscribe(rx.functions.Action1,rx.functions.Action1)>
<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>
<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>
<okio.Okio: okio.Source source(java.io.InputStream,okio.Timeout)>
<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>
<okhttp3.internal.connection.RouteSelector: boolean hasNextInetSocketAddress()>
<rx.internal.util.ActionSubscriber: void <init>(rx.functions.Action1,rx.functions.Action1,rx.functions.Action0)>
<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>
<okhttp3.internal.platform.Platform: void <clinit>()>
<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>
<rx.plugins.RxJavaPlugins$1: void <init>()>
<rx.internal.schedulers.EventLoopsScheduler: void <init>(java.util.concurrent.ThreadFactory)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$CallOnSubscribe: void call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: void add(android.app.Activity)>
<rx.Scheduler: void <init>()>
<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>
<retrofit2.converter.gson.GsonConverterFactory: retrofit2.converter.gson.GsonConverterFactory create(com.google.gson.Gson)>
<okhttp3.internal.platform.AndroidPlatform: boolean isCleartextTrafficPermitted(java.lang.String)>
<rx.internal.operators.OperatorSubscribeOn$1$1$1: void <init>(rx.internal.operators.OperatorSubscribeOn$1$1,rx.Producer)>
<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>
<rx.android.plugins.RxAndroidPlugins: rx.android.plugins.RxAndroidSchedulersHook getSchedulersHook()>
<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: okhttp3.Address createAddress(okhttp3.HttpUrl)>
<retrofit2.Platform$Android$MainThreadExecutor: void <init>()>
<okhttp3.Headers$Builder: okhttp3.Headers build()>
<rx.internal.util.unsafe.SpscArrayQueueL1Pad: void <init>(int)>
<okhttp3.internal.cache.CacheInterceptor: okhttp3.Response stripBody(okhttp3.Response)>
<retrofit2.Retrofit$Builder: void <init>(retrofit2.Platform)>
<okhttp3.Response: okhttp3.Headers headers()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond$1: void <init>(com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond)>
<okhttp3.internal.http.CallServerInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: com.facebook.stetho.inspector.elements.android.ActivityTracker get()>
<okhttp3.CipherSuite: okhttp3.CipherSuite of(java.lang.String,int,int,int,int)>
<rx.internal.util.SubscriptionList: void unsubscribe()>
<rx.Observable: rx.Observable lift(rx.Observable$Operator)>
<retrofit2.Utils: void validateServiceInterface(java.lang.Class)>
<rx.plugins.RxJavaSchedulersHook: rx.Scheduler getComputationScheduler()>
<rx.exceptions.Exceptions: void throwIfFatal(java.lang.Throwable)>
<rx.exceptions.Exceptions: void throwIfAny(java.util.List)>
<rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool: void <init>(java.util.concurrent.ThreadFactory,int)>
<okhttp3.ConnectionPool$1: void run()>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber: void schedule()>

---------- Methods Not Visited (8622) ----------
<com.squareup.picasso.RemoteViewsAction: com.squareup.picasso.RemoteViewsAction$RemoteViewsTarget getTarget()>
<rx.internal.operators.OnSubscribeDetach: void <init>(rx.Observable)>
<rx.internal.operators.OperatorScan$2: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer: java.lang.Object enterTransform(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Network: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorReplay$InnerProducer: void request(long)>
<okio.Buffer: okio.BufferedSink writeLongLe(long)>
<com.facebook.stetho.inspector.protocol.module.Runtime$CallFunctionOnResponse: void <init>(com.facebook.stetho.inspector.protocol.module.Runtime$1)>
<rx.Observable: rx.Observable buffer(long,java.util.concurrent.TimeUnit,int)>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin: java.lang.String getName()>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: void <init>(com.facebook.stetho.common.android.FragmentCompatFramework$1)>
<okhttp3.CacheControl: boolean noCache()>
<rx.internal.util.unsafe.BaseLinkedQueue: java.util.Iterator iterator()>
<okhttp3.Request$Builder: okhttp3.Request$Builder tag(java.lang.Object)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: java.lang.String onGetNodeName(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getStyleFromInteger(java.lang.String,java.lang.Integer,android.view.ViewDebug$ExportedProperty,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<com.facebook.stetho.inspector.elements.Document: java.lang.Integer getNodeIdForElement(java.lang.Object)>
<rx.observers.TestSubscriber: void assertReceivedOnNext(java.util.List)>
<rx.Single: rx.Single just(java.lang.Object)>
<com.squareup.picasso.Request$Builder: void <init>(com.squareup.picasso.Request)>
<okhttp3.Address: okhttp3.Authenticator proxyAuthenticator()>
<rx.Completable: rx.Completable repeat()>
<rx.internal.operators.OperatorIgnoreElements: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: long stethoNow()>
<rx.Single$5$1: void onSuccess(java.lang.Object)>
<okhttp3.internal.connection.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>
<com.facebook.stetho.server.SecureSocketHandler: void enforcePermission(android.content.Context,android.net.LocalSocket)>
<okio.Okio: boolean isAndroidGetsocknameError(java.lang.AssertionError)>
<okhttp3.Cache$2: java.lang.String next()>
<rx.internal.operators.OperatorDoOnRequest$ParentSubscriber: void requestMore(long)>
<rx.internal.operators.OperatorToMultimap$DefaultMultimapCollectionFactory: void <init>()>
<rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector$1: void onError(java.lang.Throwable)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: int calcElementOffset(long)>
<rx.schedulers.TestScheduler$InnerTestScheduler: long now()>
<rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber: void <init>(rx.Subscriber,rx.subscriptions.SerialSubscription,rx.internal.producers.ProducerArbiter,rx.Observable)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>
<com.facebook.stetho.inspector.protocol.module.HeapProfiler$ProfileHeader: void <init>()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addPathSegments(java.lang.String,boolean)>
<com.facebook.stetho.Stetho$1: java.lang.Iterable getInspectorModules()>
<rx.internal.util.InternalObservableUtils: rx.functions.Func2 createCollectorCaller(rx.functions.Action2)>
<com.facebook.stetho.dumpapp.DumperContext: void <init>(com.facebook.stetho.dumpapp.DumperContext,java.util.List)>
<com.facebook.stetho.inspector.protocol.module.Network$LoadingFailedParams: void <init>()>
<okhttp3.Cache: void delete()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray lvNext(java.util.concurrent.atomic.AtomicReferenceArray)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder centerInside()>
<rx.Completable: rx.Completable doOnSubscribe(rx.functions.Action1)>
<rx.Observable: rx.Observable defaultIfEmpty(java.lang.Object)>
<okhttp3.internal.framed.FramedStream$FramedDataSink: void write(okio.Buffer,long)>
<rx.internal.operators.OperatorTake: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.Stetho$DefaultDumperPluginsBuilder: com.facebook.stetho.Stetho$DefaultDumperPluginsBuilder remove(java.lang.String)>
<rx.Observable: rx.Observable just(java.lang.Object,java.lang.Object)>
<com.squareup.picasso.Cache: int maxSize()>
<com.squareup.picasso.Callback$EmptyCallback: void <init>()>
<rx.internal.operators.OnSubscribeRedo: rx.Observable repeat(rx.Observable,rx.Scheduler)>
<rx.internal.operators.OperatorBufferWithSingleObservable$2: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorDoOnSubscribe: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.protocol.module.CSS$RuleMatch: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<okhttp3.OkHttpClient$1: okhttp3.HttpUrl getHttpUrlChecked(java.lang.String)>
<rx.internal.operators.OnSubscribeAmb: rx.Observable$OnSubscribe amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.OperatorZipIterable$1: void onNext(java.lang.Object)>
<rx.internal.util.ScalarSynchronousObservable: void <init>(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber$2: void call()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler: void enable()>
<com.squareup.picasso.BitmapHunter: android.graphics.Bitmap decodeStream(java.io.InputStream,com.squareup.picasso.Request)>
<com.squareup.picasso.LruCache: void trimToSize(int)>
<rx.internal.operators.OperatorTimestamp: void <init>(rx.Scheduler)>
<rx.internal.operators.OperatorGroupBy$1: void call()>
<rx.internal.operators.OnSubscribeAmb: rx.Observable$OnSubscribe amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<okhttp3.HttpUrl: java.lang.String queryParameterName(int)>
<com.squareup.picasso.PicassoDrawable: void setPlaceholder(android.widget.ImageView,android.graphics.drawable.Drawable)>
<rx.internal.operators.OperatorReplay$ReplayBuffer: void next(java.lang.Object)>
<rx.internal.util.ScalarSynchronousSingle$2$1: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.DOMStorage$DomStorageItemAddedParams: void <init>()>
<com.squareup.picasso.Dispatcher: void performRetry(com.squareup.picasso.BitmapHunter)>
<okio.RealBufferedSink$1: java.lang.String toString()>
<rx.internal.operators.OperatorWindowWithStartEndObservable: rx.Subscriber call(rx.Subscriber)>
<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>
<okhttp3.internal.framed.Settings: int getDownloadBandwidth(int)>
<rx.Observable: rx.Observable timeout(long,java.util.concurrent.TimeUnit,rx.Observable,rx.Scheduler)>
<com.facebook.stetho.inspector.protocol.module.CSS$GetMatchedStylesForNodeResult: void <init>()>
<rx.internal.util.ScalarSynchronousObservable$1: rx.Subscription call(rx.functions.Action0)>
<okio.Buffer: okio.ByteString md5()>
<rx.internal.schedulers.ScheduledAction$Remover: void <init>(rx.internal.schedulers.ScheduledAction,rx.subscriptions.CompositeSubscription)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: android.view.View getView(android.support.v4.app.Fragment)>
<okio.BufferedSource: long readHexadecimalUnsignedLong()>
<rx.observables.AsyncOnSubscribe$6: void onCompleted()>
<rx.internal.operators.NotificationLite: boolean isCompleted(java.lang.Object)>
<okhttp3.internal.http.Http1xStream$FixedLengthSink: okio.Timeout timeout()>
<rx.internal.operators.OperatorMap: rx.Subscriber call(rx.Subscriber)>
<rx.internal.util.OpenHashSet: boolean removeEntry(int,java.lang.Object[],int)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder query(java.lang.String)>
<rx.internal.operators.OperatorDebounceWithTime$DebounceState: void clear()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: java.util.List getActivitiesView()>
<com.squareup.picasso.RequestCreator: android.graphics.Bitmap get()>
<com.squareup.picasso.MediaStoreRequestHandler: com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request,int)>
<com.facebook.stetho.common.android.ViewUtil: boolean pointInView(android.view.View,float,float)>
<rx.observables.BlockingObservable: void subscribe()>
<rx.internal.operators.OnSubscribeDetach: void call(java.lang.Object)>
<rx.Observable: rx.Observable 'from'(java.util.concurrent.Future,rx.Scheduler)>
<rx.internal.operators.OperatorReplay$6: void <init>(int,long,rx.Scheduler)>
<rx.internal.operators.CompletableOnSubscribeMergeArray$1: void onCompleted()>
<rx.internal.operators.OperatorToMap$1: void onNext(java.lang.Object)>
<okhttp3.internal.framed.FramedConnection$2: void execute()>
<rx.subjects.Subject: rx.subjects.SerializedSubject toSerialized()>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Runtime$1: com.facebook.stetho.inspector.console.RuntimeRepl newInstance()>
<rx.internal.operators.OperatorBufferWithTime: rx.Subscriber call(rx.Subscriber)>
<okio.ByteString: int decodeHexDigit(char)>
<rx.internal.operators.OperatorPublish$InnerProducer: void unsubscribe()>
<rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker: void <init>(rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool)>
<okio.RealBufferedSink: okio.BufferedSink writeHexadecimalUnsignedLong(long)>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder: com.facebook.stetho.inspector.database.ContentProviderSchema$Table build()>
<rx.internal.operators.OperatorDebounceWithSelector$1$1: void onNext(java.lang.Object)>
<okio.ByteString: void write(java.io.OutputStream)>
<rx.internal.operators.OnSubscribeAmb$AmbSubscriber: void onCompleted()>
<okhttp3.internal.http.Http1xStream$FixedLengthSink: void write(okio.Buffer,long)>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: void onCompleted()>
<com.squareup.picasso.UrlConnectionDownloader$ResponseCacheIcs: void close(java.lang.Object)>
<rx.Notification: boolean hasThrowable()>
<rx.internal.operators.OperatorWindowWithSize: rx.Subscriber call(rx.Subscriber)>
<okhttp3.MediaType: java.nio.charset.Charset charset()>
<okhttp3.internal.framed.Http2$Writer: void <init>(okio.BufferedSink,boolean)>
<rx.observers.TestObserver$1: void <init>()>
<rx.Completable$33: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OnSubscribePublishMulticast: boolean add(rx.internal.operators.OnSubscribePublishMulticast$PublishProducer)>
<rx.internal.operators.OperatorMapPair$MapPairSubscriber: void setProducer(rx.Producer)>
<rx.internal.operators.OperatorZip$Zip: void tick()>
<rx.internal.operators.OperatorDebounceWithTime$1$1: void <init>(rx.internal.operators.OperatorDebounceWithTime$1,int)>
<rx.observables.BlockingObservable$3: void onCompleted()>
<okio.BufferedSink: okio.BufferedSink writeShort(int)>
<okhttp3.internal.tls.DistinguishedNameParser: char getEscaped()>
<com.squareup.picasso.Picasso$RequestTransformer$1: com.squareup.picasso.Request transformRequest(com.squareup.picasso.Request)>
<rx.Completable$7: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.util.IndexedRingBuffer$IndexSection: void set(int,int)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.Origin: com.facebook.stetho.inspector.elements.Origin[] values()>
<rx.internal.operators.OperatorTimeoutWithSelector$2$1: void <init>(rx.internal.operators.OperatorTimeoutWithSelector$2,rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber,java.lang.Long)>
<retrofit2.ParameterHandler$Header: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<rx.internal.operators.BufferUntilSubscriber: rx.internal.operators.BufferUntilSubscriber create()>
<okio.RealBufferedSink: java.lang.String toString()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean canFlagsBeMappedToString(android.view.ViewDebug$ExportedProperty)>
<rx.internal.util.atomic.SpscAtomicArrayQueue: void soConsumerIndex(long)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: void getAttributes(java.lang.Object,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<com.squareup.picasso.Stats: void shutdown()>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4: void onError(java.lang.Throwable)>
<okio.Buffer: java.lang.Object clone()>
<rx.internal.operators.OperatorMapPair$MapPairSubscriber: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.network.PrettyPrinterDisplayType: com.facebook.stetho.inspector.protocol.module.Page$ResourceType getResourceType()>
<rx.Completable: rx.Completable mergeDelayError(rx.Completable[])>
<okhttp3.internal.Util: void closeAll(java.io.Closeable,java.io.Closeable)>
<rx.Observable: rx.Observable zip(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func5)>
<com.squareup.picasso.Utils$BitmapHoneycombMR1: int getByteCount(android.graphics.Bitmap)>
<com.squareup.picasso.LruCache: int maxSize()>
<okhttp3.internal.framed.HeadersMode: void <init>(java.lang.String,int)>
<rx.Completable$29: void <init>(rx.Completable,rx.Scheduler)>
<rx.Single$21$2: void onError(java.lang.Throwable)>
<rx.internal.operators.OnSubscribeRefCount: void call(java.lang.Object)>
<com.squareup.picasso.Utils: int getBitmapBytes(android.graphics.Bitmap)>
<com.facebook.stetho.inspector.elements.android.DocumentHiddenView: void <init>(android.content.Context)>
<rx.internal.util.PlatformDependent$1: java.lang.Object run()>
<okio.Sink: void write(okio.Buffer,long)>
<rx.functions.Actions: rx.functions.FuncN toFunc(rx.functions.ActionN,java.lang.Object)>
<rx.Completable$16$1: void <init>(rx.Completable$16,rx.subscriptions.CompositeSubscription,rx.Scheduler$Worker,rx.Completable$CompletableSubscriber)>
<rx.subjects.ReplaySubject$ReplayBuffer: void complete()>
<com.squareup.picasso.BitmapHunter$2: com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request,int)>
<rx.Observable: rx.Observable skipLast(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.squareup.picasso.Action: com.squareup.picasso.Picasso getPicasso()>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void handleThrownError(rx.Subscriber,java.lang.Throwable)>
<rx.internal.operators.OperatorTakeLastTimed$TakeLastTimedSubscriber: void evictOld(long)>
<rx.internal.operators.OperatorIgnoreElements$1: void onError(java.lang.Throwable)>
<okhttp3.internal.framed.Http2$ContinuationSource: void readContinuationHeader()>
<okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.facebook.stetho.inspector.elements.Document: void updateTree()>
<okhttp3.internal.framed.FramedStream$StreamTimeout: java.io.IOException newTimeoutException(java.io.IOException)>
<rx.Single: rx.Single delay(long,java.util.concurrent.TimeUnit)>
<rx.subjects.ReplaySubject: boolean hasThrowable()>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.OnSubscribeDelaySubscriptionOther$1: void onError(java.lang.Throwable)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedPath(java.lang.String)>
<rx.internal.operators.OnSubscribeRedo$RedoFinite$1: rx.Notification call(rx.Notification)>
<com.squareup.picasso.PicassoDrawable: void drawDebugIndicator(android.graphics.Canvas)>
<okhttp3.internal.framed.Http2$Writer: void pushPromise(int,int,java.util.List)>
<rx.internal.operators.OperatorTakeUntilPredicate: rx.Subscriber call(rx.Subscriber)>
<okio.Pipe$PipeSource: void <init>(okio.Pipe)>
<rx.exceptions.Exceptions: void throwOrReport(java.lang.Throwable,rx.Observer)>
<com.facebook.stetho.inspector.protocol.module.DOMStorage$DomStorageItemUpdatedParams: void <init>()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void responseReadFailed(java.lang.String,java.lang.String)>
<okhttp3.internal.framed.FramedStream: okhttp3.internal.framed.ErrorCode getErrorCode()>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void <init>(java.io.BufferedOutputStream)>
<com.facebook.stetho.inspector.protocol.module.Page$FrameResourceTree: void <init>()>
<rx.internal.operators.OperatorAny: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.protocol.module.Runtime: void <init>(com.facebook.stetho.inspector.console.RuntimeReplFactory)>
<rx.internal.operators.OnSubscribeAmb$Selection: void unsubscribeOthers(rx.internal.operators.OnSubscribeAmb$AmbSubscriber)>
<rx.functions.Actions: rx.functions.Func9 toFunc(rx.functions.Action9)>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: void handlePageList(com.facebook.stetho.server.http.LightHttpResponse)>
<rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber: void requestMore(long)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueueL2Pad: void <init>()>
<rx.subscriptions.Subscriptions: rx.Subscription 'from'(java.util.concurrent.Future)>
<okhttp3.Cache$CacheResponseBody: void <init>(okhttp3.internal.cache.DiskLruCache$Snapshot,java.lang.String,java.lang.String)>
<com.facebook.stetho.Stetho: void <init>()>
<com.squareup.picasso.DeferredRequestCreator: void <init>(com.squareup.picasso.RequestCreator,android.widget.ImageView,com.squareup.picasso.Callback)>
<okio.Buffer: int readUtf8CodePoint()>
<com.facebook.stetho.dumpapp.DumperContext: void <init>(java.io.InputStream,java.io.PrintStream,java.io.PrintStream,org.apache.commons.cli.CommandLineParser,java.util.List)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getStyleFromValue(android.view.View,java.lang.String,java.lang.Object,android.view.ViewDebug$ExportedProperty,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.util.List tidyDatabaseList(java.util.List)>
<okio.Buffer: okio.Buffer write(byte[],int,int)>
<retrofit2.adapter.rxjava.OperatorMapResponseToBodyOrError$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorThrottleFirst$1: void onCompleted()>
<rx.internal.operators.BlockingOperatorToFuture$1: void <init>(java.util.concurrent.CountDownLatch,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager$AsyncPrettyPrintingCallable: void <init>(com.facebook.stetho.inspector.network.ResponseBodyFileManager,java.io.InputStream,com.facebook.stetho.inspector.network.AsyncPrettyPrinter)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResponseCallAdapter: java.lang.Object adapt(retrofit2.Call)>
<rx.Completable$13: void <init>(rx.functions.Func0,rx.functions.Func1,rx.functions.Action1,boolean)>
<com.squareup.picasso.MemoryPolicy: boolean shouldWriteToMemoryCache(int)>
<rx.internal.operators.OnSubscribeRedo$RedoFinite: void <init>(long)>
<rx.Single$14: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays: void <init>()>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber: void onSubscribe(rx.Subscription)>
<com.facebook.stetho.server.http.RegexpPathMatcher: void <init>(java.util.regex.Pattern)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResponseCallAdapter: java.lang.reflect.Type responseType()>
<rx.observables.BlockingObservable: void subscribe(rx.Subscriber)>
<rx.internal.operators.OperatorWithLatestFrom$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.server.SocketHandler: void onAccepted(android.net.LocalSocket)>
<okhttp3.internal.framed.Hpack$Reader: void clearDynamicTable()>
<rx.internal.operators.OperatorToObservableSortedList$2: void onStart()>
<okhttp3.Cache$2: boolean hasNext()>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: byte[] getSkipBufferLocked()>
<rx.internal.util.atomic.SpscAtomicArrayQueue: void clear()>
<rx.subjects.ReplaySubject$ReplayBuffer: java.lang.Object[] toArray(java.lang.Object[])>
<retrofit2.Converter$Factory: retrofit2.Converter requestBodyConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<okhttp3.Request$Builder: okhttp3.Request$Builder put(okhttp3.RequestBody)>
<rx.Completable$17: void <init>(rx.Completable,rx.functions.Action0,rx.functions.Action0,rx.functions.Action1,rx.functions.Action1,rx.functions.Action0)>
<rx.Single$21$2: void onCompleted()>
<rx.Observable: rx.Observable sequenceEqual(rx.Observable,rx.Observable)>
<rx.Observable: rx.Observable repeatWhen(rx.functions.Func1)>
<rx.exceptions.CompositeException$PrintStreamOrWriter: void <init>(rx.exceptions.CompositeException$1)>
<rx.internal.operators.OperatorElementAt$1: void setProducer(rx.Producer)>
<rx.Single$3: void call(rx.SingleSubscriber)>
<com.facebook.stetho.inspector.protocol.module.Page: void setShowViewportSizeOnResize(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.dumpapp.Framer: int readInt()>
<retrofit2.RequestBuilder: void addHeader(java.lang.String,java.lang.String)>
<com.facebook.stetho.dumpapp.DumpappSocketLikeHandler: void onAccepted(com.facebook.stetho.server.SocketLike)>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void requestMore(long)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<okio.AsyncTimeout$1: void close()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$PaddingBottomHighlightDrawable: void highlightView(android.view.View)>
<com.facebook.stetho.inspector.protocol.module.CSS$PeerManagerListener: void onLastPeerUnregistered()>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.console.RuntimeRepl getRepl(com.facebook.stetho.inspector.console.RuntimeReplFactory)>
<com.squareup.picasso.Utils: void <clinit>()>
<okhttp3.Dispatcher: int queuedCallsCount()>
<com.squareup.picasso.BitmapHunter: android.graphics.Bitmap transformResult(com.squareup.picasso.Request,android.graphics.Bitmap,int)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: void registerListener(com.facebook.stetho.inspector.elements.android.ActivityTracker$Listener)>
<com.facebook.stetho.json.ObjectMapper: org.json.JSONArray convertListToJsonArray(java.lang.Object)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void clearProducer()>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$$Lambda$1: void onClick(android.view.View)>
<okio.Sink: okio.Timeout timeout()>
<rx.subjects.TestSubject: boolean hasObservers()>
<com.squareup.picasso.MarkableInputStream: void reset()>
<rx.Observable: rx.Observable single(rx.functions.Func1)>
<okhttp3.internal.framed.Hpack: okio.ByteString checkLowercase(okio.ByteString)>
<rx.internal.operators.OperatorZip: void <init>(rx.functions.Func4)>
<com.facebook.stetho.inspector.helper.ChromePeerManager: void <init>()>
<rx.observables.SyncOnSubscribe: rx.observables.SyncOnSubscribe createStateful(rx.functions.Func0,rx.functions.Func2)>
<com.facebook.stetho.dumpapp.DumpappOutputBrokenException: void <init>(java.lang.Throwable)>
<okhttp3.internal.framed.FramedConnection$Reader: void applyAndAckSettings(okhttp3.internal.framed.Settings)>
<okio.RealBufferedSource: long readDecimalLong()>
<okhttp3.internal.cache.InternalCache: okhttp3.Response get(okhttp3.Request)>
<retrofit2.http.Field: boolean encoded()>
<rx.internal.util.InternalObservableUtils$ObjectEqualsFunc2: void <init>()>
<rx.subjects.ReplaySubject$ReplayProducer: void unsubscribe()>
<retrofit2.DefaultCallAdapterFactory: void <clinit>()>
<okio.Buffer: okio.ByteString digest(java.lang.String)>
<rx.Observable: rx.Observable delaySubscription(rx.Observable)>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: java.lang.Object removeObjectById(int)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: void onHook(java.lang.Object)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall: okhttp3.Request request()>
<rx.internal.operators.OnSubscribeRefCount$2: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.DOMStorage: void removeDOMStorageItem(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OnSubscribeThrow: void call(java.lang.Object)>
<rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber: void onStart()>
<rx.Observable: rx.Observable combineLatest(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func6)>
<retrofit2.Utils: java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder fragment(java.lang.String)>
<rx.internal.util.SynchronizedQueue: java.lang.Object remove()>
<rx.Completable$16$1: void onSubscribe(rx.Subscription)>
<rx.internal.operators.OnSubscribeFromCallable: void <init>(java.util.concurrent.Callable)>
<okhttp3.internal.cache.DiskLruCache$3: okhttp3.internal.cache.DiskLruCache$Snapshot next()>
<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: void onAttributeRemoved(java.lang.Object,java.lang.String)>
<rx.observers.TestObserver: void assertTerminalEvent()>
<okio.Buffer$2: int read(byte[],int,int)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProviderFactory: void <init>(android.app.Application)>
<com.facebook.stetho.inspector.protocol.module.CSS$Selector: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<rx.Observable: rx.Observable zip(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func7)>
<fr.masciulli.drinks.ui.adapter.holder.RelatedHeaderViewHolder: android.widget.TextView getRelatedDrinksTitle()>
<okhttp3.HttpUrl$Builder: java.net.InetAddress decodeIpv6(java.lang.String,int,int)>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: void complete(java.lang.Throwable)>
<okhttp3.internal.framed.FrameWriter: void settings(okhttp3.internal.framed.Settings)>
<rx.internal.operators.OnSubscribeRedo$1$1: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void onChildNodeRemoved(int,int)>
<okio.Buffer: byte readByte()>
<rx.internal.operators.OnSubscribePublishMulticast: void onCompleted()>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: boolean isEmpty()>
<rx.Single$24: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer: void <init>(rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber)>
<com.facebook.stetho.inspector.protocol.module.Page$ScreencastFrameEventMetadata: void <init>()>
<rx.internal.operators.OnSubscribeRedo: rx.Observable repeat(rx.Observable,long)>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1: void <init>(rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber,rx.internal.operators.OperatorWindowWithStartEndObservable$SerializedSubject)>
<com.facebook.stetho.Stetho$PluginBuilder: java.lang.Iterable finish()>
<rx.subjects.ReplaySubject$ReplayBuffer: void error(java.lang.Throwable)>
<okhttp3.HttpUrl: int decodeHexDigit(char)>
<rx.observables.BlockingObservable$5: void onError(java.lang.Throwable)>
<retrofit2.ParameterHandler$RawPart: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<rx.Single$16: void onCompleted()>
<rx.functions.Functions: rx.functions.FuncN fromAction(rx.functions.Action0)>
<com.squareup.picasso.Utils$PicassoThreadFactory: void <init>()>
<okhttp3.internal.connection.RealConnection: void connectTls(int,int,okhttp3.internal.connection.ConnectionSpecSelector)>
<rx.internal.operators.OperatorTimeoutWithSelector$2: void <init>(rx.functions.Func1)>
<rx.Completable$30: void call(java.lang.Object)>
<rx.internal.operators.OnSubscribeDelaySubscription: void call(rx.Subscriber)>
<okhttp3.internal.framed.Http2$ContinuationSource: void <init>(okio.BufferedSource)>
<okio.RealBufferedSource: long readHexadecimalUnsignedLong()>
<rx.internal.operators.OperatorReplay: void <init>(rx.Observable$OnSubscribe,rx.Observable,java.util.concurrent.atomic.AtomicReference,rx.functions.Func0)>
<com.facebook.stetho.inspector.protocol.module.DOM$RGBAColor: void <init>()>
<okio.DeflaterSink: void deflate(boolean)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightDurationObserver: void onCompleted()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.lang.Object[] toArray(java.lang.Object[])>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$4: java.lang.Object call(java.lang.Object)>
<com.squareup.picasso.Picasso: void deliverAction(android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom,com.squareup.picasso.Action)>
<retrofit2.ParameterHandler$RawPart: void <init>()>
<com.facebook.stetho.Stetho: com.facebook.stetho.InspectorModulesProvider defaultInspectorModulesProvider(android.content.Context)>
<okio.ForwardingTimeout: okio.Timeout clearTimeout()>
<rx.internal.operators.OperatorTakeUntil$1: void onCompleted()>
<rx.observables.ConnectableObservable$1: void <init>(rx.observables.ConnectableObservable,rx.Subscription[])>
<rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorScan$3: void <init>(rx.internal.operators.OperatorScan,java.lang.Object,rx.internal.operators.OperatorScan$InitialProducer)>
<rx.Single: rx.Observable merge(rx.Single,rx.Single,rx.Single)>
<com.facebook.stetho.inspector.elements.Document$DocumentObjectIdMapper: void onMapped(java.lang.Object,int)>
<com.facebook.stetho.inspector.protocol.module.Page: void <init>(android.content.Context)>
<okhttp3.Cache$CacheRequestImpl: void <init>(okhttp3.Cache,okhttp3.internal.cache.DiskLruCache$Editor)>
<rx.internal.operators.OperatorDoOnSubscribe: java.lang.Object call(java.lang.Object)>
<rx.plugins.RxJavaSingleExecutionHookDefault: void <clinit>()>
<rx.Completable$24: void <init>(rx.Completable,rx.functions.Func1)>
<rx.internal.producers.QueuedValueProducer: void <init>(rx.Subscriber)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder retryOnConnectionFailure(boolean)>
<com.squareup.picasso.UrlConnectionDownloader$1: java.lang.Object initialValue()>
<com.squareup.picasso.Stats$StatsHandler: void handleMessage(android.os.Message)>
<rx.Observable: rx.Observable just(java.lang.Object)>
<rx.internal.util.ObjectPool: void shutdown()>
<rx.Observable: rx.Observable groupBy(rx.functions.Func1,rx.functions.Func1)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void setLiquor(fr.masciulli.drinks.model.Liquor)>
<rx.internal.util.UtilityFunctions$1: java.lang.Object call(java.lang.Object)>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call()>
<com.facebook.stetho.inspector.elements.Document: void releaseChildrenAccumulator(com.facebook.stetho.common.ArrayListAccumulator)>
<okhttp3.Cookie: long expiresAt()>
<rx.BackpressureOverflow$DropOldest: boolean mayAttemptDrop()>
<rx.Observable: rx.Observable concatEager(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler$OverlayView: void <init>(com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler,android.content.Context)>
<okhttp3.internal.framed.FramedConnection: int openStreamCount()>
<rx.internal.operators.OnSubscribePublishMulticast: void call(java.lang.Object)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder username(java.lang.String)>
<rx.schedulers.TimeInterval: java.lang.String toString()>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder rotate(float)>
<rx.internal.operators.OnSubscribeTimerOnce$1: void call()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker: void register()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void getChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<okhttp3.ConnectionSpec: java.lang.String toString()>
<retrofit2.Call: retrofit2.Response execute()>
<rx.observables.BlockingObservable$6: void onStart()>
<rx.internal.operators.OperatorDoOnUnsubscribe: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin: void doKill(com.facebook.stetho.dumpapp.DumperContext,java.util.Iterator)>
<com.squareup.picasso.Dispatcher: void dispatchComplete(com.squareup.picasso.BitmapHunter)>
<okio.SegmentedByteString: int segment(int)>
<okhttp3.internal.framed.NameValueBlockReader: void <init>(okio.BufferedSource)>
<rx.internal.operators.OnSubscribeFromIterable: void call(java.lang.Object)>
<rx.internal.util.InternalObservableUtils$ToArrayFunc1: java.lang.Object call(java.lang.Object)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: int getItemViewType(int)>
<rx.Single$19$1$1: void onSuccess(java.lang.Object)>
<rx.internal.util.IndexedRingBuffer: void releaseToPool()>
<okio.Util: long reverseBytesLong(long)>
<rx.internal.operators.BlockingOperatorToFuture$2: boolean cancel(boolean)>
<okio.SegmentedByteString: byte getByte(int)>
<okhttp3.Dispatcher: void promoteCalls()>
<okhttp3.Dispatcher: java.util.List runningCalls()>
<rx.exceptions.CompositeException: java.util.List getExceptions()>
<okio.Timeout: okio.Timeout deadlineNanoTime(long)>
<rx.Observable: rx.Observable concatMap(rx.functions.Func1)>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber: void onError(java.lang.Throwable)>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: void error(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Database: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.squareup.picasso.Downloader$Response: void <init>(java.io.InputStream,boolean,long)>
<com.squareup.picasso.Stats: void performDownloadFinished(java.lang.Long)>
<rx.Observable: rx.Observable zip(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func8)>
<rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber: void setProducer(rx.Producer)>
<okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)>
<com.facebook.stetho.inspector.protocol.module.Console$MessageAddedRequest: void <init>()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator centerInside()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean isEmpty()>
<rx.observers.TestSubscriber: void onError(java.lang.Throwable)>
<retrofit2.OkHttpCall$1: void <init>(retrofit2.OkHttpCall,retrofit2.Callback)>
<okhttp3.Dispatcher: java.util.List queuedCalls()>
<rx.internal.operators.OperatorAny: void <init>(rx.functions.Func1,boolean)>
<rx.internal.operators.OperatorAll$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorReplay$1: void <init>()>
<com.facebook.stetho.dumpapp.plugins.HprofDumperPlugin: void dump(com.facebook.stetho.dumpapp.DumperContext)>
<rx.Observable: rx.Observable concat(rx.Observable,rx.Observable)>
<com.facebook.stetho.inspector.protocol.module.Network: void setPrettyPrinterInitializer(com.facebook.stetho.inspector.network.AsyncPrettyPrinterInitializer)>
<com.facebook.stetho.common.android.ViewUtil$ViewCompat: void <clinit>()>
<com.squareup.picasso.Picasso: void invalidate(java.io.File)>
<rx.Single$20$2: void <init>(rx.Single$20,rx.Subscriber,rx.Subscriber)>
<com.facebook.stetho.dumpapp.DumperPlugin: void dump(com.facebook.stetho.dumpapp.DumperContext)>
<com.squareup.picasso.RequestCreator: void <clinit>()>
<okio.ForwardingSink: java.lang.String toString()>
<fr.masciulli.drinks.ui.adapter.holder.RelatedHeaderViewHolder: void <init>(android.view.View)>
<rx.internal.operators.OperatorMapPair$1: void <init>(rx.functions.Func1)>
<rx.internal.operators.CompletableOnSubscribeTimeout$1$1: void <init>(rx.internal.operators.CompletableOnSubscribeTimeout$1)>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: int size()>
<rx.Completable$10: void <init>(rx.Observable)>
<okhttp3.internal.framed.Http2$Reader: void readWindowUpdate(okhttp3.internal.framed.FrameReader$Handler,int,byte,int)>
<rx.functions.Actions$1: void <init>(rx.functions.Action0,java.lang.Object)>
<rx.Completable$28: void onSubscribe(rx.Subscription)>
<rx.internal.operators.OperatorCast$CastSubscriber: void setProducer(rx.Producer)>
<rx.Completable$3$1: void <init>(rx.Completable$3,java.util.concurrent.atomic.AtomicBoolean,rx.subscriptions.CompositeSubscription,rx.Completable$CompletableSubscriber)>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2: void onCompleted()>
<rx.internal.operators.OperatorDematerialize$2: void <clinit>()>
<rx.internal.util.unsafe.SpmcArrayQueueL2Pad: void <init>(int)>
<com.facebook.stetho.inspector.protocol.module.DOM$1: com.facebook.stetho.inspector.protocol.module.DOM$Node call()>
<okio.Base64: java.lang.String encode(byte[])>
<rx.internal.util.InternalObservableUtils$ReplaySupplierTime: java.lang.Object call()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: int getId(android.support.v4.app.Fragment)>
<rx.functions.Functions$13: void <init>(rx.functions.Action2)>
<rx.internal.operators.OperatorDistinct$1: void onNext(java.lang.Object)>
<com.facebook.stetho.websocket.WebSocketSession: void sendText(java.lang.String)>
<com.squareup.picasso.AssetRequestHandler: void <clinit>()>
<com.facebook.stetho.server.LazySocketHandler: com.facebook.stetho.server.SocketHandler getSocketHandler()>
<okhttp3.internal.framed.FramedConnection: void start(boolean)>
<okhttp3.Headers: java.util.Map toMultimap()>
<rx.Observable: rx.Observable startWith(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.server.http.LightHttpBody$1: int contentLength()>
<okhttp3.logging.HttpLoggingInterceptor$Logger: void <clinit>()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: int size()>
<rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber: void onCompleted()>
<rx.functions.Actions: rx.functions.Func6 toFunc(rx.functions.Action6,java.lang.Object)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: void unhook(java.lang.Object)>
<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>
<rx.Single$23: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.protocol.module.DOM$ResolveNodeResponse resolveNode(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void <init>(rx.observables.AsyncOnSubscribe,java.lang.Object,rx.observables.AsyncOnSubscribe$UnicastSubject)>
<okio.RealBufferedSource: java.lang.String toString()>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer: void request(long)>
<com.facebook.stetho.websocket.FrameHelper: void <init>()>
<okhttp3.Cookie$Builder: okhttp3.Cookie$Builder secure()>
<okhttp3.internal.cache.DiskLruCache$3: void <init>(okhttp3.internal.cache.DiskLruCache)>
<rx.subscriptions.SerialSubscription$State: void <init>(boolean,rx.Subscription)>
<okio.ByteString: boolean endsWith(okio.ByteString)>
<rx.exceptions.UnsubscribeFailedException: void <init>(java.lang.String,java.lang.Throwable)>
<rx.Single$24: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorDistinctUntilChanged$Holder: void <clinit>()>
<rx.internal.operators.OperatorToObservableSortedList$DefaultComparableFunction: void <init>()>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor$ElementContext: void unhook()>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber: void onCompleted()>
<com.facebook.stetho.dumpapp.DumpappOutputBrokenException: void <init>(java.lang.String,java.lang.Throwable)>
<com.squareup.picasso.ContactsPhotoRequestHandler: boolean canHandleRequest(com.squareup.picasso.Request)>
<rx.internal.operators.OperatorTakeUntil$2: void onCompleted()>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: java.lang.String getAppLabelAndVersion()>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void replay(rx.internal.operators.OperatorReplay$InnerProducer)>
<rx.subjects.AsyncSubject: boolean hasThrowable()>
<rx.observers.SerializedSubscriber: void <init>(rx.Subscriber)>
<com.squareup.picasso.RequestHandler: boolean supportsReplay()>
<rx.internal.operators.OperatorMerge: rx.internal.operators.OperatorMerge instance(boolean)>
<okhttp3.Protocol: okhttp3.Protocol get(java.lang.String)>
<rx.Single$12: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.OnSubscribeFromArray$FromArrayProducer: void slowPath(long)>
<com.facebook.stetho.inspector.elements.DescriptorMap: void <init>()>
<rx.subjects.PublishSubject: void onError(java.lang.Throwable)>
<rx.Completable: rx.Subscription subscribe()>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$Request: java.lang.Object call()>
<rx.schedulers.TimeInterval: java.lang.Object getValue()>
<rx.subjects.PublishSubject: java.lang.Throwable getThrowable()>
<okio.InflaterSource: void releaseInflatedBytes()>
<okio.Util: void sneakyRethrow(java.lang.Throwable)>
<okhttp3.internal.http.Http1xStream: okio.Sink newFixedLengthSink(long)>
<com.squareup.picasso.Dispatcher: void performCancel(com.squareup.picasso.Action)>
<com.facebook.stetho.dumpapp.plugins.HprofDumperPlugin: void handlePipeOutput(java.io.OutputStream)>
<com.facebook.stetho.common.ListUtil: java.util.List newImmutableList(java.lang.Object)>
<rx.internal.operators.OperatorDistinctUntilChanged$1: void onNext(java.lang.Object)>
<com.squareup.picasso.Dispatcher$NetworkBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.facebook.stetho.common.android.AccessibilityUtil: boolean hasText(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
<rx.internal.operators.OperatorOnBackpressureDrop$2: void onNext(java.lang.Object)>
<rx.subjects.ReplaySubject: boolean hasObservers()>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder config(android.graphics.Bitmap$Config)>
<rx.internal.operators.OperatorSkipUntil$2: void onCompleted()>
<rx.internal.operators.OperatorTakeWhile$2: void onCompleted()>
<com.facebook.stetho.inspector.elements.Document: void cleanUp()>
<okhttp3.MultipartBody: okhttp3.MultipartBody$Part part(int)>
<rx.subscriptions.BooleanSubscription: void <clinit>()>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory: java.net.URL parseURL(java.lang.String)>
<okhttp3.internal.framed.Http2$ContinuationSource: long read(okio.Buffer,long)>
<okhttp3.internal.framed.Http2$Reader: void readSettings(okhttp3.internal.framed.FrameReader$Handler,int,byte,int)>
<rx.internal.schedulers.ScheduledAction$Remover: void unsubscribe()>
<rx.Completable$16$1: void onError(java.lang.Throwable)>
<rx.subjects.ReplaySubject$ReplayBuffer: void next(java.lang.Object)>
<com.facebook.stetho.websocket.SimpleEndpoint: void onClose(com.facebook.stetho.websocket.SimpleSession,int,java.lang.String)>
<rx.internal.operators.OperatorWindowWithObservableFactory: void <init>(rx.functions.Func0)>
<rx.internal.operators.OnSubscribeRedo$1: rx.Observable call(rx.Observable)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: void onUnhook(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithSize$WindowSkip: void <init>(rx.Subscriber,int,int)>
<rx.subscriptions.CompositeSubscription: void remove(rx.Subscription)>
<rx.internal.operators.OperatorBufferWithSize$BufferSkip: void onNext(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: int getId(java.lang.Object)>
<okhttp3.internal.connection.StreamAllocation: boolean hasMoreRoutes()>
<rx.Single$24: void onCompleted()>
<rx.internal.operators.OperatorDebounceWithTime$1$1: void call()>
<rx.internal.operators.OperatorDematerialize$1: void onNext(java.lang.Object)>
<rx.Observable: rx.Observable flatMapIterable(rx.functions.Func1,rx.functions.Func2,int)>
<com.facebook.stetho.inspector.protocol.module.Console$CallFrame: void <init>(java.lang.String,java.lang.String,int,int)>
<okhttp3.internal.framed.ErrorCode: okhttp3.internal.framed.ErrorCode fromSpdyGoAway(int)>
<rx.Single: rx.Single[] iterableToArray(java.lang.Iterable)>
<rx.internal.operators.OperatorReplay$InnerProducer: void addTotalRequested(long)>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: boolean accept(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.CSS$InheritedStyleEntry: void <init>()>
<com.facebook.stetho.common.Utf8Charset: byte[] encodeUTF8(java.lang.String)>
<retrofit2.ParameterHandler$Query: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<okio.Buffer: boolean rangeEquals(long,okio.ByteString,int,int)>
<rx.internal.operators.OperatorReplay$ReplayBuffer: void complete()>
<rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber: void onCompleted()>
<rx.internal.operators.OperatorScan$InitialProducer: void setProducer(rx.Producer)>
<com.facebook.stetho.inspector.protocol.module.DOM$PeerManagerListener: void onFirstPeerRegistered()>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorSampleWithObservable$2: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber: void <init>(rx.Subscriber,rx.internal.producers.ProducerArbiter)>
<com.facebook.stetho.common.LogRedirector: boolean isLoggable(java.lang.String,int)>
<rx.internal.operators.OnSubscribeGroupJoin: void call(rx.Subscriber)>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void abandon()>
<com.facebook.stetho.server.CompositeInputStream: int read()>
<rx.internal.operators.OperatorElementAt$1: void onCompleted()>
<fr.masciulli.drinks.net.WebApi: rx.Observable getDrinks()>
<rx.exceptions.CompositeException: java.util.List getListOfCauses(java.lang.Throwable)>
<rx.Completable: rx.Completable merge(rx.Observable,int)>
<rx.observers.TestSubscriber: void assertNotCompleted()>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager: java.util.Map prefsCopy(java.util.Map)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void <init>(android.app.Application,com.facebook.stetho.common.ThreadBound)>
<rx.Single$11: void <init>(rx.functions.Func7)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$FieldBackedCSSProperty: java.lang.Object getValue(android.view.View)>
<rx.observables.BlockingObservable$4: void onCompleted()>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: void register(com.facebook.stetho.server.http.HandlerRegistry)>
<rx.internal.util.ScalarSynchronousObservable$2: void <init>(rx.internal.util.ScalarSynchronousObservable,rx.Scheduler)>
<rx.internal.operators.OnSubscribeUsing$DisposeAction: boolean isUnsubscribed()>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: java.lang.Object getObjectForId(int)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver: void <init>(rx.internal.operators.OnSubscribeGroupJoin$ResultManager,int)>
<rx.functions.Actions$9: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<okio.Buffer$2: java.lang.String toString()>
<rx.internal.util.unsafe.MpmcArrayQueue: java.lang.Object poll()>
<fr.masciulli.drinks.model.Drink$1: java.lang.Object[] newArray(int)>
<rx.Observable: rx.Observable doAfterTerminate(rx.functions.Action0)>
<okhttp3.logging.HttpLoggingInterceptor$Level: okhttp3.logging.HttpLoggingInterceptor$Level valueOf(java.lang.String)>
<rx.internal.operators.NotificationLite: rx.Notification$Kind kind(java.lang.Object)>
<rx.functions.Actions: rx.functions.Func7 toFunc(rx.functions.Action7)>
<retrofit2.http.Part: java.lang.String value()>
<rx.internal.operators.OperatorReplay: rx.observables.ConnectableObservable observeOn(rx.observables.ConnectableObservable,rx.Scheduler)>
<com.facebook.stetho.inspector.protocol.module.Network: void setUserAgentOverride(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void drainError(java.lang.Throwable)>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager$AsyncPrettyPrintingCallable: java.lang.String prettyPrintContent(java.io.InputStream,com.facebook.stetho.inspector.network.AsyncPrettyPrinter)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter$$Lambda$1: android.view.View$OnClickListener lambdaFactory$(fr.masciulli.drinks.ui.adapter.DrinksAdapter,fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Drink)>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder indicatorsEnabled(boolean)>
<rx.Completable: rx.Completable merge(java.lang.Iterable)>
<com.facebook.stetho.common.android.ViewUtil: boolean isTransformedPointInView(android.view.ViewGroup,android.view.View,float,float,android.graphics.PointF)>
<com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.protocol.module.DOM$GetSearchResultsResponse getSearchResults(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber: void requestMore(long)>
<okhttp3.internal.http.Http2xStream: void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.framed.FramedConnection)>
<okhttp3.Response: okhttp3.CacheControl cacheControl()>
<rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator: boolean hasNext()>
<rx.Single: rx.Single zip(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.functions.Func5)>
<com.squareup.picasso.RemoteViewsAction: java.lang.Object getTarget()>
<com.squareup.picasso.BitmapHunter$6: void run()>
<com.squareup.picasso.RemoteViewsAction$AppWidgetAction: void <init>(com.squareup.picasso.Picasso,com.squareup.picasso.Request,android.widget.RemoteViews,int,int[],int,int,java.lang.String,java.lang.Object,int)>
<retrofit2.OkHttpCall: boolean isExecuted()>
<rx.internal.util.InternalObservableUtils: rx.functions.Func0 createReplaySupplier(rx.Observable)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: java.lang.String method()>
<rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker$1: void call()>
<okhttp3.ConnectionPool: int idleConnectionCount()>
<rx.functions.Actions: rx.functions.Func8 toFunc(rx.functions.Action8,java.lang.Object)>
<rx.internal.operators.OperatorSkipLastTimed$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.Document$ProviderListener: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String)>
<com.facebook.stetho.inspector.helper.ThreadBoundProxy: void postDelayed(java.lang.Runnable,long)>
<rx.observers.TestSubscriber: void onNext(java.lang.Object)>
<rx.Completable$23$1: void onSubscribe(rx.Subscription)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder setEncodedPathSegment(int,java.lang.String)>
<rx.internal.util.unsafe.UnsafeAccess: void <init>()>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: void handleActivate(com.facebook.stetho.server.http.LightHttpResponse)>
<rx.internal.operators.NotificationLite: java.lang.Throwable getError(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithSize$WindowExact: void onError(java.lang.Throwable)>
<com.squareup.picasso.PicassoExecutorService: void adjustThreadCount(android.net.NetworkInfo)>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterFactory: com.facebook.stetho.inspector.network.AsyncPrettyPrinter getInstance(java.lang.String,java.lang.String)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment$$Lambda$2: void call(java.lang.Object)>
<rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue: long lvSequence(long[],long)>
<okio.SegmentedByteString: java.lang.Object writeReplace()>
<com.facebook.stetho.common.LogRedirector: java.lang.String formatThrowable(java.lang.Throwable)>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Builder: void <init>()>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void complete()>
<rx.internal.util.BlockingUtils: void <init>()>
<okhttp3.Cache$1: void trackConditionalCacheHit()>
<rx.functions.Functions$6: java.lang.Object call(java.lang.Object[])>
<com.facebook.stetho.inspector.protocol.module.DOMStorage: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getDOMStorageItems(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder authenticator(okhttp3.Authenticator)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void requestMore(long)>
<com.squareup.picasso.OkHttpDownloader: void <init>(android.content.Context)>
<okhttp3.internal.cache.FaultHidingSink: void write(okio.Buffer,long)>
<okhttp3.internal.connection.RouteException: void <init>(java.io.IOException)>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler$AlwaysMatchMatcher: void <init>()>
<com.facebook.stetho.inspector.network.NetworkPeerManager: void setPrettyPrinterInitializer(com.facebook.stetho.inspector.network.AsyncPrettyPrinterInitializer)>
<com.squareup.picasso.BitmapHunter: com.squareup.picasso.Picasso$Priority getPriority()>
<com.facebook.stetho.inspector.protocol.module.Runtime$ExceptionDetails: void <init>()>
<rx.Completable$13$1: void <init>(rx.Completable$13,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,rx.Completable$CompletableSubscriber)>
<com.facebook.stetho.dumpapp.Dumper: void <init>(java.lang.Iterable,org.apache.commons.cli.CommandLineParser)>
<okhttp3.internal.framed.Hpack$Reader: java.util.List getAndResetHeaderList()>
<okio.Buffer: long indexOf(okio.ByteString,long)>
<com.facebook.stetho.dumpapp.Framer$FramingInputStream: void close()>
<okhttp3.internal.cache.DiskLruCache: boolean removeEntry(okhttp3.internal.cache.DiskLruCache$Entry)>
<okhttp3.internal.framed.FramedConnection$4: void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List)>
<okio.Buffer: byte[] readByteArray(long)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: java.lang.String readBodyAsString(com.facebook.stetho.inspector.network.NetworkPeerManager,com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorRequest)>
<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void removeWithEvent(int)>
<rx.BackpressureOverflow$Strategy: boolean mayAttemptDrop()>
<okhttp3.internal.framed.Hpack$Reader: void adjustDynamicTableByteCount()>
<com.facebook.stetho.inspector.helper.IntegerFormatter$IntegerFormatterWithHex: java.lang.String format(java.lang.Integer,android.view.ViewDebug$ExportedProperty)>
<com.squareup.picasso.UrlConnectionDownloader: void installCacheIfNeeded(android.content.Context)>
<okhttp3.Call: okhttp3.Response execute()>
<rx.internal.operators.OnSubscribeAmb$AmbSubscriber: void requestMore(long)>
<rx.observables.BlockingObservable: void subscribe(rx.Observer)>
<okhttp3.Response$Builder: okhttp3.Response$Builder addHeader(java.lang.String,java.lang.String)>
<com.squareup.picasso.RequestHandler$Result: void <init>(android.graphics.Bitmap,java.io.InputStream,com.squareup.picasso.Picasso$LoadedFrom,int)>
<retrofit2.ServiceMethod: java.lang.Class boxIfPrimitive(java.lang.Class)>
<rx.internal.schedulers.GenericScheduledExecutorService: void <init>()>
<fr.masciulli.drinks.model.Liquor$1: java.lang.Object createFromParcel(android.os.Parcel)>
<okio.RealBufferedSource: okio.ByteString readByteString(long)>
<rx.internal.operators.OperatorDoOnRequest$ParentSubscriber: void <init>(rx.Subscriber)>
<okhttp3.internal.platform.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void <init>()>
<retrofit2.ParameterHandler$PartMap: void <init>(retrofit2.Converter,java.lang.String)>
<rx.internal.util.ScalarSynchronousSingle$2$1: void <init>(rx.internal.util.ScalarSynchronousSingle$2,rx.SingleSubscriber)>
<com.facebook.stetho.server.http.LightHttpServer: void readHeaders(com.facebook.stetho.server.http.LightHttpMessage,com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void httpExchangeFailed(java.lang.String,java.lang.String)>
<rx.internal.operators.OperatorMulticast$3: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler$1: boolean apply(android.view.View)>
<rx.observers.Subscribers: void <init>()>
<rx.subscriptions.RefCountSubscription: void unsubscribe()>
<rx.Observable: rx.Observable onBackpressureDrop()>
<rx.Completable$11: void call(java.lang.Object)>
<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String)>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: void clear()>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$FloatMethodInvoker: void <init>()>
<com.squareup.picasso.RequestCreator: void into(android.widget.RemoteViews,int,int[])>
<rx.Observable: rx.Observable single()>
<rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc$WindowSubscriber: void onNext(java.lang.Object)>
<okhttp3.internal.framed.Settings: boolean getEnablePush(boolean)>
<rx.Single$14: void onError(java.lang.Throwable)>
<rx.Notification: rx.Notification createOnCompleted(java.lang.Class)>
<rx.internal.operators.OperatorOnBackpressureDrop$Holder: void <clinit>()>
<rx.internal.util.ExceptionsUtils: void <init>(java.lang.String,int)>
<com.facebook.stetho.server.CompositeInputStream: void close()>
<okhttp3.CertificatePinner: void <clinit>()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.lang.Object peek()>
<rx.internal.operators.OperatorZip: void <init>(rx.functions.Func3)>
<rx.internal.operators.OperatorZip: void <init>(rx.functions.Func2)>
<okhttp3.internal.platform.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: okhttp3.OkHttpClient client()>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther: void <init>(rx.Single,rx.Observable)>
<rx.Observable: rx.Observable merge(java.lang.Iterable)>
<okhttp3.Challenge: java.lang.String scheme()>
<rx.internal.operators.OperatorTimeoutBase: java.lang.Object call(java.lang.Object)>
<rx.Single: rx.Single onErrorResumeNext(rx.Single)>
<rx.internal.operators.OperatorReplay: void connect(rx.functions.Action1)>
<okhttp3.RequestBody$3: okhttp3.MediaType contentType()>
<rx.internal.operators.OperatorTakeLastOne: java.lang.Object call(java.lang.Object)>
<okhttp3.internal.framed.FramedConnection$1: void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okhttp3.internal.framed.ErrorCode)>
<rx.internal.util.atomic.MpscLinkedAtomicQueue: boolean offer(java.lang.Object)>
<rx.internal.operators.OperatorBufferWithSingleObservable$1: rx.Observable call()>
<rx.internal.util.unsafe.MpmcArrayQueueConsumerField: boolean casConsumerIndex(long,long)>
<com.facebook.stetho.inspector.protocol.module.DOM$3: void run()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.util.Iterator iterator()>
<okhttp3.internal.framed.Hpack$Reader: okio.ByteString getName(int)>
<okhttp3.internal.framed.FramedStream$FramedDataSource: void checkNotClosed()>
<retrofit2.converter.gson.GsonRequestBodyConverter: okhttp3.RequestBody convert(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$StringMethodInvoker: void <init>()>
<com.squareup.picasso.MemoryPolicy: com.squareup.picasso.MemoryPolicy valueOf(java.lang.String)>
<rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer: void request(long)>
<okhttp3.internal.framed.Http2$Writer: void data(boolean,int,okio.Buffer,int)>
<okio.BufferedSource: void skip(long)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerSubscriber: void setProducer(rx.Producer)>
<com.facebook.stetho.inspector.protocol.module.DOM$3: void <init>(com.facebook.stetho.inspector.protocol.module.DOM)>
<okhttp3.internal.framed.FramedStream$FramedDataSink: void emitDataFrame(boolean)>
<rx.observers.Observers$1: void <init>()>
<okio.ByteString: int compareTo(java.lang.Object)>
<rx.functions.Functions$7: void <init>(rx.functions.Func6)>
<rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction: void <init>(rx.internal.operators.BufferUntilSubscriber$State)>
<okhttp3.internal.framed.Variant: okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean)>
<okhttp3.internal.io.FileSystem$1: okio.Source source(java.io.File)>
<rx.internal.operators.OperatorMulticast$3: void <init>(rx.internal.operators.OperatorMulticast,rx.Subscriber,rx.Subscriber)>
<okhttp3.HttpUrl: java.lang.String username()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean writeToQueue(java.util.concurrent.atomic.AtomicReferenceArray,java.lang.Object,long,int)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: void <clinit>()>
<com.facebook.stetho.inspector.helper.ThreadBoundProxy: void removeCallbacks(java.lang.Runnable)>
<rx.internal.util.RxRingBuffer: boolean isCompleted(java.lang.Object)>
<rx.internal.operators.OperatorSampleWithTime: java.lang.Object call(java.lang.Object)>
<retrofit2.Utils$WildcardTypeImpl: java.lang.String toString()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$2: void <init>(com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider,com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector$1: void <init>(rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector,rx.Subscriber)>
<com.facebook.stetho.inspector.console.CLog: void writeToConsole(com.facebook.stetho.inspector.helper.ChromePeerManager,com.facebook.stetho.inspector.protocol.module.Console$MessageLevel,com.facebook.stetho.inspector.protocol.module.Console$MessageSource,java.lang.String)>
<com.facebook.stetho.common.LogRedirector$Logger: boolean isLoggable(java.lang.String,int)>
<rx.Single$8: void <init>(rx.functions.Func4)>
<okio.Buffer: okio.ByteString sha256()>
<rx.internal.operators.CompletableOnSubscribeMergeArray$1: void onError(java.lang.Throwable)>
<com.squareup.picasso.Picasso: void resumeTag(java.lang.Object)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean containsAll(java.util.Collection)>
<com.facebook.stetho.inspector.elements.Document: void addUpdateListener(com.facebook.stetho.inspector.elements.Document$UpdateListener)>
<okhttp3.FormBody: void <init>(java.util.List,java.util.List)>
<rx.Completable: rx.Completable concat(java.lang.Iterable)>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver: java.util.List getDatabaseNames()>
<okhttp3.ConnectionSpec: java.util.List cipherSuites()>
<rx.internal.operators.OnSubscribeRange$RangeProducer: void <init>(rx.Subscriber,int,int)>
<okhttp3.internal.framed.FramedConnection$Listener$1: void onStream(okhttp3.internal.framed.FramedStream)>
<com.squareup.picasso.Dispatcher: void dispatchNetworkStateChange(android.net.NetworkInfo)>
<com.squareup.picasso.Request$Builder: void <init>(android.net.Uri,int,android.graphics.Bitmap$Config)>
<fr.masciulli.drinks.net.CustomCacheControlInterceptor: void <init>(android.content.Context)>
<rx.internal.schedulers.ScheduledAction: void <init>(rx.functions.Action0,rx.internal.util.SubscriptionList)>
<rx.Single$8: java.lang.Object call(java.lang.Object[])>
<rx.Observable: rx.Observable takeWhile(rx.functions.Func1)>
<rx.internal.operators.OperatorToMultimap$DefaultToMultimapFactory: java.lang.Object call()>
<okhttp3.RequestBody$1: void writeTo(okio.BufferedSink)>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func4)>
<okio.Buffer: okio.BufferedSink writeIntLe(int)>
<rx.internal.operators.CachedObservable$CacheState: void removeProducer(rx.internal.operators.CachedObservable$ReplayProducer)>
<com.squareup.picasso.MarkableInputStream: void reset(long)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectType: void <init>(java.lang.String,int,java.lang.String)>
<com.facebook.stetho.websocket.Frame: long decodeLength(byte,java.io.InputStream)>
<rx.internal.operators.OperatorTimeout$1$1: void <init>(rx.internal.operators.OperatorTimeout$1,rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber,java.lang.Long)>
<rx.internal.operators.OperatorMerge: rx.internal.operators.OperatorMerge instance(boolean,int)>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$NoopImpl: void enableFeatures(int,android.database.sqlite.SQLiteDatabase)>
<okhttp3.internal.platform.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>
<rx.internal.util.unsafe.MpmcArrayQueue: java.lang.Object peek()>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager$DevToolsSharedPreferencesListener: void <init>(com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager,android.content.SharedPreferences,java.lang.String)>
<retrofit2.Retrofit: java.util.concurrent.Executor callbackExecutor()>
<rx.internal.operators.OperatorTake$1: void setProducer(rx.Producer)>
<rx.internal.util.ExceptionsUtils: boolean isTerminated(java.util.concurrent.atomic.AtomicReference)>
<rx.internal.util.InternalObservableUtils$ToArrayFunc1: void <init>()>
<rx.Single: rx.Observable asObservable(rx.Single)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.DOM$SetInspectModeEnabledRequest: void <init>()>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber: void startNewChunk()>
<rx.observables.BlockingObservable: void subscribe(rx.functions.Action1,rx.functions.Action1)>
<com.squareup.picasso.MemoryPolicy: boolean shouldReadFromMemoryCache(int)>
<rx.internal.util.ScalarSynchronousObservable: rx.Observable scalarFlatMap(rx.functions.Func1)>
<okio.GzipSink: void writeHeader()>
<rx.internal.operators.OnSubscribeCombineLatest: void <init>(java.lang.Iterable,rx.functions.FuncN)>
<rx.subjects.UnicastSubject$State: void <init>(int,rx.functions.Action0)>
<rx.internal.operators.BlockingOperatorNext$NextIterator: boolean hasNext()>
<com.facebook.stetho.dumpapp.DumpappHttpSocketLikeHandler$DumpappLegacyHttpHandler: void <init>(com.facebook.stetho.dumpapp.Dumper)>
<com.squareup.picasso.Stats: com.squareup.picasso.StatsSnapshot createSnapshot()>
<rx.Observable: rx.Observable replay(rx.functions.Func1)>
<com.facebook.stetho.inspector.protocol.module.Profiler: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<okhttp3.RequestBody$1: long contentLength()>
<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>
<rx.Observable: rx.Observable buffer(long,long,java.util.concurrent.TimeUnit)>
<rx.observers.Observers$1: void onNext(java.lang.Object)>
<rx.Single: rx.Single merge(rx.Single)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginBottomHighlightDrawable: void <init>()>
<okhttp3.RequestBody$3: long contentLength()>
<rx.subjects.AsyncSubject: boolean hasObservers()>
<rx.Single$18: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorSerialize: rx.Subscriber call(rx.Subscriber)>
<rx.internal.util.RxRingBuffer$1: java.lang.Object createObject()>
<rx.observables.AsyncOnSubscribe$UnicastSubject: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$2: void store(java.lang.Object)>
<okio.Timeout$1: okio.Timeout deadlineNanoTime(long)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: long produced(long)>
<com.facebook.stetho.common.ArrayListAccumulator: void store(java.lang.Object)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierTime: void <init>(rx.Observable,int,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.common.android.FragmentCompatFramework: void <clinit>()>
<com.facebook.stetho.inspector.MethodDispatcher: com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper findMethodDispatcher(java.lang.String)>
<okio.ByteString: int indexOf(byte[])>
<rx.internal.operators.OperatorSkipLast$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.server.PeerAuthorizationException: void <init>(java.lang.String)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request build()>
<com.facebook.stetho.inspector.protocol.module.Page: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getResourceTree(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.Single$21$1: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.DOM$2: void <init>(com.facebook.stetho.inspector.protocol.module.DOM,com.facebook.stetho.inspector.protocol.module.DOM$HighlightNodeRequest,com.facebook.stetho.inspector.protocol.module.DOM$RGBAColor)>
<rx.internal.operators.OperatorWithLatestFrom: void <clinit>()>
<com.facebook.stetho.inspector.helper.ChromePeerManager: void sendMessageToPeers(java.lang.String,java.lang.Object,com.facebook.stetho.inspector.jsonrpc.PendingRequestCallback)>
<rx.internal.operators.OperatorPublish: rx.Observable create(rx.Observable,rx.functions.Func1,boolean)>
<rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture$1: void <init>(rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture)>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcRequest: void <init>(java.lang.Long,java.lang.String,org.json.JSONObject)>
<com.facebook.stetho.common.android.DialogFragmentAccessor: android.app.Dialog getDialog(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginRightHighlightDrawable: void draw(android.graphics.Canvas)>
<rx.internal.util.unsafe.SpscArrayQueue: boolean offer(java.lang.Object)>
<okio.Buffer: okio.BufferedSink writeString(java.lang.String,int,int,java.nio.charset.Charset)>
<rx.BackpressureOverflow$DropOldest: void <init>()>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: java.lang.String firstHeaderValue(java.lang.String)>
<rx.observables.SyncOnSubscribe: java.lang.Object next(java.lang.Object,rx.Observer)>
<com.facebook.stetho.inspector.database.ContentProviderDatabaseDriver: java.util.List getTableNames(java.lang.String)>
<okhttp3.internal.NamedRunnable: void run()>
<okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex: void <init>(java.security.cert.X509Certificate[])>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber: void <init>(rx.observers.SerializedSubscriber,rx.internal.operators.OperatorTimeoutBase$TimeoutStub,rx.subscriptions.SerialSubscription,rx.Observable,rx.Scheduler$Worker)>
<okhttp3.HttpUrl: java.util.List queryStringToNamesAndValues(java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.Console$MessageSource: com.facebook.stetho.inspector.protocol.module.Console$MessageSource valueOf(java.lang.String)>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber: void <init>(rx.Completable$CompletableSubscriber,int,boolean)>
<rx.internal.operators.OperatorSkipLast: void <init>(int)>
<rx.internal.operators.OperatorTimeoutWithSelector$1$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.server.http.HandlerRegistry: void <init>()>
<com.facebook.stetho.common.android.FragmentCompatUtil: void <init>()>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2: void <init>(rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther,rx.SingleSubscriber,rx.subscriptions.SerialSubscription)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: boolean emitValue(java.lang.Object)>
<rx.internal.operators.OperatorDelay$1$2: void call()>
<com.facebook.stetho.dumpapp.plugins.HprofDumperPlugin: void <init>(android.content.Context)>
<com.facebook.stetho.inspector.elements.Document: void release()>
<rx.Observable: rx.Observable window(int,int)>
<com.facebook.stetho.websocket.Frame: void readBytesOrThrow(java.io.InputStream,byte[],int,int)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: boolean removeAll(java.util.Collection)>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader: void <init>(java.io.BufferedInputStream)>
<rx.internal.operators.CachedObservable$ReplayProducer: void request(long)>
<com.facebook.stetho.inspector.network.GunzippingOutputStream: void close()>
<com.facebook.stetho.websocket.ReadCallback: void onCompleteFrame(byte,byte[],int)>
<retrofit2.Utils$WildcardTypeImpl: boolean equals(java.lang.Object)>
<com.facebook.stetho.dumpapp.DumpException: void <init>(java.lang.String)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory: com.facebook.stetho.inspector.network.AsyncPrettyPrinter getInstance(java.lang.String,java.lang.String)>
<rx.Single$19: void call(rx.SingleSubscriber)>
<rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc: void call(rx.Subscriber)>
<okio.RealBufferedSource$1: int read(byte[],int,int)>
<retrofit2.Retrofit: retrofit2.Converter responseBodyConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>
<rx.internal.operators.OnSubscribeCombineLatest: void call(rx.Subscriber)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean add(java.lang.Object)>
<com.facebook.stetho.json.'annotation'.JsonProperty: boolean required()>
<rx.observables.SyncOnSubscribe$5: void call(java.lang.Object)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: void doPrint(java.io.PrintStream,java.util.List)>
<rx.internal.operators.OnSubscribePublishMulticast: void drain()>
<rx.observers.TestSubscriber: rx.observers.TestSubscriber create()>
<rx.Completable$1: void <init>()>
<okhttp3.OkHttpClient: void <init>()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: void adjustLookAheadStep(int)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator error(int)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: java.util.ArrayList getDrinks()>
<com.facebook.stetho.inspector.network.GunzippingOutputStream: java.lang.Object getAndRethrow(java.util.concurrent.Future)>
<okhttp3.internal.tls.DistinguishedNameParser: void <init>(javax.security.auth.x500.X500Principal)>
<com.facebook.stetho.inspector.protocol.module.DOM: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.inspector.elements.NodeDescriptor: java.lang.String getNodeValue(java.lang.Object)>
<com.squareup.picasso.ImageViewAction: void complete(android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom)>
<rx.internal.operators.OperatorAsObservable$Holder: void <clinit>()>
<okhttp3.internal.cache.CacheInterceptor$2: void close()>
<retrofit2.Platform$IOS: void <init>()>
<com.facebook.stetho.inspector.protocol.module.Database$1: java.lang.Object handleRawQuery()>
<rx.Observable: rx.Observable timer(long,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorGroupBy$State: void onComplete()>
<rx.Notification: boolean equals(java.lang.Object)>
<rx.schedulers.ImmediateScheduler: rx.Scheduler$Worker createWorker()>
<okio.ByteString: okio.ByteString substring(int,int)>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable: void call(rx.Completable$CompletableSubscriber)>
<com.squareup.picasso.MediaStoreRequestHandler: void <init>(android.content.Context)>
<rx.functions.Functions$9: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: boolean checkTerminated(boolean,boolean,rx.Subscriber,java.util.Queue)>
<rx.internal.operators.OperatorTakeWhile: void <init>(rx.functions.Func1)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerScalarProducer: void <init>(java.lang.Object,rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber)>
<retrofit2.Utils: boolean equal(java.lang.Object,java.lang.Object)>
<rx.internal.operators.OnSubscribeRedo$4: void <init>(rx.internal.operators.OnSubscribeRedo,rx.Observable,rx.Subscriber,java.util.concurrent.atomic.AtomicLong,rx.Scheduler$Worker,rx.functions.Action0,java.util.concurrent.atomic.AtomicBoolean)>
<okhttp3.internal.framed.Settings: int getMaxHeaderListSize(int)>
<retrofit2.http.GET: java.lang.String value()>
<rx.internal.operators.OperatorSingle: void <init>()>
<okhttp3.internal.cache.CacheStrategy$Factory: boolean hasConditions(okhttp3.Request)>
<okhttp3.internal.framed.FramedConnection$6: void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okio.Buffer,int,boolean)>
<retrofit2.adapter.rxjava.Result: retrofit2.adapter.rxjava.Result error(java.lang.Throwable)>
<rx.observables.GroupedObservable$1: void call(rx.Subscriber)>
<okhttp3.OkHttpClient$Builder: java.util.List interceptors()>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder memoryCache(com.squareup.picasso.Cache)>
<com.facebook.stetho.inspector.protocol.module.Network$LoadingFinishedParams: void <init>()>
<rx.internal.util.InternalObservableUtils$ReplaySupplierBuffer: java.lang.Object call()>
<rx.subjects.ReplaySubject: void <init>(rx.subjects.ReplaySubject$ReplayState)>
<okhttp3.MultipartBody: long contentLength()>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor$ElementContext: java.util.List getActivitiesList()>
<rx.Completable: rx.Completable timer(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.functions.Action2: void call(java.lang.Object,java.lang.Object)>
<rx.Completable$23: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorGroupBy: void <init>(rx.functions.Func1,rx.functions.Func1)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: java.lang.Integer friendlyNameExtra()>
<okhttp3.logging.HttpLoggingInterceptor: boolean bodyEncoded(okhttp3.Headers)>
<rx.Completable$8: void call(java.lang.Object)>
<rx.Completable$23$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorMapPair$OuterInnerMapper: void <init>(java.lang.Object,rx.functions.Func2)>
<rx.internal.operators.OnSubscribeThrow: void call(rx.Subscriber)>
<okhttp3.internal.framed.FramedConnection$2: void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,long)>
<rx.internal.operators.CachedObservable: rx.internal.operators.CachedObservable 'from'(rx.Observable,int)>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray: void <init>(rx.Completable[])>
<rx.observables.BlockingObservable: java.lang.Object firstOrDefault(java.lang.Object)>
<okio.RealBufferedSink: void write(okio.Buffer,long)>
<okhttp3.internal.framed.FrameWriter: void connectionPreface()>
<rx.exceptions.CompositeException: java.lang.Throwable getCause()>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager$1: void onCompleted()>
<rx.internal.util.unsafe.SpscUnboundedArrayQueueProducerFields: void <init>()>
<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>
<rx.internal.operators.OperatorMapPair: void <init>(rx.functions.Func1,rx.functions.Func2)>
<okio.ByteString: java.lang.String utf8()>
<okhttp3.internal.Internal: void initializeInstanceForTests()>
<rx.internal.operators.OperatorSkipLastTimed$1: void onNext(java.lang.Object)>
<com.squareup.picasso.Picasso: boolean isLoggingEnabled()>
<rx.internal.operators.OperatorDistinct$Holder: void <clinit>()>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber$2: void request(long)>
<rx.Completable$11: void <init>(rx.Single)>
<com.squareup.picasso.Stats: void dispatchBitmapDecoded(android.graphics.Bitmap)>
<okhttp3.CacheControl: java.lang.String toString()>
<rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorMaterialize: rx.internal.operators.OperatorMaterialize instance()>
<rx.internal.operators.OnSubscribeDelaySubscription$1: void call()>
<okio.Buffer: int readInt()>
<retrofit2.http.OPTIONS: java.lang.String value()>
<rx.internal.operators.OperatorSkipLastTimed$1: void onCompleted()>
<rx.subjects.ReplaySubject: boolean hasAnyValue()>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler: void addHandler(com.facebook.stetho.server.ProtocolDetectingSocketHandler$MagicMatcher,com.facebook.stetho.server.SocketLikeHandler)>
<okhttp3.internal.framed.HeadersMode: boolean failIfHeadersAbsent()>
<rx.Completable: rx.Observable startWith(rx.Observable)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: java.lang.Object poll()>
<rx.internal.operators.OperatorToObservableSortedList$1: void <init>(rx.internal.operators.OperatorToObservableSortedList,rx.functions.Func2)>
<rx.Observable: rx.Observable reduce(rx.functions.Func2)>
<rx.Completable$25: void <init>(rx.Completable,rx.subscriptions.MultipleAssignmentSubscription)>
<rx.Completable: java.lang.Throwable get(long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.websocket.FrameHelper: com.facebook.stetho.websocket.Frame createCloseFrame(int,java.lang.String)>
<com.facebook.stetho.server.LeakyBufferedInputStream: byte[] clearBufferLocked()>
<com.squareup.picasso.PicassoDrawable: android.graphics.Path getTrianglePath(android.graphics.Point,int)>
<okhttp3.internal.framed.FramedConnection$Reader: void ping(boolean,int,int)>
<com.facebook.stetho.inspector.protocol.module.DOMStorage$DOMStorageAssignmentException: void <init>(java.lang.String)>
<okhttp3.Cache: int writeSuccessCount()>
<fr.masciulli.drinks.model.Drink$1: void <init>()>
<okhttp3.internal.framed.Hpack$Writer: void writeByteString(okio.ByteString)>
<okhttp3.internal.framed.FramedStream: void receiveData(okio.BufferedSource,int)>
<rx.internal.schedulers.ScheduledAction: boolean isUnsubscribed()>
<okio.RealBufferedSink: okio.BufferedSink writeShortLe(int)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void onAttributeRemoved(java.lang.Object,java.lang.String)>
<okhttp3.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>
<rx.Single: rx.Single lift(rx.Observable$Operator)>
<rx.observables.BlockingObservable$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject: void <init>(rx.Observer,rx.Observable)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment$$Lambda$1: void <init>(fr.masciulli.drinks.ui.fragment.LiquorsFragment)>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: void spProducerNode(rx.internal.util.atomic.LinkedQueueNode)>
<com.facebook.stetho.inspector.protocol.module.DOM$ResolveNodeRequest: void <init>()>
<com.facebook.stetho.common.Predicate: boolean apply(java.lang.Object)>
<com.facebook.stetho.inspector.helper.PeersRegisteredListener: void onPeerRemoved(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult executeSQL(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall: java.lang.Object clone()>
<okhttp3.internal.http.HttpHeaders: void <init>()>
<rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber: void <init>(rx.Subscriber,rx.functions.Func1,int)>
<com.squareup.picasso.Utils: void <init>()>
<rx.internal.schedulers.CachedThreadScheduler$ThreadWorker: long getExpirationTime()>
<rx.internal.operators.OperatorTakeWhile: java.lang.Object call(java.lang.Object)>
<rx.Single: rx.Single takeUntil(rx.Single)>
<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void release()>
<com.squareup.picasso.Action: com.squareup.picasso.Picasso$Priority getPriority()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: void resize(java.util.concurrent.atomic.AtomicReferenceArray,long,int,java.lang.Object,long)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4: void onCompleted()>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$Type: com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$Type of(java.lang.String)>
<rx.Observable: rx.Observable merge(rx.Observable[],int)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProviderFactory: java.lang.Object postAndWait(com.facebook.stetho.common.UncheckedCallable)>
<rx.Completable$11$1: void <init>(rx.Completable$11,rx.Completable$CompletableSubscriber)>
<fr.masciulli.drinks.ui.activity.MainActivity: void sendFeedback()>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterRegistry: void <init>()>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder transform(com.squareup.picasso.Transformation)>
<okhttp3.internal.framed.Http2$Reader: void readPriority(okhttp3.internal.framed.FrameReader$Handler,int,byte,int)>
<com.facebook.stetho.inspector.protocol.module.CSS$GetMatchedStylesForNodeResult: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<okhttp3.internal.cache.DiskLruCache$Snapshot: void close()>
<rx.observers.Subscribers$5: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$DialogFragmentAccessorSupportLib: void <init>(com.facebook.stetho.common.android.FragmentCompatSupportLib$1)>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: java.lang.String getNodeName(java.lang.Object)>
<okio.ForwardingSource: void close()>
<rx.subscriptions.SerialSubscription: boolean isUnsubscribed()>
<rx.internal.operators.OperatorUnsubscribeOn$2: void <init>(rx.internal.operators.OperatorUnsubscribeOn,rx.Subscriber)>
<rx.internal.operators.OperatorWindowWithSize$WindowSkip: void call()>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void removeInner(rx.internal.operators.OperatorMerge$InnerSubscriber)>
<rx.internal.operators.OperatorDoOnRequest$ParentSubscriber: void onError(java.lang.Throwable)>
<rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl: void call(java.lang.Object)>
<okhttp3.Connection: okhttp3.Protocol protocol()>
<rx.Completable$24: void call(java.lang.Object)>
<rx.internal.util.ActionNotificationObserver: void onCompleted()>
<rx.Observable: rx.Observable buffer(long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.server.SocketLike: void <init>(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.LeakyBufferedInputStream)>
<rx.internal.operators.OperatorBufferWithTime: void <init>(long,long,java.util.concurrent.TimeUnit,int,rx.Scheduler)>
<com.facebook.stetho.common.ListUtil$ImmutableArrayList: void <init>(java.lang.Object[])>
<com.facebook.stetho.inspector.protocol.module.DOMStorage$StorageId: void <init>()>
<com.squareup.picasso.RequestCreator: void into(android.widget.ImageView)>
<rx.internal.operators.EmptyObservableHolder: rx.internal.operators.EmptyObservableHolder[] values()>
<rx.internal.operators.OperatorWindowWithStartEndObservable$1: void onStart()>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Table: void <init>(com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder)>
<rx.internal.operators.OperatorToMultimap$DefaultToMultimapFactory: void <init>()>
<com.facebook.stetho.inspector.protocol.module.DOM$AttributeRemovedEvent: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<rx.Observable: rx.Observable takeLastBuffer(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber: void <init>(rx.internal.operators.OperatorWindowWithTime,rx.Subscriber,rx.Scheduler$Worker)>
<rx.internal.util.ScalarSynchronousSingle$1: void <init>(java.lang.Object)>
<com.squareup.picasso.Picasso: void cancelRequest(android.widget.ImageView)>
<com.facebook.stetho.Stetho$BuilderBasedInitializer: java.lang.Iterable getInspectorModules()>
<rx.internal.util.unsafe.BaseLinkedQueuePad1: void <init>()>
<rx.internal.operators.OperatorMerge$HolderNoDelay: void <clinit>()>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1: void tryTerminate()>
<rx.internal.util.BackpressureDrainManager: void request(long)>
<okhttp3.FormBody: void <clinit>()>
<rx.internal.util.ObjectPool: java.lang.Object borrowObject()>
<rx.Observable: rx.Observable take(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: java.lang.Object enterTransform(java.lang.Object)>
<com.facebook.stetho.inspector.elements.DocumentView: com.facebook.stetho.inspector.elements.ElementInfo getElementInfo(java.lang.Object)>
<okhttp3.internal.framed.FrameReader: boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler)>
<okhttp3.internal.framed.Ping: void receive()>
<rx.internal.operators.OperatorMaterialize$ParentSubscriber: void decrementRequested()>
<rx.subscriptions.RefCountSubscription$State: void <init>(boolean,int)>
<okhttp3.internal.framed.Spdy3$Reader: void readHeaders(okhttp3.internal.framed.FrameReader$Handler,int,int)>
<com.squareup.picasso.MediaStoreRequestHandler: com.squareup.picasso.MediaStoreRequestHandler$PicassoKind getPicassoKind(int,int)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void onNext(rx.Observable)>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void onWikipediaClick()>
<retrofit2.adapter.rxjava.Result: boolean isError()>
<rx.internal.operators.CompletableOnSubscribeMergeArray: void call(rx.Completable$CompletableSubscriber)>
<okhttp3.internal.framed.ErrorCode: okhttp3.internal.framed.ErrorCode fromHttp2(int)>
<okhttp3.Response: java.lang.String toString()>
<retrofit2.CallAdapter: java.lang.reflect.Type responseType()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginRightHighlightDrawable: void <init>()>
<okhttp3.Cookie: int dateCharacterOffset(java.lang.String,int,int,boolean)>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.helper.ObjectIdMapper getObjects()>
<rx.subjects.SubjectSubscriptionManager: void <init>()>
<rx.internal.operators.CompletableOnSubscribeMergeArray$1: void onSubscribe(rx.Subscription)>
<rx.Observable: rx.Observable takeLast(int)>
<com.squareup.leakcanary.RefWatcher: void watch(java.lang.Object)>
<rx.internal.operators.OperatorTakeLastOne$ParentSubscriber: void emit()>
<okhttp3.Headers: java.lang.String toString()>
<rx.internal.util.InternalObservableUtils$PlusOneFunc2: java.lang.Object call(java.lang.Object,java.lang.Object)>
<rx.observables.BlockingObservable$1: void onCompleted()>
<okhttp3.Request: java.util.List headers(java.lang.String)>
<retrofit2.ParameterHandler$Query: void <init>(java.lang.String,retrofit2.Converter,boolean)>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1: void setProducer(rx.Producer)>
<rx.observables.AsyncOnSubscribe: rx.observables.AsyncOnSubscribe createStateless(rx.functions.Action2,rx.functions.Action0)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginRightHighlightDrawable: void highlightView(android.view.View)>
<okhttp3.internal.Util: void closeQuietly(java.net.ServerSocket)>
<rx.internal.operators.OnSubscribeRange$RangeProducer: void fastpath()>
<rx.internal.operators.OperatorUnsubscribeOn$1: void onCompleted()>
<okhttp3.internal.framed.Hpack$Writer: void <init>(okio.Buffer)>
<com.facebook.stetho.inspector.protocol.module.Profiler$ProfileHeader: void <init>()>
<rx.internal.operators.OperatorTimeInterval: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2: void onError(java.lang.Throwable)>
<com.squareup.picasso.Picasso: boolean areIndicatorsEnabled()>
<retrofit2.http.POST: java.lang.String value()>
<okhttp3.internal.framed.FramedConnection$Reader: void settings(boolean,okhttp3.internal.framed.Settings)>
<rx.internal.operators.OnSubscribeConcatMap$1: void request(long)>
<rx.subscriptions.MultipleAssignmentSubscription: boolean isUnsubscribed()>
<fr.masciulli.drinks.ui.view.RatioImageView: void <init>(android.content.Context)>
<okio.Buffer: long indexOfElement(okio.ByteString)>
<rx.internal.operators.OperatorTakeLastTimed$TakeLastTimedSubscriber: java.lang.Object call(java.lang.Object)>
<rx.Completable$2: void call(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.DOM$7: void <init>(com.facebook.stetho.inspector.protocol.module.DOM,com.facebook.stetho.inspector.protocol.module.DOM$PerformSearchRequest,com.facebook.stetho.common.ArrayListAccumulator)>
<okhttp3.Cookie: boolean domainMatch(okhttp3.HttpUrl,java.lang.String)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: java.lang.String getTag(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Runtime: void releaseObject(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorMapNotification$1: void <init>(rx.internal.operators.OperatorMapNotification,rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber)>
<com.facebook.stetho.common.ReflectionUtil: java.lang.Class tryGetClassForName(java.lang.String)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$$Lambda$3: void run()>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder followSslRedirects(boolean)>
<rx.internal.operators.OperatorSkipTimed$1: void call()>
<rx.internal.operators.OperatorDebounceWithTime$1: void onCompleted()>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager: com.facebook.stetho.inspector.network.ResponseBodyData readFile(java.lang.String)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator memoryPolicy(com.squareup.picasso.MemoryPolicy,com.squareup.picasso.MemoryPolicy[])>
<rx.internal.operators.OnSubscribeDetach$TerminatedProducer: rx.internal.operators.OnSubscribeDetach$TerminatedProducer valueOf(java.lang.String)>
<rx.internal.operators.OperatorZip$Zip$InnerSubscriber: void <init>(rx.internal.operators.OperatorZip$Zip)>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void printDirectoryVisual(java.io.File,int,java.io.PrintStream)>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void onOpen(com.facebook.stetho.websocket.SimpleSession)>
<rx.internal.operators.OperatorMerge$InnerSubscriber: void requestMore(long)>
<com.facebook.stetho.inspector.elements.Document: void highlightElement(java.lang.Object,int)>
<rx.internal.operators.OperatorDistinctUntilChanged: rx.internal.operators.OperatorDistinctUntilChanged instance()>
<com.facebook.stetho.server.http.LightHttpServer: com.facebook.stetho.server.http.LightHttpRequest readRequestMessage(com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader)>
<retrofit2.OkHttpCall$1: void onResponse(okhttp3.Call,okhttp3.Response)>
<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection)>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: com.facebook.stetho.inspector.elements.NodeType getNodeType(java.lang.Object)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: com.facebook.stetho.inspector.elements.NodeType getNodeType(java.lang.Object)>
<com.squareup.picasso.Dispatcher$DispatcherHandler: void <init>(android.os.Looper,com.squareup.picasso.Dispatcher)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1: void onCompleted()>
<rx.functions.Actions: rx.functions.Func5 toFunc(rx.functions.Action5)>
<rx.internal.operators.OperatorToMultimap$1: void onStart()>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall: retrofit2.Call clone()>
<com.facebook.stetho.inspector.protocol.module.Inspector: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorToObservableList: rx.Subscriber call(rx.Subscriber)>
<rx.Observable: rx.Observable rebatchRequests(int)>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber$2: void <init>(rx.internal.operators.OperatorBufferWithTime$InexactSubscriber,java.util.List)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber: void terminateChunk(rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable zip(java.lang.Iterable,rx.functions.FuncN)>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager: void signalItemUpdated(com.facebook.stetho.inspector.protocol.module.DOMStorage$StorageId,java.lang.String,java.lang.String,java.lang.String)>
<rx.Observable: rx.Observable takeLastBuffer(int,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker: boolean isUnsubscribed()>
<com.squareup.picasso.MediaStoreRequestHandler$PicassoKind: com.squareup.picasso.MediaStoreRequestHandler$PicassoKind valueOf(java.lang.String)>
<rx.Completable: java.lang.NullPointerException toNpe(java.lang.Throwable)>
<rx.exceptions.OnErrorThrowable$OnNextValue$Primitives: void <init>()>
<okio.ByteString: java.lang.String base64Url()>
<rx.internal.operators.SingleOperatorOnErrorResumeNext: rx.internal.operators.SingleOperatorOnErrorResumeNext withFunction(rx.Single,rx.functions.Func1)>
<com.squareup.picasso.RemoteViewsAction$RemoteViewsTarget: boolean equals(java.lang.Object)>
<rx.internal.operators.OperatorReplay: rx.observables.ConnectableObservable create(rx.Observable,rx.functions.Func0)>
<rx.schedulers.Timestamped: java.lang.String toString()>
<com.facebook.stetho.inspector.database.DefaultDatabaseConnectionProvider: int determineOpenOptions(java.io.File)>
<rx.subjects.SubjectSubscriptionManager: void remove(rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<rx.exceptions.MissingBackpressureException: void <init>()>
<rx.internal.operators.OnSubscribeAmb$1: void <init>(rx.internal.operators.OnSubscribeAmb,java.util.concurrent.atomic.AtomicReference,rx.internal.operators.OnSubscribeAmb$Selection)>
<rx.internal.operators.OnSubscribePublishMulticast: void call(rx.Subscriber)>
<com.facebook.stetho.Stetho$DefaultDumperPluginsBuilder: java.lang.Iterable finish()>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$BitmapFetchRunnable: void <init>(com.facebook.stetho.inspector.screencast.ScreencastDispatcher)>
<rx.internal.util.IndexedRingBuffer: int getIndexForAdd()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator placeholder(android.graphics.drawable.Drawable)>
<rx.internal.operators.OperatorReplay$UnboundedReplayBuffer: void replay(rx.internal.operators.OperatorReplay$InnerProducer)>
<com.squareup.picasso.RemoteViewsAction: void update()>
<rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector$1: void onNext(java.lang.Object)>
<okhttp3.internal.framed.FramedConnection: void start()>
<com.facebook.stetho.inspector.protocol.module.Debugger: void <init>()>
<com.facebook.stetho.inspector.elements.ElementInfo: boolean equals(java.lang.Object)>
<rx.functions.Actions$1: java.lang.Object call()>
<rx.internal.util.ScalarSynchronousObservable$3: void <init>(rx.internal.util.ScalarSynchronousObservable,rx.functions.Func1)>
<rx.internal.util.OpenHashSet: boolean remove(java.lang.Object)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment$$Lambda$2: void call(java.lang.Object)>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable)>
<com.facebook.stetho.websocket.WriteHandler: void <init>(java.io.OutputStream)>
<com.squareup.picasso.Action: int getMemoryPolicy()>
<okio.ForwardingTimeout: long timeoutNanos()>
<rx.internal.operators.OperatorZip$ZipSubscriber: void onNext(rx.Observable[])>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void truncateFinal()>
<com.facebook.stetho.inspector.protocol.module.Console$MessageSource: void <init>(java.lang.String,int,java.lang.String)>
<com.squareup.picasso.Downloader$Response: long getContentLength()>
<rx.schedulers.NewThreadScheduler: rx.Scheduler$Worker createWorker()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot: java.lang.String onGetNodeName(com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginTopHighlightDrawable: void <init>()>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver: void onError(java.lang.Throwable)>
<rx.Single$20$1: void onCompleted()>
<rx.internal.schedulers.CachedThreadScheduler: rx.Scheduler$Worker createWorker()>
<rx.internal.operators.OperatorWindowWithStartEndObservable$1: void onNext(java.lang.Object)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: void resize(java.util.concurrent.atomic.AtomicReferenceArray,long,int,java.lang.Object,long)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueueConsumerField: void <init>()>
<rx.observables.BlockingObservable: java.lang.Iterable toIterable()>
<okio.RealBufferedSink: java.io.OutputStream outputStream()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void <init>(com.facebook.stetho.inspector.elements.android.MethodInvoker)>
<okhttp3.Response: boolean isRedirect()>
<rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable: void <init>(java.lang.Object,rx.functions.Func1)>
<rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler: boolean isUnsubscribed()>
<rx.internal.util.unsafe.SpmcArrayQueueProducerField: void soTail(long)>
<retrofit2.Call: void cancel()>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func0)>
<rx.observables.AsyncOnSubscribe$5: void call(java.lang.Void)>
<com.squareup.picasso.RequestHandler$Result: void <init>(android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom)>
<okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>
<rx.functions.Actions: rx.functions.Func4 toFunc(rx.functions.Action4)>
<com.squareup.picasso.ResourceRequestHandler: boolean canHandleRequest(com.squareup.picasso.Request)>
<rx.internal.operators.OperatorTimeoutWithSelector: rx.Subscriber call(rx.Subscriber)>
<rx.Single$22$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.DOM$GetDocumentResponse: void <init>()>
<com.facebook.stetho.websocket.WriteCallback: void onSuccess()>
<okhttp3.internal.platform.Platform: java.lang.String getPrefix()>
<rx.subjects.AsyncSubject: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void onCompleted()>
<rx.subscriptions.BooleanSubscription: boolean isUnsubscribed()>
<rx.internal.operators.OperatorAny: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.dumpapp.Dumper: void dumpAvailablePlugins(java.io.PrintStream)>
<rx.observables.AsyncOnSubscribe$1: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: boolean isComplete()>
<okhttp3.Protocol: okhttp3.Protocol[] values()>
<rx.observers.Observers$2: void <init>(rx.functions.Action1)>
<okhttp3.internal.cache.DiskLruCache$4: void write(okio.Buffer,long)>
<rx.internal.schedulers.GenericScheduledExecutorService: java.util.concurrent.ScheduledExecutorService getInstance()>
<okio.Pipe$PipeSink: void <init>(okio.Pipe)>
<rx.internal.operators.OnSubscribeDetach$DetachSubscriber: void onCompleted()>
<com.facebook.stetho.okhttp3.StethoInterceptor$ForwardingResponseBody: long contentLength()>
<rx.internal.operators.CompletableOnSubscribeTimeout$1$1: void onSubscribe(rx.Subscription)>
<rx.observers.Subscribers: rx.Subscriber 'from'(rx.Observer)>
<okhttp3.internal.Internal: okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>
<okhttp3.internal.tls.BasicCertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>
<rx.internal.operators.OnSubscribeRedo$2: void call()>
<okhttp3.internal.http.HttpDate: void <clinit>()>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$OverlayHighlighter: void setHighlightedViewImpl(android.view.View,int)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void onCompleted()>
<rx.internal.operators.OperatorZip$Zip: void start(rx.Observable[],java.util.concurrent.atomic.AtomicLong)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: long lpConsumerIndex()>
<com.squareup.picasso.MarkableInputStream: int read()>
<rx.internal.operators.OperatorFilter$FilterSubscriber: void setProducer(rx.Producer)>
<rx.exceptions.Exceptions: java.lang.Throwable getFinalCause(java.lang.Throwable)>
<com.squareup.picasso.LruCache: int hitCount()>
<rx.internal.producers.QueuedValueProducer: void <clinit>()>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: void subscribe(rx.Observable[])>
<com.squareup.picasso.Picasso$Priority: com.squareup.picasso.Picasso$Priority[] values()>
<com.facebook.stetho.inspector.elements.Document$2: void <init>(com.facebook.stetho.inspector.elements.Document)>
<okio.Buffer: int selectPrefix(okio.Options)>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: void onCompleted()>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler$ExactMagicMatcher: void <init>(byte[])>
<com.facebook.stetho.Stetho: com.facebook.stetho.DumperPluginsProvider defaultDumperPluginsProvider(android.content.Context)>
<rx.internal.operators.OperatorTimeout$2$1: void <init>(rx.internal.operators.OperatorTimeout$2,rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber,java.lang.Long)>
<okio.Buffer: okio.Buffer readFrom(java.io.InputStream)>
<rx.subjects.UnicastSubject$State: boolean isUnsubscribed()>
<com.squareup.picasso.RequestHandler: void calculateInSampleSize(int,int,int,int,android.graphics.BitmapFactory$Options,com.squareup.picasso.Request)>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void onCompleted()>
<rx.functions.Functions$4: void <init>(rx.functions.Func3)>
<rx.internal.operators.OperatorDelayWithSelector$1$1: void <init>(rx.internal.operators.OperatorDelayWithSelector$1,java.lang.Object)>
<rx.internal.producers.ProducerObserverArbiter: void onNext(java.lang.Object)>
<com.squareup.picasso.RequestCreator: void into(android.widget.ImageView,com.squareup.picasso.Callback)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: boolean remove(java.lang.Object)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: java.lang.Object lvElement(long)>
<rx.internal.util.IndexedRingBuffer: int forEach(rx.functions.Func1)>
<com.squareup.picasso.BitmapHunter: void updateThreadName(com.squareup.picasso.Request)>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool: long now()>
<okhttp3.Request$Builder: okhttp3.Request$Builder delete(okhttp3.RequestBody)>
<retrofit2.ParameterHandler$FieldMap: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment$$Lambda$2: rx.functions.Action1 lambdaFactory$(fr.masciulli.drinks.ui.fragment.DrinksFragment)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addEncodedPathSegment(java.lang.String)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: void onCompleted()>
<rx.internal.operators.OperatorTimeout: rx.Subscriber call(rx.Subscriber)>
<com.squareup.picasso.Dispatcher$1: void <init>(com.squareup.picasso.Dispatcher)>
<rx.internal.operators.OnSubscribeSingle: void <init>(rx.Observable)>
<rx.observables.AsyncOnSubscribe: rx.observables.AsyncOnSubscribe createStateful(rx.functions.Func0,rx.functions.Func3)>
<com.squareup.picasso.RemoteViewsAction: void <init>(com.squareup.picasso.Picasso,com.squareup.picasso.Request,android.widget.RemoteViews,int,int,int,int,java.lang.Object,java.lang.String)>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber: void onCompleted()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentActivityAccessorSupportLib: void <init>()>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: boolean markSupported()>
<okio.RealBufferedSource: int readInt()>
<okio.DeflaterSink: void <init>(okio.Sink,java.util.zip.Deflater)>
<com.squareup.picasso.Picasso: void cancelTag(java.lang.Object)>
<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>
<com.facebook.stetho.server.http.HttpHandler: boolean handleRequest(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpResponse)>
<rx.internal.operators.CompletableOnSubscribeConcatArray: void call(rx.Completable$CompletableSubscriber)>
<rx.Observable: rx.Observable timestamp()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: long lvProducerIndex()>
<com.facebook.stetho.inspector.protocol.module.DOM$InspectNodeRequestedEvent: void <init>()>
<rx.internal.producers.ProducerObserverArbiter$1: void request(long)>
<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void acquire(java.lang.Object,com.facebook.stetho.inspector.elements.DocumentView)>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode: com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode valueOf(java.lang.String)>
<rx.Observable: rx.Observable merge(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<com.squareup.picasso.AssetRequestHandler: boolean canHandleRequest(com.squareup.picasso.Request)>
<com.facebook.stetho.websocket.Frame: byte readByteOrThrow(java.io.InputStream)>
<rx.Observable: rx.Observable timeInterval()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$1: int compare(java.lang.Object,java.lang.Object)>
<okhttp3.ConnectionPool: int connectionCount()>
<com.squareup.picasso.Picasso$CleanupThread: void shutdown()>
<rx.internal.operators.CachedObservable$CacheState: void <clinit>()>
<rx.internal.operators.OperatorReplay$3: void call(rx.Subscriber)>
<fr.masciulli.drinks.model.Drink: void <clinit>()>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber: void onNext(rx.Completable)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$TypedMethodInvoker: void <init>(java.lang.Class)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber: void onNext(java.lang.Object)>
<rx.observers.Subscribers$1: void <init>(rx.Observer)>
<rx.internal.operators.OperatorScan$InitialProducer: void emit()>
<com.facebook.stetho.inspector.protocol.module.Page: void stopScreencast(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.Observable: rx.Observable timeout(long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: com.facebook.stetho.common.android.FragmentManagerAccessor forFragmentManager()>
<com.facebook.stetho.inspector.protocol.module.Network$GetResponseBodyResponse: void <init>()>
<okhttp3.internal.http.Http1xStream$UnknownLengthSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$EventDispatchRunnable: void <init>(com.facebook.stetho.inspector.screencast.ScreencastDispatcher)>
<rx.Completable: void unsafeSubscribe(rx.Subscriber,boolean)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void tryEmit(rx.internal.operators.OperatorMerge$InnerSubscriber,java.lang.Object)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: void onStart()>
<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>
<okhttp3.internal.framed.FramedConnection: void writeData(int,boolean,okio.Buffer,long)>
<rx.Observable: rx.Observable concatEager(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<okhttp3.internal.connection.StreamAllocation: java.lang.String toString()>
<rx.Subscription: boolean isUnsubscribed()>
<com.facebook.stetho.websocket.FrameHelper: com.facebook.stetho.websocket.Frame createBinaryFrame(byte[])>
<rx.internal.util.RxRingBuffer: java.lang.Object poll()>
<com.facebook.stetho.Stetho$InitializerBuilder: com.facebook.stetho.Stetho$Initializer build()>
<okhttp3.internal.io.FileSystem: void rename(java.io.File,java.io.File)>
<rx.internal.operators.OperatorReplay$UnboundedReplayBuffer: void <init>(int)>
<rx.observables.AsyncOnSubscribe$4: void <init>(rx.functions.Action2)>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1: void setProducer(rx.Producer)>
<okhttp3.internal.framed.Hpack: java.util.Map nameToFirstIndex()>
<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>
<rx.internal.operators.OperatorIgnoreElements$1: void onCompleted()>
<okhttp3.internal.framed.NameValueBlockReader$1: void <init>(okhttp3.internal.framed.NameValueBlockReader,okio.Source)>
<okhttp3.internal.http.HttpHeaders: java.util.List parseChallenges(okhttp3.Headers,java.lang.String)>
<okio.RealBufferedSink$1: void write(int)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)>
<rx.Single$21$1: void <init>(rx.Single$21,rx.Subscriber,boolean,rx.Subscriber)>
<rx.internal.operators.OperatorReplay$InnerProducer: boolean isUnsubscribed()>
<retrofit2.BuiltInConverters$RequestBodyConverter: java.lang.Object convert(java.lang.Object)>
<com.facebook.stetho.server.http.ExactPathMatcher: boolean match(java.lang.String)>
<rx.internal.util.atomic.SpscAtomicArrayQueue: java.lang.Object peek()>
<com.squareup.picasso.BitmapHunter: com.squareup.picasso.Picasso$Priority computeNewPriority()>
<com.facebook.stetho.common.ListUtil$FourItemImmutableList: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.exceptions.OnErrorThrowable$OnNextValue: java.lang.Object getValue()>
<rx.internal.operators.OperatorTimeoutWithSelector$2$1: void onError(java.lang.Throwable)>
<retrofit2.Utils: java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)>
<okio.RealBufferedSink: okio.BufferedSink write(byte[],int,int)>
<rx.internal.operators.OperatorSkipWhile$2: java.lang.Boolean call(java.lang.Object,java.lang.Integer)>
<retrofit2.Utils: void <init>()>
<okhttp3.internal.framed.Hpack$Reader: void readIndexedHeader(int)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.lang.Object element()>
<okhttp3.internal.cache.DiskLruCache: void completeEdit(okhttp3.internal.cache.DiskLruCache$Editor,boolean)>
<com.facebook.stetho.DumperPluginsProvider: java.lang.Iterable get()>
<com.facebook.stetho.inspector.network.ResourceTypeHelper: java.lang.String stripContentExtras(java.lang.String)>
<rx.internal.operators.OnSubscribeDetach$DetachSubscriber: void innerRequest(long)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void makeRequest(long,long)>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: void close()>
<com.squareup.picasso.FetchAction: void error()>
<rx.internal.util.unsafe.SpmcArrayQueueProducerField: long lvProducerIndex()>
<retrofit2.Retrofit: retrofit2.CallAdapter nextCallAdapter(retrofit2.CallAdapter$Factory,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>
<rx.Observable: rx.Observable concatEager(rx.Observable)>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter: void clearHighlight()>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder downloader(com.squareup.picasso.Downloader)>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void request(long)>
<rx.internal.util.InternalObservableUtils: void <init>(java.lang.String,int)>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber: void onNext(java.lang.Object)>
<rx.android.MainThreadSubscription$1: void call()>
<rx.internal.operators.OperatorSkipWhile: rx.Subscriber call(rx.Subscriber)>
<rx.Single: rx.singles.BlockingSingle toBlocking()>
<rx.observables.SyncOnSubscribe: void <init>()>
<okhttp3.internal.http.HttpMethod: void <init>()>
<rx.internal.operators.OperatorDebounceWithTime$1: void onNext(java.lang.Object)>
<okio.ByteString: int lastIndexOf(byte[])>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void removeSubTree(java.util.Map,java.lang.Object)>
<rx.internal.operators.OperatorPublish$2: void <init>(boolean,rx.functions.Func1,rx.Observable)>
<com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.protocol.module.DOM$PerformSearchResponse performSearch(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.Observable: rx.observables.ConnectableObservable replay()>
<rx.Single: rx.Single doOnSubscribe(rx.functions.Action0)>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void error(java.lang.Throwable)>
<com.facebook.stetho.server.http.HandlerRegistry: boolean unregister(com.facebook.stetho.server.http.PathMatcher,com.facebook.stetho.server.http.HttpHandler)>
<okhttp3.internal.framed.HeadersMode: boolean failIfHeadersPresent()>
<rx.Completable: rx.Completable never()>
<rx.Observable: rx.Observable elementAt(int)>
<com.facebook.stetho.common.ListUtil$ThreeItemImmutableList: java.lang.Object get(int)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1: void onResponse(retrofit2.Call,retrofit2.Response)>
<okhttp3.Cookie$Builder: okhttp3.Cookie$Builder value(java.lang.String)>
<rx.functions.Functions$3: void <init>(rx.functions.Func2)>
<com.facebook.stetho.common.android.ResourcesUtil: void <init>()>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer: long preparePendingRequest(com.facebook.stetho.inspector.jsonrpc.PendingRequestCallback)>
<com.facebook.stetho.websocket.WebSocketSession$1: void <init>(com.facebook.stetho.websocket.WebSocketSession)>
<retrofit2.RequestBuilder$ContentTypeOverridingRequestBody: okhttp3.MediaType contentType()>
<retrofit2.http.Query: boolean encoded()>
<okhttp3.internal.cache.CacheInterceptor: boolean validate(okhttp3.Response,okhttp3.Response)>
<okio.InflaterSource: void close()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: long lvConsumerIndex()>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat: com.facebook.stetho.inspector.database.SQLiteDatabaseCompat getInstance()>
<rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl: void call(java.lang.Object)>
<rx.internal.util.SubscriptionList: void <init>(rx.Subscription[])>
<rx.Observable: rx.Subscription subscribe()>
<rx.exceptions.OnErrorNotImplementedException: void <init>(java.lang.Throwable)>
<com.facebook.stetho.common.ThreadBound: java.lang.Object postAndWait(com.facebook.stetho.common.UncheckedCallable)>
<rx.internal.operators.OperatorReplay$2: void <init>(rx.functions.Func0,rx.functions.Func1)>
<rx.internal.operators.OperatorMulticast$2: void call()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: int getId(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler$1: void <init>(com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler)>
<com.squareup.leakcanary.LeakCanary: void <init>()>
<rx.internal.operators.OperatorTakeLastOne$ParentSubscriber: void <init>(rx.Subscriber)>
<rx.Completable$13$1: void onCompleted()>
<retrofit2.ParameterHandler$1: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<rx.Notification: boolean isOnError()>
<com.facebook.stetho.server.http.LightHttpResponse: void reset()>
<com.facebook.stetho.inspector.protocol.module.CSS$SelectorList: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<okhttp3.internal.cache.DiskLruCache$Entry: void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String)>
<rx.internal.schedulers.EventLoopsScheduler: rx.Subscription scheduleDirect(rx.functions.Action0)>
<rx.Single: rx.Subscription subscribe(rx.SingleSubscriber)>
<rx.internal.operators.OperatorDebounceWithSelector: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: com.facebook.stetho.inspector.elements.NodeType onGetNodeType(java.lang.Object)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode latestHead()>
<rx.subjects.BehaviorSubject: boolean hasValue()>
<retrofit2.RequestBuilder$ContentTypeOverridingRequestBody: void writeTo(okio.BufferedSink)>
<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$ChildEventingList acquireChildEventingList(java.lang.Object,com.facebook.stetho.inspector.elements.DocumentView)>
<rx.Observable: rx.Observable concat(rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.producers.ProducerArbiter: void produced(long)>
<rx.observables.BlockingObservable: java.lang.Object last(rx.functions.Func1)>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectType: com.facebook.stetho.inspector.protocol.module.Runtime$ObjectType[] values()>
<rx.internal.operators.OperatorDebounceWithSelector$1$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.LogRedirector: void v(java.lang.String,java.lang.String,java.lang.Throwable)>
<com.squareup.picasso.OkHttpDownloader: void <init>(com.squareup.okhttp.OkHttpClient)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.lang.Object[] toArray(java.lang.Object[])>
<com.facebook.stetho.server.LeakyBufferedInputStream: void <init>(java.io.InputStream,int)>
<com.squareup.picasso.RequestCreator: void <init>(com.squareup.picasso.Picasso,android.net.Uri,int)>
<rx.subjects.ReplaySubject$ReplayProducer: boolean isUnsubscribed()>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler: java.lang.Object handleSelect(android.database.Cursor)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void responseReadFinished(java.lang.String)>
<rx.internal.operators.OperatorElementAt$1: void onError(java.lang.Throwable)>
<okio.Pipe$PipeSink: okio.Timeout timeout()>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber: void init()>
<com.facebook.stetho.inspector.protocol.module.Page$FrameResourceTree: void <init>(com.facebook.stetho.inspector.protocol.module.Page$1)>
<okhttp3.logging.HttpLoggingInterceptor: void <clinit>()>
<com.facebook.stetho.inspector.MismatchedResponseException: long getRequestId()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>
<com.facebook.stetho.inspector.protocol.module.DOM$AttributeModifiedEvent: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<com.facebook.stetho.common.android.AccessibilityUtil: boolean isAccessibilityFocusable(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.View)>
<rx.subjects.SerializedSubject: void onNext(java.lang.Object)>
<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OnSubscribePublishMulticast: void onError(java.lang.Throwable)>
<rx.internal.producers.QueuedProducer: void onCompleted()>
<rx.subjects.UnicastSubject$State: void replay()>
<rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator: void remove()>
<rx.Observable: rx.Observable toMap(rx.functions.Func1)>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler: void <init>(android.content.Context)>
<okhttp3.internal.cache.InternalCache: void trackResponse(okhttp3.internal.cache.CacheStrategy)>
<com.facebook.stetho.inspector.DevtoolsSocketHandler: com.facebook.stetho.server.http.LightHttpServer createServer()>
<okhttp3.internal.platform.OptionalMethod: java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])>
<okhttp3.Credentials: java.lang.String basic(java.lang.String,java.lang.String)>
<okhttp3.internal.framed.Http2$Writer: void close()>
<com.facebook.stetho.common.ListUtil: java.util.List newImmutableList(java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorReplay$3$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.android.ViewGroupUtil: void <init>()>
<com.squareup.picasso.Picasso$RequestTransformer$1: void <init>()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: java.lang.String getTag(android.support.v4.app.Fragment)>
<rx.Completable$22: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorZip: void <init>(rx.functions.Func7)>
<rx.internal.operators.BlockingOperatorNext$NextIterator: void remove()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getStylesFromObject(android.view.View,java.lang.String,java.lang.Object,android.view.ViewDebug$ExportedProperty,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<rx.internal.operators.OnSubscribePublishMulticast: void onNext(java.lang.Object)>
<rx.internal.util.PlatformDependent$1: void <init>()>
<retrofit2.ParameterHandler$2: void <init>(retrofit2.ParameterHandler)>
<rx.observables.BlockingObservable$1: void onError(java.lang.Throwable)>
<rx.internal.operators.NotificationLite: boolean isNext(java.lang.Object)>
<rx.internal.operators.OperatorZip: void <init>(rx.functions.FuncN)>
<okhttp3.FormBody$Builder: void <init>()>
<com.squareup.picasso.Request: java.lang.String toString()>
<rx.subjects.ReplaySubject: rx.subjects.ReplaySubject createWithTimeAndSize(long,java.util.concurrent.TimeUnit,int,rx.Scheduler)>
<rx.internal.operators.OnSubscribeRedo$RedoFinite$1: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Page: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.observables.BlockingObservable$6: void onCompleted()>
<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>
<rx.Scheduler$Worker: rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<rx.internal.util.IndexedRingBuffer: void <clinit>()>
<com.facebook.stetho.inspector.elements.Document$5: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.ShadowDocument$Update)>
<retrofit2.Retrofit: retrofit2.Converter nextResponseBodyConverter(retrofit2.Converter$Factory,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>
<rx.internal.operators.OnSubscribeGroupJoin: void call(java.lang.Object)>
<okhttp3.internal.http.Http1xStream$ChunkedSink: void <init>(okhttp3.internal.http.Http1xStream)>
<com.facebook.stetho.server.http.LightHttpBody: com.facebook.stetho.server.http.LightHttpBody create(byte[],java.lang.String)>
<rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber: void <init>(rx.Subscriber,rx.functions.Func1,rx.functions.Func1,rx.functions.Func0)>
<rx.internal.operators.OperatorPublish$2$1: void onNext(java.lang.Object)>
<retrofit2.ParameterHandler$PartMap: void apply(retrofit2.RequestBuilder,java.util.Map)>
<rx.internal.operators.OperatorReplay: rx.observables.ConnectableObservable create(rx.Observable,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.Observable: rx.Observable amb(rx.Observable,rx.Observable)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib forFragment()>
<okio.ForwardingSink: void close()>
<okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex: java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate)>
<okhttp3.internal.framed.Settings: int getRoundTripTime(int)>
<okio.Buffer$2: void close()>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: void complete()>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: java.io.IOException handleIOException(java.io.IOException)>
<rx.internal.util.unsafe.SpmcArrayQueueProducerIndexCacheField: void <init>(int)>
<okhttp3.internal.framed.FramedStream: void <clinit>()>
<rx.internal.operators.OperatorToObservableSortedList: void <init>(int)>
<okhttp3.Cache: java.util.Iterator urls()>
<okio.Buffer: okio.ByteString snapshot()>
<retrofit2.Utils$WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<rx.observables.BlockingObservable: void <clinit>()>
<okio.Buffer: long writeAll(okio.Source)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void <clinit>()>
<rx.internal.operators.OperatorReplay$4: void connect(rx.functions.Action1)>
<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber: void onError(java.lang.Throwable)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean offer(java.lang.Object)>
<com.squareup.picasso.BitmapHunter: boolean shouldResize(boolean,int,int,int,int)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall: boolean isCanceled()>
<rx.internal.operators.OperatorToMap: void <init>(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler$2: void store(java.lang.Object)>
<com.squareup.picasso.Picasso$CleanupThread$1: void run()>
<okhttp3.internal.framed.Http2$Writer: void flush()>
<rx.plugins.RxJavaPlugins: void registerCompletableExecutionHook(rx.plugins.RxJavaCompletableExecutionHook)>
<rx.Single: rx.Single compose(rx.Single$Transformer)>
<com.squareup.picasso.ResourceRequestHandler: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,com.squareup.picasso.Request)>
<rx.internal.util.ExceptionsUtils: void <clinit>()>
<com.facebook.stetho.Stetho$InitializerBuilder: com.facebook.stetho.Stetho$InitializerBuilder enableWebKitInspector(com.facebook.stetho.InspectorModulesProvider)>
<rx.exceptions.CompositeException: void appendStackTrace(java.lang.StringBuilder,java.lang.Throwable,java.lang.String)>
<com.facebook.stetho.inspector.runtime.RhinoDetectingRuntimeReplFactory: void <init>(android.content.Context)>
<okhttp3.Cookie$Builder: okhttp3.Cookie build()>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder proxyAuthenticator(okhttp3.Authenticator)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.lang.Object[] toArray()>
<com.facebook.stetho.inspector.elements.Descriptor: java.lang.Object postAndWait(com.facebook.stetho.common.UncheckedCallable)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: java.util.Queue getOrCreateErrorQueue()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: java.lang.Object getChildFragmentManager(java.lang.Object)>
<rx.Observable: rx.Observable startWith(java.lang.Object)>
<okio.RealBufferedSink: okio.BufferedSink write(okio.ByteString)>
<rx.internal.operators.OperatorTakeTimed: void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.protocol.module.DOM$6: void run()>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber: void onStart()>
<com.squareup.picasso.NetworkRequestHandler: boolean canHandleRequest(com.squareup.picasso.Request)>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: java.lang.String relativizePath(java.io.File,java.io.File)>
<rx.Observable: rx.Observable concat(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$3: rx.functions.Action1 lambdaFactory$(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<okhttp3.internal.http.Http2xStream: void cancel()>
<okio.Buffer: long readHexadecimalUnsignedLong()>
<rx.internal.schedulers.NewThreadWorker: void registerExecutor(java.util.concurrent.ScheduledThreadPoolExecutor)>
<rx.internal.operators.OnSubscribeAmb: rx.Observable$OnSubscribe amb(java.lang.Iterable)>
<okhttp3.internal.framed.Spdy3$Reader: void readRstStream(okhttp3.internal.framed.FrameReader$Handler,int,int)>
<rx.plugins.RxJavaCompletableExecutionHook: java.lang.Throwable onSubscribeError(java.lang.Throwable)>
<rx.observables.AsyncOnSubscribe: void onUnsubscribe(java.lang.Object)>
<rx.internal.operators.OperatorReplay$3: void <init>(rx.Observable)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: void <init>()>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber: void onNext(rx.Observable)>
<rx.internal.operators.OnSubscribeRedo$4$1: void setProducer(rx.Producer)>
<com.facebook.stetho.dumpapp.Framer$FramingOutputStream: void write(byte[],int,int)>
<com.facebook.stetho.inspector.protocol.module.CSS: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.squareup.picasso.DeferredRequestCreator: boolean onPreDraw()>
<com.squareup.picasso.Downloader$ResponseException: void <init>(java.lang.String,int,int)>
<okhttp3.internal.framed.Huffman$Node: void <init>(int,int)>
<rx.Observable: rx.Observable takeFirst(rx.functions.Func1)>
<rx.observers.TestObserver$1: void onCompleted()>
<rx.subjects.AsyncSubject: java.lang.Throwable getThrowable()>
<rx.Completable$33$1: void onCompleted()>
<com.squareup.picasso.PicassoDrawable: void setAlpha(int)>
<com.facebook.stetho.common.LogUtil: java.lang.String format(java.lang.String,java.lang.Object[])>
<rx.internal.operators.OperatorSingle: java.lang.Object call(java.lang.Object)>
<rx.plugins.RxJavaCompletableExecutionHook: rx.Completable$CompletableOperator onLift(rx.Completable$CompletableOperator)>
<rx.Single: rx.Subscription subscribe()>
<rx.internal.operators.OperatorDistinct$1: void onCompleted()>
<okhttp3.internal.framed.Spdy3$Reader: void readPing(okhttp3.internal.framed.FrameReader$Handler,int,int)>
<rx.internal.operators.OperatorTakeUntilPredicate: java.lang.Object call(java.lang.Object)>
<rx.Observable: rx.Observable repeatWhen(rx.functions.Func1,rx.Scheduler)>
<okhttp3.MultipartBody$Builder: okhttp3.MultipartBody$Builder addPart(okhttp3.Headers,okhttp3.RequestBody)>
<com.facebook.stetho.server.http.LightHttpBody: com.facebook.stetho.server.http.LightHttpBody create(java.lang.String,java.lang.String)>
<okio.InflaterSource: okio.Timeout timeout()>
<rx.exceptions.CompositeException: void printStackTrace()>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: boolean fromDiskCache()>
<rx.internal.util.UtilityFunctions: rx.functions.Func1 identity()>
<com.facebook.stetho.common.Util: void sleepUninterruptibly(long)>
<rx.internal.operators.OperatorDelayWithSelector$1: void onNext(java.lang.Object)>
<retrofit2.Retrofit: retrofit2.Converter nextRequestBodyConverter(retrofit2.Converter$Factory,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],java.lang.'annotation'.Annotation[])>
<com.facebook.stetho.common.UncheckedCallable: java.lang.Object call()>
<rx.Completable$3: void call(java.lang.Object)>
<okio.BufferedSink: okio.BufferedSink emitCompleteSegments()>
<rx.internal.operators.OperatorDebounceWithTime$DebounceState: void emit(int,rx.Subscriber,rx.Subscriber)>
<okhttp3.internal.framed.FramedConnection: boolean pushedStream(int)>
<com.squareup.picasso.Picasso: void enqueueAndSubmit(com.squareup.picasso.Action)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.lang.Object newBufferPoll(java.util.concurrent.atomic.AtomicReferenceArray,long,int)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: void soProducerIndex(long)>
<com.squareup.picasso.StatsSnapshot: void dump()>
<rx.internal.util.IndexedRingBuffer$ElementSection: void <init>()>
<com.facebook.stetho.common.android.HandlerUtil$2: java.lang.Object onRun()>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void onStart()>
<com.facebook.stetho.inspector.MismatchedResponseException: void <init>(long)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: void onNext(java.lang.Object)>
<com.facebook.stetho.common.Utf8Charset: java.lang.String decodeUTF8(byte[])>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter: void <init>()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.lang.Object newBufferPoll(java.util.concurrent.atomic.AtomicReferenceArray,long,int)>
<com.squareup.picasso.Downloader$Response: void <init>(android.graphics.Bitmap,boolean)>
<rx.plugins.RxJavaObservableExecutionHook: java.lang.Throwable onSubscribeError(java.lang.Throwable)>
<okhttp3.internal.framed.FramedConnection$Reader: void data(boolean,int,okio.BufferedSource,int)>
<rx.internal.operators.CompletableOnSubscribeMergeArray: void <init>(rx.Completable[])>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: void <init>(java.io.InputStream,java.lang.String,java.io.OutputStream,com.facebook.stetho.inspector.network.CountingOutputStream,com.facebook.stetho.inspector.helper.ChromePeerManager,com.facebook.stetho.inspector.network.ResponseHandler)>
<rx.internal.operators.BlockingOperatorNext$NextObserver: void onNext(rx.Notification)>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler: void onSecured(android.net.LocalSocket)>
<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate)>
<okio.RealBufferedSource$1: int available()>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void setRelatedDrinks(java.util.List)>
<rx.Completable: rx.Completable fromObservable(rx.Observable)>
<com.squareup.picasso.Utils$1: void <init>(android.os.Looper)>
<retrofit2.CallAdapter$Factory: retrofit2.CallAdapter get(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<retrofit2.DefaultCallAdapterFactory$1: void <init>(retrofit2.DefaultCallAdapterFactory,java.lang.reflect.Type)>
<rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber: void onError(java.lang.Throwable)>
<rx.internal.util.RxRingBuffer: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorTimeInterval$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.console.ConsolePeerManager: void <init>()>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$NoopHighlighter: void <init>()>
<rx.Completable: rx.Subscription subscribe(rx.functions.Action1,rx.functions.Action0)>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber: void setProducer(rx.Producer)>
<okhttp3.internal.framed.Settings: okhttp3.internal.framed.Settings set(int,int,int)>
<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>
<rx.Observable: rx.Observable just(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectSubType: com.facebook.stetho.inspector.protocol.module.Runtime$ObjectSubType[] values()>
<rx.observables.SyncOnSubscribe$1: java.lang.Object call(java.lang.Object,java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: com.facebook.stetho.common.android.FragmentAccessor forFragment()>
<rx.internal.operators.OperatorSingle: rx.internal.operators.OperatorSingle instance()>
<rx.internal.operators.OperatorGroupBy$GroupedUnicast: void onError(java.lang.Throwable)>
<rx.internal.operators.OnSubscribeRedo: rx.Observable retry(rx.Observable,long)>
<okhttp3.RealCall: void setForWebSocket()>
<rx.internal.operators.OnSubscribeDetach$DetachProducer: void unsubscribe()>
<com.facebook.stetho.inspector.elements.NodeDescriptor: void unhook(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Debugger: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult canSetScriptSource(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.exceptions.Exceptions: void addCause(java.lang.Throwable,java.lang.Throwable)>
<okio.ByteString: void write(okio.Buffer)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: java.lang.String nextArg(java.util.Iterator,java.lang.String)>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer: void <init>(com.facebook.stetho.json.ObjectMapper,com.facebook.stetho.websocket.SimpleSession)>
<rx.Observable: rx.Observable flatMap(rx.functions.Func1)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: android.content.res.Resources getResources(java.lang.Object)>
<okio.Timeout: okio.Timeout deadline(long,java.util.concurrent.TimeUnit)>
<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder maxAge(int,java.util.concurrent.TimeUnit)>
<rx.Completable: rx.Completable timeout(long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OperatorTimestamp: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OnSubscribeRedo$2$1: void setProducer(rx.Producer)>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void setProducer(rx.Producer)>
<okhttp3.internal.framed.Http2$Reader: void readHeaders(okhttp3.internal.framed.FrameReader$Handler,int,byte,int)>
<okhttp3.CipherSuite: java.lang.String javaName()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2: void <init>()>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void setDrinkClickListener(fr.masciulli.drinks.ui.adapter.ItemClickListener)>
<rx.internal.util.ScalarSynchronousSingle$DirectScheduledEmission: void <init>(rx.internal.schedulers.EventLoopsScheduler,java.lang.Object)>
<com.squareup.picasso.MemoryPolicy: com.squareup.picasso.MemoryPolicy[] values()>
<fr.masciulli.drinks.ui.view.RatioImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<okhttp3.internal.connection.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>
<rx.internal.operators.OperatorPublish$PublishSubscriber: void onNext(java.lang.Object)>
<rx.observers.Observers$3: void onError(java.lang.Throwable)>
<rx.plugins.RxJavaCompletableExecutionHook: rx.Completable$CompletableOnSubscribe onCreate(rx.Completable$CompletableOnSubscribe)>
<com.facebook.stetho.inspector.protocol.module.CSS: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getComputedStyleForNode(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.server.http.LightHttpServer: void writeResponseMessage(com.facebook.stetho.server.http.LightHttpResponse,com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter)>
<rx.internal.operators.OnSubscribeRedo: void <init>(rx.Observable,rx.functions.Func1,boolean,boolean,rx.Scheduler)>
<rx.internal.operators.OperatorMulticast$3: void onError(java.lang.Throwable)>
<okhttp3.internal.framed.Settings: int getMaxConcurrentStreams(int)>
<com.squareup.picasso.Picasso$1: void <init>(android.os.Looper)>
<fr.masciulli.drinks.model.Liquor: void writeToParcel(android.os.Parcel,int)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: android.support.v7.widget.RecyclerView$ViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<okhttp3.internal.framed.FramedConnection$Reader: void ackSettings()>
<okhttp3.internal.http.Http2xStream: okio.Sink createRequestBody(okhttp3.Request,long)>
<rx.Completable$6: void <init>(rx.functions.Func0)>
<com.facebook.stetho.inspector.helper.IntegerFormatter: void <init>()>
<retrofit2.ParameterHandler$Body: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$1: void onItemClick(int,java.lang.Object)>
<okhttp3.internal.framed.Hpack$Reader: void readLiteralHeaderWithoutIndexingNewName()>
<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>
<rx.Completable$CompletableSubscriber: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: java.lang.String getLocalName(java.lang.Object)>
<rx.subjects.SubjectSubscriptionManager: rx.subjects.SubjectSubscriptionManager$SubjectObserver[] terminate(java.lang.Object)>
<okhttp3.internal.tls.BasicCertificateChainCleaner: boolean verifySignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate)>
<rx.internal.operators.OperatorDoOnEach$1: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.DOM: void setInspectModeEnabled(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void setProducer(rx.Producer)>
<rx.internal.operators.OperatorDoOnUnsubscribe: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean canIntBeMappedToString(android.view.ViewDebug$ExportedProperty)>
<rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber: void onNext(java.lang.Object)>
<rx.subjects.UnicastSubject: rx.subjects.UnicastSubject create(int,rx.functions.Action0)>
<rx.internal.operators.OperatorMap: java.lang.Object call(java.lang.Object)>
<rx.Completable$13: void call(rx.Completable$CompletableSubscriber)>
<okhttp3.internal.framed.FrameWriter: void ping(boolean,int,int)>
<rx.Single$14: void onCompleted()>
<rx.internal.operators.OperatorSubscribeOn$1$1$1$1: void call()>
<rx.internal.operators.OperatorTakeUntil$1: void <init>(rx.internal.operators.OperatorTakeUntil,rx.Subscriber,boolean,rx.Subscriber)>
<rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver: void <init>(java.lang.Object)>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: void <init>(android.content.Context)>
<retrofit2.Callback: void onResponse(retrofit2.Call,retrofit2.Response)>
<rx.observables.BlockingObservable: void subscribe(rx.functions.Action1)>
<rx.observables.BlockingObservable$1: void <init>(rx.observables.BlockingObservable,java.util.concurrent.CountDownLatch,java.util.concurrent.atomic.AtomicReference,rx.functions.Action1)>
<rx.Observable: rx.Observable concatEager(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<com.facebook.stetho.inspector.network.DefaultResponseHandler: void onReadDecoded(int)>
<rx.observables.SyncOnSubscribe$2: void <init>(rx.functions.Action2)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: void error(java.lang.Throwable)>
<okio.Buffer: okio.BufferedSink write(byte[])>
<okhttp3.logging.HttpLoggingInterceptor$Level: void <init>(java.lang.String,int)>
<rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver: java.util.Iterator getIterable()>
<rx.Observable: rx.Observable startWith(java.lang.Iterable)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void dispose()>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorRequest: java.lang.Integer friendlyNameExtra()>
<rx.internal.operators.OnSubscribeDetach$DetachSubscriber: void onNext(java.lang.Object)>
<com.squareup.picasso.Picasso: void resumeAction(com.squareup.picasso.Action)>
<rx.Single$24: void <init>(rx.Single,rx.functions.Action1)>
<com.facebook.stetho.inspector.protocol.module.Page$ResourceType: void <clinit>()>
<rx.Completable: void subscribe(rx.Subscriber)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.Request createRequest(long)>
<okhttp3.internal.framed.Hpack$Reader: int maxDynamicTableByteCount()>
<rx.internal.operators.OnSubscribeRedo$RetryWithPredicate$1: rx.Notification call(rx.Notification,rx.Notification)>
<com.squareup.picasso.Action: int getNetworkPolicy()>
<rx.observables.BlockingObservable$2: void <init>(rx.observables.BlockingObservable)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: boolean drain(rx.subjects.ReplaySubject$ReplayProducer)>
<rx.internal.operators.OperatorZipIterable: rx.Subscriber call(rx.Subscriber)>
<rx.observers.TestSubscriber: void <init>(long)>
<com.facebook.stetho.dumpapp.Framer$ClosedHelper: void <init>()>
<com.squareup.picasso.Dispatcher$DispatcherHandler$1: void <init>(com.squareup.picasso.Dispatcher$DispatcherHandler,android.os.Message)>
<com.squareup.picasso.Picasso: com.squareup.picasso.RequestCreator load(java.io.File)>
<rx.internal.util.ScalarSynchronousObservable$1: java.lang.Object call(java.lang.Object)>
<okhttp3.internal.http.Http1xStream$UnknownLengthSource: void <init>(okhttp3.internal.http.Http1xStream)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator fit()>
<okhttp3.internal.framed.Hpack$Writer: void clearDynamicTable()>
<com.squareup.picasso.NetworkPolicy: void <clinit>()>
<okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)>
<okhttp3.internal.http.Http1xStream: okio.Sink createRequestBody(okhttp3.Request,long)>
<rx.BackpressureOverflow$Error: void <clinit>()>
<com.facebook.stetho.dumpapp.ArgsHelper: java.lang.String nextArg(java.util.Iterator,java.lang.String)>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: void setForWebSocket(boolean)>
<rx.internal.operators.OperatorTakeLast$TakeLastSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber: void <init>(rx.Completable$CompletableSubscriber,rx.Completable[])>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: java.util.List arrayToList(java.lang.Object)>
<okhttp3.internal.framed.FramedStream: void receiveFin()>
<rx.observables.AsyncOnSubscribe$2: void <init>(rx.functions.Action3)>
<com.facebook.stetho.server.SocketLikeHandler: void onAccepted(com.facebook.stetho.server.SocketLike)>
<com.squareup.picasso.Utils: java.lang.String getLogIdsForHunter(com.squareup.picasso.BitmapHunter)>
<rx.subjects.ReplaySubject: void onError(java.lang.Throwable)>
<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>
<com.squareup.picasso.Picasso: com.squareup.picasso.Picasso 'with'(android.content.Context)>
<com.facebook.stetho.inspector.helper.IntegerFormatter: java.lang.String format(java.lang.Integer,android.view.ViewDebug$ExportedProperty)>
<com.facebook.stetho.common.LogUtil: void w(java.lang.String,java.lang.Object[])>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$2: fr.masciulli.drinks.ui.adapter.ItemClickListener lambdaFactory$(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<rx.exceptions.UnsubscribeFailedException: void <init>(java.lang.Throwable)>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1: void <init>(rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1,rx.functions.Action0)>
<com.facebook.stetho.json.ObjectMapper: java.lang.Object getValueForField(java.lang.reflect.Field,java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.FragmentDescriptor: com.facebook.stetho.inspector.elements.DescriptorMap register(com.facebook.stetho.inspector.elements.DescriptorMap)>
<okio.ByteString: okio.ByteString digest(java.lang.String)>
<rx.internal.schedulers.NewThreadWorker: void purgeExecutors()>
<com.facebook.stetho.websocket.WebSocketSession$1: void handleClose(byte[],int)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$1: fr.masciulli.drinks.ui.adapter.ItemClickListener lambdaFactory$(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: int read(byte[],int,int)>
<okhttp3.Address: okhttp3.Dns dns()>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: void onStart()>
<retrofit2.http.HTTP: java.lang.String path()>
<com.facebook.stetho.inspector.protocol.module.DOM$PerformSearchResponse: void <init>()>
<okhttp3.OkHttpClient: okhttp3.Cache cache()>
<retrofit2.ParameterHandler$RawPart: void apply(retrofit2.RequestBuilder,okhttp3.MultipartBody$Part)>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder allEnabledCipherSuites()>
<rx.internal.operators.OnSubscribeToObservableFuture: rx.Observable$OnSubscribe toObservableFuture(java.util.concurrent.Future)>
<com.facebook.stetho.inspector.protocol.module.CSS$SourceRange: void <init>()>
<com.squareup.picasso.MarkableInputStream: void <init>(java.io.InputStream,int)>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker: void run()>
<rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator: void onNext(rx.Notification)>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$HoneycombImpl: void enableFeatures(int,android.database.sqlite.SQLiteDatabase)>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter: void setHighlightedView(android.view.View,int)>
<com.facebook.stetho.common.android.ResourcesUtil: java.lang.String getIdString(android.content.res.Resources,int)>
<rx.functions.Actions$4: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.Observable$OnSubscribeExtend: void <init>(rx.Observable)>
<com.facebook.stetho.inspector.MethodDispatcher: void <init>(com.facebook.stetho.json.ObjectMapper,java.lang.Iterable)>
<okhttp3.CertificatePinner$Pin: java.lang.String toString()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void loadingFailed(java.lang.String,java.lang.String)>
<com.facebook.stetho.inspector.network.RequestBodyHelper: void throwIfNoBody()>
<com.facebook.stetho.dumpapp.Dumper: int dump(java.io.InputStream,java.io.PrintStream,java.io.PrintStream,java.lang.String[])>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void getGarbageElements(com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber: void onCompleted()>
<rx.internal.operators.OperatorTakeLast: rx.Subscriber call(rx.Subscriber)>
<okhttp3.internal.framed.FramedStream: void checkOutNotClosed()>
<rx.internal.util.SynchronizedQueue: java.lang.Object clone()>
<rx.internal.operators.CachedObservable$ReplayProducer: void unsubscribe()>
<rx.internal.operators.OperatorZip$Zip$InnerSubscriber: void onError(java.lang.Throwable)>
<rx.Single: rx.Single onErrorResumeNext(rx.functions.Func1)>
<rx.functions.Functions$1: void <init>(rx.functions.Func0)>
<okio.RealBufferedSource: void readFully(byte[])>
<rx.internal.operators.OperatorSkipLastTimed: void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.subjects.ReplaySubject$ReplayBuffer: int size()>
<com.facebook.stetho.server.SocketLike: java.io.InputStream getInput()>
<rx.Single$22$2: void <init>(rx.Single$22,rx.Subscriber)>
<rx.internal.operators.OperatorTakeLastTimed: void <init>(int,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorGroupBy$State: void unsubscribe()>
<com.squareup.picasso.Picasso: void pauseTag(java.lang.Object)>
<rx.subscriptions.SerialSubscription: void <init>()>
<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction$1: void call()>
<okhttp3.internal.framed.Spdy3$Reader: void readGoAway(okhttp3.internal.framed.FrameReader$Handler,int,int)>
<com.squareup.picasso.BitmapHunter$3: void <init>(com.squareup.picasso.Transformation,java.lang.RuntimeException)>
<retrofit2.ParameterHandler$QueryMap: void <init>(retrofit2.Converter,boolean)>
<rx.subjects.BehaviorSubject$1: void call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<rx.Observable: rx.Observable retry(long)>
<okio.ForwardingTimeout: okio.Timeout clearDeadline()>
<rx.internal.util.InternalObservableUtils$PlusOneLongFunc2: java.lang.Object call(java.lang.Object,java.lang.Object)>
<rx.internal.util.InternalObservableUtils$ReturnsVoidFunc1: void <init>()>
<okhttp3.Cache$CacheRequestImpl$1: void <init>(okhttp3.Cache$CacheRequestImpl,okio.Sink,okhttp3.Cache,okhttp3.internal.cache.DiskLruCache$Editor)>
<rx.Completable$3$1: void onSubscribe(rx.Subscription)>
<com.facebook.stetho.inspector.elements.Document: void getElementAccessibilityStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<com.squareup.picasso.ContactsPhotoRequestHandler: java.io.InputStream getInputStream(com.squareup.picasso.Request)>
<okhttp3.internal.cache.DiskLruCache$Editor$1: void <init>(okhttp3.internal.cache.DiskLruCache$Editor,okio.Sink)>
<okhttp3.internal.framed.Hpack$Reader: void readLiteralHeaderWithIncrementalIndexingIndexedName(int)>
<retrofit2.BuiltInConverters: retrofit2.Converter responseBodyConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<rx.internal.operators.OperatorSkip$1: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.NodeType: com.facebook.stetho.inspector.elements.NodeType valueOf(java.lang.String)>
<rx.internal.util.ScalarSynchronousSingle$NormalScheduledEmission: void call(rx.SingleSubscriber)>
<rx.internal.util.unsafe.MpscLinkedQueue: java.lang.Object peek()>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse: int connectionId()>
<okhttp3.internal.http.Http1xStream$FixedLengthSink: void <init>(okhttp3.internal.http.Http1xStream,long)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber$1: void <init>(rx.internal.operators.OperatorReplay$ReplaySubscriber)>
<com.facebook.stetho.dumpapp.Framer$ClosedHelper: void close()>
<rx.Completable$12: void <init>(rx.Scheduler,long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.dumpapp.DumperContext: org.apache.commons.cli.CommandLineParser getParser()>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterRegistry: com.facebook.stetho.inspector.network.AsyncPrettyPrinterFactory lookup(java.lang.String)>
<okhttp3.HttpUrl: java.lang.String queryParameterValue(int)>
<rx.Observable: rx.Observable using(rx.functions.Func0,rx.functions.Func1,rx.functions.Action1)>
<okio.HashingSink: okio.HashingSink md5(okio.Sink)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: void doUsage(java.io.PrintStream)>
<com.facebook.stetho.inspector.protocol.module.Database$1: void <init>(com.facebook.stetho.inspector.protocol.module.Database)>
<rx.observables.BlockingObservable: java.lang.Object single(rx.functions.Func1)>
<com.facebook.stetho.inspector.protocol.module.DOM$HighlightConfig: void <init>()>
<rx.internal.operators.BlockingOperatorToIterator: java.util.Iterator toIterator(rx.Observable)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void <clinit>()>
<okhttp3.internal.cache.DiskLruCache$1: void run()>
<rx.observables.AsyncOnSubscribe: void <init>()>
<rx.Observable: rx.Observable debounce(rx.functions.Func1)>
<rx.internal.operators.OperatorWindowWithTime$State: rx.internal.operators.OperatorWindowWithTime$State clear()>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void emitValue(java.lang.Object)>
<rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler: rx.Subscription enqueue(rx.functions.Action0,long)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.lang.Object[] toArray()>
<com.facebook.stetho.Stetho$3: java.lang.Iterable get()>
<rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver: void onCompleted()>
<rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture$1: void call()>
<rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber: void setProducer(rx.Producer)>
<com.facebook.stetho.common.LogUtil: void i(java.lang.Throwable,java.lang.String)>
<rx.internal.operators.OperatorTakeLast$TakeLastSubscriber: java.lang.Object call(java.lang.Object)>
<okio.Buffer: okio.Buffer writeTo(java.io.OutputStream,long)>
<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>
<rx.internal.util.ActionSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.Page$StartScreencastRequest: void <init>()>
<rx.internal.operators.OperatorTakeWhile$1: java.lang.Object call(java.lang.Object,java.lang.Object)>
<retrofit2.ServiceMethod$Builder: java.lang.RuntimeException methodError(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void unsubscribe()>
<com.squareup.picasso.Cache$1: void set(java.lang.String,android.graphics.Bitmap)>
<okhttp3.internal.cache.DiskLruCache$Editor: void abort()>
<rx.internal.operators.OperatorTake: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor$ElementContext: void onTextChanged(java.lang.CharSequence,int,int,int)>
<okhttp3.Cache$Entry: void writeTo(okhttp3.internal.cache.DiskLruCache$Editor)>
<okhttp3.internal.http.HttpHeaders: int parseSeconds(java.lang.String,int)>
<rx.internal.operators.OperatorWithLatestFrom$1: void onCompleted()>
<com.squareup.picasso.Cache$1: int maxSize()>
<com.squareup.picasso.ResourceRequestHandler: com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request,int)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void onNext(java.lang.Object)>
<okhttp3.CertificatePinner$Pin: void <init>(java.lang.String,java.lang.String)>
<rx.observers.Subscribers: rx.Subscriber create(rx.functions.Action1,rx.functions.Action1,rx.functions.Action0)>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin$ThrowRunnable: void run()>
<com.squareup.picasso.Downloader$Response: android.graphics.Bitmap getBitmap()>
<retrofit2.BuiltInConverters$ToStringConverter: void <clinit>()>
<com.squareup.picasso.RequestHandler$Result: com.squareup.picasso.Picasso$LoadedFrom getLoadedFrom()>
<okio.ForwardingSource: void <init>(okio.Source)>
<rx.internal.util.unsafe.SpmcArrayQueueProducerIndexCacheField: void svProducerIndexCache(long)>
<com.squareup.picasso.Picasso$RequestTransformer: void <clinit>()>
<rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl: java.lang.Object generateState()>
<com.squareup.picasso.Dispatcher: void dispatchResumeTag(java.lang.Object)>
<rx.functions.Action3: void call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: void soElement(java.lang.Object[],long,java.lang.Object)>
<com.squareup.picasso.BitmapHunter$2: void <init>()>
<rx.internal.operators.OperatorDelay$1$3: void <init>(rx.internal.operators.OperatorDelay$1,java.lang.Object)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void innerNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.Document: void findMatchingElements(java.lang.String,com.facebook.stetho.common.Accumulator)>
<rx.observables.BlockingObservable$8: void <init>(rx.observables.BlockingObservable)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$$Lambda$2: void <init>(fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter,fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Drink)>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager: void signalItemRemoved(com.facebook.stetho.inspector.protocol.module.DOMStorage$StorageId,java.lang.String)>
<okio.RealBufferedSink: long writeAll(okio.Source)>
<okhttp3.Call$Factory: okhttp3.Call newCall(okhttp3.Request)>
<rx.Observable: rx.Observable error(java.lang.Throwable)>
<com.squareup.picasso.Stats$StatsHandler$1: void run()>
<okio.RealBufferedSink: okio.BufferedSink writeInt(int)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber: void onCompleted()>
<rx.plugins.RxJavaSingleExecutionHook: java.lang.Throwable onSubscribeError(java.lang.Throwable)>
<rx.subjects.PublishSubject: void onCompleted()>
<okhttp3.internal.platform.JdkWithJettyBootPlatform: okhttp3.internal.platform.Platform buildIfSupported()>
<rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber: void onError(java.lang.Throwable)>
<rx.Completable$31: void <init>(rx.Completable,rx.functions.Func0)>
<com.squareup.picasso.Dispatcher: void dispatchFailed(com.squareup.picasso.BitmapHunter)>
<rx.internal.operators.OperatorDematerialize: rx.Subscriber call(rx.Subscriber)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter: void <init>(java.lang.reflect.Type,rx.Scheduler)>
<okhttp3.CacheControl: int sMaxAgeSeconds()>
<okio.SegmentedByteString: java.lang.String toString()>
<rx.internal.util.atomic.LinkedQueueNode: void <init>()>
<rx.Single: rx.Observable concat(rx.Single,rx.Single,rx.Single,rx.Single)>
<rx.internal.operators.OperatorZip: void <init>(rx.functions.Func5)>
<rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber: void onCompleted()>
<okhttp3.internal.framed.FrameReader$Handler: void ping(boolean,int,int)>
<okio.ForwardingTimeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>
<rx.Completable: rx.Completable onErrorComplete()>
<rx.observables.AsyncOnSubscribe: rx.observables.AsyncOnSubscribe createStateless(rx.functions.Action2)>
<rx.Observable: rx.Observable buffer(rx.functions.Func0)>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func3)>
<rx.internal.operators.OperatorBufferWithSize$BufferExact: void onCompleted()>
<rx.exceptions.CompositeException$WrappedPrintWriter: void println(java.lang.Object)>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: void <init>()>
<rx.internal.producers.ProducerObserverArbiter: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4: void setProducer(rx.Producer)>
<com.facebook.stetho.inspector.elements.Descriptor: void initialize(com.facebook.stetho.inspector.elements.Descriptor$Host)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator config(android.graphics.Bitmap$Config)>
<rx.internal.operators.OnSubscribeJoin: void call(rx.Subscriber)>
<rx.internal.util.UtilityFunctions$1: void <init>()>
<rx.subscriptions.Subscriptions$Unsubscribed: void unsubscribe()>
<rx.subscriptions.MultipleAssignmentSubscription$State: void <init>(boolean,rx.Subscription)>
<rx.subjects.TestSubject$3: void call()>
<com.facebook.stetho.inspector.helper.ChromePeerManager: void setListener(com.facebook.stetho.inspector.helper.PeerRegistrationListener)>
<rx.internal.util.UtilityFunctions$AlwaysFalse: rx.internal.util.UtilityFunctions$AlwaysFalse valueOf(java.lang.String)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: void spElement(int,java.lang.Object)>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void collect(java.util.Collection)>
<com.facebook.stetho.inspector.protocol.module.DOM$5: void <init>(com.facebook.stetho.inspector.protocol.module.DOM,com.facebook.stetho.inspector.protocol.module.DOM$SetAttributesAsTextRequest)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProviderFactory: void verifyThreadAccess()>
<rx.internal.operators.OperatorBufferWithSize$BufferOverlap: rx.Producer createProducer()>
<com.facebook.stetho.common.ListUtil$FourItemImmutableList: int size()>
<rx.Observable: rx.Observable mergeWith(rx.Observable)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber$2: void <init>(rx.internal.operators.OperatorWindowWithTime$InexactSubscriber,rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject)>
<rx.Observable: rx.Observable amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.CachedObservable$CacheState: void addProducer(rx.internal.operators.CachedObservable$ReplayProducer)>
<rx.internal.operators.OperatorPublish$1: void <init>(java.util.concurrent.atomic.AtomicReference)>
<rx.internal.operators.OperatorTakeUntil$2: void onError(java.lang.Throwable)>
<com.facebook.stetho.server.LeakyBufferedInputStream: void throwIfLeaked()>
<okhttp3.internal.framed.Http2: java.lang.IllegalArgumentException illegalArgument(java.lang.String,java.lang.Object[])>
<com.facebook.stetho.common.LogRedirector: void v(java.lang.String,java.lang.String)>
<rx.internal.operators.OperatorZip$ZipProducer: void request(long)>
<com.facebook.stetho.dumpapp.DumpappSocketLikeHandler: java.lang.String[] readArgs(com.facebook.stetho.dumpapp.Framer)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>
<rx.internal.operators.OperatorToObservableSortedList$2: void onNext(java.lang.Object)>
<com.facebook.stetho.websocket.SimpleEndpoint: void onMessage(com.facebook.stetho.websocket.SimpleSession,byte[],int)>
<rx.internal.operators.OperatorBufferWithSingleObservable$2: void onCompleted()>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: void setItemClickListener(fr.masciulli.drinks.ui.adapter.ItemClickListener)>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void drain()>
<com.squareup.picasso.OkHttpDownloader: com.squareup.okhttp.OkHttpClient defaultOkHttpClient()>
<rx.internal.util.InternalObservableUtils$PlusOneLongFunc2: java.lang.Long call(java.lang.Long,java.lang.Object)>
<retrofit2.http.HEAD: java.lang.String value()>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: java.lang.Object lpElement(int)>
<rx.internal.operators.OperatorDoOnEach: void <init>(rx.Observer)>
<rx.Observable: rx.Observable ignoreElements()>
<rx.exceptions.CompositeException$WrappedPrintWriter: java.lang.Object lock()>
<rx.internal.operators.OnSubscribePublishMulticast: void <clinit>()>
<com.facebook.stetho.inspector.protocol.module.Runtime$2: void onDisconnect()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: android.content.res.Resources getResources(java.lang.Object)>
<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>
<rx.Single$18: void onCompleted()>
<rx.Completable$5: void call(rx.Completable$CompletableSubscriber)>
<com.facebook.stetho.common.android.FragmentCompatFramework: void <init>()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: android.view.View getView(java.lang.Object)>
<rx.subscriptions.RefCountSubscription: rx.Subscription get()>
<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>
<okhttp3.internal.framed.Hpack$Reader: int dynamicTableIndex(int)>
<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,okhttp3.RealCall$1)>
<okhttp3.internal.connection.RealConnection: okhttp3.Request createTunnelRequest()>
<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>
<rx.internal.operators.OperatorMerge: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorTimestamp$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorZip$ZipSubscriber: void onCompleted()>
<rx.internal.operators.OperatorSingle$ParentSubscriber: void onError(java.lang.Throwable)>
<com.squareup.picasso.Utils: void log(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.squareup.picasso.MarkableInputStream: void skip(long,long)>
<rx.internal.operators.OperatorOnBackpressureLatest: void <init>()>
<rx.internal.util.ScalarSynchronousSingle: java.lang.Object get()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.lang.Object peek()>
<rx.internal.operators.OperatorSwitch$InnerSubscriber: void onCompleted()>
<rx.internal.operators.OnSubscribeUsing: void <init>(rx.functions.Func0,rx.functions.Func1,rx.functions.Action1,boolean)>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager: java.lang.String getFilename(java.lang.String)>
<rx.internal.util.LinkedArrayList: java.lang.Object[] tail()>
<rx.internal.operators.OperatorWindowWithObservableFactory: rx.Subscriber call(rx.Subscriber)>
<com.squareup.picasso.BitmapHunter: boolean shouldRetry(boolean,android.net.NetworkInfo)>
<okio.Timeout$1: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>
<rx.android.MainThreadSubscription: void <init>()>
<rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer: void <init>(rx.Subscriber,java.lang.Object)>
<rx.Observable: rx.Observable interval(long,long,java.util.concurrent.TimeUnit)>
<rx.schedulers.TimeInterval: int hashCode()>
<rx.observers.Subscribers$5: void <init>(rx.Subscriber,rx.Subscriber)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: android.view.View getViewForHighlighting(java.lang.Object)>
<com.squareup.picasso.Picasso$CleanupThread: void <init>(java.lang.ref.ReferenceQueue,android.os.Handler)>
<rx.Single: rx.Observable merge(rx.Single,rx.Single)>
<rx.subjects.TestSubject: void onCompleted()>
<rx.exceptions.OnErrorFailedException: void <init>(java.lang.Throwable)>
<com.squareup.picasso.FileRequestHandler: int getFileExifRotation(android.net.Uri)>
<rx.subscriptions.Subscriptions: void <init>()>
<rx.Observable: rx.Observable zip(rx.Observable,rx.Observable,rx.functions.Func2)>
<com.squareup.picasso.Picasso$Priority: void <init>(java.lang.String,int)>
<com.facebook.stetho.dumpapp.ArgsHelper: java.lang.String nextOptionalArg(java.util.Iterator,java.lang.String)>
<rx.Single: rx.Single fromCallable(java.util.concurrent.Callable)>
<okhttp3.internal.framed.FramedStream: okio.Sink getSink()>
<rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber: void onError(java.lang.Throwable)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall: void enqueue(retrofit2.Callback)>
<okhttp3.internal.http.HttpHeaders: int skipWhitespace(java.lang.String,int)>
<okhttp3.Cache$Entry: void <clinit>()>
<okhttp3.internal.framed.Ping: void cancel()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: void soNext(java.util.concurrent.atomic.AtomicReferenceArray,java.util.concurrent.atomic.AtomicReferenceArray)>
<com.facebook.stetho.inspector.protocol.module.DOM$6: void <init>(com.facebook.stetho.inspector.protocol.module.DOM,com.facebook.stetho.inspector.protocol.module.DOM$SetInspectModeEnabledRequest)>
<rx.subscriptions.RefCountSubscription: void unsubscribeActualIfApplicable(rx.subscriptions.RefCountSubscription$State)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber: void onError(java.lang.Throwable)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void <init>()>
<okhttp3.RealCall$AsyncCall: okhttp3.RealCall get()>
<rx.internal.operators.CompletableOnSubscribeTimeout$1$1: void onError(java.lang.Throwable)>
<retrofit2.ParameterHandler$Path: void <init>(java.lang.String,retrofit2.Converter,boolean)>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$1: void call()>
<com.facebook.stetho.common.android.ViewUtil: boolean isHittable(android.view.View)>
<com.facebook.stetho.dumpapp.DumpappOutputBrokenException: void <init>()>
<rx.Single: rx.Single zip(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.functions.Func6)>
<okhttp3.internal.framed.NameValueBlockReader: okio.ByteString readByteString()>
<rx.internal.util.IndexedRingBuffer$1: void <init>()>
<com.facebook.stetho.inspector.elements.Document: void releaseChildEventingList(com.facebook.stetho.inspector.elements.Document$ChildEventingList)>
<okhttp3.internal.framed.Http2: void writeMedium(okio.BufferedSink,int)>
<rx.internal.operators.OnSubscribeRedo$3$1: void setProducer(rx.Producer)>
<okhttp3.internal.http.HttpDate$1: java.lang.Object initialValue()>
<com.facebook.stetho.inspector.network.NetworkEventReporter: void responseHeadersReceived(com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse)>
<com.facebook.stetho.server.http.LightHttpBody: void writeTo(java.io.OutputStream)>
<rx.internal.operators.OperatorToMultimap$1: void onCompleted()>
<rx.exceptions.Exceptions: java.lang.RuntimeException propagate(java.lang.Throwable)>
<com.facebook.stetho.common.LogRedirector: void log(int,java.lang.String,java.lang.String)>
<rx.Completable$28: void onError(java.lang.Throwable)>
<rx.subjects.UnicastSubject$State: void request(long)>
<okhttp3.internal.framed.FramedStream$StreamTimeout: void <init>(okhttp3.internal.framed.FramedStream)>
<okio.ByteString: okio.ByteString of(byte[],int,int)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: boolean drain(java.util.List)>
<rx.internal.operators.OnSubscribeFlattenIterable$1: void request(long)>
<rx.internal.operators.OnSubscribePublishMulticast: void <init>(int,boolean)>
<rx.functions.Functions$14: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber: void onCompleted()>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: void <init>()>
<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Response)>
<rx.internal.operators.OperatorZip: void <init>(rx.functions.Func6)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: void soProducerIndex(long)>
<okio.BufferedSink: void flush()>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)>
<okhttp3.internal.cache.CacheStrategy$Factory: boolean isFreshnessLifetimeHeuristic()>
<okhttp3.internal.framed.FramedConnection: okhttp3.internal.framed.FramedStream getStream(int)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber: void scheduleChunk()>
<retrofit2.Call: boolean isExecuted()>
<rx.Single$9: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.OnSubscribeAmb: void <init>(java.lang.Iterable)>
<com.squareup.picasso.NetworkRequestHandler: boolean shouldRetry(boolean,android.net.NetworkInfo)>
<com.squareup.picasso.Dispatcher: void markForReplay(com.squareup.picasso.Action)>
<rx.internal.util.InternalObservableUtils: rx.functions.Func1 equalsWith(java.lang.Object)>
<rx.observables.BlockingObservable: java.lang.Object last()>
<okhttp3.FormBody: java.lang.String value(int)>
<rx.subjects.BehaviorSubject: boolean hasCompleted()>
<rx.internal.operators.SingleOperatorZip$1: void call(rx.SingleSubscriber)>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer: void request(long)>
<rx.internal.operators.OperatorObserveOn: void <init>(rx.Scheduler,boolean)>
<rx.internal.util.ActionNotificationObserver: void onError(java.lang.Throwable)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: boolean onQueryTextSubmit(java.lang.String)>
<okhttp3.internal.cache.DiskLruCache$Editor$1: void onException(java.io.IOException)>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable: void <init>(java.lang.Iterable)>
<com.facebook.stetho.inspector.protocol.module.Page: void clearGeolocationOverride(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<okhttp3.MultipartBody: void writeTo(okio.BufferedSink)>
<okhttp3.internal.http.Http2xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: boolean isComplete()>
<rx.Observable: rx.Observable switchMapDelayError(rx.functions.Func1)>
<okhttp3.internal.framed.FramedConnection$Reader: void rstStream(int,okhttp3.internal.framed.ErrorCode)>
<rx.internal.operators.OnSubscribePublishMulticast$PublishProducer: void <init>(rx.Subscriber,rx.internal.operators.OnSubscribePublishMulticast)>
<rx.internal.util.unsafe.MpscLinkedQueue: java.lang.Object poll()>
<rx.functions.Actions: rx.functions.Func8 toFunc(rx.functions.Action8)>
<rx.Observable: rx.Observable scan(rx.functions.Func2)>
<rx.internal.producers.QueuedProducer: void onError(java.lang.Throwable)>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler$MagicMatcher: boolean matches(java.io.InputStream)>
<rx.internal.operators.OnSubscribeTimerPeriodically: void <init>(long,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorMulticast$2: void <init>(rx.internal.operators.OperatorMulticast,java.util.concurrent.atomic.AtomicReference)>
<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,okio.ByteString)>
<rx.internal.util.unsafe.SpscLinkedQueue: boolean offer(java.lang.Object)>
<okio.Buffer$1: void write(int)>
<com.facebook.stetho.inspector.protocol.module.Profiler: void <init>()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean contains(java.lang.Object)>
<rx.subjects.AsyncSubject: void onCompleted()>
<com.facebook.stetho.server.http.ExactPathMatcher: void <init>(java.lang.String)>
<rx.internal.operators.OperatorZipIterable$1: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable doOnEach(rx.Observer)>
<rx.internal.operators.OperatorTimeoutWithSelector$2$1: void onCompleted()>
<rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$1: void call()>
<okio.BufferedSink: okio.BufferedSink writeInt(int)>
<rx.internal.operators.OperatorSwitchIfEmpty: void <init>(rx.Observable)>
<rx.internal.operators.BlockingOperatorNext$NextIterator: void <init>(rx.Observable,rx.internal.operators.BlockingOperatorNext$NextObserver)>
<rx.Single$19$1$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber: void cleanup()>
<rx.internal.operators.OperatorToMultimap: void <init>(rx.functions.Func1,rx.functions.Func1)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$1: int compare(com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty,com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty)>
<com.facebook.stetho.inspector.protocol.module.Database: java.util.ArrayList flattenRows(android.database.Cursor,int)>
<rx.subjects.SubjectSubscriptionManager$State: rx.subjects.SubjectSubscriptionManager$State remove(rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<com.facebook.stetho.common.android.ViewUtil$ViewCompat$ViewCompatHoneycomb: float getAlpha(android.view.View)>
<okio.Buffer: boolean request(long)>
<rx.internal.operators.OperatorTakeLast$TakeLastSubscriber: void requestMore(long)>
<rx.internal.util.ScalarSynchronousSingle$2$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture: void call(java.lang.Object)>
<rx.internal.operators.EmptyObservableHolder: void call(rx.Subscriber)>
<okhttp3.FormBody: java.lang.String encodedName(int)>
<com.facebook.stetho.common.android.HandlerUtil: void <init>()>
<rx.internal.operators.OnSubscribePublishMulticast$PublishProducer: void request(long)>
<rx.schedulers.TestScheduler$InnerTestScheduler: rx.Subscription schedule(rx.functions.Action0)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node: void <init>(java.lang.Object)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager: void errorAll(java.lang.Throwable)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$DialogFragmentAccessorSupportLib: android.app.Dialog getDialog(android.support.v4.app.DialogFragment)>
<rx.internal.util.OpenHashSet: void <init>()>
<com.squareup.picasso.Cache$1: void clear()>
<rx.Observable: rx.Observable reduce(java.lang.Object,rx.functions.Func2)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.DOM$SetAttributesAsTextRequest: void <init>()>
<com.facebook.stetho.inspector.protocol.module.DOMStorage$DomStorageItemsClearedParams: void <init>()>
<rx.internal.operators.OperatorSwitch: java.lang.Object call(java.lang.Object)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean removeAll(java.util.Collection)>
<rx.internal.operators.BlockingOperatorMostRecent$1: java.util.Iterator iterator()>
<rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorPublish$PublishSubscriber: void onError(java.lang.Throwable)>
<rx.functions.Functions$10: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: java.lang.Object leaveTransform(java.lang.Object)>
<okio.BufferedSink: long writeAll(okio.Source)>
<rx.internal.schedulers.ScheduledAction$Remover2: void unsubscribe()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: android.view.View getViewForHighlighting(java.lang.Object)>
<com.squareup.picasso.BitmapHunter: int getMemoryPolicy()>
<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite()>
<rx.internal.operators.OperatorDistinct: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: com.facebook.stetho.common.android.FragmentCompatSupportLib$DialogFragmentAccessorSupportLib forDialogFragment()>
<rx.internal.operators.OperatorDelayWithSelector: rx.Subscriber call(rx.Subscriber)>
<rx.internal.util.unsafe.UnsafeAccess: int getAndAddInt(java.lang.Object,long,int)>
<com.facebook.stetho.common.android.ViewUtil: android.app.Activity tryGetActivity(android.content.Context)>
<rx.internal.operators.OperatorGroupBy$State: void drain()>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<okio.Pipe$PipeSource: void close()>
<com.squareup.picasso.MarkableInputStream: int available()>
<okio.RealBufferedSource: byte[] readByteArray(long)>
<okio.Okio$3: void timedOut()>
<rx.internal.util.unsafe.SpmcArrayQueue: java.lang.Object poll()>
<okio.RealBufferedSource: java.io.InputStream inputStream()>
<rx.Observable: rx.Observable onErrorReturn(rx.functions.Func1)>
<okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>
<retrofit2.adapter.rxjava.CompletableHelper$CompletableCallAdapter: java.lang.reflect.Type responseType()>
<okhttp3.Cache: void evictAll()>
<rx.plugins.RxJavaErrorHandler: java.lang.String handleOnNextValueRendering(java.lang.Object)>
<rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$1: void <init>(rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker,rx.functions.Action0)>
<rx.internal.operators.OperatorOnBackpressureBuffer: java.lang.Object call(java.lang.Object)>
<okhttp3.internal.framed.Settings: int getInitialWindowSize(int)>
<com.facebook.stetho.websocket.MaskingHelper: void unmask(byte[],byte[],int,int)>
<com.facebook.stetho.common.android.FragmentCompatFramework: java.lang.Class getFragmentActivityClass()>
<okhttp3.ResponseBody: java.nio.charset.Charset charset()>
<rx.subjects.BehaviorSubject: rx.subjects.BehaviorSubject create(java.lang.Object,boolean)>
<rx.internal.util.unsafe.SpmcArrayQueue: void <init>(int)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: boolean writeToQueue(java.lang.Object[],java.lang.Object,long,long)>
<okhttp3.internal.cache.CacheInterceptor$1: okio.BufferedSource source()>
<okio.Pipe: void <init>(long)>
<okio.Buffer: java.lang.String readUtf8Line()>
<rx.internal.util.IndexedRingBuffer$1: java.lang.Object createObject()>
<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader$NewLineDetector: int state()>
<com.facebook.stetho.common.ExceptionUtil: void sneakyThrow(java.lang.Throwable)>
<rx.internal.operators.BufferUntilSubscriber: void onError(java.lang.Throwable)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: void putStringSet(android.content.SharedPreferences$Editor,java.lang.String,java.util.Iterator)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot: com.facebook.stetho.inspector.elements.NodeType onGetNodeType(java.lang.Object)>
<rx.internal.operators.OperatorScan$InitialProducer: void onError(java.lang.Throwable)>
<rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl: void <init>(rx.functions.Func0,rx.functions.Func2)>
<rx.subjects.ReplaySubject: void <clinit>()>
<rx.subjects.ReplaySubject: rx.subjects.ReplaySubject createUnbounded()>
<rx.internal.util.ScalarSynchronousSingle: rx.internal.util.ScalarSynchronousSingle create(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatFramework: java.lang.Class getFragmentClass()>
<rx.internal.util.RxRingBuffer: boolean isError(java.lang.Object)>
<rx.internal.operators.OperatorPublish$1: void call(java.lang.Object)>
<rx.schedulers.TestScheduler: void <init>()>
<com.facebook.stetho.inspector.elements.Document$4: void store(java.lang.Object)>
<rx.internal.operators.OperatorBufferWithTime$ExactSubscriber: void onNext(java.lang.Object)>
<okhttp3.internal.io.FileSystem: boolean exists(java.io.File)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.protocol.module.Console$MessageSource: com.facebook.stetho.inspector.protocol.module.Console$MessageSource[] values()>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: boolean contains(java.lang.Object)>
<okhttp3.internal.framed.Http2$ContinuationSource: void close()>
<rx.internal.producers.QueuedProducer: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: void <init>(rx.Subscriber)>
<rx.internal.util.BackpressureDrainManager$BackpressureQueueCallback: java.lang.Object peek()>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader: java.lang.String readLine()>
<rx.Observable: rx.Observable combineLatest(rx.Observable,rx.Observable,rx.functions.Func2)>
<rx.internal.operators.OperatorOnBackpressureDrop: void <init>(rx.functions.Action1)>
<rx.Completable$11$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorDelayWithSelector$1: void onError(java.lang.Throwable)>
<okio.RealBufferedSource: long indexOf(okio.ByteString,long)>
<okhttp3.MultipartBody$Builder: okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String)>
<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>
<rx.subjects.ReplaySubject: void onCompleted()>
<rx.Observable: rx.Observable skip(long,java.util.concurrent.TimeUnit)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: void soConsumerIndex(long)>
<rx.Completable: rx.Completable delay(long,java.util.concurrent.TimeUnit,rx.Scheduler,boolean)>
<fr.masciulli.drinks.ui.activity.DrinkActivity: void <clinit>()>
<okhttp3.ResponseBody$1: long contentLength()>
<com.facebook.stetho.server.CompositeInputStream: void <init>(java.io.InputStream[])>
<rx.Completable$5: void call(java.lang.Object)>
<okio.Buffer: okio.Buffer copyTo(okio.Buffer,long,long)>
<com.facebook.stetho.inspector.protocol.module.DOM$ResolveNodeResponse: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<rx.subscriptions.BooleanSubscription: rx.subscriptions.BooleanSubscription create()>
<rx.Observable: rx.Observable combineLatestDelayError(java.lang.Iterable,rx.functions.FuncN)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$PaddingTopHighlightDrawable: void <init>()>
<rx.internal.operators.OperatorDematerialize$1: void onError(java.lang.Throwable)>
<rx.Completable$15: void <init>(rx.Completable,java.util.concurrent.CountDownLatch,java.lang.Throwable[])>
<fr.masciulli.drinks.model.Liquor: void <clinit>()>
<rx.internal.operators.OperatorSubscribeOn$1$1$1$1: void <init>(rx.internal.operators.OperatorSubscribeOn$1$1$1,long)>
<rx.observers.TestSubscriber$1: void onCompleted()>
<rx.internal.operators.OperatorSkipUntil$2: void onNext(java.lang.Object)>
<com.facebook.stetho.dumpapp.Framer: byte readFrameType()>
<okhttp3.ResponseBody: java.lang.String string()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator skipMemoryCache()>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void lambda$bindHeaderHolder$0(fr.masciulli.drinks.ui.adapter.holder.RelatedHeaderViewHolder,android.view.View)>
<retrofit2.ParameterHandler$FieldMap: void apply(retrofit2.RequestBuilder,java.util.Map)>
<com.facebook.stetho.inspector.protocol.module.DOM$1: java.lang.Object call()>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void next(java.lang.Object)>
<rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorGroupBy$GroupByProducer: void request(long)>
<rx.internal.operators.OperatorMerge$InnerSubscriber: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.Origin: void <init>(java.lang.String,int,java.lang.String)>
<rx.plugins.RxJavaPlugins: void registerObservableExecutionHook(rx.plugins.RxJavaObservableExecutionHook)>
<okhttp3.internal.tls.DistinguishedNameParser: java.lang.String quotedAV()>
<rx.Observable: rx.Observable startWith(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.squareup.picasso.Picasso$CleanupThread: void run()>
<okhttp3.internal.cache.DiskLruCache$3: java.lang.Object next()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String mapIntToStringUsingAnnotation(int,android.view.ViewDebug$ExportedProperty)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: boolean connectionReused()>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void setupRecyclerView()>
<rx.Observable: rx.Observable mergeDelayError(java.lang.Iterable,int)>
<com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: java.lang.String url()>
<okhttp3.internal.framed.PushObserver: void onReset(int,okhttp3.internal.framed.ErrorCode)>
<rx.internal.operators.SingleOperatorOnErrorResumeNext$1: java.lang.Object call(java.lang.Object)>
<rx.internal.util.InternalObservableUtils: rx.functions.Func1 createReplaySelectorAndObserveOn(rx.functions.Func1,rx.Scheduler)>
<com.facebook.stetho.inspector.helper.ChromePeerManager: boolean hasRegisteredPeers()>
<rx.subjects.ReplaySubject: int size()>
<rx.internal.util.ScalarSynchronousObservable$3: void call(rx.Subscriber)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProviderFactory: boolean checkThreadAccess()>
<com.squareup.picasso.Request: void <init>(android.net.Uri,int,java.lang.String,java.util.List,int,int,boolean,boolean,boolean,float,float,float,boolean,android.graphics.Bitmap$Config,com.squareup.picasso.Picasso$Priority,com.squareup.picasso.Request$1)>
<okhttp3.internal.framed.Settings: boolean persistValue(int)>
<rx.internal.util.atomic.SpscAtomicArrayQueue: void <clinit>()>
<com.facebook.stetho.inspector.network.ResourceTypeHelper: void <init>()>
<okhttp3.Cache: void initialize()>
<okhttp3.internal.platform.Platform: byte[] concatLengthPrefixed(java.util.List)>
<rx.internal.operators.OperatorDistinctUntilChanged: rx.Subscriber call(rx.Subscriber)>
<okio.GzipSink: void writeFooter()>
<rx.internal.operators.OperatorReplay: rx.observables.ConnectableObservable create(rx.Observable,int)>
<rx.internal.util.atomic.SpscAtomicArrayQueue: void soProducerIndex(long)>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorTimeoutWithSelector$2$1: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Runtime: com.facebook.stetho.inspector.protocol.module.Runtime$CallFunctionOnResponse callFunctionOn(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator placeholder(int)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void onUnhook(java.lang.Object)>
<rx.internal.operators.SingleOperatorZip$1$1: void onSuccess(java.lang.Object)>
<rx.internal.operators.BlockingOperatorToFuture$2: boolean isCancelled()>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: void <init>()>
<rx.Completable$22$1$1: void <init>(rx.Completable$22$1)>
<okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult valueOf(java.lang.String)>
<fr.masciulli.drinks.model.Liquor$1: java.lang.Object[] newArray(int)>
<com.facebook.stetho.dumpapp.Framer: java.lang.Throwable handleSuppression(java.lang.Throwable,java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.DescriptorMap: com.facebook.stetho.inspector.elements.Descriptor getImpl(java.lang.Class)>
<okhttp3.internal.framed.FramedConnection: void writePingLater(boolean,int,int,okhttp3.internal.framed.Ping)>
<com.facebook.stetho.common.android.HandlerUtil$2: void <init>(java.lang.Runnable)>
<rx.exceptions.Exceptions: void throwOrReport(java.lang.Throwable,rx.Observer,java.lang.Object)>
<rx.Single$17: void onError(java.lang.Throwable)>
<rx.internal.util.ScalarSynchronousObservable$2$1: void <init>(rx.internal.util.ScalarSynchronousObservable$2,rx.functions.Action0,rx.Scheduler$Worker)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot: void onGetChildren(com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot,com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OperatorOnBackpressureBuffer: void <init>(long,rx.functions.Action0)>
<com.facebook.stetho.common.android.FragmentCompatFramework: com.facebook.stetho.common.android.FragmentActivityAccessor forFragmentActivity()>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseObject: void <init>()>
<com.facebook.stetho.inspector.jsonrpc.PendingRequest: void <init>(long,com.facebook.stetho.inspector.jsonrpc.PendingRequestCallback)>
<rx.internal.operators.OperatorDoOnSubscribe: void <init>(rx.functions.Action0)>
<rx.Single$4: void call(java.lang.Object)>
<rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef: void <init>()>
<okhttp3.Cookie: long parseExpires(java.lang.String,int,int)>
<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate)>
<rx.observers.SerializedObserver$FastList: void <init>()>
<rx.schedulers.TestScheduler$InnerTestScheduler: boolean isUnsubscribed()>
<rx.internal.operators.OperatorToMultimap$1: void <init>(rx.internal.operators.OperatorToMultimap,rx.Subscriber,java.util.Map,rx.Subscriber)>
<rx.observables.BlockingObservable: java.lang.Object blockForSingle(rx.Observable)>
<com.facebook.stetho.inspector.elements.android.HighlightableDescriptor: android.view.View getViewForHighlighting(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithTime$State: void <init>(rx.Observer,rx.Observable,int)>
<fr.masciulli.drinks.ui.EnterPostponeTransitionCallback: void <clinit>()>
<okhttp3.internal.framed.FramedStream$FramedDataSource: void <init>(okhttp3.internal.framed.FramedStream,long,okhttp3.internal.framed.FramedStream$1)>
<rx.internal.operators.OperatorMerge: java.lang.Object call(java.lang.Object)>
<rx.internal.util.unsafe.UnsafeAccess: boolean compareAndSwapInt(java.lang.Object,long,int,int)>
<rx.Observable: rx.Observable range(int,int,rx.Scheduler)>
<rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1: void <init>(rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver)>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: boolean recover(java.io.IOException,boolean,okhttp3.Request)>
<rx.internal.operators.OperatorTake$1: void onError(java.lang.Throwable)>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: int size()>
<retrofit2.Converter$Factory: retrofit2.Converter responseBodyConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorHeaders: java.lang.String headerValue(int)>
<okhttp3.internal.http.Http1xStream: void cancel()>
<rx.internal.util.IndexedRingBuffer: rx.internal.util.IndexedRingBuffer$IndexSection getIndexSection(int)>
<rx.Observable: rx.Observable startWith(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.squareup.picasso.Utils: void log(java.lang.String,java.lang.String,java.lang.String)>
<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>
<retrofit2.ParameterHandler$1: void apply(retrofit2.RequestBuilder,java.lang.Iterable)>
<rx.internal.operators.OperatorPublish$PublishSubscriber: void dispatch()>
<okio.AsyncTimeout: java.io.IOException exit(java.io.IOException)>
<rx.internal.operators.BackpressureUtils: long getAndAddRequest(java.util.concurrent.atomic.AtomicLongFieldUpdater,java.lang.Object,long)>
<rx.Observable: rx.Observable window(long,java.util.concurrent.TimeUnit,int)>
<rx.internal.operators.OperatorToMap$1: void <init>(rx.internal.operators.OperatorToMap,rx.Subscriber,java.util.Map,rx.Subscriber)>
<rx.internal.util.LinkedArrayList: java.lang.Object[] head()>
<okio.Buffer: okio.BufferedSink emit()>
<rx.Completable: rx.Completable repeatWhen(rx.functions.Func1)>
<com.facebook.stetho.inspector.protocol.module.CSS$GetMatchedStylesForNodeRequest: void <init>()>
<fr.masciulli.drinks.net.ConnectivityChecker: void <init>(android.content.Context)>
<okhttp3.internal.platform.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void onStart()>
<rx.internal.operators.SingleOperatorZip$1: void <init>(rx.Single[],rx.functions.FuncN)>
<rx.internal.operators.OnSubscribeFlattenIterable: void call(java.lang.Object)>
<okio.Buffer: long indexOf(byte)>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void writeLine(java.lang.String)>
<rx.internal.schedulers.ScheduledAction$Remover2: void <init>(rx.internal.schedulers.ScheduledAction,rx.internal.util.SubscriptionList)>
<retrofit2.converter.gson.GsonRequestBodyConverter: java.lang.Object convert(java.lang.Object)>
<com.facebook.stetho.inspector.helper.ChromePeerManager: boolean addPeer(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<rx.Completable: void <init>(rx.Completable$CompletableOnSubscribe)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>
<com.facebook.stetho.common.ListUtil$FiveItemImmutableList: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.NotificationLite: java.lang.Object next(java.lang.Object)>
<okhttp3.internal.cache.DiskLruCache$4: void flush()>
<okhttp3.MultipartBody: java.lang.StringBuilder appendQuotedString(java.lang.StringBuilder,java.lang.String)>
<rx.internal.operators.OperatorMaterialize$Holder: void <init>()>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder resize(int,int)>
<okhttp3.Cookie: okhttp3.Cookie parse(okhttp3.HttpUrl,java.lang.String)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: void <init>(android.content.Context)>
<rx.Observable$OnSubscribeExtend: void call(rx.Subscriber)>
<okhttp3.internal.connection.RealConnection: boolean isMultiplexed()>
<rx.Observable: rx.Observable timeout(rx.functions.Func1)>
<rx.internal.util.atomic.SpscAtomicArrayQueue: boolean offer(java.lang.Object)>
<rx.schedulers.TestScheduler$InnerTestScheduler$1: void <init>(rx.schedulers.TestScheduler$InnerTestScheduler,rx.schedulers.TestScheduler$TimedAction)>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: void closeOutputStreamQuietly()>
<okhttp3.internal.http.HttpHeaders: boolean hasVaryAll(okhttp3.Headers)>
<rx.internal.util.ScalarSynchronousSingle: rx.Single scalarFlatMap(rx.functions.Func1)>
<okio.GzipSource: void close()>
<okio.GzipSource: void consumeTrailer()>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinter: com.facebook.stetho.inspector.network.PrettyPrinterDisplayType getPrettifiedType()>
<com.squareup.picasso.Picasso: android.graphics.Bitmap quickMemoryCacheCheck(java.lang.String)>
<com.facebook.stetho.inspector.helper.PeersRegisteredListener: void onPeerAdded(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<retrofit2.RequestBuilder$ContentTypeOverridingRequestBody: long contentLength()>
<rx.internal.operators.OperatorDebounceWithTime$1: void onError(java.lang.Throwable)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void unsubscribe()>
<rx.internal.util.RxRingBuffer: void unsubscribe()>
<com.squareup.picasso.Dispatcher: void logBatch(java.util.List)>
<okhttp3.internal.cache.DiskLruCache: void setMaxSize(long)>
<com.facebook.stetho.dumpapp.DumperPlugin: java.lang.String getName()>
<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.common.ArrayListAccumulator acquireChildrenAccumulator()>
<rx.Completable$9: void <init>(java.util.concurrent.Callable)>
<okhttp3.internal.cache.DiskLruCache$Editor: void commit()>
<rx.internal.util.ScalarSynchronousObservable: void <clinit>()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: org.json.JSONObject formatHeadersAsJSON(com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorHeaders)>
<okhttp3.internal.framed.Spdy3$Reader: void <init>(okio.BufferedSource,boolean)>
<okhttp3.internal.framed.FramedStream: void receiveHeaders(java.util.List,okhttp3.internal.framed.HeadersMode)>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin: void <init>()>
<rx.Producer: void request(long)>
<fr.masciulli.drinks.ui.activity.DrinkActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.facebook.stetho.inspector.protocol.module.Network: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$1: void <init>(rx.internal.operators.OperatorBufferWithStartEndObservable,rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber)>
<okhttp3.RealCall$AsyncCall: java.lang.String host()>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber$2: void call()>
<okhttp3.RequestBody$3: void writeTo(okio.BufferedSink)>
<okio.GzipSink: void close()>
<com.facebook.stetho.inspector.elements.Document$5$1: void store(java.lang.Object)>
<rx.internal.operators.CachedObservable$ReplayProducer: long produced(long)>
<com.facebook.stetho.inspector.protocol.module.Page: void notifyExecutionContexts(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<com.facebook.stetho.websocket.WebSocketSession: void close(int,java.lang.String)>
<retrofit2.Platform$Android$MainThreadExecutor: void execute(java.lang.Runnable)>
<rx.observables.BlockingObservable$8: void call(java.lang.Object)>
<rx.internal.operators.OperatorToMap$DefaultToMapFactory: java.lang.Object call()>
<rx.Observable: rx.Observable concatMapEager(rx.functions.Func1)>
<rx.internal.operators.OperatorWindowWithSize$WindowSkip: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot: java.lang.String onGetNodeName(java.lang.Object)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: boolean checkTerminate()>
<okhttp3.internal.framed.FramedStream: okio.Timeout writeTimeout()>
<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void addWithEvent(int,java.lang.Object,com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OperatorSkipTimed$1: void <init>(rx.internal.operators.OperatorSkipTimed,java.util.concurrent.atomic.AtomicBoolean)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: void spElement(long,java.lang.Object)>
<okio.RealBufferedSource$1: int read()>
<retrofit2.OkHttpCall: okhttp3.Request request()>
<okio.Buffer: int hashCode()>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor$ElementContext$1: void onActivityAdded(android.app.Activity)>
<okhttp3.RequestBody$1: okhttp3.MediaType contentType()>
<rx.Completable: rx.Completable concat(rx.Observable,int)>
<okhttp3.Cookie: int hashCode()>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorHeaders: int headerCount()>
<rx.Completable$29$1: void call()>
<rx.internal.util.unsafe.MpmcArrayQueueProducerField: boolean casProducerIndex(long,long)>
<com.facebook.stetho.common.LogRedirector: void i(java.lang.String,java.lang.String)>
<okio.HashingSink: void <init>(okio.Sink,java.lang.String)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: void soNext(java.util.concurrent.atomic.AtomicReferenceArray,java.util.concurrent.atomic.AtomicReferenceArray)>
<okhttp3.internal.framed.Huffman$Node: void <init>()>
<rx.Observable: rx.Observable onBackpressureBuffer(long,rx.functions.Action0)>
<okhttp3.OkHttpClient: boolean followRedirects()>
<rx.internal.util.ScalarSynchronousSingle$2: void <init>(rx.internal.util.ScalarSynchronousSingle,rx.functions.Func1)>
<rx.internal.operators.CompletableOnSubscribeTimeout: void call(java.lang.Object)>
<rx.internal.operators.OnSubscribeRedo$1$1: void <init>(rx.internal.operators.OnSubscribeRedo$1)>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool: void release(rx.internal.schedulers.CachedThreadScheduler$ThreadWorker)>
<okhttp3.internal.framed.Spdy3$Writer: void writeNameValueBlockToBuffer(java.util.List)>
<okhttp3.internal.http.RealInterceptorChain: okhttp3.Connection connection()>
<com.squareup.picasso.Dispatcher: void performBatchComplete()>
<okhttp3.internal.framed.Header: void <clinit>()>
<com.facebook.stetho.inspector.protocol.module.Runtime$CallFunctionOnResponse: void <init>()>
<retrofit2.OkHttpCall$1: void callSuccess(retrofit2.Response)>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$OverlayHighlighter$1: void run()>
<rx.internal.operators.OnSubscribeFromArray: void <init>(java.lang.Object[])>
<rx.functions.Func6: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: long lpProducerIndex()>
<rx.Completable$13$1: void onError(java.lang.Throwable)>
<rx.functions.Actions$4: void <init>(rx.functions.Action3,java.lang.Object)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: void nextWindow()>
<rx.internal.util.UtilityFunctions: void <clinit>()>
<rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl: void <init>(rx.functions.Func0,rx.functions.Func3,rx.functions.Action1)>
<com.facebook.stetho.inspector.domstorage.SharedPreferencesHelper: java.util.List getSharedPreferenceTags(android.content.Context)>
<rx.internal.operators.OperatorThrottleFirst: void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.websocket.WebSocketSession$2: void <init>(com.facebook.stetho.websocket.WebSocketSession)>
<com.facebook.stetho.inspector.elements.NodeDescriptor: java.lang.String getNodeName(java.lang.Object)>
<com.squareup.picasso.Request$Builder: boolean hasPriority()>
<okhttp3.internal.cache.DiskLruCache: void flush()>
<com.squareup.picasso.OkHttpDownloader: void <init>(android.content.Context,long)>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void error(java.lang.Throwable)>
<okhttp3.internal.framed.Spdy3: void <clinit>()>
<rx.Completable$16: void call(java.lang.Object)>
<okhttp3.internal.framed.Spdy3$Writer: void synReply(boolean,int,java.util.List)>
<rx.subjects.ReplaySubject$ReplayProducer: void <init>(rx.Subscriber,rx.subjects.ReplaySubject$ReplayState)>
<rx.internal.operators.OperatorMaterialize$ParentSubscriber: void onCompleted()>
<com.squareup.picasso.LruCache: void <init>(int)>
<rx.internal.operators.OperatorDelayWithSelector$1$1: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorUnsubscribeOn: java.lang.Object call(java.lang.Object)>
<okhttp3.internal.platform.Platform: void log(int,java.lang.String,java.lang.Throwable)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: void <init>(int)>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler$HandlerInfo: void <init>(com.facebook.stetho.server.ProtocolDetectingSocketHandler$MagicMatcher,com.facebook.stetho.server.SocketLikeHandler)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory: retrofit2.CallAdapter get(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<rx.internal.operators.OnSubscribeSingle$1: void onCompleted()>
<rx.Completable$13$1$1: void <init>(rx.Completable$13$1)>
<rx.internal.operators.OperatorDoOnEach$1: void onError(java.lang.Throwable)>
<rx.internal.util.PlatformDependent: void <init>()>
<com.facebook.stetho.inspector.elements.android.AccessibilityNodeInfoWrapper: java.lang.String getActions(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: void unsubscribe()>
<rx.internal.operators.OnSubscribeConcatMap: void call(rx.Subscriber)>
<okio.ByteString: int codePointIndexToCharIndex(java.lang.String,int)>
<okio.RealBufferedSource: okio.Buffer buffer()>
<rx.internal.operators.OperatorSerialize$1: void onCompleted()>
<retrofit2.BuiltInConverters$StringConverter: void <clinit>()>
<rx.internal.operators.SingleOperatorOnErrorResumeNext$1: void <init>(rx.Single)>
<com.facebook.stetho.websocket.Frame: void decodeFirstByte(byte)>
<rx.internal.operators.OperatorOnBackpressureDrop$2: void onCompleted()>
<okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>
<com.facebook.stetho.inspector.protocol.module.Page$ExecutionContextDescription: void <init>(com.facebook.stetho.inspector.protocol.module.Page$1)>
<rx.observables.AsyncOnSubscribe$5: void call(java.lang.Object)>
<rx.Observable: rx.Observable just(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<okio.Segment: void compact()>
<rx.Observable: rx.Observable takeLast(int,long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OperatorBufferWithTime$ExactSubscriber$1: void <init>(rx.internal.operators.OperatorBufferWithTime$ExactSubscriber)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void responseHeadersReceived(com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse)>
<com.facebook.stetho.inspector.protocol.module.Page$Resource: void <init>()>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void request(long)>
<okio.Buffer: okio.BufferedSink write(byte[],int,int)>
<rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void <clinit>()>
<com.facebook.stetho.server.http.HandlerRegistry: void register(com.facebook.stetho.server.http.PathMatcher,com.facebook.stetho.server.http.HttpHandler)>
<okhttp3.internal.framed.NameValueBlockReader$2: void <init>(okhttp3.internal.framed.NameValueBlockReader)>
<okhttp3.internal.io.FileSystem$1: long size(java.io.File)>
<com.squareup.picasso.Action$RequestWeakReference: void <init>(com.squareup.picasso.Action,java.lang.Object,java.lang.ref.ReferenceQueue)>
<rx.Completable$31$1: void <init>(rx.Completable$31,rx.SingleSubscriber)>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap: void drain()>
<com.facebook.stetho.inspector.helper.ThreadBoundProxy: void verifyThreadAccess()>
<com.facebook.stetho.inspector.database.DefaultDatabaseConnectionProvider: void <init>()>
<com.facebook.stetho.dumpapp.Framer$FramingOutputStream: void close()>
<com.facebook.stetho.inspector.protocol.module.DOM$PeerManagerListener: void <init>(com.facebook.stetho.inspector.protocol.module.DOM,com.facebook.stetho.inspector.protocol.module.DOM$1)>
<com.facebook.stetho.inspector.elements.android.AccessibilityNodeInfoWrapper: java.lang.String getFocusableReasons(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.View)>
<okhttp3.Response$Builder: okhttp3.Response$Builder header(java.lang.String,java.lang.String)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder stableKey(java.lang.String)>
<com.facebook.stetho.websocket.WebSocketSession: void sendClose(int,java.lang.String)>
<rx.internal.util.InternalObservableUtils$NotificationErrorExtractor: void <init>()>
<com.facebook.stetho.dumpapp.Framer$FramingOutputStream: void <init>(com.facebook.stetho.dumpapp.Framer,byte)>
<rx.internal.util.UtilityFunctions: rx.functions.Func1 alwaysFalse()>
<okhttp3.internal.framed.Http2$Writer: void headers(int,java.util.List)>
<rx.subscriptions.MultipleAssignmentSubscription$State: rx.subscriptions.MultipleAssignmentSubscription$State set(rx.Subscription)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber$2: void <init>(rx.internal.operators.OperatorWindowWithTime$ExactSubscriber)>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$NoopImpl: int provideOpenFlags(int)>
<okio.Util: boolean arrayRangeEquals(byte[],int,byte[],int,int)>
<com.facebook.stetho.common.ListUtil$TwoItemImmutableList: void <init>(java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor: void onGetAttributes(java.lang.Object,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<okhttp3.internal.framed.FramedStream$FramedDataSink: void flush()>
<rx.observables.BlockingObservable$9: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.Network$InitiatorType: com.facebook.stetho.inspector.protocol.module.Network$InitiatorType valueOf(java.lang.String)>
<rx.internal.util.ActionNotificationObserver: void onNext(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompat: com.facebook.stetho.common.android.FragmentManagerAccessor forFragmentManager()>
<com.facebook.stetho.inspector.protocol.module.Inspector: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void emitValue(java.lang.Object)>
<rx.internal.util.UtilityFunctions: rx.internal.util.UtilityFunctions$NullFunction returnNull()>
<okio.Okio$2: long read(okio.Buffer,long)>
<rx.internal.operators.OperatorTakeLastOne$ParentSubscriber: void requestMore(long)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void reportError()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean offer(java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorSingle$Holder: void <init>()>
<rx.internal.schedulers.ImmediateScheduler$InnerImmediateScheduler: rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<rx.subjects.TestSubject: void onError(java.lang.Throwable,long)>
<rx.Single$7: java.lang.Object call(java.lang.Object[])>
<rx.Observer: void onCompleted()>
<rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorTakeWhile$1: void <init>(rx.functions.Func1)>
<rx.internal.operators.OperatorUnsubscribeOn$1: void <init>(rx.internal.operators.OperatorUnsubscribeOn,rx.Subscriber)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: boolean replaceSubject()>
<rx.internal.operators.BufferUntilSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.util.List getTableNames(java.lang.String)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorRequest: java.lang.String url()>
<rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction: void <init>(rx.SingleSubscriber,java.lang.Object)>
<rx.observables.ConnectableObservable: rx.Observable refCount()>
<rx.internal.operators.OperatorTimeoutBase: rx.Subscriber call(rx.Subscriber)>
<okio.RealBufferedSink: okio.BufferedSink writeString(java.lang.String,java.nio.charset.Charset)>
<rx.internal.util.InternalObservableUtils$ToArrayFunc1: rx.Observable[] call(java.util.List)>
<com.facebook.stetho.websocket.WebSocketHandler: void doUpgrade(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpResponse)>
<rx.internal.operators.OperatorDelay$1$3: void call()>
<com.facebook.stetho.server.CompositeInputStream: void mark(int)>
<rx.internal.operators.OnSubscribeRedo: rx.Observable retry(rx.Observable,rx.functions.Func1)>
<rx.schedulers.TestScheduler$InnerTestScheduler: void unsubscribe()>
<com.facebook.stetho.inspector.elements.NodeType: com.facebook.stetho.inspector.elements.NodeType[] values()>
<okhttp3.internal.framed.FramedConnection$Builder: okhttp3.internal.framed.FramedConnection$Builder socket(java.net.Socket,java.lang.String,okio.BufferedSource,okio.BufferedSink)>
<okhttp3.internal.framed.PushObserver: boolean onHeaders(int,java.util.List,boolean)>
<rx.Completable$33: void call(java.lang.Object)>
<rx.internal.operators.OperatorWithLatestFrom: void <init>(rx.Observable,rx.functions.Func2)>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: void mark(int)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: boolean drain(rx.subjects.ReplaySubject$ReplayProducer)>
<rx.internal.operators.OperatorTake$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: void <clinit>()>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError: void <init>()>
<com.squareup.picasso.StatsSnapshot: void <init>(int,int,long,long,long,long,long,long,long,long,int,int,int,long)>
<okhttp3.internal.framed.FramedConnection$Builder: okhttp3.internal.framed.FramedConnection$Builder socket(java.net.Socket)>
<com.facebook.stetho.inspector.protocol.module.HeapProfiler$ProfileHeaderResponse: void <init>(com.facebook.stetho.inspector.protocol.module.HeapProfiler$1)>
<okhttp3.Dispatcher: int getMaxRequestsPerHost()>
<rx.subjects.BehaviorSubject: int subscriberCount()>
<rx.Observable: rx.Observable buffer(rx.Observable)>
<rx.subjects.SerializedSubject: void onCompleted()>
<rx.internal.util.InternalObservableUtils$NotificationErrorExtractor: java.lang.Throwable call(rx.Notification)>
<rx.Observable: rx.Observable skipUntil(rx.Observable)>
<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpStream stream()>
<rx.Observable: rx.Observable never()>
<com.facebook.stetho.websocket.Frame: byte[] decodeMaskingKey(java.io.InputStream)>
<com.squareup.picasso.Stats: void dispatchBitmapTransformed(android.graphics.Bitmap)>
<okhttp3.Cache$CacheRequestImpl: void abort()>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall: retrofit2.Response execute()>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1: void <init>(retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall,retrofit2.Callback)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: java.lang.String getNodeName(java.lang.Object)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void onSaveInstanceState(android.os.Bundle)>
<com.facebook.stetho.inspector.elements.DocumentProviderListener: void onPossiblyChanged()>
<rx.Observable: rx.Observable onErrorResumeNext(rx.Observable)>
<retrofit2.http.PUT: java.lang.String value()>
<rx.internal.operators.CompletableOnSubscribeConcatIterable: void call(java.lang.Object)>
<rx.internal.schedulers.GenericScheduledExecutorService: void start()>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.lang.Object executeUpdateDelete(android.database.sqlite.SQLiteDatabase,java.lang.String,com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler)>
<rx.internal.util.LinkedArrayList: java.util.List toList()>
<rx.subjects.ReplaySubject$ReplayState: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorDebounceWithSelector: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorMap$MapSubscriber: void <init>(rx.Subscriber,rx.functions.Func1)>
<fr.masciulli.drinks.model.Drink$1: fr.masciulli.drinks.model.Drink createFromParcel(android.os.Parcel)>
<rx.internal.operators.OperatorSkipLast$1: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$OverlayHighlighter: void highlightViewOnUiThread()>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: java.lang.String getTag(java.lang.Object)>
<okhttp3.internal.framed.Huffman: void <init>()>
<rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl: void <init>(rx.functions.Func3,rx.functions.Action1)>
<com.facebook.stetho.dumpapp.Framer$FramingOutputStream: void write(int)>
<com.facebook.stetho.websocket.WebSocketHandler: boolean handleRequest(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpResponse)>
<okhttp3.internal.framed.Http2$ContinuationSource: okio.Timeout timeout()>
<rx.internal.operators.OperatorIgnoreElements: void <init>()>
<com.facebook.stetho.inspector.domstorage.SharedPreferencesHelper: void <init>()>
<okhttp3.internal.framed.Http2$Reader: java.util.List readHeaderBlock(int,short,byte,int)>
<okio.Okio$2: okio.Timeout timeout()>
<okhttp3.Cache$CacheResponseBody$1: void close()>
<rx.subscriptions.CompositeSubscription: boolean isUnsubscribed()>
<rx.internal.operators.OperatorBufferWithSingleObservable$2: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: com.facebook.stetho.inspector.elements.NodeType onGetNodeType(android.app.Application)>
<rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector: void <init>(rx.Observable,rx.functions.Func0)>
<rx.observers.TestSubscriber: void assertUnsubscribed()>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: android.content.res.Resources getResources(android.app.Fragment)>
<rx.Completable: rx.Completable ambWith(rx.Completable)>
<rx.internal.util.LinkedArrayList: java.lang.String toString()>
<rx.internal.operators.OnSubscribeToObservableFuture: rx.Observable$OnSubscribe toObservableFuture(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.BufferUntilSubscriber: void emit(java.lang.Object)>
<rx.internal.schedulers.ImmediateScheduler$InnerImmediateScheduler: boolean isUnsubscribed()>
<com.facebook.stetho.inspector.helper.ThreadBoundProxy: void <init>(com.facebook.stetho.common.ThreadBound)>
<rx.internal.operators.OperatorMap$MapSubscriber: void onCompleted()>
<com.facebook.stetho.dumpapp.DumpappSocketLikeHandler: void dump(com.facebook.stetho.dumpapp.Dumper,com.facebook.stetho.dumpapp.Framer,java.lang.String[])>
<com.facebook.stetho.server.LeakyBufferedInputStream: java.io.InputStream leakBufferAndStream()>
<rx.observables.BlockingObservable: void forEach(rx.functions.Action1)>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: boolean containsObject(java.lang.Object)>
<rx.internal.util.IndexedRingBuffer$IndexSection: int getAndSet(int,int)>
<okhttp3.RealCall: boolean isExecuted()>
<rx.internal.util.ScalarSynchronousSingle: void <init>(java.lang.Object)>
<retrofit2.adapter.rxjava.CompletableHelper: void <init>()>
<rx.internal.operators.OperatorSwitchIfEmpty: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorToMultimap: java.lang.Object call(java.lang.Object)>
<com.squareup.picasso.OkHttpDownloader: void <init>(java.io.File,long)>
<rx.internal.operators.OnSubscribeAmb$AmbSubscriber: void onError(java.lang.Throwable)>
<rx.internal.util.BackpressureDrainManager$BackpressureQueueCallback: boolean accept(java.lang.Object)>
<rx.subjects.BehaviorSubject: rx.subjects.BehaviorSubject create()>
<com.facebook.stetho.server.http.RegexpPathMatcher: boolean match(java.lang.String)>
<rx.subjects.SerializedSubject: void onError(java.lang.Throwable)>
<okhttp3.Authenticator$1: okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response)>
<rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber: void onNext(java.lang.Object)>
<okio.RealBufferedSink: okio.BufferedSink write(okio.Source,long)>
<com.facebook.stetho.inspector.protocol.module.Runtime$EvaluateResponse: void <init>()>
<rx.Observable: rx.Observable compose(rx.Observable$Transformer)>
<rx.internal.operators.OperatorDistinct: java.lang.Object call(java.lang.Object)>
<rx.observers.SerializedObserver: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.network.NetworkEventReporter: void requestWillBeSent(com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorRequest)>
<okio.RealBufferedSource: long indexOfElement(okio.ByteString,long)>
<rx.Observable: rx.Observable merge(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<com.squareup.picasso.RemoteViewsAction: void complete(android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom)>
<retrofit2.adapter.rxjava.Result: java.lang.Throwable error()>
<rx.observers.TestSubscriber: rx.observers.TestSubscriber create(rx.Subscriber)>
<rx.internal.operators.OperatorTakeTimed$TakeSubscriber: void onCompleted()>
<rx.internal.operators.OperatorWindowWithSize$WindowExact: void call()>
<rx.internal.schedulers.EventLoopsScheduler: void shutdown()>
<okhttp3.internal.framed.Http2$Writer: void frameHeader(int,int,byte,byte)>
<rx.Observable: rx.Observable concat(rx.Observable)>
<okio.ByteString: java.nio.ByteBuffer asByteBuffer()>
<rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe: void call(rx.Subscriber)>
<rx.subjects.AsyncSubject: rx.subjects.AsyncSubject create()>
<rx.Completable$16$1$2: void <init>(rx.Completable$16$1,java.lang.Throwable)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: void next(java.lang.Object)>
<rx.Observable: rx.Observable concatMapEager(rx.functions.Func1,int)>
<okio.RealBufferedSink: okio.BufferedSink writeShort(int)>
<com.squareup.picasso.RemoteViewsAction$AppWidgetAction: void update()>
<rx.functions.Functions$8: void <init>(rx.functions.Func7)>
<rx.internal.operators.OnSubscribeRedo$3: void <init>(rx.internal.operators.OnSubscribeRedo)>
<rx.schedulers.Schedulers: rx.schedulers.TestScheduler test()>
<rx.internal.operators.OnSubscribeFromArray$FromArrayProducer: void fastPath()>
<rx.Completable: rx.Completable startWith(rx.Completable)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorRequest: java.lang.String method()>
<com.squareup.picasso.BitmapHunter$6: void <init>(com.squareup.picasso.Transformation)>
<com.facebook.stetho.common.android.HandlerUtil: void verifyThreadAccess(android.os.Handler)>
<rx.internal.operators.OperatorReplay$ReplayBuffer: void error(java.lang.Throwable)>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder: com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder name(java.lang.String)>
<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>
<rx.internal.operators.OnSubscribeFromCallable: void call(java.lang.Object)>
<rx.internal.util.ObserverSubscriber: void onCompleted()>
<rx.Completable$2: void <init>()>
<rx.Single$20$1: void onError(java.lang.Throwable)>
<rx.observables.AsyncOnSubscribe$UnicastSubject: rx.observables.AsyncOnSubscribe$UnicastSubject create()>
<com.squareup.picasso.Picasso$LoadedFrom: com.squareup.picasso.Picasso$LoadedFrom valueOf(java.lang.String)>
<rx.exceptions.CompositeException$CompositeExceptionCausalChain: void <clinit>()>
<rx.subjects.SubjectSubscriptionManager: rx.subjects.SubjectSubscriptionManager$SubjectObserver[] observers()>
<okio.SegmentedByteString: void write(java.io.OutputStream)>
<rx.observers.Observers$3: void <init>(rx.functions.Action1,rx.functions.Action1)>
<fr.masciulli.drinks.ui.view.RatioImageView: void onMeasure(int,int)>
<rx.Single: rx.Single flatMap(rx.functions.Func1)>
<rx.Observable: rx.Observable combineLatest(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func5)>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2: void call()>
<okio.RealBufferedSink: okio.BufferedSink writeIntLe(int)>
<com.squareup.picasso.Utils: java.io.File createDefaultCacheDir(android.content.Context)>
<okhttp3.RequestBody$3: void <init>(okhttp3.MediaType,java.io.File)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: int statusCode()>
<rx.internal.operators.OperatorBufferWithStartEndObservable$1: void onCompleted()>
<rx.Single: rx.Single 'from'(java.util.concurrent.Future,rx.Scheduler)>
<rx.observers.TestSubscriber: void assertNoErrors()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void onGetAttributes(java.lang.Object,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<com.facebook.stetho.inspector.elements.Document$5: void store(java.lang.Object)>
<com.squareup.picasso.PicassoExecutorService: void <init>()>
<com.facebook.stetho.common.Util: java.lang.String readAsUTF8(java.io.InputStream)>
<okhttp3.internal.framed.FramedConnection: void pushResetLater(int,okhttp3.internal.framed.ErrorCode)>
<rx.internal.operators.OperatorReplay: rx.observables.ConnectableObservable create(rx.Observable)>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1: void onCompleted()>
<rx.internal.util.IndexedRingBuffer$IndexSection: void <init>()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onGetAccessibilityStyles(android.view.View,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<com.squareup.picasso.Target: void onPrepareLoad(android.graphics.drawable.Drawable)>
<retrofit2.http.Header: java.lang.String value()>
<com.squareup.picasso.FetchAction: void complete(android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addPathSegment(java.lang.String)>
<okhttp3.ResponseBody: okhttp3.ResponseBody create(okhttp3.MediaType,byte[])>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void displayNormalState()>
<com.facebook.stetho.inspector.protocol.module.Page$ResourceType: java.lang.String getProtocolValue()>
<retrofit2.ParameterHandler: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber: void endBuffer(java.util.List)>
<rx.Completable$27: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: void onError(java.lang.Throwable)>
<okio.RealBufferedSource: long indexOf(okio.ByteString)>
<rx.Completable$16: void <init>(rx.Completable,rx.Scheduler,long,java.util.concurrent.TimeUnit,boolean)>
<okhttp3.internal.http.StatusLine: java.lang.String toString()>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: void onGetChildren(android.app.Application,com.facebook.stetho.common.Accumulator)>
<retrofit2.ParameterHandler$HeaderMap: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager: java.io.OutputStream openResponseBodyFile(java.lang.String,boolean)>
<rx.Observable: rx.Observable fromCallable(java.util.concurrent.Callable)>
<rx.observables.AsyncOnSubscribe: rx.observables.AsyncOnSubscribe createSingleState(rx.functions.Func0,rx.functions.Action3)>
<rx.observables.BlockingObservable$3: void <init>(rx.observables.BlockingObservable,java.util.concurrent.CountDownLatch,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: java.lang.CharSequence getAppLabel()>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectSubType: com.facebook.stetho.inspector.protocol.module.Runtime$ObjectSubType valueOf(java.lang.String)>
<retrofit2.BuiltInConverters$BufferingResponseBodyConverter: java.lang.Object convert(java.lang.Object)>
<rx.internal.operators.BlockingOperatorNext$1: void <init>(rx.Observable)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder removeAllEncodedQueryParameters(java.lang.String)>
<okhttp3.internal.connection.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>
<okhttp3.internal.connection.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$JellyBeanAndBeyondImpl: int provideOpenFlags(int)>
<okio.Buffer: okio.BufferedSink writeInt(int)>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.elements.Origin: void <clinit>()>
<rx.internal.schedulers.ScheduledAction: void addParent(rx.internal.util.SubscriptionList)>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: int read(byte[])>
<rx.internal.operators.OperatorGroupBy: java.lang.Object call(java.lang.Object)>
<rx.Completable$3$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterRegistry: boolean unregister(java.lang.String)>
<okhttp3.Cache$Entry: boolean isHttps()>
<com.facebook.stetho.common.ProcessUtil: void <init>()>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1$1: void run()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$HighlightDrawable: void <init>()>
<okio.RealBufferedSource: byte[] readByteArray()>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: void emit()>
<rx.internal.util.atomic.SpscLinkedAtomicQueue: boolean offer(java.lang.Object)>
<rx.internal.operators.OnSubscribeRange$RangeProducer: void slowpath(long)>
<okhttp3.MultipartBody$Builder: void <init>(java.lang.String)>
<rx.internal.operators.OperatorOnBackpressureBuffer: rx.Subscriber call(rx.Subscriber)>
<okhttp3.internal.tls.BasicCertificateChainCleaner: void <init>(okhttp3.internal.tls.TrustRootIndex)>
<rx.internal.operators.OperatorReplay$5: rx.internal.operators.OperatorReplay$ReplayBuffer call()>
<okhttp3.internal.connection.RouteSelector: okhttp3.Route nextPostponed()>
<com.facebook.stetho.common.android.FragmentCompat: java.lang.Class getFragmentActivityClass()>
<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection)>
<okhttp3.internal.framed.FrameWriter: void goAway(int,okhttp3.internal.framed.ErrorCode,byte[])>
<retrofit2.OkHttpCall$1: void callFailure(java.lang.Throwable)>
<rx.internal.operators.BufferUntilSubscriber: void <init>(rx.internal.operators.BufferUntilSubscriber$State)>
<com.facebook.stetho.common.ListUtil$OneItemImmutableList: java.lang.Object get(int)>
<rx.observers.TestSubscriber: java.util.List getOnErrorEvents()>
<retrofit2.ServiceMethod$Builder: void validatePathName(int,java.lang.String)>
<rx.Scheduler$Worker: long now()>
<rx.Observable: rx.Observable distinct()>
<rx.observers.TestSubscriber: java.util.List getOnNextEvents()>
<rx.internal.operators.OnSubscribeSingle: void call(rx.SingleSubscriber)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$PaddingBottomHighlightDrawable: void <init>()>
<rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef: void spProducerNode(rx.internal.util.atomic.LinkedQueueNode)>
<okhttp3.Cookie: java.lang.String domain()>
<okhttp3.internal.connection.RouteDatabase: void failed(okhttp3.Route)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MainHighlightDrawable: void highlightView(android.view.View)>
<okhttp3.internal.framed.FrameReader$Handler: void rstStream(int,okhttp3.internal.framed.ErrorCode)>
<rx.internal.operators.OperatorSingle: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void handleRemoteResponse(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.util.ScalarSynchronousSingle$2: void call(rx.SingleSubscriber)>
<com.facebook.stetho.inspector.elements.Document$DocumentObjectIdMapper: void onUnmapped(java.lang.Object,int)>
<rx.internal.operators.OperatorBufferWithStartEndObservable: rx.Subscriber call(rx.Subscriber)>
<rx.Completable: rx.Completable retryWhen(rx.functions.Func1)>
<rx.observables.AsyncOnSubscribe$2: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber: void onCompleted()>
<okio.ForwardingTimeout: long deadlineNanoTime()>
<com.facebook.stetho.common.ListUtil$ThreeItemImmutableList: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
<okio.Buffer: long readLongLe()>
<rx.internal.operators.BlockingOperatorToFuture$1: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$IntegerMethodInvoker: java.lang.Object convertArgument(java.lang.String)>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Builder: com.facebook.stetho.inspector.database.ContentProviderSchema$Builder table(com.facebook.stetho.inspector.database.ContentProviderSchema$Table)>
<rx.Observable: rx.Observable 'from'(java.lang.Object[])>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder setResourceId(int)>
<rx.internal.operators.OperatorToObservableSortedList: void <clinit>()>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void addFiles(java.util.zip.ZipOutputStream,byte[],java.io.File[])>
<rx.internal.schedulers.ExecutorScheduler: rx.Scheduler$Worker createWorker()>
<com.facebook.stetho.websocket.MaskingHelper: void <init>()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>
<rx.observables.BlockingObservable$9: void <init>(rx.observables.BlockingObservable,rx.functions.Action1,rx.functions.Action1,rx.functions.Action0)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: int headerCount()>
<rx.internal.operators.OperatorSampleWithObservable: void <init>(rx.Observable)>
<rx.subjects.BehaviorSubject: void <clinit>()>
<rx.Completable: rx.Completable merge(rx.Completable[])>
<rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$2: void <init>(rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker,rx.functions.Action0)>
<okhttp3.internal.Util: boolean discard(okio.Source,int,java.util.concurrent.TimeUnit)>
<okhttp3.internal.framed.Spdy3$Writer: void synStream(boolean,boolean,int,int,java.util.List)>
<rx.Completable$20: void onCompleted()>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager: void cleanupFiles()>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<retrofit2.ServiceMethod$Builder: java.lang.RuntimeException parameterError(int,java.lang.String,java.lang.Object[])>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: void <init>(rx.Subscriber,rx.functions.FuncN,int,int,boolean)>
<okhttp3.internal.http.Http1xStream$AbstractSource: okio.Timeout timeout()>
<rx.internal.operators.OperatorReplay$5: void <init>(int)>
<okio.HashingSource: okio.HashingSource sha256(okio.Source)>
<com.squareup.picasso.Picasso: void invalidate(android.net.Uri)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void lambda$null$1(fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Drink)>
<rx.internal.operators.OnSubscribeRedo$5: void request(long)>
<retrofit2.ParameterHandler$Header: void <init>(java.lang.String,retrofit2.Converter)>
<retrofit2.adapter.rxjava.Result: void <init>(retrofit2.Response,java.lang.Throwable)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator unfit()>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: void printFile(java.io.PrintStream,java.lang.String,java.lang.String)>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterExecutorHolder: void <init>()>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: java.util.ArrayList getLiquors()>
<rx.internal.operators.OperatorTakeLastTimed$TakeLastTimedSubscriber: void <init>(rx.Subscriber,int,long,rx.Scheduler)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder clearCenterInside()>
<fr.masciulli.drinks.model.Drink: java.lang.String getName()>
<rx.internal.util.InternalObservableUtils$NotificationErrorExtractor: java.lang.Object call(java.lang.Object)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter$1: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorToObservableList$Holder: void <clinit>()>
<com.facebook.stetho.common.android.FragmentCompatUtil: java.lang.Object findFragmentForViewInActivity(android.app.Activity,android.view.View)>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.protocol.module.Runtime$GetPropertiesResponse getPropertiesForObject(java.lang.Object)>
<rx.exceptions.CompositeException$PrintStreamOrWriter: java.lang.Object lock()>
<rx.internal.operators.OnSubscribeCombineLatest: void call(java.lang.Object)>
<com.squareup.picasso.Picasso$RequestTransformer: com.squareup.picasso.Request transformRequest(com.squareup.picasso.Request)>
<rx.subjects.SubjectSubscriptionManager$1: void call()>
<rx.internal.operators.OnSubscribeDetach$DetachSubscriber: void innerUnsubscribe()>
<rx.Completable: rx.Completable subscribeOn(rx.Scheduler)>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1: void <init>(rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber)>
<com.facebook.stetho.server.CompositeInputStream: int available()>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: void writeToOutputStream(int)>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: java.lang.Object[] toArray(java.lang.Object[])>
<rx.Observable: rx.Observable concat(rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.util.SynchronizedQueue: boolean add(java.lang.Object)>
<rx.observers.SerializedSubscriber: void onError(java.lang.Throwable)>
<rx.Completable$17: void call(rx.Completable$CompletableSubscriber)>
<rx.subscriptions.RefCountSubscription: void <init>(rx.Subscription)>
<rx.internal.operators.OperatorSwitch: void <init>(boolean)>
<com.facebook.stetho.inspector.helper.IntegerFormatter: com.facebook.stetho.inspector.helper.IntegerFormatter getInstance()>
<com.facebook.stetho.inspector.network.NetworkEventReporter: java.io.InputStream interpretResponseStream(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,com.facebook.stetho.inspector.network.ResponseHandler)>
<okhttp3.MediaType: int hashCode()>
<rx.internal.operators.OperatorDelayWithSelector$1: void <init>(rx.internal.operators.OperatorDelayWithSelector,rx.Subscriber,rx.subjects.PublishSubject,rx.observers.SerializedSubscriber)>
<rx.internal.operators.OperatorZip$ZipSubscriber: void onError(java.lang.Throwable)>
<rx.internal.schedulers.NewThreadWorker: rx.internal.schedulers.ScheduledAction scheduleActual(rx.functions.Action0,long,java.util.concurrent.TimeUnit,rx.subscriptions.CompositeSubscription)>
<rx.internal.operators.OperatorBufferWithSize$BufferExact: rx.Producer createProducer()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler$OverlayView: boolean onTouchEvent(android.view.MotionEvent)>
<rx.Notification$Kind: void <init>(java.lang.String,int)>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1: void <init>(rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$3: void <init>(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: long calcWrappedOffset(long,long)>
<com.squareup.picasso.AssetRequestHandler: com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request,int)>
<rx.observers.SafeCompletableSubscriber: void <init>(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorSkip: rx.Subscriber call(rx.Subscriber)>
<rx.subjects.BehaviorSubject: java.lang.Object[] getValues()>
<rx.internal.operators.OperatorToObservableList$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: java.lang.Class getFragmentActivityClass()>
<rx.internal.operators.OperatorMulticast$1: void <init>(java.lang.Object,java.util.concurrent.atomic.AtomicReference,java.util.List)>
<rx.Single$18: void <init>(rx.Single,rx.SingleSubscriber)>
<okhttp3.internal.http.HttpStream: okio.Sink createRequestBody(okhttp3.Request,long)>
<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void <init>()>
<rx.Observable: rx.Observable switchMap(rx.functions.Func1)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void onNext(rx.Observable)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher: void startScreencast(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,com.facebook.stetho.inspector.protocol.module.Page$StartScreencastRequest)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver: void onNext(java.lang.Object)>
<okhttp3.HttpUrl$Builder: void pop()>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber: void requestMore(long)>
<rx.BackpressureOverflow$DropLatest: void <clinit>()>
<okhttp3.internal.framed.Spdy3$Writer: int maxDataLength()>
<rx.Observable: rx.Observable zip(rx.Observable,rx.Observable,rx.Observable,rx.functions.Func3)>
<com.facebook.stetho.common.android.FragmentCompatFramework: com.facebook.stetho.common.android.FragmentManagerAccessor forFragmentManager()>
<rx.internal.util.SynchronizedQueue: boolean offer(java.lang.Object)>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void remove(com.facebook.stetho.inspector.elements.Document$UpdateListener)>
<rx.Completable: rx.Completable fromAction(rx.functions.Action0)>
<rx.internal.operators.OperatorDistinctUntilChanged$Holder: void <init>()>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1: void setProducer(rx.Producer)>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber: void onError(java.lang.Throwable)>
<okhttp3.internal.framed.FramedStream$FramedDataSink: okio.Timeout timeout()>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$2: void <init>(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<com.facebook.stetho.inspector.protocol.module.Debugger: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: java.lang.Throwable error()>
<rx.internal.operators.OperatorTakeLast$TakeLastSubscriber: void onNext(java.lang.Object)>
<rx.subjects.UnicastSubject$State: boolean checkTerminated(boolean,boolean,rx.Subscriber)>
<okhttp3.internal.io.FileSystem: okio.Source source(java.io.File)>
<rx.Observable: rx.Observable flatMap(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0,int)>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func6)>
<rx.functions.Functions$14: void <init>(rx.functions.Action3)>
<rx.internal.operators.OnSubscribeAutoConnect: void <init>(rx.observables.ConnectableObservable,int,rx.functions.Action1)>
<rx.internal.operators.CompletableOnSubscribeConcat: void <init>(rx.Observable,int)>
<rx.internal.util.SynchronizedQueue: java.util.Iterator iterator()>
<com.facebook.stetho.inspector.elements.android.AccessibilityNodeInfoWrapper: void <init>()>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder debugging(boolean)>
<rx.internal.operators.OperatorDebounceWithSelector$1: void onCompleted()>
<rx.android.MainThreadSubscription$1: void <init>(rx.android.MainThreadSubscription)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void <init>(rx.Subscriber,boolean,int)>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: boolean hasError()>
<rx.internal.util.InternalObservableUtils$RepeatNotificationDematerializer: rx.Observable call(rx.Observable)>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode: void <init>(java.lang.String,int,int)>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: void onError(java.lang.Throwable)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: void soNext(java.lang.Object[],java.lang.Object[])>
<rx.internal.operators.OperatorToMultimap$DefaultMultimapCollectionFactory: java.util.Collection call(java.lang.Object)>
<rx.internal.operators.OperatorOnBackpressureDrop: void <init>()>
<rx.internal.operators.OperatorSkipWhile: java.lang.Object call(java.lang.Object)>
<com.squareup.picasso.Picasso$LoadedFrom: com.squareup.picasso.Picasso$LoadedFrom[] values()>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void doUsage(java.io.PrintStream)>
<rx.Completable$19: void onSubscribe(rx.Subscription)>
<com.facebook.stetho.Stetho$InitializerBuilder: void <init>(android.content.Context)>
<rx.internal.util.atomic.LinkedQueueNode: void spValue(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProviderFactory: void removeCallbacks(java.lang.Runnable)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator rotate(float)>
<rx.functions.Functions$6: void <init>(rx.functions.Func5)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver: void <init>(rx.internal.operators.OnSubscribeGroupJoin$ResultManager)>
<com.facebook.stetho.inspector.protocol.module.Network$Response: void <init>()>
<okio.RealBufferedSink$1: void flush()>
<okio.RealBufferedSource: boolean exhausted()>
<rx.Single: rx.Single timeout(long,java.util.concurrent.TimeUnit,rx.Single,rx.Scheduler)>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: void remove()>
<com.facebook.stetho.inspector.network.MimeMatcher$MimeMatcherRule: java.lang.Object getResultIfMatched()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator noFade()>
<rx.internal.operators.OperatorBufferWithTime$ExactSubscriber: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.SimpleBooleanResult: void <init>(boolean)>
<rx.internal.operators.OperatorMapPair$1: java.lang.Object call(java.lang.Object)>
<rx.plugins.RxJavaPlugins: void reset()>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void printDirectoryText(java.io.File,java.lang.String,java.io.PrintStream)>
<com.squareup.picasso.UrlConnectionDownloader: com.squareup.picasso.Downloader$Response load(android.net.Uri,int)>
<com.facebook.stetho.inspector.elements.Document: void setInspectModeEnabled(boolean)>
<rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker: void unsubscribe()>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder documentProvider(com.facebook.stetho.inspector.elements.DocumentProviderFactory)>
<okhttp3.internal.connection.RealConnection: void onStream(okhttp3.internal.framed.FramedStream)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean addAll(java.util.Collection)>
<rx.Observable: rx.Observable concatEager(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.Observable: rx.Observable combineLatest(java.util.List,rx.functions.FuncN)>
<okhttp3.internal.framed.FramedStream$FramedDataSink: void close()>
<okhttp3.internal.framed.Http2$FrameLogger: void <init>()>
<retrofit2.converter.gson.GsonConverterFactory: retrofit2.Converter responseBodyConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void add(com.facebook.stetho.inspector.elements.Document$UpdateListener)>
<okio.BufferedSource: java.io.InputStream inputStream()>
<okhttp3.internal.platform.JdkWithJettyBootPlatform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)>
<rx.internal.operators.OperatorAll$1: void <init>(rx.internal.operators.OperatorAll,rx.internal.producers.SingleDelayedProducer,rx.Subscriber)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void setListener(com.facebook.stetho.inspector.elements.DocumentProviderListener)>
<rx.Observable: rx.Observable first(rx.functions.Func1)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: boolean tryEmit(long)>
<okhttp3.internal.cache.DiskLruCache: void readJournal()>
<rx.Observable: rx.Observable elementAtOrDefault(int,java.lang.Object)>
<rx.internal.operators.BlockingOperatorMostRecent: void <init>()>
<okhttp3.logging.HttpLoggingInterceptor: boolean isPlaintext(okio.Buffer)>
<rx.subjects.PublishSubject: void onNext(java.lang.Object)>
<okhttp3.internal.framed.FramedStream: void addBytesToWriteWindow(long)>
<okhttp3.internal.http.Http2xStream: java.util.List spdy3HeadersList(okhttp3.Request)>
<rx.internal.operators.OperatorWindowWithSize$WindowExact$1: void request(long)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: void soElement(java.lang.Object[],long,java.lang.Object)>
<okhttp3.internal.http.HttpHeaders: boolean varyMatches(okhttp3.Response,okhttp3.Headers,okhttp3.Request)>
<rx.Completable$24$1$1: void onCompleted()>
<rx.Observable: rx.Observable scan(java.lang.Object,rx.functions.Func2)>
<rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc: void <init>(rx.Observable,rx.subscriptions.RefCountSubscription)>
<rx.internal.operators.OperatorAll: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorDebounceWithSelector$1$1: void <init>(rx.internal.operators.OperatorDebounceWithSelector$1,int)>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: void onNext(java.lang.Object)>
<rx.Observable: rx.Observable concat(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.OnSubscribeRedo$1: java.lang.Object call(java.lang.Object)>
<rx.android.schedulers.LooperScheduler: void <init>(android.os.Handler)>
<com.facebook.stetho.common.android.HandlerUtil$WaitableRunnable: void run()>
<rx.observers.Observers$1: void onCompleted()>
<rx.subscriptions.RefCountSubscription$State: rx.subscriptions.RefCountSubscription$State addChild()>
<rx.internal.operators.SingleOperatorZip: void <init>()>
<rx.internal.operators.OperatorReplay$5: java.lang.Object call()>
<rx.internal.util.ObjectPool: java.lang.Object createObject()>
<rx.Single$5: void call(rx.SingleSubscriber)>
<okhttp3.Address: java.util.List protocols()>
<rx.internal.operators.EmptyObservableHolder: rx.Observable instance()>
<rx.exceptions.CompositeException$WrappedPrintStream: java.lang.Object lock()>
<rx.internal.operators.OperatorReplay$3$1: void <init>(rx.internal.operators.OperatorReplay$3,rx.Subscriber,rx.Subscriber)>
<okio.BufferedSink: okio.Buffer buffer()>
<okhttp3.ResponseBody: java.io.Reader charStream()>
<rx.internal.operators.OperatorElementAt$InnerProducer: void request(long)>
<rx.internal.operators.OnSubscribeDetach$DetachProducer: void request(long)>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object,java.lang.Object)>
<okhttp3.internal.tls.DistinguishedNameParser: java.lang.String nextAT()>
<com.facebook.stetho.inspector.protocol.module.Page: void setTouchEmulationEnabled(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder defaultBitmapConfig(android.graphics.Bitmap$Config)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: int getId(android.app.Fragment)>
<okio.ByteString: int indexOf(okio.ByteString)>
<okio.RealBufferedSource: int readIntLe()>
<com.facebook.stetho.common.StringUtil: java.lang.String removePrefix(java.lang.String,java.lang.String)>
<rx.internal.operators.OnSubscribeRedo: void call(rx.Subscriber)>
<rx.internal.operators.OperatorTakeTimed$TakeSubscriber: void call()>
<com.facebook.stetho.dumpapp.DumpappSocketLikeHandler: void establishConversation(java.io.DataInputStream)>
<rx.internal.util.unsafe.SpmcArrayQueueL3Pad: void <init>(int)>
<rx.android.schedulers.HandlerScheduler: rx.Scheduler$Worker createWorker()>
<com.squareup.picasso.BitmapHunter$1: java.lang.StringBuilder initialValue()>
<rx.internal.util.SynchronizedQueue: java.lang.Object peek()>
<okhttp3.internal.http.HttpDate$1: void <init>()>
<rx.internal.operators.OnSubscribeDelaySubscription: void call(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.CSS$2$2: void store(java.lang.String,java.lang.String,boolean)>
<com.facebook.stetho.inspector.protocol.module.Page$Frame: void <init>(com.facebook.stetho.inspector.protocol.module.Page$1)>
<rx.observables.BlockingObservable: void subscribe(rx.functions.Action1,rx.functions.Action1,rx.functions.Action0)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: com.facebook.stetho.inspector.elements.NodeType getNodeType(java.lang.Object)>
<com.squareup.picasso.RequestHandler$Result: java.io.InputStream getStream()>
<rx.functions.Functions: rx.functions.FuncN fromAction(rx.functions.Action2)>
<rx.internal.util.atomic.SpscAtomicArrayQueue: long lvConsumerIndex()>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: android.app.FragmentManager getFragmentManager(android.app.Fragment)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$MethodBackedCSSProperty: java.lang.Object getValue(android.view.View)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void <init>(rx.Subscriber,rx.functions.Func1,int,int)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: int headerCount()>
<rx.internal.util.ScalarSynchronousObservable: rx.Observable scalarScheduleOn(rx.Scheduler)>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1: void <init>(rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber)>
<rx.Observable: rx.Observable window(rx.functions.Func0)>
<com.facebook.stetho.server.LeakyBufferedInputStream: void mark(int)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void getAccessibilityStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<rx.functions.Functions$8: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.OperatorMulticast$3: void onCompleted()>
<rx.singles.BlockingSingle$1: void onSuccess(java.lang.Object)>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterInitializer: void populatePrettyPrinters(com.facebook.stetho.inspector.network.AsyncPrettyPrinterRegistry)>
<rx.Completable$9: void call(java.lang.Object)>
<okhttp3.internal.platform.Platform: boolean isCleartextTrafficPermitted(java.lang.String)>
<rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef: rx.internal.util.atomic.LinkedQueueNode lpConsumerNode()>
<rx.Completable$14: void onSubscribe(rx.Subscription)>
<okhttp3.internal.connection.StreamAllocation: void noNewStreams()>
<rx.internal.operators.OnSubscribeRange$RangeProducer: void request(long)>
<rx.Observable: rx.Observable window(long,long,java.util.concurrent.TimeUnit)>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void nextIteration(rx.observables.SyncOnSubscribe)>
<rx.internal.operators.OperatorOnBackpressureLatest$Holder: void <clinit>()>
<rx.observers.Subscribers$4: void <init>(rx.functions.Action0,rx.functions.Action1,rx.functions.Action1)>
<okhttp3.internal.framed.FramedConnection$Listener: void onStream(okhttp3.internal.framed.FramedStream)>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void onNext(java.lang.Object)>
<retrofit2.converter.gson.GsonRequestBodyConverter: void <init>(com.google.gson.Gson,com.google.gson.TypeAdapter)>
<com.facebook.stetho.inspector.protocol.module.CSS$2$2: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$2)>
<rx.schedulers.TestScheduler: void triggerActions()>
<okhttp3.ResponseBody: okhttp3.MediaType contentType()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void getStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<okhttp3.internal.cache.CacheInterceptor: boolean isEndToEnd(java.lang.String)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader$NewLineDetector: void accept(char)>
<rx.observers.Subscribers: rx.Subscriber create(rx.functions.Action1)>
<rx.Observable: rx.Observable firstOrDefault(java.lang.Object,rx.functions.Func1)>
<okhttp3.internal.framed.Spdy3$Writer: void ping(boolean,int,int)>
<okhttp3.Authenticator: void <clinit>()>
<rx.functions.Action9: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.SingleOperatorOnErrorResumeNext: void call(rx.SingleSubscriber)>
<rx.Observable: rx.Subscription subscribe(rx.functions.Action1,rx.functions.Action1,rx.functions.Action0)>
<com.squareup.picasso.Dispatcher: void performComplete(com.squareup.picasso.BitmapHunter)>
<okio.SegmentedByteString: void write(okio.Buffer)>
<rx.internal.operators.OperatorPublish$2$1: void onError(java.lang.Throwable)>
<okhttp3.internal.cache.DiskLruCache: okhttp3.internal.cache.DiskLruCache$Editor edit(java.lang.String,long)>
<rx.internal.operators.OperatorMapPair$OuterInnerMapper: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.SingleOperatorOnErrorResumeNext: rx.internal.operators.SingleOperatorOnErrorResumeNext withOther(rx.Single,rx.Single)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void queueScalar(rx.internal.operators.OperatorMerge$InnerSubscriber,java.lang.Object)>
<rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber: void emitIfNonEmpty()>
<com.facebook.stetho.inspector.protocol.module.CSS$1: void run()>
<okhttp3.Cookie: boolean equals(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: java.lang.Object getChildFragmentManager(java.lang.Object)>
<rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber: void onError(java.lang.Throwable)>
<rx.internal.util.ScalarSynchronousObservable$3: void call(java.lang.Object)>
<rx.Observable: rx.Observable countLong()>
<rx.internal.operators.OnSubscribeRedo$3$1: void onNext(rx.Notification)>
<rx.Completable$10$1: void <init>(rx.Completable$10,rx.Completable$CompletableSubscriber)>
<com.facebook.stetho.inspector.network.NetworkPeerManager$1: void <init>(com.facebook.stetho.inspector.network.NetworkPeerManager)>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: okhttp3.internal.connection.StreamAllocation streamAllocation()>
<com.facebook.stetho.inspector.elements.DocumentProviderListener: void onInspectRequested(java.lang.Object)>
<rx.internal.util.unsafe.BaseLinkedQueue: void <init>()>
<com.facebook.stetho.inspector.protocol.module.Network: com.facebook.stetho.inspector.protocol.module.Network$GetResponseBodyResponse readResponseBody(java.lang.String)>
<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>
<com.facebook.stetho.dumpapp.DumpappHttpSocketLikeHandler$DumpappLegacyHttpHandler: boolean handleRequest(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpResponse)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>
<rx.internal.util.unsafe.SpscLinkedQueue: java.lang.Object poll()>
<okhttp3.HttpUrl$Builder: void removeAllCanonicalQueryParameters(java.lang.String)>
<okhttp3.logging.HttpLoggingInterceptor$Level: okhttp3.logging.HttpLoggingInterceptor$Level[] values()>
<rx.internal.operators.OperatorDelay$1$1: void <init>(rx.internal.operators.OperatorDelay$1)>
<rx.internal.util.InternalObservableUtils$SelectorAndObserveOn: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.CSS$RuleMatch: void <init>()>
<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable: void call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.FragmentDescriptor: android.view.View getViewForHighlighting(java.lang.Object)>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void <init>(rx.Subscriber,rx.functions.Func1,rx.functions.Func1,int,boolean)>
<com.squareup.picasso.BitmapHunter: void attach(com.squareup.picasso.Action)>
<rx.internal.operators.OnSubscribeTimerPeriodically: void call(java.lang.Object)>
<rx.internal.operators.CachedObservable: boolean hasObservers()>
<com.squareup.picasso.Dispatcher: void dispatchCancel(com.squareup.picasso.Action)>
<rx.Observable: rx.Observable startWith(java.lang.Object,java.lang.Object)>
<rx.Observable: rx.Observable map(rx.functions.Func1)>
<rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber: void setProducer(rx.Producer)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter: java.lang.Object adapt(retrofit2.Call)>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver: void onRegistered(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<rx.internal.operators.NeverObservableHolder: void call(java.lang.Object)>
<rx.Observable: rx.Observable retry(rx.functions.Func2)>
<rx.Observable: rx.Observable startWith(java.lang.Object,java.lang.Object,java.lang.Object)>
<fr.masciulli.drinks.ui.activity.DrinkActivity: android.text.Spanned parseIngredients()>
<rx.Observable: rx.Observable groupJoin(rx.Observable,rx.functions.Func1,rx.functions.Func1,rx.functions.Func2)>
<okio.RealBufferedSource: void skip(long)>
<com.squareup.picasso.Downloader$Response: java.io.InputStream getInputStream()>
<rx.Completable: java.lang.Object requireNonNull(java.lang.Object)>
<retrofit2.BuiltInConverters$BufferingResponseBodyConverter: okhttp3.ResponseBody convert(okhttp3.ResponseBody)>
<rx.observers.Subscribers$4: void onCompleted()>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: void setDrinks(java.util.List)>
<rx.subscriptions.RefCountSubscription: void <clinit>()>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$2: void <init>(java.lang.String,java.lang.String)>
<rx.android.MainThreadSubscription: void unsubscribe()>
<rx.Completable: rx.Completable mergeDelayError(rx.Observable,int)>
<okhttp3.CacheControl: boolean noStore()>
<rx.observers.Subscribers: rx.Subscriber wrap(rx.Subscriber)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void onNext(rx.Observable)>
<okhttp3.internal.platform.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>
<rx.internal.util.RxRingBuffer$2: java.lang.Object createObject()>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: void fakeRatios()>
<rx.Completable$27: void callOnError(java.lang.Throwable)>
<okhttp3.TlsVersion: java.lang.String javaName()>
<rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker$1: void <init>(rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker,rx.functions.Action0)>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber: void onCompleted()>
<rx.Completable$33$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager: void errorMain(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.Document: void findMatches(java.lang.Object,java.util.regex.Pattern,com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OperatorMerge$MergeProducer: void request(long)>
<rx.plugins.RxJavaErrorHandler: java.lang.String render(java.lang.Object)>
<okhttp3.Cache: void update(okhttp3.Response,okhttp3.Response)>
<okio.GzipSink: void updateCrc(okio.Buffer,long)>
<okio.ByteString: okio.ByteString toAsciiUppercase()>
<com.squareup.picasso.UrlConnectionDownloader: java.net.HttpURLConnection openConnection(android.net.Uri)>
<rx.Observable: rx.Observable window(long,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.common.android.FragmentCompat: java.lang.Class getDialogFragmentClass()>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber: void drain()>
<com.facebook.stetho.common.android.HandlerUtil$WaitableRunnable: java.lang.Object invoke(android.os.Handler)>
<okhttp3.Response: okhttp3.Response priorResponse()>
<okio.Buffer: void close()>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker: boolean isUnsubscribed()>
<okio.Buffer: okio.Buffer write(byte[])>
<rx.internal.producers.ProducerObserverArbiter: void setProducer(rx.Producer)>
<rx.internal.util.InternalObservableUtils: rx.internal.util.InternalObservableUtils valueOf(java.lang.String)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor$ElementContext: void unhook()>
<rx.internal.operators.OnSubscribeDelaySubscriptionOther$1: void <init>(rx.internal.operators.OnSubscribeDelaySubscriptionOther,rx.Subscriber,rx.subscriptions.SerialSubscription)>
<rx.schedulers.NewThreadScheduler: void <init>()>
<rx.internal.operators.OperatorDoOnRequest$ParentSubscriber: void onNext(java.lang.Object)>
<rx.Completable$25: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable merge(rx.Observable,rx.Observable)>
<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>
<rx.internal.schedulers.TrampolineScheduler: void <clinit>()>
<rx.internal.operators.OperatorSkipUntil$1: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.domstorage.SharedPreferencesHelper: java.lang.Object valueFromString(java.lang.String,java.lang.Object)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver: void <init>(rx.internal.operators.OnSubscribeGroupJoin$ResultManager)>
<rx.internal.operators.OperatorToObservableSortedList$2: void onError(java.lang.Throwable)>
<okio.RealBufferedSource: long readLongLe()>
<rx.internal.operators.OperatorOnBackpressureBuffer$Holder: void <clinit>()>
<com.squareup.picasso.RemoteViewsAction: void setImageResource(int)>
<com.facebook.stetho.common.android.ViewUtil$ViewCompat: com.facebook.stetho.common.android.ViewUtil$ViewCompat getInstance()>
<rx.internal.operators.OnSubscribeRedo$RetryWithPredicate: void <init>(rx.functions.Func2)>
<com.facebook.stetho.websocket.Frame: void readFrom(java.io.BufferedInputStream)>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$1: void <init>(rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther,rx.SingleSubscriber)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean retainAll(java.util.Collection)>
<okhttp3.internal.framed.FramedStream$FramedDataSink: void <init>(okhttp3.internal.framed.FramedStream)>
<rx.internal.operators.OperatorReplay$InnerProducer: void unsubscribe()>
<com.facebook.stetho.common.ListUtil$OneItemImmutableList: void <init>(java.lang.Object)>
<rx.Observable: rx.Observable merge(rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker: void unsubscribe()>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor$ElementContext$1: void <init>(com.facebook.stetho.inspector.elements.android.ApplicationDescriptor$ElementContext)>
<rx.observables.BlockingObservable$9: void onError(java.lang.Throwable)>
<okhttp3.Headers: java.util.Date getDate(java.lang.String)>
<rx.internal.operators.BlockingOperatorNext$NextObserver: void <init>()>
<com.facebook.stetho.inspector.protocol.module.DOMStorage: void putStringSet(android.content.SharedPreferences$Editor,java.lang.String,java.util.Set)>
<okhttp3.internal.framed.Http2$Writer: int maxDataLength()>
<rx.internal.util.atomic.SpscAtomicArrayQueue: int size()>
<com.squareup.picasso.Downloader: void shutdown()>
<com.facebook.stetho.common.LogUtil: void i(java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.CSS$CSSProperty: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>
<com.facebook.stetho.inspector.protocol.module.CSS$CSSComputedStyleProperty: void <init>()>
<rx.internal.util.RxJavaPluginUtils: void handlePluginException(java.lang.Throwable)>
<rx.subjects.AsyncSubject: java.lang.Object getValue()>
<com.facebook.stetho.inspector.protocol.module.CSS$PeerManagerListener: void <init>(com.facebook.stetho.inspector.protocol.module.CSS,com.facebook.stetho.inspector.protocol.module.CSS$1)>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder provideDatabaseDriver(com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2: void removeHighlight(android.view.View)>
<rx.internal.operators.OperatorReplay$2$1: void call(rx.Subscription)>
<rx.observers.Observers$2: void onCompleted()>
<okhttp3.internal.framed.Http2$Writer: void ping(boolean,int,int)>
<rx.internal.operators.OperatorGroupBy$State: boolean isUnsubscribed()>
<okio.SegmentedByteString: java.lang.String base64Url()>
<rx.functions.Func8: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.Network$GetResponseBodyResponse: void <init>(com.facebook.stetho.inspector.protocol.module.Network$1)>
<com.squareup.picasso.Picasso$LoadedFrom: void <init>(java.lang.String,int,int)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: void scheduleExact()>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder provide(com.facebook.stetho.inspector.protocol.ChromeDevtoolsDomain)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String)>
<com.facebook.stetho.dumpapp.Framer: java.io.PrintStream getStdout()>
<rx.internal.operators.OperatorGroupBy$1: void <init>(rx.internal.operators.OperatorGroupBy,rx.internal.operators.OperatorGroupBy$GroupBySubscriber)>
<rx.internal.operators.OperatorTakeLastOne$Holder: void <clinit>()>
<okio.ForwardingSink: void flush()>
<okhttp3.internal.framed.FramedConnection: void flush()>
<okhttp3.Handshake: okhttp3.TlsVersion tlsVersion()>
<rx.internal.operators.OperatorIgnoreElements$1: void <init>(rx.internal.operators.OperatorIgnoreElements,rx.Subscriber)>
<rx.subjects.AsyncSubject: void onError(java.lang.Throwable)>
<fr.masciulli.drinks.ui.adapter.holder.TileViewHolder: android.widget.TextView getNameView()>
<com.squareup.picasso.BitmapHunter: android.graphics.Bitmap getResult()>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcRequest: void <init>()>
<rx.Completable$22$1$2: void call()>
<rx.observables.SyncOnSubscribe$2: java.lang.Object call(java.lang.Object,java.lang.Object)>
<okhttp3.internal.framed.FramedConnection: void pushHeadersLater(int,java.util.List,boolean)>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor: void onGetAttributes(android.widget.TextView,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<rx.internal.schedulers.ScheduledAction: void add(rx.Subscription)>
<rx.subjects.ReplaySubject$ReplayState: void <clinit>()>
<rx.Completable$28: void <init>(rx.Completable,rx.Subscriber)>
<rx.subscriptions.Subscriptions$Unsubscribed: boolean isUnsubscribed()>
<rx.internal.util.atomic.SpscAtomicArrayQueue: java.util.Iterator iterator()>
<com.squareup.picasso.BitmapHunter: android.graphics.Bitmap hunt()>
<com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesResponse: void <init>()>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: void <init>(android.content.Context,java.lang.String)>
<rx.internal.util.unsafe.BaseLinkedQueue: boolean isEmpty()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onSetAttributesAsText(java.lang.Object,java.lang.String)>
<okhttp3.internal.framed.Spdy3$Writer: void settings(okhttp3.internal.framed.Settings)>
<rx.Observable: rx.Observable groupBy(rx.functions.Func1)>
<okhttp3.Request$Builder: okhttp3.Request$Builder cacheControl(okhttp3.CacheControl)>
<com.facebook.stetho.inspector.protocol.module.Network$InitiatorType: void <clinit>()>
<rx.internal.operators.OperatorGroupBy$GroupedUnicast: rx.internal.operators.OperatorGroupBy$GroupedUnicast createWith(java.lang.Object,int,rx.internal.operators.OperatorGroupBy$GroupBySubscriber,boolean)>
<rx.observables.AsyncOnSubscribe$3: java.lang.Void call(java.lang.Void,java.lang.Long,rx.Observer)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void onGetChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OperatorTakeLastTimed$TakeLastTimedSubscriber: void onError(java.lang.Throwable)>
<rx.functions.Actions$EmptyAction: void <init>()>
<rx.Single$5$1: void onSuccess(rx.Single)>
<rx.internal.operators.OperatorMaterialize$ParentSubscriber: void onStart()>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer: com.facebook.stetho.websocket.SimpleSession getWebSocket()>
<com.facebook.stetho.Stetho$2: void <init>(android.content.Context)>
<okhttp3.internal.framed.Http2$Reader: void close()>
<rx.internal.operators.OperatorScan: void <clinit>()>
<rx.Completable$19: void <init>(rx.Completable,java.util.concurrent.CountDownLatch,java.lang.Throwable[])>
<okhttp3.ConnectionSpec: java.util.List tlsVersions()>
<rx.internal.util.UtilityFunctions$AlwaysFalse: java.lang.Boolean call(java.lang.Object)>
<rx.internal.operators.OperatorMapPair$1: rx.Observable call(java.lang.Object)>
<rx.Single$20: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorDebounceWithTime: java.lang.Object call(java.lang.Object)>
<rx.Completable$9: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.util.UtilityFunctions$NullFunction: void <init>()>
<rx.internal.operators.OnSubscribeRedo$2$1: void <init>(rx.internal.operators.OnSubscribeRedo$2)>
<rx.internal.util.IndexedRingBuffer: int forEach(rx.functions.Func1,int,int)>
<rx.observables.BlockingObservable$5: void onNext(java.lang.Object)>
<rx.observers.SerializedObserver$FastList: void add(java.lang.Object)>
<com.facebook.stetho.Stetho$PluginBuilder: void provide(java.lang.String,java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Database$1: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleSelect(android.database.Cursor)>
<com.facebook.stetho.dumpapp.DumpappOutputBrokenException: void <init>(java.lang.String)>
<rx.Single: rx.Single zip(rx.Single,rx.Single,rx.Single,rx.functions.Func3)>
<rx.internal.operators.OperatorPublish$2$1: void <init>(rx.internal.operators.OperatorPublish$2,rx.Subscriber,rx.internal.operators.OnSubscribePublishMulticast)>
<com.facebook.stetho.server.LocalSocketServer: void stop()>
<rx.Observable: rx.Observable distinctUntilChanged(rx.functions.Func1)>
<com.facebook.stetho.common.android.FragmentCompat: com.facebook.stetho.common.android.FragmentCompat getSupportLibInstance()>
<rx.internal.operators.OperatorPublish$PublishSubscriber: void onStart()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProviderFactory: void postAndWait(java.lang.Runnable)>
<okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>
<rx.observers.TestObserver: java.util.List getEvents()>
<rx.observables.AsyncOnSubscribe: java.lang.Object next(java.lang.Object,long,rx.Observer)>
<rx.internal.operators.OperatorDelayWithSelector: java.lang.Object call(java.lang.Object)>
<rx.Completable$6: void call(java.lang.Object)>
<rx.internal.schedulers.ImmediateScheduler: rx.Scheduler$Worker createWorker()>
<okio.GzipSource: void consumeHeader()>
<rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorDoOnUnsubscribe: void <init>(rx.functions.Action0)>
<okhttp3.HttpUrl: java.net.URL url()>
<retrofit2.ParameterHandler: retrofit2.ParameterHandler iterable()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentActivityAccessorSupportLib: void <init>(com.facebook.stetho.common.android.FragmentCompatSupportLib$1)>
<retrofit2.ParameterHandler$FieldMap: void <init>(retrofit2.Converter,boolean)>
<com.facebook.stetho.common.android.FragmentCompatFramework: com.facebook.stetho.common.android.DialogFragmentAccessor forDialogFragment()>
<okhttp3.internal.connection.RouteSelector: java.net.Proxy nextProxy()>
<rx.Completable$16$1: void onCompleted()>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: java.lang.Object getFragmentManager(java.lang.Object)>
<fr.masciulli.drinks.ui.activity.LiquorActivity: boolean matches(fr.masciulli.drinks.model.Drink)>
<rx.internal.operators.OnSubscribeRedo: rx.Observable redo(rx.Observable,rx.functions.Func1,rx.Scheduler)>
<rx.internal.util.SynchronizedSubscription: void unsubscribe()>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager$DevToolsSharedPreferencesListener: void unregister()>
<com.facebook.stetho.inspector.protocol.module.DOMStorage: void setDOMStorageItem(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.inspector.protocol.module.CSS$1: void <init>(com.facebook.stetho.inspector.protocol.module.CSS,com.facebook.stetho.inspector.protocol.module.CSS$GetComputedStyleForNodeRequest,com.facebook.stetho.inspector.protocol.module.CSS$GetComputedStyleForNodeResult)>
<okhttp3.internal.framed.PushObserver$1: boolean onRequest(int,java.util.List)>
<rx.Completable$20: void <init>(rx.Completable,java.util.concurrent.CountDownLatch,java.lang.Throwable[])>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void onCompleted()>
<rx.Observable: rx.Observable delay(rx.functions.Func1)>
<com.squareup.picasso.MarkableInputStream: void close()>
<rx.observables.ConnectableObservable$1: void call(rx.Subscription)>
<okhttp3.internal.framed.FramedConnection: void <clinit>()>
<com.facebook.stetho.inspector.protocol.module.DOMStorage$GetDOMStorageItemsResult: void <init>(com.facebook.stetho.inspector.protocol.module.DOMStorage$1)>
<okio.HashingSink: okio.ByteString hash()>
<okhttp3.MediaType: boolean equals(java.lang.Object)>
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder callbackExecutor(java.util.concurrent.Executor)>
<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>
<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback)>
<rx.internal.util.unsafe.SpmcArrayQueueConsumerField: boolean casHead(long,long)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction: void <init>(rx.functions.Func1)>
<okio.GzipSink: void flush()>
<com.facebook.stetho.common.android.ViewUtil$ViewCompat$ViewCompatHoneycomb: void <init>()>
<rx.internal.operators.OperatorReplay$7: void call(rx.Subscriber)>
<okio.Buffer: int readIntLe()>
<okio.Okio: void <init>()>
<rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver: void onError(java.lang.Throwable)>
<rx.internal.producers.ProducerArbiter: void <init>()>
<rx.observers.Subscribers$2: void onNext(java.lang.Object)>
<rx.observers.TestSubscriber: void assertCompleted()>
<com.facebook.stetho.inspector.elements.NodeDescriptor: void getAccessibilityStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<okio.GzipSource: long read(okio.Buffer,long)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void hideHighlight()>
<com.facebook.stetho.inspector.protocol.module.Database$1: java.lang.Object handleSelect(android.database.Cursor)>
<com.facebook.stetho.common.ThreadBound: void postAndWait(java.lang.Runnable)>
<rx.internal.operators.CachedObservable$CacheState: void dispatch()>
<com.facebook.stetho.inspector.network.CountingOutputStream: void <init>(java.io.OutputStream)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void bindDrinkHolder(fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,int)>
<rx.internal.operators.OnSubscribeRedo$5: void <init>(rx.internal.operators.OnSubscribeRedo,java.util.concurrent.atomic.AtomicLong,rx.internal.producers.ProducerArbiter,java.util.concurrent.atomic.AtomicBoolean,rx.Scheduler$Worker,rx.functions.Action0)>
<okhttp3.internal.http.Http2xStream: java.lang.String joinOnNull(java.lang.String,java.lang.String)>
<rx.internal.operators.OperatorPublish$InnerProducer: long produced(long)>
<com.squareup.picasso.Action: java.lang.Object getTag()>
<okhttp3.internal.framed.Spdy3$Reader: void readSettings(okhttp3.internal.framed.FrameReader$Handler,int,int)>
<rx.exceptions.CompositeException$PrintStreamOrWriter: void println(java.lang.Object)>
<okhttp3.internal.cache.DiskLruCache$Snapshot: void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String,long,okio.Source[],long[],okhttp3.internal.cache.DiskLruCache$1)>
<okio.SegmentedByteString: boolean equals(java.lang.Object)>
<com.facebook.stetho.inspector.network.GunzippingOutputStream: void <init>(java.io.OutputStream,java.util.concurrent.Future)>
<com.facebook.stetho.inspector.network.CountingOutputStream: long getCount()>
<rx.internal.operators.OnSubscribeRefCount$2: void cleanup()>
<okio.InflaterSource: boolean refill()>
<rx.Completable: rx.Completable timeout(long,java.util.concurrent.TimeUnit,rx.Scheduler,rx.Completable)>
<rx.internal.util.unsafe.UnsafeAccess: int getAndSetInt(java.lang.Object,long,int)>
<rx.functions.Func0: java.lang.Object call()>
<rx.SingleSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorScan$2: void <init>(rx.internal.operators.OperatorScan,rx.Subscriber,rx.Subscriber)>
<okhttp3.internal.cache.DiskLruCache$Snapshot: long getLength(int)>
<com.facebook.stetho.inspector.elements.Document: java.lang.Object getElementForNodeId(int)>
<retrofit2.Utils$WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>
<rx.Completable$22: void <init>(rx.Completable,rx.Scheduler)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: void onCompleted()>
<com.facebook.stetho.common.LogUtil: void w(java.lang.Throwable,java.lang.String)>
<com.facebook.stetho.common.android.ViewGroupUtil: int findChildIndex(android.view.ViewGroup,android.view.View)>
<rx.internal.util.RxRingBuffer: boolean accept(java.lang.Object,rx.Observer)>
<com.squareup.picasso.BitmapHunter: void <clinit>()>
<okio.SegmentedByteString: byte[] internalArray()>
<rx.internal.operators.OperatorReplay$ReplaySubscriber$1: void call()>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: android.view.View getView(java.lang.Object)>
<rx.internal.operators.OperatorBufferWithTime$ExactSubscriber: void <init>(rx.internal.operators.OperatorBufferWithTime,rx.Subscriber,rx.Scheduler$Worker)>
<com.facebook.stetho.common.android.FragmentCompatFramework: com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework forDialogFragment()>
<rx.subjects.ReplaySubject$ReplayBuffer: boolean isEmpty()>
<rx.internal.util.InternalObservableUtils$RetryNotificationDematerializer: void <init>(rx.functions.Func1)>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void truncate()>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorHeaders: java.lang.String headerName(int)>
<com.squareup.picasso.Cache: android.graphics.Bitmap get(java.lang.String)>
<rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer: void request(long)>
<rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl: void <init>(rx.functions.Func2)>
<okhttp3.RealCall$AsyncCall: okhttp3.Request request()>
<rx.internal.util.ObserverSubscriber: void <init>(rx.Observer)>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1: void onError(java.lang.Throwable)>
<okhttp3.internal.framed.Settings: boolean isFlowControlDisabled()>
<rx.Completable$17$1$1: void <init>(rx.Completable$17$1,rx.Subscription)>
<okhttp3.Response: okhttp3.Response networkResponse()>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.protocol.module.Runtime$EvaluateResponse buildNormalResponse(java.lang.Object)>
<rx.subjects.PublishSubject: rx.subjects.PublishSubject create()>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: java.lang.Object peek()>
<rx.functions.Actions$2: void <init>(rx.functions.Action1,java.lang.Object)>
<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>
<okhttp3.internal.platform.JdkWithJettyBootPlatform: void afterHandshake(javax.net.ssl.SSLSocket)>
<com.facebook.stetho.inspector.database.DefaultDatabaseFilesProvider: java.util.List getDatabaseFiles()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: void soConsumerIndex(long)>
<rx.internal.operators.OperatorDematerialize$Holder: void <init>()>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: int checkEOF(int)>
<rx.Observable: rx.Observable concat(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean add(java.lang.Object)>
<retrofit2.CallAdapter: java.lang.Object adapt(retrofit2.Call)>
<rx.internal.operators.OperatorDoOnRequest$1: void request(long)>
<rx.internal.util.UtilityFunctions: void <init>()>
<okio.Buffer: okio.Buffer copyTo(java.io.OutputStream)>
<rx.functions.Action5: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.Completable$10: void call(java.lang.Object)>
<rx.Single: rx.Single takeUntil(rx.Completable)>
<rx.internal.operators.OperatorMapNotification: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorTakeLastOne$ParentSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin: void dump(com.facebook.stetho.dumpapp.DumperContext)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.io.File findDatabaseFile(java.lang.String)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher: void stopScreencast()>
<rx.internal.operators.OperatorToObservableList: rx.internal.operators.OperatorToObservableList instance()>
<okhttp3.CertificatePinner$Builder: void <init>()>
<okhttp3.internal.cache.DiskLruCache$Snapshot: okhttp3.internal.cache.DiskLruCache$Editor edit()>
<okhttp3.CacheControl: boolean mustRevalidate()>
<rx.Observable: rx.Observable join(rx.Observable,rx.functions.Func1,rx.functions.Func1,rx.functions.Func2)>
<com.facebook.stetho.common.LogUtil: void i(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: java.lang.String getLocalName(java.lang.Object)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: java.lang.Object[] lvNext(java.lang.Object[])>
<okhttp3.internal.framed.Settings: void clear()>
<com.facebook.stetho.inspector.protocol.module.CSS$1$1: void store(java.lang.String,java.lang.String,boolean)>
<rx.Single: rx.Single zip(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.functions.Func7)>
<rx.observables.AsyncOnSubscribe: void call(java.lang.Object)>
<okio.RealBufferedSource: boolean rangeEquals(long,okio.ByteString)>
<okio.SegmentedByteString: void <init>(okio.Buffer,int)>
<rx.Notification: rx.Notification$Kind getKind()>
<rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker: rx.Subscription schedule(rx.functions.Action0)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$4: void <clinit>()>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.common.ExceptionUtil: java.lang.RuntimeException propagate(java.lang.Throwable)>
<com.squareup.picasso.Downloader: com.squareup.picasso.Downloader$Response load(android.net.Uri,int)>
<rx.Single: rx.Subscription subscribe(rx.Subscriber)>
<rx.internal.operators.CachedObservable$CacheState$1: void <init>(rx.internal.operators.CachedObservable$CacheState)>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager: void <init>(android.content.Context)>
<retrofit2.ServiceMethod$Builder: retrofit2.ParameterHandler parseParameterAnnotation(int,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],java.lang.'annotation'.Annotation)>
<retrofit2.ParameterHandler$RelativeUrl: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<com.facebook.stetho.inspector.elements.Document$ProviderListener: void onAttributeRemoved(java.lang.Object,java.lang.String)>
<okhttp3.internal.connection.RouteSelector: boolean hasNext()>
<com.facebook.stetho.server.http.HandlerRegistry: com.facebook.stetho.server.http.HttpHandler lookup(java.lang.String)>
<okhttp3.internal.connection.RouteException: java.io.IOException getLastConnectException()>
<com.facebook.stetho.inspector.protocol.module.DOM$HighlightNodeRequest: void <init>()>
<okio.SegmentedByteString: okio.ByteString md5()>
<okhttp3.internal.framed.FramedStream: okhttp3.internal.framed.FramedConnection getConnection()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getIdStyle(android.view.View,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<okio.ByteString: java.lang.String base64()>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor: void onHook(android.widget.TextView)>
<rx.internal.operators.OperatorDebounceWithTime$DebounceState: int next(java.lang.Object)>
<rx.internal.operators.OperatorMaterialize$1: void <init>(rx.internal.operators.OperatorMaterialize,rx.internal.operators.OperatorMaterialize$ParentSubscriber)>
<com.facebook.stetho.inspector.protocol.module.Database: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<okhttp3.internal.framed.FramedConnection$Reader$2: void <init>(okhttp3.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[])>
<rx.internal.operators.BlockingOperatorMostRecent: java.lang.Iterable mostRecent(rx.Observable,java.lang.Object)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: void clear()>
<com.facebook.stetho.inspector.elements.DocumentProvider: void setListener(com.facebook.stetho.inspector.elements.DocumentProviderListener)>
<okhttp3.Response: okhttp3.ResponseBody peekBody(long)>
<okhttp3.internal.framed.FramedConnection$Reader: void pushPromise(int,int,java.util.List)>
<rx.internal.operators.OperatorSampleWithObservable$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.websocket.WriteHandler: void write(com.facebook.stetho.websocket.Frame,com.facebook.stetho.websocket.WriteCallback)>
<rx.Single: rx.Single subscribeOn(rx.Scheduler)>
<rx.functions.Actions: rx.functions.Func1 toFunc(rx.functions.Action1,java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.DOM$PerformSearchRequest: void <init>()>
<rx.Completable$31$1: void onError(java.lang.Throwable)>
<rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker: rx.Subscription schedule(rx.functions.Action0)>
<rx.internal.util.atomic.MpscLinkedAtomicQueue: java.lang.Object peek()>
<okhttp3.MultipartBody$Builder: okhttp3.MultipartBody build()>
<com.facebook.stetho.websocket.WebSocketSession: void <init>(java.io.InputStream,java.io.OutputStream,com.facebook.stetho.websocket.SimpleEndpoint)>
<com.squareup.picasso.Dispatcher$DispatcherThread: void <init>()>
<rx.Completable: rx.Completable error(rx.functions.Func0)>
<rx.internal.operators.OperatorMapNotification: java.lang.Object call(java.lang.Object)>
<rx.observers.TestObserver: void <init>()>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: boolean add(rx.internal.operators.OperatorReplay$InnerProducer)>
<com.facebook.stetho.common.android.AccessibilityUtil: boolean isSpeakingNode(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.View)>
<okhttp3.RealCall$AsyncCall: void execute()>
<okio.SegmentedByteString: byte[] toByteArray()>
<com.squareup.picasso.NetworkRequestHandler: int getRetryCount()>
<rx.functions.Func9: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.elements.Document: void init()>
<rx.Observable: rx.Observable publish(rx.functions.Func1)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: fr.masciulli.drinks.ui.adapter.holder.TileViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<rx.subjects.UnicastSubject: void <init>(rx.subjects.UnicastSubject$State)>
<rx.internal.schedulers.NewThreadWorker$1: void run()>
<rx.internal.operators.OnSubscribeDetach$DetachProducer: boolean isUnsubscribed()>
<rx.subjects.PublishSubject: boolean hasThrowable()>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray: void call(rx.Completable$CompletableSubscriber)>
<rx.Scheduler$Worker: rx.Subscription schedule(rx.functions.Action0)>
<okhttp3.internal.framed.Huffman: void <clinit>()>
<rx.Single$19: void call(java.lang.Object)>
<com.squareup.picasso.FetchAction: void <init>(com.squareup.picasso.Picasso,com.squareup.picasso.Request,int,int,java.lang.Object,java.lang.String,com.squareup.picasso.Callback)>
<rx.functions.Action7: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<fr.masciulli.drinks.ui.activity.DrinkActivity$$Lambda$1: void onClick(android.view.View)>
<rx.internal.operators.OperatorDistinctUntilChanged$1: void <init>(rx.internal.operators.OperatorDistinctUntilChanged,rx.Subscriber,rx.Subscriber)>
<okhttp3.RealCall: java.lang.String toLoggableString()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onGetAccessibilityStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<rx.internal.operators.OperatorBufferWithSize$BufferExact: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorMerge$HolderDelayErrors: void <clinit>()>
<okhttp3.ConnectionPool$1: void <init>(okhttp3.ConnectionPool)>
<rx.internal.operators.OperatorTimeout$1: rx.Subscription call(rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber,java.lang.Long,rx.Scheduler$Worker)>
<com.squareup.picasso.NetworkPolicy: void <init>(java.lang.String,int,int)>
<com.facebook.stetho.inspector.protocol.module.Worker: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult canInspectWorkers(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.dumpapp.DumpappSocketLikeHandler: void <init>(com.facebook.stetho.dumpapp.Dumper)>
<okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>
<rx.internal.util.ObjectPool$1: void <init>(rx.internal.util.ObjectPool)>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap: void onCompleted()>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer: void invokeMethod(java.lang.String,java.lang.Object,com.facebook.stetho.inspector.jsonrpc.PendingRequestCallback)>
<rx.schedulers.TestScheduler: void advanceTimeTo(long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber: void next()>
<okhttp3.internal.framed.Spdy3$Reader: void readWindowUpdate(okhttp3.internal.framed.FrameReader$Handler,int,int)>
<rx.internal.operators.OperatorObserveOn$1: rx.Subscriber call(rx.Subscriber)>
<com.squareup.picasso.Target: void onBitmapFailed(android.graphics.drawable.Drawable)>
<com.facebook.stetho.websocket.WebSocketSession: void doWrite(com.facebook.stetho.websocket.Frame)>
<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>
<rx.Observable: rx.Observable window(long,java.util.concurrent.TimeUnit)>
<rx.internal.util.BackpressureDrainManager$BackpressureQueueCallback: void complete(java.lang.Throwable)>
<com.facebook.stetho.common.LogUtil: void e(java.lang.Throwable,java.lang.String)>
<rx.internal.operators.OperatorToObservableSortedList: rx.Subscriber call(rx.Subscriber)>
<com.squareup.picasso.ContentStreamRequestHandler: com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request,int)>
<okhttp3.internal.connection.RouteDatabase: void <init>()>
<rx.Completable$13$1: void dispose()>
<rx.observables.ConnectableObservable: rx.Observable autoConnect()>
<retrofit2.ExecutorCallAdapterFactory$1: void <init>(retrofit2.ExecutorCallAdapterFactory,java.lang.reflect.Type)>
<rx.internal.operators.OperatorUnsubscribeOn: rx.Subscriber call(rx.Subscriber)>
<rx.subjects.TestSubject$4: void call()>
<okio.RealBufferedSink: okio.BufferedSink write(byte[])>
<rx.Observable: rx.Observable concatDelayError(rx.Observable)>
<fr.masciulli.drinks.model.Drink: java.lang.String getInstructions()>
<com.facebook.stetho.websocket.FrameHelper: com.facebook.stetho.websocket.Frame createPingFrame(byte[],int)>
<com.facebook.stetho.inspector.network.PrettyPrinterDisplayType: com.facebook.stetho.inspector.network.PrettyPrinterDisplayType valueOf(java.lang.String)>
<okio.Okio$1: okio.Timeout timeout()>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: int getId(java.lang.Object)>
<rx.Observable: rx.Observable toMultimap(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0,rx.functions.Func1)>
<rx.internal.operators.OperatorCast: void <init>(java.lang.Class)>
<rx.android.schedulers.LooperScheduler$ScheduledAction: void unsubscribe()>
<rx.subscriptions.Subscriptions$FutureSubscription: void <init>(java.util.concurrent.Future)>
<rx.observers.Subscribers$3: void onCompleted()>
<rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver: void onNext(java.lang.Object)>
<rx.internal.util.unsafe.Pow2: boolean isPowerOfTwo(int)>
<rx.Completable$17$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.server.http.LightHttpServer: void serve(com.facebook.stetho.server.SocketLike)>
<rx.internal.operators.OperatorSkipWhile$1: void onCompleted()>
<rx.observables.BlockingObservable$5: void onCompleted()>
<rx.internal.operators.OperatorBufferWithSize$BufferExact$1: void <init>(rx.internal.operators.OperatorBufferWithSize$BufferExact)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>
<rx.internal.util.SynchronizedSubscription: boolean isUnsubscribed()>
<fr.masciulli.drinks.ui.activity.DrinkActivity: void lambda$setupViews$0(android.view.View)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void drain()>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$1: int getSpanSize(int)>
<rx.Completable$30: void <init>(rx.Completable)>
<com.facebook.stetho.inspector.protocol.module.Network$RequestWillBeSentParams: void <init>()>
<okhttp3.CertificatePinner: java.lang.String pin(java.security.cert.Certificate)>
<rx.internal.operators.OperatorMapNotification$1: void request(long)>
<okhttp3.internal.framed.FramedConnection: void addBytesToWriteWindow(long)>
<rx.Completable$2: void call(rx.Completable$CompletableSubscriber)>
<rx.subjects.ReplaySubject$ReplayState: void onCompleted()>
<rx.Single: rx.Observable concat(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<rx.internal.operators.OperatorZipIterable: java.lang.Object call(java.lang.Object)>
<rx.subjects.UnicastSubject: void onNext(java.lang.Object)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addPathSegments(java.lang.String)>
<com.squareup.picasso.NetworkPolicy: com.squareup.picasso.NetworkPolicy valueOf(java.lang.String)>
<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String)>
<com.facebook.stetho.common.ListUtil$TwoItemImmutableList: int size()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond$1: void onActivityDestroyed(android.app.Activity)>
<rx.internal.operators.OnSubscribeDetach$TerminatedProducer: void <clinit>()>
<rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator: void onError(java.lang.Throwable)>
<okhttp3.FormBody: okhttp3.MediaType contentType()>
<rx.internal.operators.OperatorReplay$ReplayBuffer: void replay(rx.internal.operators.OperatorReplay$InnerProducer)>
<okhttp3.internal.io.FileSystem: okio.Sink sink(java.io.File)>
<rx.internal.operators.OnSubscribeFromIterable$IterableProducer: void request(long)>
<rx.internal.operators.CompletableOnSubscribeMergeIterable$1: void onSubscribe(rx.Subscription)>
<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>
<com.facebook.stetho.inspector.network.RequestBodyHelper: void <init>(com.facebook.stetho.inspector.network.NetworkEventReporter,java.lang.String)>
<retrofit2.Utils$ParameterizedTypeImpl: int hashCode()>
<com.facebook.stetho.inspector.database.DefaultDatabaseFilesProvider: void <init>(android.content.Context)>
<rx.subscriptions.SerialSubscription$State: rx.subscriptions.SerialSubscription$State unsubscribe()>
<okio.RealBufferedSink: okio.BufferedSink writeString(java.lang.String,int,int,java.nio.charset.Charset)>
<com.facebook.stetho.inspector.protocol.module.DOMStorage: void <init>(android.content.Context)>
<rx.internal.util.InternalObservableUtils$PlusOneLongFunc2: void <init>()>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$IntegerMethodInvoker: java.lang.Integer convertArgument(java.lang.String)>
<okhttp3.CacheControl: boolean isPublic()>
<rx.subjects.PublishSubject: boolean hasObservers()>
<rx.internal.util.RxRingBuffer: void <init>(java.util.Queue,int)>
<rx.internal.operators.NeverObservableHolder: void <clinit>()>
<okhttp3.internal.framed.FramedConnection$Builder: okhttp3.internal.framed.FramedConnection build()>
<rx.subjects.UnicastSubject$State: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: java.lang.Object getFragmentManager(java.lang.Object)>
<rx.internal.operators.OperatorSkipWhile$1: void onNext(java.lang.Object)>
<rx.Single: rx.Subscription subscribe(rx.functions.Action1,rx.functions.Action1)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse: java.lang.String url()>
<rx.functions.Functions$13: java.lang.Object call(java.lang.Object[])>
<com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeRemovedEvent acquireChildNodeRemovedEvent()>
<okhttp3.internal.framed.FramedConnection$Reader: void <init>(okhttp3.internal.framed.FramedConnection,okhttp3.internal.framed.FrameReader)>
<rx.internal.operators.OperatorTakeWhile$2: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorMaterialize$ParentSubscriber: void requestMore(long)>
<rx.internal.operators.BlockingOperatorLatest: void <init>()>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void error(java.lang.Throwable,long)>
<rx.Completable: rx.Completable doOnLifecycle(rx.functions.Action1,rx.functions.Action1,rx.functions.Action0,rx.functions.Action0,rx.functions.Action0)>
<com.squareup.picasso.Cache$1: int size()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: android.support.v4.app.FragmentManager getFragmentManager(android.support.v4.app.Fragment)>
<com.squareup.picasso.Request: java.lang.String getName()>
<rx.Observable: rx.Observable concatEager(rx.Observable,int)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: android.support.v7.widget.RecyclerView$LayoutManager craftLayoutManager(android.content.Context)>
<okio.SegmentedByteString: int indexOf(byte[],int)>
<rx.subjects.UnicastSubject$State: void unsubscribe()>
<okhttp3.internal.framed.FramedConnection: okhttp3.internal.framed.FramedStream removeStream(int)>
<rx.internal.operators.OperatorBufferWithTime$ExactSubscriber: void scheduleExact()>
<rx.Observable: rx.Observable just(java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin$ThrowRunnable: void <init>(java.lang.Throwable)>
<okhttp3.internal.framed.Hpack$Reader: int readByte()>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$1: void <init>(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<com.facebook.stetho.server.AddressNameHelper: void <init>()>
<rx.internal.util.atomic.LinkedQueueNode: void soNext(rx.internal.util.atomic.LinkedQueueNode)>
<okhttp3.internal.framed.Http2: okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean)>
<okhttp3.internal.cache.DiskLruCache$Editor: void <init>(okhttp3.internal.cache.DiskLruCache,okhttp3.internal.cache.DiskLruCache$Entry)>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: rx.internal.util.atomic.LinkedQueueNode xchgProducerNode(rx.internal.util.atomic.LinkedQueueNode)>
<rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler$1: void call()>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter$$Lambda$1: void <init>(fr.masciulli.drinks.ui.adapter.DrinksAdapter,fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Drink)>
<com.facebook.stetho.json.ObjectMapper: boolean isWrapperOrPrimitiveType(java.lang.Class)>
<com.facebook.stetho.inspector.protocol.module.Console$ConsoleMessage: void <init>()>
<rx.subscriptions.SerialSubscription: rx.Subscription get()>
<rx.internal.operators.OperatorFilter$FilterSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.DOM$AttributeRemovedEvent: void <init>()>
<rx.observers.Subscribers$2: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorAll: java.lang.Object call(java.lang.Object)>
<rx.Single: rx.Observable toObservable()>
<rx.Completable$24$1$1: void <init>(rx.Completable$24$1)>
<okhttp3.internal.tls.DistinguishedNameParser: java.lang.String findMostSpecific(java.lang.String)>
<rx.Observable: rx.Observable takeLastBuffer(int,long,java.util.concurrent.TimeUnit)>
<com.squareup.picasso.Target: void onBitmapLoaded(android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom)>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1: void onNext(java.lang.Object)>
<rx.Single$23: void onNext(java.lang.Object)>
<rx.internal.operators.CompletableOnSubscribeTimeout$2: void <init>(rx.internal.operators.CompletableOnSubscribeTimeout,rx.subscriptions.CompositeSubscription,java.util.concurrent.atomic.AtomicBoolean,rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightDurationObserver: void onNext(java.lang.Object)>
<okhttp3.internal.framed.Http2$Reader: void readData(okhttp3.internal.framed.FrameReader$Handler,int,byte,int)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: java.lang.String getTag(java.lang.Object)>
<okhttp3.MultipartBody$Builder: void <init>()>
<rx.exceptions.CompositeException$CompositeExceptionCausalChain: java.lang.String getMessage()>
<okhttp3.internal.framed.Hpack$Reader: void <init>(int,int,okio.Source)>
<okio.Buffer: okio.BufferedSink write(okio.Source,long)>
<rx.internal.operators.OperatorReplay: void <clinit>()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: void onGetChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<okhttp3.Cache$1: void update(okhttp3.Response,okhttp3.Response)>
<rx.internal.util.BackpressureDrainManager: void terminateAndDrain()>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerSubscriber: void <init>(rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber)>
<rx.internal.schedulers.EventLoopsScheduler: rx.Scheduler$Worker createWorker()>
<rx.Completable$22$1: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable takeLast(long,java.util.concurrent.TimeUnit)>
<rx.internal.producers.ProducerObserverArbiter: void emitLoop()>
<rx.internal.util.unsafe.MpscLinkedQueue: rx.internal.util.atomic.LinkedQueueNode xchgProducerNode(rx.internal.util.atomic.LinkedQueueNode)>
<com.facebook.stetho.inspector.elements.NodeType: void <init>(java.lang.String,int,int)>
<rx.BackpressureOverflow$Error: void <init>()>
<rx.Completable$30: void call(rx.Subscriber)>
<rx.Notification: java.lang.Throwable getThrowable()>
<rx.internal.operators.OperatorSkipTimed$2: void <init>(rx.internal.operators.OperatorSkipTimed,rx.Subscriber,java.util.concurrent.atomic.AtomicBoolean,rx.Subscriber)>
<rx.internal.operators.OperatorAsObservable: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.CachedObservable$CachedSubscribe: void call(rx.Subscriber)>
<com.squareup.picasso.DeferredRequestCreator: void <init>(com.squareup.picasso.RequestCreator,android.widget.ImageView)>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: int putObject(java.lang.Object)>
<okhttp3.internal.framed.Settings: int getClientCertificateVectorSize(int)>
<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: long contentLength()>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.lang.Object getRootElement()>
<rx.internal.operators.OnSubscribeRedo$4$1: void <init>(rx.internal.operators.OnSubscribeRedo$4,rx.Subscriber)>
<okhttp3.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>
<rx.Observable: rx.Observable throttleLast(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.protocol.module.Page: void sendWelcomeMessage(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<rx.Completable: rx.Completable mergeDelayError(rx.Observable)>
<rx.internal.operators.OnSubscribeAmb: rx.Observable$OnSubscribe amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<okio.Buffer$2: int available()>
<okio.ByteString: okio.ByteString md5()>
<rx.functions.Func5: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.server.http.PathMatcher: boolean match(java.lang.String)>
<okio.Buffer: java.lang.String readString(java.nio.charset.Charset)>
<com.facebook.stetho.inspector.elements.DocumentProvider: void setInspectModeEnabled(boolean)>
<okhttp3.Cookie: boolean pathMatch(okhttp3.HttpUrl,java.lang.String)>
<rx.internal.operators.OperatorUnsubscribeOn$1: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.HeapProfiler$ProfileHeaderResponse: void <init>()>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$HoneycombImpl: void <init>()>
<rx.Completable$14: void onCompleted()>
<com.facebook.stetho.inspector.elements.Document$3: void store(java.lang.Object)>
<com.facebook.stetho.inspector.helper.ChromePeerManager: void sendNotificationToPeers(java.lang.String,java.lang.Object)>
<rx.internal.operators.OnSubscribeDetach$DetachSubscriber: void setProducer(rx.Producer)>
<com.facebook.stetho.common.ThreadBound: void verifyThreadAccess()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays: com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays newInstance()>
<rx.observables.AsyncOnSubscribe$3: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.Single: rx.Single retry()>
<com.squareup.picasso.Cache: void <clinit>()>
<rx.BackpressureOverflow$Error: boolean mayAttemptDrop()>
<rx.internal.operators.OperatorToMap: rx.Subscriber call(rx.Subscriber)>
<com.squareup.picasso.TargetAction: void complete(android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom)>
<retrofit2.adapter.rxjava.CompletableHelper$CompletableCallOnSubscribe: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.Single: rx.Single nest()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String onGetNodeName(android.view.View)>
<rx.internal.operators.BackpressureUtils: long multiplyCap(long,long)>
<okio.ByteString: void writeObject(java.io.ObjectOutputStream)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$PaddingLeftHighlightDrawable: void highlightView(android.view.View)>
<okhttp3.HttpUrl$Builder: java.lang.String inet6AddressToAscii(byte[])>
<rx.Single: rx.Single retry(long)>
<rx.observers.SafeCompletableSubscriber: void onError(java.lang.Throwable)>
<rx.observables.SyncOnSubscribe: rx.observables.SyncOnSubscribe createStateless(rx.functions.Action1)>
<rx.Completable$29$1: void <init>(rx.Completable$29,rx.Completable$CompletableSubscriber,rx.Scheduler$Worker)>
<okio.Buffer$1: void <init>(okio.Buffer)>
<com.squareup.picasso.Request: boolean needsMatrixTransform()>
<com.facebook.stetho.common.android.HandlerUtil: boolean checkThreadAccess(android.os.Handler)>
<com.squareup.picasso.Action: com.squareup.picasso.Request getRequest()>
<rx.internal.operators.CachedObservable$CacheState$1: void onCompleted()>
<com.facebook.stetho.server.http.LightHttpMessage: void addHeader(java.lang.String,java.lang.String)>
<rx.Observable: rx.observables.ConnectableObservable publish()>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: boolean add(java.lang.Object)>
<okhttp3.internal.framed.FramedStream: void cancelStreamIfNecessary()>
<rx.internal.operators.OperatorMaterialize: void <init>()>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber$1: void call()>
<com.facebook.stetho.Stetho$Initializer$RealSocketHandlerFactory: com.facebook.stetho.server.SocketHandler create()>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor$ElementContext: void afterTextChanged(android.text.Editable)>
<retrofit2.Utils$GenericArrayTypeImpl: boolean equals(java.lang.Object)>
<com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder: void releaseNotNewChildrenHashSet(java.util.HashSet)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$2: void onItemClick(int,java.lang.Object)>
<rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber: void onCompleted()>
<okhttp3.CacheControl: int maxStaleSeconds()>
<okhttp3.internal.io.FileSystem$1: void deleteContents(java.io.File)>
<com.squareup.picasso.Picasso: void setLoggingEnabled(boolean)>
<okio.RealBufferedSink: okio.BufferedSink writeUtf8(java.lang.String,int,int)>
<rx.functions.Functions: rx.functions.FuncN fromAction(rx.functions.Action1)>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: android.app.Dialog getDialog(android.app.DialogFragment)>
<rx.internal.operators.OperatorTakeUntilPredicate$1: void request(long)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: void spElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>
<com.facebook.stetho.common.ListUtil: boolean identityEquals(java.util.List,java.util.List)>
<okhttp3.internal.framed.Http2$Reader: void readRstStream(okhttp3.internal.framed.FrameReader$Handler,int,byte,int)>
<rx.Completable$22$1$2: void <init>(rx.Completable$22$1,java.lang.Throwable)>
<rx.Completable$3: void <init>(rx.Completable[])>
<okio.Options: okio.ByteString get(int)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: boolean checkTerminated(boolean,boolean,java.lang.Throwable,rx.internal.util.atomic.SpscLinkedArrayQueue,rx.Subscriber,boolean)>
<rx.internal.producers.QueuedValueProducer: void request(long)>
<retrofit2.DefaultCallAdapterFactory$1: java.lang.reflect.Type responseType()>
<com.facebook.stetho.websocket.FrameHelper: com.facebook.stetho.websocket.Frame createSimpleFrame(byte,byte[],int)>
<rx.observers.SerializedSubscriber: void onCompleted()>
<okhttp3.internal.framed.FramedConnection: void writeSynReply(int,boolean,java.util.List)>
<com.facebook.stetho.inspector.protocol.module.CSS$GetComputedStyleForNodeResult: void <init>()>
<rx.Single$15: void onCompleted()>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: void complete()>
<rx.internal.util.UtilityFunctions$AlwaysTrue: void <clinit>()>
<rx.internal.operators.OperatorDoOnRequest: rx.Subscriber call(rx.Subscriber)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void lambda$onCreateView$0(android.view.View)>
<com.facebook.stetho.inspector.elements.Document: boolean doesElementMatch(java.lang.Object,java.util.regex.Pattern)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: void <init>(java.lang.String,okhttp3.Request,com.facebook.stetho.inspector.network.RequestBodyHelper)>
<rx.Single$19$1: void <init>(rx.Single$19,rx.SingleSubscriber,rx.Scheduler$Worker)>
<rx.internal.util.SynchronizedQueue: boolean remove(java.lang.Object)>
<rx.internal.util.SynchronizedQueue: boolean retainAll(java.util.Collection)>
<com.facebook.stetho.inspector.database.ContentProviderSchema: java.lang.String getTableName()>
<rx.internal.operators.OperatorTake: void <init>(int)>
<okhttp3.ResponseBody: okio.BufferedSource source()>
<okhttp3.Handshake: okhttp3.Handshake get(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>
<rx.internal.operators.OnSubscribeDelaySubscriptionOther: void call(java.lang.Object)>
<rx.internal.operators.OperatorDematerialize$1: void onCompleted()>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: java.lang.Object next()>
<rx.plugins.RxJavaPlugins: void registerSchedulersHook(rx.plugins.RxJavaSchedulersHook)>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager$1: void onLastPeerUnregistered()>
<okio.BufferedSink: okio.BufferedSink write(byte[])>
<rx.internal.operators.OnSubscribeDelaySubscriptionOther: void <init>(rx.Observable,rx.Observable)>
<com.squareup.picasso.PicassoExecutorService$PicassoFutureTask: void <init>(com.squareup.picasso.BitmapHunter)>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: void emitNext(java.lang.Object,rx.internal.operators.NotificationLite)>
<rx.subjects.SerializedSubject: boolean hasObservers()>
<rx.subjects.ReplaySubject: java.lang.Throwable getThrowable()>
<com.squareup.picasso.Downloader$Response: void <init>(android.graphics.Bitmap,boolean,long)>
<rx.internal.schedulers.TrampolineScheduler: rx.Scheduler$Worker createWorker()>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: void reset()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void setAttributesAsText(java.lang.Object,java.lang.String)>
<com.facebook.stetho.inspector.network.RequestBodyHelper: boolean hasBody()>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void innerProducer(rx.Producer,long)>
<okio.DeflaterSink: void write(okio.Buffer,long)>
<okio.RealBufferedSource: short readShortLe()>
<okio.Segment: okio.Segment push(okio.Segment)>
<rx.internal.util.InternalObservableUtils: rx.functions.Func0 createReplaySupplier(rx.Observable,int,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1: void <init>(rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray,rx.subscriptions.CompositeSubscription,java.util.Queue,java.util.concurrent.atomic.AtomicInteger,rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorMaterialize$Holder: void <clinit>()>
<okhttp3.CacheControl: int maxAgeSeconds()>
<okhttp3.internal.http.Http2xStream: okhttp3.Response$Builder readResponseHeaders()>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$BitmapFetchRunnable: void updateScreenBitmap()>
<rx.internal.operators.OperatorDelayWithSelector: void <init>(rx.Observable,rx.functions.Func1)>
<com.facebook.stetho.inspector.protocol.module.DOM$PerformSearchResponse: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<rx.Completable$21: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorGroupBy: void <init>(rx.functions.Func1,rx.functions.Func1,int,boolean)>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: void drain()>
<okio.Sink: void close()>
<rx.internal.operators.OperatorToMap$DefaultToMapFactory: java.util.Map call()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: java.lang.String onGetNodeValue(java.lang.Object)>
<rx.observers.Observers$4: void <init>(rx.functions.Action0,rx.functions.Action1,rx.functions.Action1)>
<com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder: void setElementParent(java.lang.Object,java.lang.Object)>
<rx.Observable: rx.Observable timer(long,java.util.concurrent.TimeUnit)>
<rx.exceptions.CompositeException$WrappedPrintStream: void println(java.lang.Object)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void onCompleted()>
<okhttp3.internal.cache.DiskLruCache: boolean journalRebuildRequired()>
<rx.Single: rx.Observable concatWith(rx.Single)>
<okhttp3.internal.framed.Spdy3$Writer: void headers(int,java.util.List)>
<com.facebook.stetho.common.Util: void throwIfNull(java.lang.Object,java.lang.Object)>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void onNext(java.lang.Object)>
<com.squareup.picasso.MarkableInputStream: void setLimit(long)>
<rx.Observable: rx.Observable singleOrDefault(java.lang.Object,rx.functions.Func1)>
<rx.observables.SyncOnSubscribe$1: void <init>(rx.functions.Action2)>
<rx.internal.operators.OperatorTimeout: void <init>(long,java.util.concurrent.TimeUnit,rx.Observable,rx.Scheduler)>
<rx.Single$25: void call(java.lang.Object)>
<okhttp3.internal.tls.DistinguishedNameParser: char getUTF8()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.lang.Object newBufferPeek(java.util.concurrent.atomic.AtomicReferenceArray,long,int)>
<rx.Single$1: void call(rx.Subscriber)>
<rx.internal.operators.OnSubscribeUsing$DisposeAction: void unsubscribe()>
<rx.observers.TestSubscriber$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorOnBackpressureDrop$Holder: void <init>()>
<okhttp3.internal.http.Http2xStream: void writeRequestHeaders(okhttp3.Request)>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<com.facebook.stetho.inspector.protocol.module.CSS$2: void run()>
<rx.subjects.ReplaySubject: void onNext(java.lang.Object)>
<com.squareup.picasso.UrlConnectionDownloader: void <init>(android.content.Context)>
<com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder: void setElementChildren(java.lang.Object,java.util.List)>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void <init>(com.facebook.stetho.inspector.elements.Document)>
<rx.internal.operators.OperatorPublish$InnerProducer: boolean isUnsubscribed()>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: void onStart()>
<rx.internal.operators.NeverObservableHolder: rx.internal.operators.NeverObservableHolder valueOf(java.lang.String)>
<rx.Observable: rx.Observable flatMap(rx.functions.Func1,rx.functions.Func2,int)>
<com.facebook.stetho.common.LogRedirector: void w(java.lang.String,java.lang.String)>
<com.facebook.stetho.common.LogUtil: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber: void onNext(java.lang.Object)>
<okhttp3.Handshake: int hashCode()>
<fr.masciulli.drinks.model.Liquor: void <init>(android.os.Parcel)>
<retrofit2.Retrofit: void eagerlyValidateMethods(java.lang.Class)>
<rx.internal.operators.OperatorTimeout$1: void <init>(long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener: void <init>(java.util.List)>
<rx.Single$21: void <init>(rx.Single,rx.Observable)>
<retrofit2.adapter.rxjava.CompletableHelper: retrofit2.CallAdapter createCallAdapter(rx.Scheduler)>
<retrofit2.http.Part: java.lang.String encoding()>
<rx.internal.util.IndexedRingBuffer: void <init>()>
<com.facebook.stetho.websocket.Frame: void writeTo(java.io.BufferedOutputStream)>
<com.squareup.picasso.RequestHandler: boolean requiresInSampleSize(android.graphics.BitmapFactory$Options)>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager: java.util.Set shallowCopy(java.util.Set)>
<fr.masciulli.drinks.ui.activity.DrinkActivity: void onCreate(android.os.Bundle)>
<rx.internal.operators.OperatorToMultimap: void <init>(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0,rx.functions.Func1)>
<com.squareup.picasso.Utils: android.content.res.Resources getResources(android.content.Context,com.squareup.picasso.Request)>
<rx.internal.operators.BlockingOperatorNext: java.lang.Iterable next(rx.Observable)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2: rx.Observable call(java.lang.Throwable)>
<com.squareup.picasso.Stats: void performBitmapDecoded(long)>
<rx.Completable$17: void call(java.lang.Object)>
<okhttp3.HttpUrl: int querySize()>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode: void <clinit>()>
<rx.observers.TestSubscriber: void <init>(rx.Observer)>
<rx.observables.GroupedObservable: rx.observables.GroupedObservable create(java.lang.Object,rx.Observable$OnSubscribe)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void drain()>
<rx.subjects.TestSubject$1: void call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: void <clinit>()>
<rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber: void onCompleted()>
<rx.internal.operators.OperatorTakeLast$1: void request(long)>
<rx.Completable: rx.Completable endWith(rx.Completable)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkJellyBean: java.lang.Object getChildFragmentManager(java.lang.Object)>
<retrofit2.BuiltInConverters$VoidResponseBodyConverter: java.lang.Object convert(java.lang.Object)>
<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>
<rx.Observable: rx.Observable repeat(long,rx.Scheduler)>
<okhttp3.internal.framed.FramedStream$FramedDataSource: void receive(okio.BufferedSource,long)>
<okhttp3.internal.platform.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>
<okhttp3.internal.framed.FramedConnection: void close()>
<com.facebook.stetho.dumpapp.plugins.HprofDumperPlugin: void usage(java.io.PrintStream)>
<rx.functions.Action0: void call()>
<rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onGetAttributes(java.lang.Object,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<rx.schedulers.TestScheduler: void triggerActions(long)>
<okio.SegmentedByteString: java.lang.String hex()>
<rx.internal.operators.OperatorToObservableSortedList$1: int compare(java.lang.Object,java.lang.Object)>
<rx.Single: rx.Single using(rx.functions.Func0,rx.functions.Func1,rx.functions.Action1)>
<rx.internal.producers.SingleDelayedProducer: void emit(rx.Subscriber,java.lang.Object)>
<rx.Observable: rx.Observable toSortedList(rx.functions.Func2)>
<com.facebook.stetho.inspector.elements.Document: void removeUpdateListener(com.facebook.stetho.inspector.elements.Document$UpdateListener)>
<okhttp3.internal.connection.RouteException: void <clinit>()>
<com.facebook.stetho.inspector.protocol.module.Database: boolean fastIsAscii(byte[])>
<com.facebook.stetho.inspector.elements.Descriptor: boolean isInitialized()>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: boolean sameConnection(okhttp3.Response,okhttp3.HttpUrl)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1: void <init>(rx.functions.Func1)>
<rx.observers.Subscribers$1: void onError(java.lang.Throwable)>
<okhttp3.Credentials: void <init>()>
<rx.internal.producers.QueuedProducer: boolean checkTerminated(boolean,boolean)>
<com.facebook.stetho.inspector.database.DefaultDatabaseConnectionProvider: android.database.sqlite.SQLiteDatabase performOpen(java.io.File,int)>
<rx.Observable: rx.Observable just(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.elements.Descriptor$Host: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String)>
<rx.Completable: void <clinit>()>
<rx.Single: rx.Single 'from'(java.util.concurrent.Future)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager: void <init>(rx.internal.operators.OnSubscribeGroupJoin,rx.Subscriber)>
<rx.observers.TestSubscriber: void assertValues(java.lang.Object[])>
<com.facebook.stetho.inspector.protocol.module.Page: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult hasTouchInputs(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$CancellationRunnable: void run()>
<rx.subjects.BehaviorSubject: boolean hasThrowable()>
<okio.GzipSource: void checkEqual(java.lang.String,int,int)>
<com.facebook.stetho.common.android.FragmentCompatUtil: java.lang.Object findFragmentForViewInFragmentManager(com.facebook.stetho.common.android.FragmentCompat,java.lang.Object,android.view.View)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory: com.facebook.stetho.inspector.network.AsyncPrettyPrinter getErrorAsyncPrettyPrinter(java.lang.String,java.lang.String)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.console.ConsolePeerManager: com.facebook.stetho.inspector.console.ConsolePeerManager getOrCreateInstance()>
<rx.internal.operators.SingleDoAfterTerminate: void <init>(rx.Single,rx.functions.Action0)>
<okhttp3.internal.cache.DiskLruCache$4: void close()>
<okio.Buffer: void require(long)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$BooleanMethodInvoker: void <init>()>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectSubType: java.lang.String getProtocolValue()>
<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>
<rx.internal.util.unsafe.SpmcArrayQueueConsumerField: long lvConsumerIndex()>
<rx.Observable: rx.Observable amb(rx.Observable,rx.Observable,rx.Observable)>
<rx.Observable: rx.Observable exists(rx.functions.Func1)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: void <init>(java.lang.String,okhttp3.Request,okhttp3.Response,okhttp3.Connection)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedUsername(java.lang.String)>
<rx.internal.util.ObserverSubscriber: void onError(java.lang.Throwable)>
<okio.Sink: void flush()>
<rx.internal.operators.OperatorTake$1: void onCompleted()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: int size()>
<com.squareup.picasso.Action: void complete(android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom)>
<okhttp3.Cache$2: void <init>(okhttp3.Cache)>
<okhttp3.internal.connection.RealConnection: java.lang.String toString()>
<rx.Observable: rx.Observable doOnCompleted(rx.functions.Action0)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.lang.Object executeInsert(android.database.sqlite.SQLiteDatabase,java.lang.String,com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler)>
<fr.masciulli.drinks.model.Drink: java.lang.String getImageUrl()>
<rx.internal.operators.OperatorZipIterable$1: void onCompleted()>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: java.lang.Object lvElement(int)>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager: void <init>(android.content.Context)>
<rx.Observable: rx.Observable merge(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.exceptions.OnErrorThrowable$OnNextValue$Primitives: void <clinit>()>
<com.facebook.stetho.dumpapp.Dumper: void <init>(java.lang.Iterable)>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.protocol.module.Runtime$EvaluateResponse buildExceptionResponse(java.lang.Object)>
<rx.internal.operators.OperatorTakeLastTimed$1: void request(long)>
<com.facebook.stetho.common.android.FragmentCompatFramework: com.facebook.stetho.common.android.FragmentAccessor forFragment()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void setInspectModeEnabled(boolean)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: int calcDirectOffset(int)>
<okhttp3.internal.Util: java.lang.String toHumanReadableAscii(java.lang.String)>
<com.squareup.picasso.RequestCreator: android.graphics.drawable.Drawable getPlaceholderDrawable()>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: void <init>()>
<rx.internal.operators.OperatorWindowWithTime: rx.Subscriber call(rx.Subscriber)>
<rx.Observable: rx.Observable zip(rx.Observable,rx.functions.FuncN)>
<rx.Observable: rx.Observable toSortedList(int)>
<rx.functions.Actions: rx.functions.Func3 toFunc(rx.functions.Action3,java.lang.Object)>
<rx.internal.util.unsafe.Pow2: void <init>()>
<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>
<okio.BufferedSource: byte[] readByteArray()>
<rx.internal.util.ObserverSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void <clinit>()>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable,int)>
<rx.internal.operators.OperatorSkipLast$1: void <init>(rx.internal.operators.OperatorSkipLast,rx.Subscriber,rx.Subscriber)>
<com.facebook.stetho.inspector.network.NetworkPeerManager: com.facebook.stetho.inspector.network.ResponseBodyFileManager getResponseBodyFileManager()>
<rx.internal.util.SynchronizedQueue: boolean removeAll(java.util.Collection)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierNoParams: void <init>(rx.Observable)>
<rx.internal.util.RxRingBuffer: java.lang.Object getValue(java.lang.Object)>
<rx.internal.operators.OperatorZipIterable$1: void <init>(rx.internal.operators.OperatorZipIterable,rx.Subscriber,rx.Subscriber,java.util.Iterator)>
<rx.Observable: rx.Observable amb(java.lang.Iterable)>
<rx.internal.util.UtilityFunctions$AlwaysFalse: void <clinit>()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void getChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<okhttp3.Authenticator$1: void <init>()>
<rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber: void onError(java.lang.Throwable)>
<okio.ByteString: okio.ByteString decodeBase64(java.lang.String)>
<rx.internal.util.RxRingBuffer: int count()>
<rx.schedulers.TestScheduler$TimedAction: void <init>(rx.Scheduler$Worker,long,rx.functions.Action0)>
<com.facebook.stetho.inspector.network.DefaultResponseHandler: void onEOF()>
<rx.internal.operators.OperatorDelay$1: void onNext(java.lang.Object)>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: com.facebook.stetho.inspector.elements.Descriptor getDescriptor(java.lang.Object)>
<com.facebook.stetho.dumpapp.DumperContext: java.io.InputStream getStdin()>
<rx.internal.util.unsafe.SpmcArrayQueueConsumerField: void <init>(int)>
<retrofit2.Platform: retrofit2.CallAdapter$Factory defaultCallAdapterFactory(java.util.concurrent.Executor)>
<rx.observables.BlockingObservable$6: void onNext(java.lang.Object)>
<rx.subscriptions.RefCountSubscription$InnerSubscription: void <init>(rx.subscriptions.RefCountSubscription)>
<com.squareup.picasso.Dispatcher$1: void run()>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter$$Lambda$1: android.view.View$OnClickListener lambdaFactory$(fr.masciulli.drinks.ui.adapter.LiquorsAdapter,fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Liquor)>
<rx.Single$10: void <init>(rx.functions.Func6)>
<rx.Single: rx.Single timeout(long,java.util.concurrent.TimeUnit,rx.Single)>
<com.facebook.stetho.inspector.elements.DescriptorMap: com.facebook.stetho.inspector.elements.DescriptorMap endInit()>
<com.facebook.stetho.server.SocketLike: void <init>(android.net.LocalSocket,com.facebook.stetho.server.LeakyBufferedInputStream)>
<rx.observers.SerializedObserver: void <init>(rx.Observer)>
<rx.internal.util.ExceptionsUtils: rx.internal.util.ExceptionsUtils[] values()>
<com.facebook.stetho.inspector.elements.Document$1: void <init>(com.facebook.stetho.inspector.elements.Document)>
<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String)>
<okhttp3.internal.framed.FramedConnection: okhttp3.internal.framed.FramedStream pushStream(int,java.util.List,boolean)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: boolean isUnsubscribed()>
<retrofit2.RequestBuilder: void setRelativeUrl(java.lang.Object)>
<rx.schedulers.Schedulers: rx.Scheduler trampoline()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: com.facebook.stetho.inspector.protocol.module.Page$ResourceType determineResourceType(com.facebook.stetho.inspector.network.AsyncPrettyPrinter,java.lang.String,com.facebook.stetho.inspector.network.ResourceTypeHelper)>
<rx.Completable$32: void <init>(rx.Completable,java.lang.Object)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: void onBindViewHolder(fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,int)>
<rx.plugins.RxJavaSingleExecutionHook: rx.Subscription onSubscribeReturn(rx.Subscription)>
<rx.internal.operators.OperatorSkipLastTimed: rx.Subscriber call(rx.Subscriber)>
<com.squareup.picasso.MarkableInputStream: void <init>(java.io.InputStream)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: java.lang.Throwable error()>
<okio.BufferedSource: okio.ByteString readByteString(long)>
<rx.internal.operators.OperatorWindowWithStartEndObservable$1: void onCompleted()>
<rx.internal.operators.OperatorDebounceWithSelector$1$1: void onCompleted()>
<com.squareup.picasso.RemoteViewsAction$NotificationAction: void <init>(com.squareup.picasso.Picasso,com.squareup.picasso.Request,android.widget.RemoteViews,int,int,android.app.Notification,int,int,java.lang.String,java.lang.Object,int)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: void <init>(android.content.Context,com.facebook.stetho.inspector.database.DatabaseFilesProvider,com.facebook.stetho.inspector.database.DatabaseConnectionProvider)>
<com.facebook.stetho.inspector.runtime.RhinoDetectingRuntimeReplFactory: com.facebook.stetho.inspector.console.RuntimeRepl newInstance()>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder requestTransformer(com.squareup.picasso.Picasso$RequestTransformer)>
<rx.observers.SafeSubscriber: void onCompleted()>
<okhttp3.internal.framed.Hpack$Reader: void <init>(int,okio.Source)>
<okhttp3.Request: java.lang.Object tag()>
<com.facebook.stetho.websocket.WebSocketSession: void sendBinary(byte[])>
<rx.Single: rx.Subscription subscribe(rx.functions.Action1)>
<rx.Observable: rx.Observable switchOnNext(rx.Observable)>
<rx.internal.operators.OperatorSingle$ParentSubscriber: void onCompleted()>
<okhttp3.RequestBody: okhttp3.MediaType contentType()>
<okhttp3.CookieJar: void saveFromResponse(okhttp3.HttpUrl,java.util.List)>
<rx.internal.operators.OnSubscribeAutoConnect: void call(java.lang.Object)>
<com.facebook.stetho.server.LocalSocketServer$WorkerThread: void run()>
<rx.subjects.ReplaySubject: boolean hasCompleted()>
<okio.Buffer: okio.ByteString sha1()>
<retrofit2.Utils: int indexOf(java.lang.Object[],java.lang.Object)>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: void <clinit>()>
<fr.masciulli.drinks.ui.view.RatioImageView: void setRatio(float)>
<rx.internal.operators.OnSubscribeRedo: void call(java.lang.Object)>
<rx.internal.util.unsafe.SpmcArrayQueue: boolean offer(java.lang.Object)>
<rx.Observable: rx.Observable using(rx.functions.Func0,rx.functions.Func1,rx.functions.Action1,boolean)>
<com.squareup.picasso.Utils: java.lang.String createKey(com.squareup.picasso.Request)>
<rx.internal.operators.OperatorElementAt: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OnSubscribeFromCallable: void call(rx.Subscriber)>
<rx.SingleSubscriber: void <init>()>
<okhttp3.internal.framed.FramedConnection: okhttp3.internal.framed.FramedStream newStream(int,java.util.List,boolean,boolean)>
<okhttp3.internal.framed.Spdy3$Writer: void windowUpdate(int,long)>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder remove(java.lang.String)>
<rx.internal.operators.OperatorTakeWhile$2: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer: void request(long)>
<rx.subjects.SubjectSubscriptionManager: void addUnsubscriber(rx.Subscriber,rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: java.lang.Object getObjectOrThrow(java.lang.String)>
<rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl: java.lang.Object generateState()>
<rx.internal.operators.OnSubscribeTimerOnce: void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorBufferWithTime$ExactSubscriber: void onCompleted()>
<rx.internal.operators.OperatorSwitch$InnerSubscriber: void onNext(java.lang.Object)>
<rx.functions.Functions$4: java.lang.Object call(java.lang.Object[])>
<rx.Single: void <init>(rx.Single$OnSubscribe)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void <init>()>
<okio.GzipSource: void <init>(okio.Source)>
<rx.observables.AsyncOnSubscribe$3: void <init>(rx.functions.Action2)>
<rx.subjects.ReplaySubject$ReplayState: void <init>(rx.subjects.ReplaySubject$ReplayBuffer)>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: android.view.View getView(android.app.Fragment)>
<rx.Observable: rx.Observable cache()>
<rx.Observer: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Page$ResourceType: void <init>(java.lang.String,int,java.lang.String)>
<rx.internal.util.InternalObservableUtils$ObjectEqualsFunc2: java.lang.Object call(java.lang.Object,java.lang.Object)>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable: void call(java.lang.Object)>
<rx.internal.schedulers.TrampolineScheduler: int compare(int,int)>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func5)>
<retrofit2.Converter$Factory: retrofit2.Converter stringConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator onlyScaleDown()>
<rx.Observable: rx.Observable buffer(rx.Observable,int)>
<rx.internal.util.ExceptionsUtils: java.lang.Throwable terminate(java.util.concurrent.atomic.AtomicReference)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall: void cancel()>
<rx.internal.util.IndexedRingBuffer: int forEach(rx.functions.Func1,int)>
<rx.internal.operators.OperatorToObservableList$1: void onStart()>
<rx.internal.util.InternalObservableUtils$SelectorAndObserveOn: rx.Observable call(rx.Observable)>
<rx.subjects.ReplaySubject: boolean hasValue()>
<okhttp3.ConnectionPool: void <init>()>
<okhttp3.internal.http.Http1xStream$UnknownLengthSource: long read(okio.Buffer,long)>
<retrofit2.Utils: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>
<rx.Completable$31$1: void onCompleted()>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor)>
<com.facebook.stetho.common.LogRedirector: void <init>()>
<com.facebook.stetho.common.android.FragmentCompat: java.lang.Class getFragmentClass()>
<com.facebook.stetho.inspector.elements.android.ActivityDescriptor: void <init>()>
<rx.internal.operators.OperatorScan$InitialProducer: boolean checkTerminated(boolean,boolean,rx.Subscriber)>
<okhttp3.internal.platform.AndroidPlatform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>
<rx.Single$22$2: void onSuccess(java.lang.Object)>
<rx.Completable: rx.Completable timeout(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.network.NetworkEventReporter: boolean isEnabled()>
<okhttp3.internal.http.BridgeInterceptor: java.lang.String cookieHeader(java.util.List)>
<rx.functions.Actions: rx.functions.Func2 toFunc(rx.functions.Action2)>
<rx.Completable$12: void call(rx.Completable$CompletableSubscriber)>
<com.squareup.picasso.Utils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>
<retrofit2.adapter.rxjava.SingleHelper: retrofit2.CallAdapter makeSingle(retrofit2.CallAdapter)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber: void onStart()>
<rx.internal.operators.OperatorFilter$FilterSubscriber: void <init>(rx.Subscriber,rx.functions.Func1)>
<rx.functions.Functions$2: java.lang.Object call(java.lang.Object[])>
<rx.subjects.TestSubject: void <init>(rx.Observable$OnSubscribe,rx.subjects.SubjectSubscriptionManager,rx.schedulers.TestScheduler)>
<okio.InflaterSource: void <init>(okio.BufferedSource,java.util.zip.Inflater)>
<rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber: void onStart()>
<rx.internal.operators.OperatorWindowWithStartEndObservable$1: void onError(java.lang.Throwable)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: java.util.Iterator iterator()>
<com.squareup.picasso.Picasso: void complete(com.squareup.picasso.BitmapHunter)>
<rx.internal.operators.OperatorTimeout$2: rx.Subscription call(rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber,java.lang.Long,java.lang.Object,rx.Scheduler$Worker)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder proxy(java.net.Proxy)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder setUri(android.net.Uri)>
<okhttp3.internal.framed.FramedStream: boolean closeInternal(okhttp3.internal.framed.ErrorCode)>
<okio.RealBufferedSource: java.lang.String readUtf8(long)>
<rx.subjects.SerializedSubject$1: void <init>(rx.subjects.Subject)>
<okhttp3.Cache$CacheResponseBody: okio.BufferedSource source()>
<okhttp3.internal.framed.Spdy3$Reader: void readSynReply(okhttp3.internal.framed.FrameReader$Handler,int,int)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierBuffer: void <init>(rx.Observable,int,rx.internal.util.InternalObservableUtils$1)>
<rx.internal.util.InternalObservableUtils$IsInstanceOfFunc1: void <init>(java.lang.Class)>
<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>
<rx.internal.operators.OperatorWindowWithTime: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: int getId(android.app.Fragment)>
<rx.functions.Functions$12: java.lang.Void call(java.lang.Object[])>
<rx.schedulers.Schedulers: void shutdown()>
<rx.Completable: rx.Completable delay(long,java.util.concurrent.TimeUnit)>
<fr.masciulli.drinks.ui.adapter.holder.TileViewHolder: fr.masciulli.drinks.ui.view.RatioImageView getImageView()>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: java.lang.Object remove()>
<com.squareup.picasso.BitmapHunter$5: void <init>(com.squareup.picasso.Transformation)>
<com.facebook.stetho.common.Util: void throwIf(boolean)>
<rx.internal.util.ScalarSynchronousSingle$NormalScheduledEmission: void call(java.lang.Object)>
<okhttp3.OkHttpClient: okhttp3.Authenticator authenticator()>
<rx.internal.operators.CompletableOnSubscribeTimeout$2: void onCompleted()>
<rx.internal.util.unsafe.SpmcArrayQueue: int size()>
<com.facebook.stetho.common.Util: void copy(java.io.InputStream,java.io.OutputStream,byte[])>
<com.facebook.stetho.inspector.elements.Descriptor: void postDelayed(java.lang.Runnable,long)>
<rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef: void <clinit>()>
<okhttp3.MultipartBody: void <clinit>()>
<rx.internal.operators.OnSubscribeFromArray: void call(rx.Subscriber)>
<okhttp3.internal.framed.FramedConnection$7: void execute()>
<retrofit2.ParameterHandler$Path: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<com.squareup.picasso.Picasso: void invalidate(java.lang.String)>
<com.facebook.stetho.common.android.ViewUtil$ViewCompat: void <init>()>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void addInner(rx.internal.operators.OperatorMerge$InnerSubscriber)>
<okhttp3.MultipartBody$Part: void <init>(okhttp3.Headers,okhttp3.RequestBody)>
<com.facebook.stetho.server.LocalSocketServer$WorkerThread: void <init>(android.net.LocalSocket,com.facebook.stetho.server.SocketHandler)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorHeaders: java.lang.String firstHeaderValue(java.lang.String)>
<rx.internal.operators.OperatorBufferWithSize: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.network.PrettyPrinterDisplayType: void <clinit>()>
<rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber: void onNext(java.lang.Object)>
<rx.functions.Actions$8: void <init>(rx.functions.Action7,java.lang.Object)>
<rx.internal.operators.OperatorSkipWhile$1: void onError(java.lang.Throwable)>
<okhttp3.Handshake: java.util.List peerCertificates()>
<rx.Single$20$2: void onCompleted()>
<rx.Observable: rx.Observable concatMapIterable(rx.functions.Func1)>
<com.facebook.stetho.server.http.LightHttpMessage: void reset()>
<rx.Completable: rx.Completable using(rx.functions.Func0,rx.functions.Func1,rx.functions.Action1,boolean)>
<rx.Observable: rx.Observable buffer(rx.Observable,rx.functions.Func1)>
<okhttp3.internal.http.Http2xStream: okhttp3.Response$Builder readHttp2HeadersList(java.util.List)>
<com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper: void <init>(com.facebook.stetho.json.ObjectMapper,com.facebook.stetho.inspector.protocol.ChromeDevtoolsDomain,java.lang.reflect.Method)>
<rx.functions.Actions$5: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onGetStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<com.squareup.picasso.BitmapHunter: android.graphics.Bitmap applyCustomTransformations(java.util.List,android.graphics.Bitmap)>
<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>
<rx.internal.operators.OnSubscribeRefCount$3: void call()>
<com.squareup.picasso.BitmapHunter: com.squareup.picasso.BitmapHunter forRequest(com.squareup.picasso.Picasso,com.squareup.picasso.Dispatcher,com.squareup.picasso.Cache,com.squareup.picasso.Stats,com.squareup.picasso.Action)>
<okhttp3.internal.connection.RealConnection: void onSettings(okhttp3.internal.framed.FramedConnection)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber$2: void <init>(rx.internal.operators.OperatorSwitch$SwitchSubscriber)>
<rx.internal.operators.OperatorPublish: void connect(rx.functions.Action1)>
<com.facebook.stetho.inspector.network.NetworkEventReporter: void httpExchangeFailed(java.lang.String,java.lang.String)>
<retrofit2.ServiceMethod: java.lang.Object toResponse(okhttp3.ResponseBody)>
<rx.observables.BlockingObservable: java.lang.Object first()>
<rx.internal.operators.OnSubscribeRedo$RedoFinite: rx.Observable call(rx.Observable)>
<rx.internal.operators.OperatorWindowWithTime$State: void <clinit>()>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectSubType: void <init>(java.lang.String,int,java.lang.String)>
<rx.Completable$11$1: void onSuccess(java.lang.Object)>
<rx.internal.schedulers.ImmediateScheduler$InnerImmediateScheduler: rx.Subscription schedule(rx.functions.Action0)>
<rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager: boolean isUnsubscribed()>
<com.facebook.stetho.inspector.protocol.module.DOM$RGBAColor: int getColor()>
<retrofit2.Utils$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat: int provideOpenFlags(int)>
<fr.masciulli.drinks.model.Drink: java.lang.String getHistory()>
<okhttp3.OkHttpClient$1: void setCallWebSocket(okhttp3.Call)>
<com.facebook.stetho.inspector.database.ContentProviderSchema: void <init>(com.facebook.stetho.inspector.database.ContentProviderSchema$Builder,com.facebook.stetho.inspector.database.ContentProviderSchema$1)>
<okhttp3.Response: java.util.List challenges()>
<okhttp3.Headers: okhttp3.Headers of(java.lang.String[])>
<com.squareup.picasso.BitmapHunter: boolean supportsReplay()>
<rx.functions.Actions$8: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<retrofit2.http.Headers: java.lang.String[] value()>
<okio.Okio$2: void close()>
<rx.observables.SyncOnSubscribe$4: java.lang.Object call(java.lang.Object,java.lang.Object)>
<okio.Buffer$1: java.lang.String toString()>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void onInspectRequested(java.lang.Object)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void onGetAccessibilityStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<okio.Buffer: short readShort()>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: long skip(long)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1$2: void run()>
<com.facebook.stetho.websocket.WriteCallback: void onFailure(java.io.IOException)>
<okhttp3.internal.cache.FaultHidingSink: void close()>
<rx.internal.operators.SingleDoAfterTerminate: void call(java.lang.Object)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber: void <init>(rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber)>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$NoopHighlighter: void clearHighlight()>
<rx.schedulers.Schedulers: rx.Scheduler computation()>
<com.squareup.picasso.RequestHandler$Result: android.graphics.Bitmap getBitmap()>
<rx.internal.operators.OperatorPublish$PublishSubscriber$1: void <init>(rx.internal.operators.OperatorPublish$PublishSubscriber)>
<rx.subjects.BehaviorSubject$1: void call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginBottomHighlightDrawable: void highlightView(android.view.View)>
<okio.Buffer: int read(byte[])>
<com.squareup.picasso.Cache$1: void <init>()>
<com.squareup.picasso.Picasso: void <init>(android.content.Context,com.squareup.picasso.Dispatcher,com.squareup.picasso.Cache,com.squareup.picasso.Picasso$Listener,com.squareup.picasso.Picasso$RequestTransformer,java.util.List,com.squareup.picasso.Stats,android.graphics.Bitmap$Config,boolean,boolean)>
<com.facebook.stetho.server.CompositeInputStream: void closeAll(int)>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void complete()>
<com.facebook.stetho.dumpapp.DumpappSocketLikeHandler: java.io.IOException logAndThrowProtocolException(java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.Runtime$GetPropertiesRequest: void <init>()>
<okio.Pipe$PipeSink: void write(okio.Buffer,long)>
<rx.Observable: rx.Observable merge(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$1: void onNext(java.lang.Object)>
<com.facebook.stetho.server.CompositeInputStream: boolean tryMoveToNextStream()>
<rx.internal.operators.OperatorOnBackpressureBuffer$Holder: void <init>()>
<rx.Observable: rx.Observable just(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<okhttp3.internal.framed.Hpack$Reader: boolean isStaticHeader(int)>
<rx.internal.operators.BlockingOperatorNext$NextIterator: java.lang.Object next()>
<rx.internal.operators.OperatorToMultimap: rx.Subscriber call(rx.Subscriber)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: void evictFinal()>
<okhttp3.internal.framed.FramedConnection$Reader: void execute()>
<com.facebook.stetho.inspector.protocol.module.Runtime: int mapObject(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,java.lang.Object)>
<okhttp3.internal.framed.Http2$Writer: void dataFrame(int,byte,okio.Buffer,int)>
<rx.internal.operators.OnSubscribeJoin: void <init>(rx.Observable,rx.Observable,rx.functions.Func1,rx.functions.Func1,rx.functions.Func2)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager$1: void onNext(java.lang.Object)>
<com.squareup.picasso.ContactsPhotoRequestHandler: com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request,int)>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1: void call()>
<rx.Completable$24$1$1: void onSubscribe(rx.Subscription)>
<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>
<rx.internal.util.unsafe.MpmcArrayQueue: boolean offer(java.lang.Object)>
<rx.Observable: rx.Observable dematerialize()>
<rx.internal.util.OpenHashSet: int mix(int)>
<rx.observers.TestSubscriber: void <init>()>
<com.facebook.stetho.inspector.helper.PeerRegistrationListener: void onPeerRegistered(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<okhttp3.logging.HttpLoggingInterceptor$Level: void <clinit>()>
<rx.internal.operators.OnSubscribeRedo$3: java.lang.Object call(java.lang.Object)>
<rx.Completable: rx.Completable complete()>
<rx.Observable: rx.Observable all(rx.functions.Func1)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: android.app.FragmentManager getChildFragmentManager(android.app.Fragment)>
<rx.internal.producers.ProducerObserverArbiter: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.Network: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getResponseBody(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<okio.RealBufferedSource: short readShort()>
<rx.Observable: rx.Observable delaySubscription(rx.functions.Func0)>
<com.facebook.stetho.inspector.helper.IntegerFormatter$IntegerFormatterWithHex: void <init>()>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: boolean hasCompleted()>
<rx.internal.operators.OnSubscribeRedo: rx.Observable repeat(rx.Observable,rx.functions.Func1)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer$DisconnectObservable: void <init>(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer$1)>
<rx.internal.operators.OnSubscribeRedo$3$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.LogRedirector: void w(java.lang.String,java.lang.String,java.lang.Throwable)>
<rx.functions.Func2: java.lang.Object call(java.lang.Object,java.lang.Object)>
<rx.internal.operators.NotificationLite: boolean isNull(java.lang.Object)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierNoParams: rx.observables.ConnectableObservable call()>
<okhttp3.Headers: java.util.Set names()>
<rx.internal.operators.CompletableOnSubscribeTimeout$1: void call()>
<com.facebook.stetho.inspector.elements.android.ActivityDescriptor: void onGetChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef: void <clinit>()>
<rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber: void onCompleted()>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber: void <init>(rx.internal.operators.OperatorBufferWithTime,rx.Subscriber,rx.Scheduler$Worker)>
<rx.internal.operators.OperatorSerialize$Holder: void <clinit>()>
<com.squareup.picasso.BitmapHunter: com.squareup.picasso.Picasso$LoadedFrom getLoadedFrom()>
<rx.internal.operators.SingleOperatorOnErrorResumeNext$2: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable delaySubscription(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.Observable: rx.Observable onTerminateDetach()>
<com.facebook.stetho.inspector.elements.Document$UpdateListener: void onAttributeRemoved(java.lang.Object,java.lang.String)>
<rx.internal.operators.OperatorWindowWithStartEndObservable: java.lang.Object call(java.lang.Object)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: void soElement(long,java.lang.Object)>
<rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector: void call(java.lang.Object)>
<okhttp3.internal.framed.Http2: okhttp3.Protocol getProtocol()>
<rx.Completable$4: void <init>(java.lang.Iterable)>
<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>
<okhttp3.Cookie: java.lang.String parseDomain(java.lang.String)>
<okhttp3.Handshake: java.security.Principal peerPrincipal()>
<okio.Buffer: okio.BufferedSink writeShort(int)>
<rx.internal.operators.CachedObservable$ReplayProducer: void replay()>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3: void <init>(rx.Observable)>
<okhttp3.Cache: void close()>
<rx.internal.operators.SingleOperatorZip: rx.Single zip(rx.Single[],rx.functions.FuncN)>
<rx.exceptions.CompositeException$CompositeExceptionCausalChain: void <init>()>
<rx.internal.operators.OperatorSkipWhile$1: void <init>(rx.internal.operators.OperatorSkipWhile,rx.Subscriber,rx.Subscriber)>
<com.facebook.stetho.inspector.protocol.module.Console$MessageLevel: java.lang.String getProtocolValue()>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager: void unsubscribe()>
<okhttp3.internal.http.Http1xStream$FixedLengthSink: void <init>(okhttp3.internal.http.Http1xStream,long,okhttp3.internal.http.Http1xStream$1)>
<okio.Buffer: okio.Buffer clone()>
<rx.internal.operators.OperatorAny$1: void onCompleted()>
<okio.DeflaterSink: java.lang.String toString()>
<okhttp3.internal.framed.FramedConnection$5: void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List,boolean)>
<rx.functions.Actions$6: void <init>(rx.functions.Action5,java.lang.Object)>
<rx.observables.SyncOnSubscribe$5: void <init>(rx.functions.Action0)>
<com.facebook.stetho.inspector.protocol.module.Runtime$PropertyDescriptor: void <init>(com.facebook.stetho.inspector.protocol.module.Runtime$1)>
<okhttp3.HttpUrl: int pathSize()>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$1: void onError(java.lang.Throwable)>
<okhttp3.internal.framed.FramedStream: boolean isLocallyInitiated()>
<rx.schedulers.Schedulers: void startInstance()>
<com.facebook.stetho.inspector.protocol.module.Database$1: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleInsert(long)>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: com.facebook.stetho.inspector.elements.DescriptorMap register(com.facebook.stetho.inspector.elements.DescriptorMap)>
<com.facebook.stetho.inspector.network.GunzippingOutputStream$GunzippingCallable: void <init>(java.io.InputStream,java.io.OutputStream)>
<okhttp3.internal.framed.FramedConnection$3: void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],boolean,int,int,okhttp3.internal.framed.Ping)>
<okhttp3.internal.framed.Http2$Reader: void readGoAway(okhttp3.internal.framed.FrameReader$Handler,int,byte,int)>
<okhttp3.internal.framed.Hpack$Writer: void adjustDynamicTableByteCount()>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterExecutorHolder: java.util.concurrent.ExecutorService getExecutorService()>
<rx.observers.Observers$2: void onNext(java.lang.Object)>
<com.facebook.stetho.common.ListUtil$FiveItemImmutableList: java.lang.Object get(int)>
<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>
<rx.internal.operators.OperatorReplay$UnboundedReplayBuffer: void complete()>
<com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener: void onPeerUnregistered(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<com.facebook.stetho.inspector.domstorage.SharedPreferencesHelper: java.lang.String valueToString(java.lang.Object)>
<rx.Observable: rx.Observable repeat(rx.Scheduler)>
<rx.schedulers.Timestamped: int hashCode()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void highlightElement(java.lang.Object,int)>
<okhttp3.internal.framed.FrameWriter: int maxDataLength()>
<rx.internal.operators.OperatorDoOnEach: java.lang.Object call(java.lang.Object)>
<rx.schedulers.TestScheduler$TimedAction: java.lang.String toString()>
<okhttp3.internal.framed.FramedStream: okio.Timeout readTimeout()>
<rx.Notification: void accept(rx.Observer)>
<okio.RealBufferedSource: okio.ByteString readByteString()>
<rx.Completable$20: void onSubscribe(rx.Subscription)>
<rx.Observable: rx.Observable onBackpressureLatest()>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void cleanup()>
<com.facebook.stetho.websocket.WebSocketSession$1: void handleBinaryFrame(byte[],int)>
<com.facebook.stetho.common.android.ViewUtil: void <init>()>
<com.facebook.stetho.common.android.FragmentAccessor: java.lang.Object getChildFragmentManager(java.lang.Object)>
<okhttp3.internal.framed.FramedConnection: void pushRequestLater(int,java.util.List)>
<com.facebook.stetho.websocket.WebSocketHandler: void <init>(com.facebook.stetho.websocket.SimpleEndpoint)>
<com.facebook.stetho.inspector.protocol.module.Database$AddDatabaseEvent: void <init>()>
<rx.Single: rx.Single map(rx.functions.Func1)>
<com.facebook.stetho.Stetho$BuilderBasedInitializer: void <init>(com.facebook.stetho.Stetho$InitializerBuilder,com.facebook.stetho.Stetho$1)>
<rx.internal.operators.OnSubscribeAmb: void call(java.lang.Object)>
<rx.Single: rx.Subscription subscribe(rx.Observer)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: int calcWrappedOffset(long,int)>
<rx.Completable$33$1$1$1: void <init>(rx.Completable$33$1$1,rx.Scheduler$Worker)>
<okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>
<retrofit2.Response: okhttp3.Headers headers()>
<okhttp3.internal.framed.Spdy3: okhttp3.Protocol getProtocol()>
<rx.internal.operators.CompletableOnSubscribeMergeIterable: void call(rx.Completable$CompletableSubscriber)>
<com.squareup.picasso.Utils: java.lang.String getLogIdsForHunter(com.squareup.picasso.BitmapHunter,java.lang.String)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment$$Lambda$1: android.view.View$OnClickListener lambdaFactory$(fr.masciulli.drinks.ui.fragment.LiquorsFragment)>
<rx.internal.operators.NotificationLite: boolean isError(java.lang.Object)>
<retrofit2.Platform$IOS: java.util.concurrent.Executor defaultCallbackExecutor()>
<rx.internal.util.SynchronizedQueue: java.lang.Object[] toArray(java.lang.Object[])>
<rx.Completable: java.lang.Throwable get()>
<rx.internal.operators.OperatorCast$CastSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorGroupBy$GroupByProducer: void <init>(rx.internal.operators.OperatorGroupBy$GroupBySubscriber)>
<rx.observers.TestSubscriber: void awaitTerminalEventAndUnsubscribeOnTimeout(long,java.util.concurrent.TimeUnit)>
<rx.Single: rx.Observable merge(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<rx.internal.operators.OperatorEagerConcatMap: rx.Subscriber call(rx.Subscriber)>
<okhttp3.internal.cache.FaultHidingSink: void flush()>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$1: com.facebook.stetho.inspector.network.PrettyPrinterDisplayType getPrettifiedType()>
<okio.Options: int size()>
<rx.internal.operators.OperatorTimeoutWithSelector$1: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorToObservableList$Holder: void <init>()>
<retrofit2.ParameterHandler$PartMap: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<retrofit2.adapter.rxjava.SingleHelper: void <init>()>
<rx.internal.operators.OperatorSequenceEqual$1: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void <init>()>
<rx.observers.SerializedObserver: void onCompleted()>
<rx.internal.operators.OnSubscribeRedo$2$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorMulticast: void <init>(java.lang.Object,java.util.concurrent.atomic.AtomicReference,java.util.List,rx.Observable,rx.functions.Func0)>
<com.facebook.stetho.server.SecureSocketHandler: void <init>(android.content.Context)>
<rx.internal.operators.OperatorTakeWhile: void <init>(rx.functions.Func2)>
<rx.internal.util.RxRingBuffer$2: void <init>()>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3: java.lang.Object call(java.lang.Object)>
<okhttp3.internal.framed.FrameReader$Handler: void data(boolean,int,okio.BufferedSource,int)>
<rx.internal.operators.OperatorDoOnRequest: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.SingleOperatorOnErrorResumeNext$2: void <init>(rx.internal.operators.SingleOperatorOnErrorResumeNext,rx.SingleSubscriber)>
<okhttp3.internal.cache.DiskLruCache$2: void onException(java.io.IOException)>
<rx.internal.operators.OperatorTakeLast$TakeLastSubscriber: void <init>(rx.Subscriber,int)>
<rx.observers.SerializedSubscriber: void <init>(rx.Subscriber,boolean)>
<okio.ByteString: boolean rangeEquals(int,okio.ByteString,int,int)>
<rx.observables.BlockingObservable: java.lang.Object first(rx.functions.Func1)>
<com.facebook.stetho.dumpapp.Framer: void writeBlob(byte[],int,int)>
<rx.internal.operators.SingleOperatorZip$1$1: void <init>(rx.internal.operators.SingleOperatorZip$1,java.lang.Object[],int,java.util.concurrent.atomic.AtomicInteger,rx.SingleSubscriber,java.util.concurrent.atomic.AtomicBoolean)>
<rx.Observable: rx.Observable replay(rx.functions.Func1,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.elements.android.DialogDescriptor: android.view.View getViewForHighlighting(java.lang.Object)>
<rx.exceptions.CompositeException: void <init>(java.util.Collection)>
<okhttp3.internal.framed.NameValueBlockReader: java.util.List readNameValueBlock(int)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void displayNormalState()>
<com.squareup.picasso.Stats: void performCacheMiss()>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: java.lang.String getName()>
<rx.internal.operators.OperatorReplay$7: void call(java.lang.Object)>
<com.facebook.stetho.websocket.FrameHelper: com.facebook.stetho.websocket.Frame createTextFrame(java.lang.String)>
<retrofit2.BuiltInConverters$ToStringConverter: java.lang.String convert(java.lang.Object)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder rotate(float,float,float)>
<rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer: void <init>(rx.Subscriber,java.lang.Object,rx.functions.Func1)>
<com.facebook.stetho.Stetho$1: java.lang.Iterable getDumperPlugins()>
<rx.subjects.TestSubject$1: void call(java.lang.Object)>
<okhttp3.RequestBody$2: okhttp3.MediaType contentType()>
<com.facebook.stetho.common.android.FragmentCompat: com.facebook.stetho.common.android.DialogFragmentAccessor forDialogFragment()>
<okhttp3.internal.framed.Http2: java.io.IOException ioException(java.lang.String,java.lang.Object[])>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: android.app.FragmentManager getChildFragmentManager(android.app.Fragment)>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1: void onSubscribe(rx.Subscription)>
<retrofit2.adapter.rxjava.HttpException: retrofit2.Response response()>
<rx.subjects.SubjectSubscriptionManager: void call(rx.Subscriber)>
<okio.ByteString: int lastIndexOf(okio.ByteString,int)>
<rx.internal.operators.OnSubscribeRedo$3$1: void onNext(java.lang.Object)>
<rx.internal.util.unsafe.BaseLinkedQueuePad0: void <init>()>
<rx.subjects.TestSubject: void onCompleted(long)>
<com.facebook.stetho.common.android.ViewUtil: android.view.View hitTest(android.view.View,float,float)>
<okhttp3.MultipartBody$Builder: okhttp3.MultipartBody$Builder addPart(okhttp3.MultipartBody$Part)>
<rx.internal.producers.QueuedProducer: void <init>(rx.Subscriber,java.util.Queue)>
<okio.RealBufferedSource: long indexOfElement(okio.ByteString)>
<rx.Completable$13: void call(java.lang.Object)>
<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse: boolean connectionReused()>
<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>
<okhttp3.internal.cache.InternalCache: void trackConditionalCacheHit()>
<com.squareup.picasso.Utils: void flushStackLocalLeaks(android.os.Looper)>
<rx.Observable: rx.Observable flatMapIterable(rx.functions.Func1,int)>
<rx.internal.operators.SingleOnSubscribeUsing: void call(rx.SingleSubscriber)>
<rx.Observable: rx.Observable throttleFirst(long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OperatorTakeLast$1: void <init>(rx.internal.operators.OperatorTakeLast,rx.internal.operators.OperatorTakeLast$TakeLastSubscriber)>
<okhttp3.internal.platform.Jdk9Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>
<com.facebook.stetho.websocket.WebSocketSession: boolean signalErrorIfNotOpen()>
<rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber: void onError(java.lang.Throwable)>
<retrofit2.DefaultCallAdapterFactory: void <init>()>
<com.squareup.picasso.BitmapHunter$4: void <init>(java.lang.StringBuilder)>
<rx.internal.operators.NotificationLite: java.lang.Object getValue(java.lang.Object)>
<rx.observables.AsyncOnSubscribe$UnicastSubject: void <init>(rx.observables.AsyncOnSubscribe$UnicastSubject$State)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onSetAttributesAsText(android.view.View,java.lang.String)>
<rx.observers.Subscribers$1: void onNext(java.lang.Object)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>
<okio.ByteString: boolean startsWith(byte[])>
<com.squareup.picasso.StatsSnapshot: java.lang.String toString()>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void <init>()>
<rx.Completable: rx.Completable doOnCompleted(rx.functions.Action0)>
<com.facebook.stetho.websocket.SimpleSession: void close(int,java.lang.String)>
<rx.internal.operators.OperatorOnBackpressureBuffer: rx.internal.operators.OperatorOnBackpressureBuffer instance()>
<retrofit2.adapter.rxjava.CompletableHelper$CompletableCallOnSubscribe: void call(java.lang.Object)>
<rx.observables.SyncOnSubscribe$2: java.lang.Object call(java.lang.Object,rx.Observer)>
<okio.RealBufferedSource: long readLong()>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerSubscriber: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable retry()>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray: void call(java.lang.Object)>
<rx.internal.operators.OperatorReplay$2$1: void <init>(rx.internal.operators.OperatorReplay$2,rx.Subscriber)>
<rx.SingleSubscriber: void unsubscribe()>
<okio.RealBufferedSource: boolean rangeEquals(long,okio.ByteString,int,int)>
<okhttp3.RequestBody: void writeTo(okio.BufferedSink)>
<okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>
<rx.Completable$33$1$1$1: void call()>
<okhttp3.internal.tls.DistinguishedNameParser: java.lang.String hexAV()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler: void <init>(com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider)>
<rx.internal.operators.OperatorElementAt: void <init>(int,java.lang.Object,boolean)>
<rx.internal.operators.OperatorTakeUntil$2: void onStart()>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: java.io.File getBaseDir(android.content.Context)>
<rx.Completable$11: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: java.util.Iterator iterator()>
<rx.internal.util.unsafe.SpmcArrayQueueProducerIndexCacheField: long lvProducerIndexCache()>
<rx.internal.util.SubscriptionList: boolean hasSubscriptions()>
<rx.internal.operators.OperatorReplay$3$1: void onNext(java.lang.Object)>
<rx.Single$17: void onSuccess(java.lang.Object)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder removeAllQueryParameters(java.lang.String)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$FieldBackedCSSProperty: void <init>(com.facebook.stetho.inspector.elements.android.ViewDescriptor,java.lang.reflect.Field,java.lang.String,android.view.ViewDebug$ExportedProperty)>
<rx.internal.operators.OperatorZip$Zip: void <clinit>()>
<rx.Completable$33$1: void <init>(rx.Completable$33,rx.Completable$CompletableSubscriber)>
<com.facebook.stetho.Stetho$DefaultDumperPluginsBuilder: com.facebook.stetho.Stetho$DefaultDumperPluginsBuilder provideIfDesired(com.facebook.stetho.dumpapp.DumperPlugin)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher: void <init>()>
<retrofit2.Utils$ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])>
<rx.internal.operators.OperatorDebounceWithSelector: void <init>(rx.functions.Func1)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber: void onStart()>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: rx.internal.util.atomic.LinkedQueueNode lpProducerNode()>
<com.squareup.picasso.Request: void <init>(android.net.Uri,int,java.lang.String,java.util.List,int,int,boolean,boolean,boolean,float,float,float,boolean,android.graphics.Bitmap$Config,com.squareup.picasso.Picasso$Priority)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$$Lambda$2: void onClick(android.view.View)>
<com.facebook.stetho.common.android.ViewUtil: android.view.View hitTestImpl(android.view.View,float,float,com.facebook.stetho.common.Predicate,boolean)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: java.lang.Object newBufferPeek(java.lang.Object[],long,long)>
<com.facebook.stetho.dumpapp.DumpappHttpSocketLikeHandler: void onAccepted(com.facebook.stetho.server.SocketLike)>
<rx.internal.operators.OperatorSkipLastTimed$1: void <init>(rx.internal.operators.OperatorSkipLastTimed,rx.Subscriber,rx.Subscriber)>
<com.facebook.stetho.inspector.protocol.module.Runtime$RemoteObject: void <init>()>
<rx.internal.operators.OperatorPublish: rx.observables.ConnectableObservable create(rx.Observable)>
<rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber: void <clinit>()>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder clearOnlyScaleDown()>
<rx.subscriptions.Subscriptions: rx.subscriptions.CompositeSubscription 'from'(rx.Subscription[])>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: void complete()>
<com.facebook.stetho.inspector.protocol.module.DOM$5: void run()>
<rx.internal.operators.OperatorTake$1$1: void request(long)>
<rx.observables.AsyncOnSubscribe$7: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: void <clinit>()>
<rx.internal.operators.OperatorBufferWithSize$BufferSkip$BufferSkipProducer: void <init>(rx.internal.operators.OperatorBufferWithSize$BufferSkip)>
<com.facebook.stetho.inspector.protocol.module.Console: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>
<okhttp3.Response$Builder: void checkPriorResponse(okhttp3.Response)>
<okhttp3.internal.framed.FrameReader$Handler: void pushPromise(int,int,java.util.List)>
<rx.internal.operators.OperatorTakeLastOne$1: void request(long)>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager$AsyncPrettyPrintingCallable: java.lang.String call()>
<rx.functions.Functions$14: java.lang.Void call(java.lang.Object[])>
<rx.observables.SyncOnSubscribe$3: java.lang.Void call(java.lang.Void,rx.Observer)>
<com.facebook.stetho.inspector.protocol.module.Runtime$2: void <init>(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1: java.lang.Object next()>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$Request: java.lang.String call()>
<okhttp3.internal.framed.Spdy3: void <init>()>
<rx.schedulers.TestScheduler$CompareActionsByTime: int compare(java.lang.Object,java.lang.Object)>
<com.squareup.picasso.PicassoExecutorService$PicassoFutureTask: int compareTo(java.lang.Object)>
<rx.internal.operators.OnSubscribeJoin$ResultSink: void run()>
<com.squareup.picasso.GetAction: void <init>(com.squareup.picasso.Picasso,com.squareup.picasso.Request,int,int,java.lang.Object,java.lang.String)>
<com.facebook.stetho.common.ReflectionUtil: java.lang.Object getFieldValue(java.lang.reflect.Field,java.lang.Object)>
<com.facebook.stetho.common.android.HandlerUtil$2: java.lang.Void onRun()>
<okhttp3.internal.framed.FramedConnection: void <init>(okhttp3.internal.framed.FramedConnection$Builder,okhttp3.internal.framed.FramedConnection$1)>
<rx.BackpressureOverflow$DropLatest: void <init>()>
<retrofit2.Utils$ParameterizedTypeImpl: boolean equals(java.lang.Object)>
<com.facebook.stetho.inspector.helper.PeersRegisteredListener: void onFirstPeerRegistered()>
<rx.internal.operators.OperatorOnBackpressureBuffer: void <init>()>
<com.facebook.stetho.inspector.elements.NodeDescriptor: com.facebook.stetho.inspector.elements.NodeType getNodeType(java.lang.Object)>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: java.lang.String makeTitle()>
<rx.Observable: rx.Observable timeout(rx.functions.Func0,rx.functions.Func1)>
<rx.schedulers.Schedulers: rx.Scheduler 'from'(java.util.concurrent.Executor)>
<rx.exceptions.OnErrorNotImplementedException: void <init>(java.lang.String,java.lang.Throwable)>
<rx.internal.operators.OperatorGroupBy$State: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable startWith(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: void hook(java.lang.Object)>
<fr.masciulli.drinks.model.Drink$1: fr.masciulli.drinks.model.Drink[] newArray(int)>
<okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(java.security.cert.X509Certificate[])>
<retrofit2.RequestBuilder: void setBody(okhttp3.RequestBody)>
<retrofit2.adapter.rxjava.CompletableHelper$CompletableCallAdapter: void <init>(rx.Scheduler)>
<com.facebook.stetho.inspector.protocol.module.Page$GetResourceTreeParams: void <init>(com.facebook.stetho.inspector.protocol.module.Page$1)>
<com.facebook.stetho.websocket.Frame: byte encodeFirstByte()>
<okhttp3.internal.platform.Jdk9Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>
<rx.internal.operators.NeverObservableHolder: void call(rx.Subscriber)>
<rx.Observable: rx.Observable replay(rx.functions.Func1,int,long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OnSubscribeJoin: void call(java.lang.Object)>
<rx.internal.operators.OperatorSerialize$1: void onError(java.lang.Throwable)>
<fr.masciulli.drinks.ui.adapter.ItemClickListener: void onItemClick(int,java.lang.Object)>
<rx.Single$22$2: void onError(java.lang.Throwable)>
<com.squareup.picasso.UrlConnectionDownloader$ResponseCacheIcs: java.lang.Object install(android.content.Context)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: android.support.v7.widget.RecyclerView$ViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<rx.internal.operators.OperatorPublish: void <init>(rx.Observable$OnSubscribe,rx.Observable,java.util.concurrent.atomic.AtomicReference)>
<okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>
<rx.Single: rx.Completable toCompletable()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler: void <init>(com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider,com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$1)>
<rx.Observable: rx.Observable mergeDelayError(java.lang.Iterable)>
<rx.internal.operators.OnSubscribeAmb$AmbSubscriber: void <init>(long,rx.Subscriber,rx.internal.operators.OnSubscribeAmb$Selection)>
<rx.internal.operators.OperatorFilter: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor$ElementContext: void hook(android.app.Application)>
<rx.Observable: rx.Observable interval(long,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<retrofit2.Retrofit: retrofit2.Converter requestBodyConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],java.lang.'annotation'.Annotation[])>
<okhttp3.Cookie$Builder: okhttp3.Cookie$Builder domain(java.lang.String,boolean)>
<retrofit2.adapter.rxjava.HttpException: java.lang.String message()>
<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.NodeDescriptor getNodeDescriptor(java.lang.Object)>
<rx.Single$20$2: void onError(java.lang.Throwable)>
<rx.subjects.SerializedSubject: void <init>(rx.subjects.Subject)>
<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner$Builder add(java.lang.String,java.lang.String[])>
<okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>
<rx.internal.util.RxRingBuffer: java.lang.Object peek()>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorTakeLastTimed: rx.Subscriber call(rx.Subscriber)>
<rx.SingleSubscriber: void add(rx.Subscription)>
<retrofit2.ExecutorCallAdapterFactory$1: retrofit2.Call adapt(retrofit2.Call)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: void next(java.lang.Object)>
<com.facebook.stetho.dumpapp.Framer: java.io.PrintStream getStderr()>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: void request(long)>
<com.facebook.stetho.inspector.protocol.module.CSS$PseudoIdMatches: void <init>()>
<okhttp3.Cookie: void <clinit>()>
<com.facebook.stetho.inspector.elements.Descriptor: void <init>()>
<rx.internal.operators.OperatorDebounceWithTime: rx.Subscriber call(rx.Subscriber)>
<com.squareup.picasso.BitmapHunter$2: boolean canHandleRequest(com.squareup.picasso.Request)>
<com.squareup.picasso.RequestHandler: android.graphics.BitmapFactory$Options createBitmapOptions(com.squareup.picasso.Request)>
<okhttp3.internal.framed.FrameReader$Handler: void settings(boolean,okhttp3.internal.framed.Settings)>
<rx.Single: rx.Single zip(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.functions.Func9)>
<com.facebook.stetho.inspector.elements.Descriptor: void verifyThreadAccess()>
<com.squareup.picasso.RemoteViewsAction$RemoteViewsTarget: int hashCode()>
<rx.Observable: rx.Observable cast(java.lang.Class)>
<rx.internal.util.LinkedArrayList: void add(java.lang.Object)>
<rx.internal.operators.OperatorMerge$InnerSubscriber: void <clinit>()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void setSuper(com.facebook.stetho.inspector.elements.Descriptor)>
<com.squareup.picasso.MarkableInputStream: long savePosition(int)>
<okio.Buffer$2: void <init>(okio.Buffer)>
<com.facebook.stetho.json.ObjectMapper: java.util.List convertArrayToList(java.lang.reflect.Field,org.json.JSONArray)>
<rx.internal.producers.QueuedValueProducer: void <init>(rx.Subscriber,java.util.Queue)>
<okio.Segment: okio.Segment split(int)>
<rx.internal.operators.OnSubscribeJoin$ResultSink: void <init>(rx.internal.operators.OnSubscribeJoin,rx.Subscriber)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void <init>()>
<rx.Single: rx.Observable merge(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<rx.Completable$10$1: void onCompleted()>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void remove(rx.internal.operators.OperatorReplay$InnerProducer)>
<rx.Single$19: void <init>(rx.Single,rx.Scheduler)>
<rx.observables.GroupedObservable$1: void <init>(rx.Observable)>
<okio.Timeout: void waitUntilNotified(java.lang.Object)>
<rx.internal.operators.OperatorReplay$2$1: void call(java.lang.Object)>
<rx.internal.operators.SingleOperatorOnErrorResumeNext: void call(java.lang.Object)>
<rx.internal.operators.OnSubscribeRedo$2$1: void decrementConsumerCapacity()>
<rx.Completable: rx.Completable onErrorResumeNext(rx.functions.Func1)>
<com.facebook.stetho.inspector.elements.Document$ProviderListener: void onInspectRequested(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Database$Error: void <init>()>
<okhttp3.internal.cache.DiskLruCache: long getMaxSize()>
<rx.internal.operators.OperatorToMultimap$1: void onError(java.lang.Throwable)>
<rx.subscriptions.RefCountSubscription: void unsubscribeAChild()>
<rx.functions.Functions$11: java.lang.Object call(java.lang.Object[])>
<okio.Okio$1: java.lang.String toString()>
<com.squareup.picasso.Utils: java.lang.Object getService(android.content.Context,java.lang.String)>
<okhttp3.internal.cache.CacheInterceptor$1: void <init>()>
<rx.functions.Functions$2: void <init>(rx.functions.Func1)>
<retrofit2.converter.gson.GsonConverterFactory: retrofit2.Converter requestBodyConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<rx.functions.Functions$9: void <init>(rx.functions.Func8)>
<com.facebook.stetho.inspector.helper.ChromePeerManager: com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer[] getReceivingPeersSnapshot()>
<com.squareup.picasso.Utils$PicassoThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<com.facebook.stetho.common.android.AccessibilityUtil: boolean hasNonActionableSpeakingDescendants(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.View)>
<com.facebook.stetho.inspector.protocol.module.Runtime$GetPropertiesResponse: void <init>(com.facebook.stetho.inspector.protocol.module.Runtime$1)>
<okio.SegmentedByteString: okio.ByteString toByteString()>
<rx.internal.operators.OperatorDoAfterTerminate$1: void <init>(rx.internal.operators.OperatorDoAfterTerminate,rx.Subscriber,rx.Subscriber)>
<com.facebook.stetho.websocket.WebSocketSession$2: void onFailure(java.io.IOException)>
<rx.Completable$26: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Network$InitiatorType: java.lang.String getProtocolValue()>
<com.facebook.stetho.inspector.protocol.module.DOM$4: java.lang.Object call()>
<rx.exceptions.OnErrorThrowable$OnNextValue: java.lang.String renderValue(java.lang.Object)>
<rx.internal.operators.OperatorMapPair: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorObserveOn$1: void <init>(int)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: java.lang.Object peek()>
<com.squareup.picasso.Picasso: void cancelRequest(android.widget.RemoteViews,int)>
<com.facebook.stetho.dumpapp.Framer$ClosedHelper: void <init>(com.facebook.stetho.dumpapp.Framer$1)>
<okhttp3.internal.http.Http1xStream: okio.Source newUnknownLengthSource()>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$MatchResult: com.facebook.stetho.inspector.network.PrettyPrinterDisplayType getDisplayType()>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder executor(java.util.concurrent.ExecutorService)>
<rx.internal.operators.BufferUntilSubscriber$State: void <init>()>
<okhttp3.HttpUrl: okhttp3.HttpUrl get(java.net.URL)>
<okio.Options: okio.Options of(okio.ByteString[])>
<okhttp3.internal.cache.FaultHidingSink: void onException(java.io.IOException)>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder runtimeRepl(com.facebook.stetho.inspector.console.RuntimeReplFactory)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$CharSequenceMethodInvoker: void <init>()>
<rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber: void onCompleted()>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void manageRequests(rx.internal.operators.OperatorReplay$InnerProducer)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$PaddingRightHighlightDrawable: void highlightView(android.view.View)>
<com.squareup.picasso.OkHttpDownloader: void shutdown()>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void handleRemoteRequest(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorMaterialize$ParentSubscriber: void onError(java.lang.Throwable)>
<okhttp3.internal.framed.Ping: void send()>
<rx.Observable: rx.Observable combineLatest(rx.Observable,rx.Observable,rx.Observable,rx.functions.Func3)>
<okhttp3.MultipartBody: long writeOrCountBytes(okio.BufferedSink,boolean)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: void <init>(rx.internal.operators.OperatorWindowWithTime,rx.Subscriber,rx.Scheduler$Worker)>
<okio.ByteString: int size()>
<rx.Observable: rx.Observable cache(int)>
<retrofit2.http.Query: java.lang.String value()>
<com.facebook.stetho.server.ServerManager$1: void run()>
<rx.functions.Func4: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Runtime$CallArgument: void <init>()>
<okhttp3.internal.framed.FramedConnection: okhttp3.internal.framed.Ping removePing(int)>
<rx.internal.operators.SingleOnSubscribeUsing$1: void <init>(rx.internal.operators.SingleOnSubscribeUsing,java.lang.Object,rx.SingleSubscriber)>
<com.facebook.stetho.server.http.LightHttpResponse: void <init>()>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void pluginError(java.lang.Throwable)>
<com.squareup.picasso.Picasso: void cancelExistingRequest(java.lang.Object)>
<rx.plugins.RxJavaPlugins: void registerErrorHandler(rx.plugins.RxJavaErrorHandler)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty: java.lang.Object getValue(android.view.View)>
<rx.internal.operators.OperatorSequenceEqual: rx.Observable sequenceEqual(rx.Observable,rx.Observable,rx.functions.Func2)>
<rx.internal.operators.OperatorWindowWithSize$WindowExact: void onCompleted()>
<rx.internal.operators.OperatorAll$1: void onCompleted()>
<rx.internal.operators.NotificationLite: boolean accept(rx.Observer,java.lang.Object)>
<rx.Completable$26: void onCompleted()>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver: void onError(java.lang.Throwable)>
<okhttp3.Cache: long size()>
<rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber: void downstreamRequest(long)>
<rx.internal.operators.OperatorThrottleFirst: java.lang.Object call(java.lang.Object)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: java.lang.Object peek()>
<rx.functions.Actions: rx.functions.Action1 toAction1(rx.functions.Action0)>
<rx.observers.Subscribers$1: void onCompleted()>
<rx.observers.TestSubscriber: void <init>(rx.Observer,long)>
<rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl: void onUnsubscribe(java.lang.Object)>
<rx.internal.producers.QueuedValueProducer: void drain()>
<rx.Single$1: void call(java.lang.Object)>
<com.squareup.picasso.Picasso$Priority: com.squareup.picasso.Picasso$Priority valueOf(java.lang.String)>
<okhttp3.internal.framed.FramedConnection: void close(okhttp3.internal.framed.ErrorCode,okhttp3.internal.framed.ErrorCode)>
<okhttp3.FormBody: java.lang.String name(int)>
<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>
<rx.Completable$10$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorSequenceEqual$2: java.lang.Object call(java.lang.Object,java.lang.Object)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$Type: void <init>(java.lang.String,int,java.lang.String)>
<retrofit2.ParameterHandler: void <init>()>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentActivityAccessorFramework: java.lang.Object getFragmentManager(android.app.Activity)>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void clear()>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1: void onError(java.lang.Throwable)>
<rx.Single$3: void <init>(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.ElementInfo: void <init>(java.lang.Object,java.lang.Object,java.util.List)>
<rx.Completable$14: void <init>(rx.Completable,java.util.concurrent.CountDownLatch,java.lang.Throwable[])>
<rx.plugins.RxJavaSingleExecutionHook: rx.Single$OnSubscribe onCreate(rx.Single$OnSubscribe)>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber: void innerError(java.lang.Throwable)>
<okhttp3.internal.http.Http2xStream$StreamFinishingSource: void close()>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void cancel(java.lang.Object)>
<retrofit2.ParameterHandler$Part: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<rx.observers.TestSubscriber: void onCompleted()>
<rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber: void <init>(rx.internal.operators.OnSubscribeJoin$ResultSink)>
<okio.BufferedSource: boolean exhausted()>
<com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener: void onPeerRegistered(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<retrofit2.RequestBuilder: void addQueryParam(java.lang.String,java.lang.String,boolean)>
<com.facebook.stetho.inspector.elements.Document$1: void run()>
<okhttp3.internal.http.Http1xStream$ChunkedSink: void flush()>
<rx.plugins.RxJavaPlugins$2: void <init>(rx.plugins.RxJavaPlugins)>
<rx.Observable: rx.Observable empty()>
<okhttp3.Request: java.lang.String toString()>
<com.facebook.stetho.dumpapp.Framer$FramingInputStream: long skip(long)>
<okhttp3.internal.cache.InternalCache: void update(okhttp3.Response,okhttp3.Response)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber: void onError(java.lang.Throwable)>
<okio.Util: short reverseBytesShort(short)>
<com.facebook.stetho.Stetho$PluginBuilder: void throwIfFinished()>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder provideIfDesired(com.facebook.stetho.inspector.protocol.ChromeDevtoolsDomain)>
<rx.android.MainThreadSubscription: boolean isUnsubscribed()>
<rx.internal.util.unsafe.SpmcArrayQueueL1Pad: void <init>(int)>
<okhttp3.HttpUrl: java.lang.String queryParameter(java.lang.String)>
<okhttp3.internal.cache.DiskLruCache$Editor: okio.Source newSource(int)>
<okio.Buffer: long readLong()>
<rx.internal.operators.OperatorDebounceWithTime$1: void onStart()>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectType: com.facebook.stetho.inspector.protocol.module.Runtime$ObjectType valueOf(java.lang.String)>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber: void onCompleted()>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber$1: void <init>(rx.internal.operators.OperatorBufferWithTime$InexactSubscriber)>
<rx.internal.operators.OperatorTakeWhile$2: void <init>(rx.internal.operators.OperatorTakeWhile,rx.Subscriber,boolean,rx.Subscriber)>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.Observable: rx.Observable buffer(long,java.util.concurrent.TimeUnit,int,rx.Scheduler)>
<com.facebook.stetho.inspector.protocol.module.DOM$PeerManagerListener: void onLastPeerUnregistered()>
<rx.functions.ActionN: void call(java.lang.Object[])>
<rx.internal.operators.OperatorBufferWithSize$BufferSkip: void <init>(rx.Subscriber,int,int)>
<okhttp3.internal.connection.RealConnection: okhttp3.Protocol protocol()>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: java.lang.Object newBufferPoll(java.lang.Object[],long,long)>
<com.squareup.picasso.Callback$EmptyCallback: void onSuccess()>
<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>
<rx.Observable: rx.Observable timeout(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>
<rx.internal.util.SynchronizedQueue: int size()>
<rx.internal.operators.OperatorTakeLastTimed: void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.jsonrpc.protocol.EmptyResult: void <init>()>
<rx.internal.operators.OperatorTimeoutWithSelector$1$1: void onNext(java.lang.Object)>
<com.squareup.picasso.ContactsPhotoRequestHandler: void <clinit>()>
<rx.Completable: rx.Completable timer(long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.InspectorModulesProvider: java.lang.Iterable get()>
<okhttp3.internal.framed.Spdy3: okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean)>
<rx.internal.operators.OperatorPublish$2: void call(java.lang.Object)>
<com.facebook.stetho.inspector.network.DecompressionHelper: java.io.InputStream teeInputWithDecompression(com.facebook.stetho.inspector.network.NetworkPeerManager,java.lang.String,java.io.InputStream,java.io.OutputStream,java.lang.String,com.facebook.stetho.inspector.network.ResponseHandler)>
<okio.Buffer$1: void flush()>
<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner,okhttp3.CertificatePinner$1)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerScalarProducer: void request(long)>
<com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.protocol.module.DOM$Node createNodeForElement(java.lang.Object,com.facebook.stetho.inspector.elements.DocumentView,com.facebook.stetho.common.Accumulator)>
<okhttp3.internal.framed.NameValueBlockReader$1: long read(okio.Buffer,long)>
<rx.schedulers.TestScheduler$InnerTestScheduler$2: void call()>
<retrofit2.Utils$GenericArrayTypeImpl: java.lang.String toString()>
<rx.internal.operators.OperatorDoAfterTerminate$1: void callAction()>
<rx.internal.operators.OperatorThrottleFirst$1: void onStart()>
<rx.internal.util.IndexedRingBuffer: rx.internal.util.IndexedRingBuffer$ElementSection getElementSection(int)>
<rx.internal.operators.OperatorFilter$FilterSubscriber: void onCompleted()>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: int connectionId()>
<rx.internal.operators.OperatorWindowWithSize$WindowSkip: rx.Producer createProducer()>
<rx.subjects.ReplaySubject: int subscriberCount()>
<okhttp3.HttpUrl: java.lang.String fragment()>
<rx.internal.operators.OnSubscribeTimerPeriodically: void call(rx.Subscriber)>
<rx.Observable: rx.Observable throttleLast(long,java.util.concurrent.TimeUnit)>
<rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl: void <init>(rx.functions.Func3)>
<com.facebook.stetho.inspector.protocol.module.CSS$SelectorList: void <init>()>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void commit()>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor: void <init>()>
<okhttp3.internal.framed.FramedConnection$Reader$3: void execute()>
<rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture: void <init>(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OperatorWindowWithStartEndObservable$1: void <init>(rx.internal.operators.OperatorWindowWithStartEndObservable,rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber)>
<retrofit2.Response: java.lang.Object body()>
<rx.internal.schedulers.TrampolineScheduler$TimedAction: int compareTo(rx.internal.schedulers.TrampolineScheduler$TimedAction)>
<com.facebook.stetho.websocket.WebSocketSession$2: void onSuccess()>
<rx.internal.operators.BlockingOperatorMostRecent$1: void <init>(java.lang.Object,rx.Observable)>
<com.facebook.stetho.common.LogRedirector: void d(java.lang.String,java.lang.String,java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Inspector: void <init>()>
<com.facebook.stetho.inspector.protocol.module.CSS$CSSStyle: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<rx.Scheduler$Worker: rx.Subscription schedulePeriodically(rx.functions.Action0,long,long,java.util.concurrent.TimeUnit)>
<rx.Observable: rx.Observable doOnError(rx.functions.Action1)>
<rx.Observable: rx.Observable withLatestFrom(rx.Observable,rx.functions.Func2)>
<rx.Observable: rx.Observable startWith(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<fr.masciulli.drinks.model.Liquor: int describeContents()>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void onItemClick(int,java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: void <init>()>
<rx.Completable$23: void call(java.lang.Object)>
<com.squareup.picasso.Request: java.lang.String logId()>
<rx.internal.operators.OnSubscribeSingle$1: void <init>(rx.internal.operators.OnSubscribeSingle,rx.SingleSubscriber)>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object,java.lang.Object)>
<rx.subscriptions.MultipleAssignmentSubscription: rx.Subscription get()>
<rx.Observable: rx.Observable timeout(rx.functions.Func0,rx.functions.Func1,rx.Observable)>
<okio.BufferedSink: okio.BufferedSink writeHexadecimalUnsignedLong(long)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber: void <init>(rx.internal.operators.OperatorBufferWithStartEndObservable,rx.Subscriber)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MainHighlightDrawable: void <init>()>
<rx.Observable: rx.Observable combineLatest(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func9)>
<rx.Single$21: java.lang.Object call(java.lang.Object)>
<rx.observables.BlockingObservable$3: void onError(java.lang.Throwable)>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: boolean isCanceled()>
<okhttp3.internal.framed.Http2$Reader: boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler)>
<okhttp3.CertificatePinner$Pin: int hashCode()>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void handleThrownError(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.android.AccessibilityNodeInfoWrapper: java.lang.String getIgnoredReasons(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.View)>
<rx.Completable$24$1: void <init>(rx.Completable$24,rx.Completable$CompletableSubscriber,rx.subscriptions.SerialSubscription)>
<okio.Buffer: okio.ByteString readByteString(long)>
<com.facebook.stetho.inspector.protocol.module.Database$1: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleUpdateDelete(int)>
<rx.internal.operators.OnSubscribePublishMulticast: void setProducer(rx.Producer)>
<okhttp3.Cache: int hitCount()>
<rx.internal.operators.OperatorOnBackpressureBuffer: void <init>(long)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void init()>
<okhttp3.internal.framed.Spdy3$Writer: void flush()>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void drain(java.util.List)>
<rx.internal.operators.OperatorWithLatestFrom$1: void onNext(java.lang.Object)>
<com.facebook.stetho.server.http.LightHttpServer: void writeFullResponse(com.facebook.stetho.server.http.LightHttpResponse,com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter,java.io.OutputStream)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$MatchResult: void <init>(com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory,java.lang.String,com.facebook.stetho.inspector.network.PrettyPrinterDisplayType)>
<rx.functions.Actions: rx.functions.Func5 toFunc(rx.functions.Action5,java.lang.Object)>
<com.facebook.stetho.inspector.elements.Document$UpdateListener: void onChildNodeInserted(com.facebook.stetho.inspector.elements.DocumentView,java.lang.Object,int,int,com.facebook.stetho.common.Accumulator)>
<com.facebook.stetho.inspector.elements.DocumentProvider: void dispose()>
<rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef: rx.internal.util.atomic.LinkedQueueNode lvConsumerNode()>
<retrofit2.Utils$ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<rx.subjects.AsyncSubject$1: void <init>(rx.subjects.SubjectSubscriptionManager)>
<rx.internal.operators.OperatorZip$Zip: void <init>(rx.Subscriber,rx.functions.FuncN)>
<com.squareup.picasso.Stats: void performCacheHit()>
<okhttp3.internal.http.HttpStream: void finishRequest()>
<rx.Notification: rx.Notification createOnCompleted()>
<rx.internal.util.FrontPadding: void <init>()>
<okhttp3.internal.http.Http1xStream$ChunkedSink: void write(okio.Buffer,long)>
<rx.Observable: rx.Observable amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber: void expire(int,rx.Subscription)>
<okhttp3.Handshake: java.security.Principal localPrincipal()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond$1: void onActivityStopped(android.app.Activity)>
<okio.AsyncTimeout: void timedOut()>
<fr.masciulli.drinks.model.Drink: void writeToParcel(android.os.Parcel,int)>
<okhttp3.internal.framed.Http2$FrameLogger: void <clinit>()>
<rx.internal.operators.OperatorReplay$7: void <init>(java.util.concurrent.atomic.AtomicReference,rx.functions.Func0)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void emitEmpty()>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: java.lang.Object poll()>
<com.facebook.stetho.inspector.elements.DocumentProviderListener: void onAttributeRemoved(java.lang.Object,java.lang.String)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: void resize(java.lang.Object[],long,long,java.lang.Object,long)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler$2: void store(android.view.Window)>
<rx.observers.Observers: rx.Observer create(rx.functions.Action1)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: void <init>(int,long,rx.Scheduler)>
<com.facebook.stetho.common.android.AccessibilityUtil: boolean isActionableForAccessibility(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: void <init>()>
<rx.internal.operators.OperatorDelay$1$1: void call()>
<rx.internal.operators.OperatorBufferWithSize$BufferSkip: void onError(java.lang.Throwable)>
<com.facebook.stetho.websocket.SimpleSession: void sendText(java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.Runtime$1$1: java.lang.Object evaluate(java.lang.String)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addEncodedPathSegments(java.lang.String)>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin: java.lang.reflect.Constructor tryGetDeclaredConstructor(java.lang.Class,java.lang.Class[])>
<okio.SegmentPool: void <init>()>
<rx.Single$1: void <init>(rx.Single,rx.Single$OnSubscribe)>
<okhttp3.CertificatePinner$Pin: boolean equals(java.lang.Object)>
<rx.subjects.UnicastSubject: void onCompleted()>
<rx.internal.operators.OnSubscribeDefer: void <init>(rx.functions.Func0)>
<rx.internal.operators.BlockingOperatorToFuture$2: java.lang.Object getValue()>
<rx.internal.operators.CompletableOnSubscribeConcat: void call(java.lang.Object)>
<retrofit2.BuiltInConverters$ToStringConverter: java.lang.Object convert(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot: com.facebook.stetho.inspector.elements.NodeType onGetNodeType(com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot)>
<rx.observers.SafeCompletableSubscriber: void unsubscribe()>
<rx.internal.operators.CachedObservable: boolean isConnected()>
<okio.ByteString: int indexOf(byte[],int)>
<com.facebook.stetho.inspector.protocol.module.Page: com.facebook.stetho.inspector.protocol.module.Page$FrameResourceTree createSimpleFrameResourceTree(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<okhttp3.Response: okhttp3.Response cacheResponse()>
<rx.internal.operators.OperatorDoOnEach: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.SingleOnSubscribeUsing: void call(java.lang.Object)>
<rx.observables.BlockingObservable: java.lang.Iterable latest()>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.EmptyObservableHolder: rx.internal.operators.EmptyObservableHolder valueOf(java.lang.String)>
<com.facebook.stetho.common.android.FragmentAccessor: android.view.View getView(java.lang.Object)>
<rx.internal.operators.OperatorAny$1: void <init>(rx.internal.operators.OperatorAny,rx.internal.producers.SingleDelayedProducer,rx.Subscriber)>
<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>
<okhttp3.Cookie$Builder: void <init>()>
<com.facebook.stetho.dumpapp.ArgsHelper: java.lang.String[] drainToArray(java.util.Iterator)>
<fr.masciulli.drinks.model.Liquor: java.lang.String getHistory()>
<retrofit2.OkHttpCall$NoContentResponseBody: okio.BufferedSource source()>
<rx.internal.util.InternalObservableUtils: rx.internal.util.InternalObservableUtils[] values()>
<com.squareup.picasso.Request: boolean needsTransformation()>
<rx.Single$20$1: void onNext(java.lang.Object)>
<okhttp3.internal.framed.FramedStream: void close(okhttp3.internal.framed.ErrorCode)>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void cancel()>
<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: void onError(java.lang.Throwable)>
<com.squareup.leakcanary.RefWatcher: void watch(java.lang.Object,java.lang.String)>
<rx.internal.operators.OperatorDebounceWithTime$DebounceState: void emitAndComplete(rx.Subscriber,rx.Subscriber)>
<rx.internal.operators.NotificationLite: java.lang.Object error(java.lang.Throwable)>
<rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer: void <init>(int)>
<rx.internal.operators.OperatorTakeTimed$TakeSubscriber: void <init>(rx.Subscriber)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator priority(com.squareup.picasso.Picasso$Priority)>
<com.facebook.stetho.inspector.database.ContentProviderSchema: android.net.Uri getUri()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void onGetStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<okhttp3.internal.framed.FramedConnection$6: void execute()>
<okio.RealBufferedSink: okio.Buffer buffer()>
<rx.functions.Functions$1: java.lang.Object call(java.lang.Object[])>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String capitalize(java.lang.String)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: java.lang.String url()>
<com.squareup.picasso.Action: boolean isCancelled()>
<okio.Util: void sneakyThrow2(java.lang.Throwable)>
<okhttp3.internal.framed.Http2: int readMedium(okio.BufferedSource)>
<okhttp3.internal.framed.Spdy3$Writer: void data(boolean,int,okio.Buffer,int)>
<rx.internal.operators.OperatorSampleWithObservable: rx.Subscriber call(rx.Subscriber)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: long lpProducerIndex()>
<com.facebook.stetho.inspector.protocol.module.Page: void setEmulatedMedia(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.json.ObjectMapper: boolean canDirectlySerializeClass(java.lang.Class)>
<okio.ForwardingTimeout: boolean hasDeadline()>
<rx.Observable: rx.Observable 'from'(java.lang.Iterable)>
<rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl: void onUnsubscribe(java.lang.Object)>
<rx.internal.util.ScalarSynchronousObservable: rx.Producer createProducer(rx.Subscriber,java.lang.Object)>
<rx.internal.util.BlockingUtils: void awaitForComplete(java.util.concurrent.CountDownLatch,rx.Subscription)>
<rx.internal.util.BackpressureDrainManager: void terminate()>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager$1: void onFirstPeerRegistered()>
<okio.Buffer: okio.Buffer readFrom(java.io.InputStream,long)>
<com.squareup.picasso.RequestCreator: void performRemoteViewInto(com.squareup.picasso.RemoteViewsAction)>
<rx.internal.operators.OnSubscribeTimerOnce$1: void <init>(rx.internal.operators.OnSubscribeTimerOnce,rx.Subscriber)>
<retrofit2.OkHttpCall: void enqueue(retrofit2.Callback)>
<okio.ByteString: void readObject(java.io.ObjectInputStream)>
<rx.Completable$16$1$1: void call()>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void <init>(rx.Subscriber,rx.functions.Func0)>
<rx.internal.operators.BlockingOperatorLatest: java.lang.Iterable latest(rx.Observable)>
<rx.schedulers.TestScheduler$InnerTestScheduler$2: void <init>(rx.schedulers.TestScheduler$InnerTestScheduler,rx.schedulers.TestScheduler$TimedAction)>
<okhttp3.internal.framed.HeadersMode: okhttp3.internal.framed.HeadersMode valueOf(java.lang.String)>
<rx.internal.operators.NeverObservableHolder: rx.Observable instance()>
<com.facebook.stetho.inspector.helper.PeersRegisteredListener: void onLastPeerUnregistered()>
<rx.internal.operators.OperatorToObservableSortedList$DefaultComparableFunction: int compare(java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorMap: void <init>(rx.functions.Func1)>
<com.facebook.stetho.inspector.protocol.module.Page$ExecutionContextCreatedParams: void <init>(com.facebook.stetho.inspector.protocol.module.Page$1)>
<okio.DeflaterSink: okio.Timeout timeout()>
<rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler: rx.Subscription schedule(rx.functions.Action0)>
<rx.internal.util.ScalarSynchronousObservable$2: rx.Subscription call(rx.functions.Action0)>
<com.facebook.stetho.inspector.elements.DocumentProviderFactory: com.facebook.stetho.inspector.elements.DocumentProvider create()>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: java.lang.String getTag(android.app.Fragment)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$1: void <init>(com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider)>
<rx.schedulers.TrampolineScheduler: rx.Scheduler$Worker createWorker()>
<okio.HashingSink: void write(okio.Buffer,long)>
<rx.Single: rx.Single delaySubscription(rx.Observable)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$Type: java.lang.StringBuilder appendNamesList(java.lang.StringBuilder,java.lang.String)>
<okhttp3.internal.tls.OkHostnameVerifier: void <init>()>
<com.facebook.stetho.common.LogUtil: void e(java.lang.String,java.lang.Object[])>
<com.squareup.picasso.NetworkPolicy: com.squareup.picasso.NetworkPolicy[] values()>
<com.squareup.picasso.MemoryPolicy: void <init>(java.lang.String,int,int)>
<com.facebook.stetho.dumpapp.Framer$ClosedHelper: void throwIfClosed()>
<rx.internal.util.RxRingBuffer$1: rx.internal.util.unsafe.SpscArrayQueue createObject()>
<rx.internal.operators.OnSubscribeFlattenIterable: rx.Observable createFrom(rx.Observable,rx.functions.Func1,int)>
<com.facebook.stetho.inspector.protocol.module.CSS$PeerManagerListener: void <init>(com.facebook.stetho.inspector.protocol.module.CSS)>
<com.facebook.stetho.server.http.LightHttpBody: int contentLength()>
<com.facebook.stetho.common.ListUtil$FiveItemImmutableList: int size()>
<rx.subscriptions.CompositeSubscription: void add(rx.Subscription)>
<rx.internal.operators.BackpressureUtils: void postCompleteDone(java.util.concurrent.atomic.AtomicLong,java.util.Queue,rx.Subscriber,rx.functions.Func1)>
<rx.internal.operators.OnSubscribeRange: void <init>(int,int)>
<rx.Observable: rx.Observable merge(rx.Observable)>
<rx.internal.operators.CompletableOnSubscribeTimeout$2: void onSubscribe(rx.Subscription)>
<rx.observables.SyncOnSubscribe: void call(java.lang.Object)>
<rx.internal.operators.OperatorTakeTimed: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.CompletableOnSubscribeMergeArray$1: void <init>(rx.internal.operators.CompletableOnSubscribeMergeArray,rx.subscriptions.CompositeSubscription,java.util.concurrent.atomic.AtomicBoolean,rx.Completable$CompletableSubscriber,java.util.concurrent.atomic.AtomicInteger)>
<com.facebook.stetho.server.CompositeInputStream: void reset()>
<okhttp3.Cache: void remove(okhttp3.Request)>
<rx.internal.operators.OnSubscribeAmb$2: void request(long)>
<rx.internal.operators.OnSubscribeRange: void call(java.lang.Object)>
<rx.Notification: void <init>(rx.Notification$Kind,java.lang.Object,java.lang.Throwable)>
<rx.observables.AsyncOnSubscribe$4: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.subscriptions.CompositeSubscription: void clear()>
<rx.internal.operators.OperatorSequenceEqual$1: void <init>()>
<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.net.URL)>
<com.squareup.picasso.MediaStoreRequestHandler$PicassoKind: void <init>(java.lang.String,int,int,int,int)>
<com.facebook.stetho.inspector.helper.ChromePeerManager: void invokeMethodOnPeers(java.lang.String,java.lang.Object,com.facebook.stetho.inspector.jsonrpc.PendingRequestCallback)>
<rx.Observable: rx.Observable merge(rx.Observable,rx.Observable,rx.Observable)>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void <init>(rx.Subscriber,rx.observables.SyncOnSubscribe,java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectProtoContainer: void <init>(java.lang.Object)>
<com.squareup.picasso.ContentStreamRequestHandler: boolean canHandleRequest(com.squareup.picasso.Request)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall: void <init>(java.util.concurrent.Executor,retrofit2.Call)>
<rx.Observable: rx.Observable takeUntil(rx.functions.Func1)>
<com.facebook.stetho.inspector.network.MimeMatcher: void addRule(java.lang.String,java.lang.Object)>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void onDrinkClick(int,fr.masciulli.drinks.model.Drink)>
<rx.internal.operators.OperatorMerge$InnerSubscriber: void onStart()>
<com.facebook.stetho.inspector.elements.ChainedDescriptor: void setSuper(com.facebook.stetho.inspector.elements.Descriptor)>
<rx.internal.util.InternalObservableUtils$IsInstanceOfFunc1: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorMapPair: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.Document: void <init>(com.facebook.stetho.inspector.elements.DocumentProviderFactory)>
<okio.ForwardingSource: okio.Source delegate()>
<okio.RealBufferedSink: okio.BufferedSink writeLong(long)>
<rx.internal.operators.OperatorTakeLastTimed$TakeLastTimedSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler: java.lang.Object handleInsert(long)>
<retrofit2.ServiceMethod$Builder: okhttp3.Headers parseHeaders(java.lang.String[])>
<rx.observables.BlockingObservable: void <init>(rx.Observable)>
<rx.Observable: rx.Observable flatMapIterable(rx.functions.Func1)>
<com.facebook.stetho.server.http.LightHttpRequest: void reset()>
<rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.DOMStorage: void assignByType(android.content.SharedPreferences$Editor,java.lang.String,java.lang.Object)>
<rx.internal.operators.BlockingOperatorNext$1: java.util.Iterator iterator()>
<rx.internal.util.SynchronizedQueue: int hashCode()>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ElementInfo getElementInfo(java.lang.Object)>
<rx.internal.operators.OperatorToMap$1: void onCompleted()>
<okhttp3.internal.framed.Settings: int getHeaderTableSize()>
<rx.internal.operators.OperatorSingle$Holder: void <clinit>()>
<com.squareup.picasso.Action: void cancel()>
<okhttp3.HttpUrl: java.lang.String query()>
<com.facebook.stetho.inspector.elements.NodeType: void <clinit>()>
<com.facebook.stetho.websocket.SimpleEndpoint: void onError(com.facebook.stetho.websocket.SimpleSession,java.lang.Throwable)>
<rx.Observable: rx.Observable just(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<okhttp3.internal.framed.ErrorCode: void <clinit>()>
<com.squareup.picasso.NetworkRequestHandler$ContentLengthException: void <init>(java.lang.String)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler$2: void <init>(com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler)>
<rx.internal.schedulers.ImmediateScheduler$InnerImmediateScheduler: void unsubscribe()>
<rx.subjects.ReplaySubject$ReplayProducer: void request(long)>
<rx.Completable$12$1: void <init>(rx.Completable$12,rx.Completable$CompletableSubscriber,rx.Scheduler$Worker)>
<rx.functions.Actions$11: void <init>(rx.functions.ActionN,java.lang.Object)>
<rx.internal.operators.BackpressureUtils: boolean postCompleteRequest(java.util.concurrent.atomic.AtomicLong,long,java.util.Queue,rx.Subscriber)>
<okhttp3.logging.HttpLoggingInterceptor: void <init>(okhttp3.logging.HttpLoggingInterceptor$Logger)>
<rx.Observable: rx.Observable distinct(rx.functions.Func1)>
<rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer: void request(long)>
<com.facebook.stetho.inspector.elements.ShadowDocument: com.facebook.stetho.inspector.elements.ElementInfo getElementInfo(java.lang.Object)>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1: void onSubscribe(rx.Subscription)>
<com.squareup.picasso.NetworkRequestHandler: com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request,int)>
<okhttp3.internal.io.FileSystem: okio.Sink appendingSink(java.io.File)>
<rx.internal.operators.OperatorToObservableList: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.NodeDescriptor: void getChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OperatorTakeLastOne: rx.internal.operators.OperatorTakeLastOne instance()>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer: void unregisterDisconnectReceiver(com.facebook.stetho.inspector.jsonrpc.DisconnectReceiver)>
<rx.Single$20$2: void onSubscribe(rx.Subscription)>
<rx.Observable: rx.Observable doOnSubscribe(rx.functions.Action0)>
<okio.Util: int reverseBytesInt(int)>
<okio.BufferedSource: java.lang.String readUtf8LineStrict()>
<retrofit2.Call: boolean isCanceled()>
<rx.Observable: rx.Observable limit(int)>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void flush()>
<retrofit2.Call: void enqueue(retrofit2.Callback)>
<rx.internal.operators.OperatorFilter$FilterSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorSkipTimed$2: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void createNewWindow()>
<rx.internal.operators.OperatorUnsubscribeOn$2: void call()>
<rx.internal.util.atomic.SpscAtomicArrayQueue: boolean isEmpty()>
<okhttp3.internal.framed.FramedConnection$7: void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okhttp3.internal.framed.ErrorCode)>
<rx.internal.operators.OperatorSampleWithObservable$1: void onCompleted()>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: boolean checkTerminated(boolean,boolean,rx.Subscriber,java.util.Queue,boolean)>
<okhttp3.RequestBody$2: long contentLength()>
<okhttp3.internal.framed.FramedConnection$Reader: void headers(boolean,boolean,int,int,java.util.List,okhttp3.internal.framed.HeadersMode)>
<com.squareup.picasso.Stats: void performBitmapTransformed(long)>
<com.facebook.stetho.Stetho$Initializer: java.lang.Iterable getDumperPlugins()>
<rx.functions.Actions: rx.functions.Func7 toFunc(rx.functions.Action7,java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Profiler: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.Completable$15: void onSubscribe(rx.Subscription)>
<rx.internal.operators.OperatorReplay$6: rx.internal.operators.OperatorReplay$ReplayBuffer call()>
<rx.internal.operators.OperatorDelay$1: void onCompleted()>
<okhttp3.internal.platform.Jdk9Platform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method)>
<rx.Completable$23: void <init>(rx.Completable,rx.functions.Func1)>
<com.squareup.picasso.Request$Builder: void <init>(android.net.Uri)>
<okhttp3.internal.connection.RouteException: void addConnectException(java.io.IOException)>
<com.squareup.picasso.BitmapHunter: com.squareup.picasso.Request getData()>
<com.squareup.picasso.ImageViewAction: void error()>
<rx.Observable: rx.Observable takeUntil(rx.Observable)>
<rx.internal.operators.OperatorDistinct$1: void <init>(rx.internal.operators.OperatorDistinct,rx.Subscriber,rx.Subscriber)>
<rx.internal.util.ScalarSynchronousObservable: java.lang.Object get()>
<rx.internal.operators.OperatorSkip: java.lang.Object call(java.lang.Object)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.lang.Object remove()>
<com.squareup.picasso.MediaStoreRequestHandler$PicassoKind: void <clinit>()>
<rx.internal.operators.OperatorTimestamp$1: void onNext(java.lang.Object)>
<rx.Observable: rx.Observable merge(java.lang.Iterable,int)>
<rx.internal.operators.OnSubscribeAmb$Selection: void <init>(rx.internal.operators.OnSubscribeAmb$1)>
<rx.internal.operators.OperatorTakeTimed: java.lang.Object call(java.lang.Object)>
<rx.Completable$26: void onSubscribe(rx.Subscription)>
<rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber: void <init>(rx.internal.operators.OnSubscribePublishMulticast)>
<rx.Observable: rx.Observable contains(java.lang.Object)>
<com.squareup.picasso.UrlConnectionDownloader: void <clinit>()>
<okhttp3.logging.HttpLoggingInterceptor: okhttp3.logging.HttpLoggingInterceptor$Level getLevel()>
<rx.Single$9: void <init>(rx.functions.Func5)>
<rx.Completable$27: void <init>(rx.Completable,rx.functions.Action0,rx.subscriptions.MultipleAssignmentSubscription,rx.functions.Action1)>
<okio.Pipe: okio.Source source()>
<retrofit2.RequestBuilder: void addPathParam(java.lang.String,java.lang.String,boolean)>
<com.facebook.stetho.common.LogUtil: boolean isLoggable(int)>
<okio.SegmentedByteString: java.lang.String utf8()>
<okhttp3.FormBody: java.lang.String encodedValue(int)>
<retrofit2.BuiltInConverters: retrofit2.Converter requestBodyConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<rx.internal.operators.OperatorCast$CastSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorSwitch$Holder: void <init>()>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$Type: com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$Type[] values()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: java.lang.String onGetLocalName(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: android.app.Activity tryGetTopActivity()>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor$ElementContext$1: void onActivityRemoved(android.app.Activity)>
<rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable: void call(rx.Subscriber)>
<fr.masciulli.drinks.ui.EnterPostponeTransitionCallback: void onSuccess()>
<rx.observers.TestObserver: void <init>(rx.Observer)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: java.lang.String headerValue(int)>
<rx.subjects.UnicastSubject$State: void call(rx.Subscriber)>
<rx.subjects.SubjectSubscriptionManager: java.lang.Object getLatest()>
<rx.internal.operators.NotificationLite$1: java.lang.String toString()>
<rx.Observable: rx.Observable skip(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorSkipUntil$2: void onError(java.lang.Throwable)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder cookieJar(okhttp3.CookieJar)>
<rx.internal.operators.OperatorPublish$PublishSubscriber: boolean add(rx.internal.operators.OperatorPublish$InnerProducer)>
<okio.Buffer: okio.Buffer writeInt(int)>
<rx.Single$5: void call(java.lang.Object)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$Type: com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$Type valueOf(java.lang.String)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber: void onCompleted()>
<okhttp3.internal.framed.ErrorCode: okhttp3.internal.framed.ErrorCode[] values()>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkJellyBean: void <init>(com.facebook.stetho.common.android.FragmentCompatFramework$1)>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: void reportDecodedSizeIfApplicable()>
<com.facebook.stetho.common.android.FragmentAccessor: android.content.res.Resources getResources(java.lang.Object)>
<rx.internal.operators.OnSubscribeThrow: void <init>(java.lang.Throwable)>
<retrofit2.BuiltInConverters$BufferingResponseBodyConverter: void <init>()>
<com.facebook.stetho.inspector.protocol.module.Page$ScreencastFrameEvent: void <init>()>
<okhttp3.internal.framed.Spdy3$Writer: void applyAndAckSettings(okhttp3.internal.framed.Settings)>
<rx.internal.util.IndexedRingBuffer$IndexSection: rx.internal.util.IndexedRingBuffer$IndexSection getNext()>
<rx.internal.operators.OperatorMaterialize: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.CompletableOnSubscribeConcatIterable: void <init>(java.lang.Iterable)>
<rx.subjects.SubjectSubscriptionManager: void setLatest(java.lang.Object)>
<com.squareup.picasso.Picasso: com.squareup.picasso.StatsSnapshot getSnapshot()>
<okhttp3.internal.cache.DiskLruCache: boolean remove(java.lang.String)>
<com.facebook.stetho.inspector.runtime.RhinoDetectingRuntimeReplFactory$1: void <init>(com.facebook.stetho.inspector.runtime.RhinoDetectingRuntimeReplFactory)>
<rx.internal.operators.OperatorToObservableSortedList: void <init>(rx.functions.Func2,int)>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void addLast(rx.internal.operators.OperatorReplay$Node)>
<rx.internal.operators.OperatorSwitch$InnerSubscriber: void <init>(long,rx.internal.operators.OperatorSwitch$SwitchSubscriber)>
<okhttp3.internal.framed.Spdy3: okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean)>
<rx.internal.operators.BlockingOperatorNext$NextObserver: void onCompleted()>
<okio.Timeout$1: void throwIfReached()>
<okhttp3.internal.framed.Http2: int lengthWithoutPadding(int,byte,short)>
<rx.Single$12: void <init>(rx.functions.Func8)>
<rx.internal.util.ScalarSynchronousObservable$ScalarAsyncOnSubscribe: void call(java.lang.Object)>
<rx.Observable: rx.observables.ConnectableObservable replay(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker: void <clinit>()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String mapFlagsToStringUsingAnnotation(int,android.view.ViewDebug$ExportedProperty)>
<com.facebook.stetho.inspector.elements.NodeDescriptor: java.lang.String getLocalName(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter: com.facebook.stetho.inspector.elements.android.ViewHighlighter newInstance()>
<rx.internal.operators.OnSubscribePublishMulticast: rx.internal.operators.OnSubscribePublishMulticast$PublishProducer[] terminate()>
<com.squareup.picasso.MediaStoreRequestHandler: boolean canHandleRequest(com.squareup.picasso.Request)>
<okhttp3.Cookie: long parseMaxAge(java.lang.String)>
<rx.internal.operators.OperatorBufferWithSize$BufferSkip: void onCompleted()>
<rx.observers.TestObserver: void assertReceivedOnNext(java.util.List)>
<com.facebook.stetho.inspector.protocol.module.DOM$GetSearchResultsResponse: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader$NewLineDetector: void <init>()>
<okhttp3.internal.tls.TrustRootIndex: okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager)>
<rx.internal.operators.OperatorGroupBy$State: void call(rx.Subscriber)>
<com.facebook.stetho.server.LocalSocketServer: void listenOnAddress(java.lang.String)>
<com.facebook.stetho.server.http.LightHttpBody: java.lang.String contentType()>
<com.squareup.picasso.Utils: boolean isWebPFile(java.io.InputStream)>
<rx.Observable: rx.Observable concatEager(java.lang.Iterable)>
<rx.subjects.Subject: boolean hasObservers()>
<rx.internal.operators.CompletableOnSubscribeTimeout$2: void onError(java.lang.Throwable)>
<okhttp3.internal.cache.InternalCache: void remove(okhttp3.Request)>
<okhttp3.internal.cache.CacheInterceptor$1: okhttp3.MediaType contentType()>
<rx.subscriptions.RefCountSubscription$InnerSubscription: void unsubscribe()>
<com.facebook.stetho.inspector.helper.IntegerFormatter: void <init>(com.facebook.stetho.inspector.helper.IntegerFormatter$1)>
<com.facebook.stetho.inspector.protocol.module.DOM: void discardSearchResults(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.inspector.MethodDispatcher: org.json.JSONObject dispatch(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,java.lang.String,org.json.JSONObject)>
<okio.Buffer: okio.BufferedSink writeShortLe(int)>
<okhttp3.internal.framed.ErrorCode: okhttp3.internal.framed.ErrorCode valueOf(java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.CSS$CSSRule: void <init>()>
<retrofit2.Utils: boolean isAnnotationPresent(java.lang.'annotation'.Annotation[],java.lang.Class)>
<okhttp3.internal.cache.InternalCache: okhttp3.internal.cache.CacheRequest put(okhttp3.Response)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager$2: void <init>(rx.observables.AsyncOnSubscribe$AsyncOuterManager,rx.Subscriber)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorTake$1$1: void <init>(rx.internal.operators.OperatorTake$1,rx.Producer)>
<rx.internal.util.RxRingBuffer: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.database.ContentProviderSchema: java.lang.String[] getProjection()>
<com.facebook.stetho.inspector.elements.Document$UpdateListener: void onInspectRequested(java.lang.Object)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightDurationObserver: void <init>(rx.internal.operators.OnSubscribeGroupJoin$ResultManager,int)>
<com.facebook.stetho.Stetho$PluginBuilder: void <init>()>
<rx.internal.operators.OperatorPublish$2$1: void setProducer(rx.Producer)>
<rx.subjects.PublishSubject$1: void call(java.lang.Object)>
<okio.BufferedSource: int readIntLe()>
<rx.subjects.BehaviorSubject: java.lang.Throwable getThrowable()>
<com.facebook.stetho.common.Accumulator: void store(java.lang.Object)>
<rx.Notification: boolean hasValue()>
<com.squareup.picasso.LruCache: void clear()>
<rx.observables.AsyncOnSubscribe$UnicastSubject$State: void call(java.lang.Object)>
<com.squareup.picasso.ContactsPhotoRequestHandler$ContactPhotoStreamIcs: java.io.InputStream get(android.content.ContentResolver,android.net.Uri)>
<okio.Buffer: okio.Buffer writeShort(int)>
<rx.Single: rx.Single create(rx.Single$OnSubscribe)>
<com.facebook.stetho.inspector.network.DefaultResponseHandler: void onError(java.io.IOException)>
<rx.internal.operators.OperatorMulticast$1: void call(rx.Subscriber)>
<okhttp3.internal.http.RequestLine: void <init>()>
<com.facebook.stetho.inspector.network.DefaultResponseHandler: void <init>(com.facebook.stetho.inspector.network.NetworkEventReporter,java.lang.String)>
<okhttp3.HttpUrl: java.lang.String password()>
<okhttp3.ResponseBody$1: okhttp3.MediaType contentType()>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor$ElementContext: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber: void onError(java.lang.Throwable)>
<com.squareup.picasso.LruCache: int missCount()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: com.facebook.stetho.common.android.DialogFragmentAccessor forDialogFragment()>
<com.facebook.stetho.common.android.ResourcesUtil: java.lang.String getFallbackIdString(int)>
<com.facebook.stetho.inspector.elements.DocumentProvider: void setAttributesAsText(java.lang.Object,java.lang.String)>
<com.facebook.stetho.dumpapp.Framer: java.lang.String readString()>
<okhttp3.Response: long receivedResponseAtMillis()>
<rx.internal.operators.OperatorSampleWithObservable$2: void onError(java.lang.Throwable)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: java.lang.Object lvElement(java.lang.Object[],long)>
<rx.internal.operators.OperatorTimeoutWithSelector$1$1: void <init>(rx.internal.operators.OperatorTimeoutWithSelector$1,rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber,java.lang.Long)>
<okhttp3.internal.framed.NameValueBlockReader: void close()>
<com.facebook.stetho.common.android.HandlerUtil: void postAndWait(android.os.Handler,java.lang.Runnable)>
<rx.observables.AsyncOnSubscribe: rx.observables.AsyncOnSubscribe createSingleState(rx.functions.Func0,rx.functions.Action3,rx.functions.Action1)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: void getStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<rx.internal.operators.BackpressureUtils: void postCompleteDrain(java.util.concurrent.atomic.AtomicLong,java.util.Queue,rx.Subscriber,rx.functions.Func1)>
<com.facebook.stetho.dumpapp.UnexpectedFrameException: void <init>(byte,byte)>
<rx.observers.SafeSubscriber: rx.Subscriber getActual()>
<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>
<okio.SegmentedByteString: okio.ByteString sha256()>
<rx.subscriptions.MultipleAssignmentSubscription: void <init>()>
<rx.internal.operators.OperatorSkipTimed$2: void onNext(java.lang.Object)>
<rx.internal.util.ActionNotificationObserver: void <init>(rx.functions.Action1)>
<okhttp3.internal.http.HttpHeaders: java.util.Set varyFields(okhttp3.Response)>
<com.facebook.stetho.websocket.WebSocketHandler: boolean isSupportableUpgradeRequest(com.facebook.stetho.server.http.LightHttpRequest)>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void replaceWindow()>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: int read()>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2: void <init>(rx.Observable)>
<com.facebook.stetho.inspector.protocol.module.Runtime: void releaseObjectGroup(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber: void <init>(rx.internal.operators.OnSubscribeJoin$ResultSink)>
<rx.internal.util.InternalObservableUtils$ErrorNotImplementedAction: void call(java.lang.Object)>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.elements.DocumentProvider: com.facebook.stetho.inspector.elements.NodeDescriptor getNodeDescriptor(java.lang.Object)>
<rx.Completable$7: void <init>(java.lang.Throwable)>
<com.squareup.picasso.Utils: long calculateDiskCacheSize(java.io.File)>
<rx.Observable: rx.Observable combineLatest(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func4)>
<rx.internal.operators.OperatorTimeoutWithSelector$1: rx.Subscription call(rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber,java.lang.Long,rx.Scheduler$Worker)>
<com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeRemovedEvent: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<rx.observables.BlockingObservable$3: void onNext(java.lang.Object)>
<rx.internal.operators.SingleOnSubscribeUsing: void <init>(rx.functions.Func0,rx.functions.Func1,rx.functions.Action1,boolean)>
<rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer: void request(long)>
<rx.observers.Subscribers$2: void onCompleted()>
<okhttp3.Cache: void abortQuietly(okhttp3.internal.cache.DiskLruCache$Editor)>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OnSubscribeAutoConnect: void call(rx.Subscriber)>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: void next(java.lang.Object)>
<okhttp3.internal.http.Http2xStream$StreamFinishingSource: void <init>(okhttp3.internal.http.Http2xStream,okio.Source)>
<retrofit2.Platform$IOS$MainThreadExecutor: void <clinit>()>
<rx.internal.operators.OperatorElementAt: void <init>(int)>
<rx.Observable: rx.Observable share()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator resize(int,int)>
<rx.Single$16: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Console$MessageLevel: com.facebook.stetho.inspector.protocol.module.Console$MessageLevel[] values()>
<rx.internal.operators.OnSubscribeAmb$Selection: void <init>()>
<com.facebook.stetho.inspector.network.DefaultResponseHandler: void reportDataReceived()>
<rx.internal.schedulers.SleepingAction: void call()>
<com.facebook.stetho.inspector.elements.android.AccessibilityNodeInfoWrapper: boolean getIgnored(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.View)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onGetStyles(android.view.View,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginTopHighlightDrawable: void highlightView(android.view.View)>
<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>
<retrofit2.Platform$Java8: boolean isDefaultMethod(java.lang.reflect.Method)>
<rx.internal.util.ScalarSynchronousSingle$2$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorOnBackpressureDrop: rx.internal.operators.OperatorOnBackpressureDrop instance()>
<rx.internal.operators.OnSubscribeDelaySubscriptionOther$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorBufferWithSize$BufferOverlap: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.CSS$Selector: void <init>()>
<rx.internal.util.SynchronizedQueue: boolean contains(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: android.view.View getView(android.app.Fragment)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentActivityAccessorSupportLib: android.support.v4.app.FragmentManager getFragmentManager(android.support.v4.app.FragmentActivity)>
<com.squareup.picasso.OkHttpDownloader: void <init>(java.io.File)>
<rx.internal.operators.OnSubscribeRedo: rx.Observable repeat(rx.Observable,long,rx.Scheduler)>
<rx.Observable: rx.Observable timer(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager$1: void <init>(rx.observables.AsyncOnSubscribe$AsyncOuterManager,long,rx.internal.operators.BufferUntilSubscriber)>
<rx.Notification$Kind: rx.Notification$Kind[] values()>
<com.squareup.picasso.OkHttpDownloader: com.squareup.okhttp.OkHttpClient getClient()>
<rx.internal.operators.OnSubscribeRefCount$2: void onCompleted()>
<com.squareup.picasso.Utils$PicassoThread: void <init>(java.lang.Runnable)>
<com.facebook.stetho.common.android.AccessibilityUtil: boolean hasFocusableAncestor(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.View)>
<rx.internal.operators.OperatorElementAt: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorDebounceWithSelector$1: void onError(java.lang.Throwable)>
<retrofit2.Converter: java.lang.Object convert(java.lang.Object)>
<rx.Completable: rx.Completable delay(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResponseCallAdapter: rx.Observable adapt(retrofit2.Call)>
<rx.observables.AsyncOnSubscribe$7: void <init>(rx.observables.AsyncOnSubscribe)>
<retrofit2.OkHttpCall$ExceptionCatchingRequestBody$1: long read(okio.Buffer,long)>
<rx.observables.SyncOnSubscribe$3: java.lang.Object call(java.lang.Object,java.lang.Object)>
<rx.Observable: rx.Observable timeout(long,java.util.concurrent.TimeUnit,rx.Observable)>
<rx.Single$6: java.lang.Object call(java.lang.Object[])>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$NoOpViewHighlightOverlays: void <init>(com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$1)>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader$NewLineDetector: void <init>(com.facebook.stetho.server.http.LightHttpServer$1)>
<rx.internal.util.ScalarSynchronousObservable$2: java.lang.Object call(java.lang.Object)>
<rx.Observable: rx.Observable delay(rx.functions.Func0,rx.functions.Func1)>
<okio.Buffer: java.lang.String readUtf8LineStrict()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: com.facebook.stetho.inspector.network.NetworkEventReporter get()>
<com.facebook.stetho.inspector.protocol.module.DOM: void releaseChildNodeInsertedEvent(com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent)>
<com.facebook.stetho.common.ListUtil: void <init>()>
<rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe: void <init>(java.lang.Object)>
<com.facebook.stetho.common.android.ViewUtil$ViewCompat$ViewCompatHoneycomb: void <init>(com.facebook.stetho.common.android.ViewUtil$1)>
<rx.Completable$24$1: void onSubscribe(rx.Subscription)>
<rx.Observable: rx.observables.ConnectableObservable replay(int,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.dumpapp.DumperContext: java.io.PrintStream getStderr()>
<rx.Completable$6: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.CachedObservable$CacheState$1: void onNext(java.lang.Object)>
<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber: void terminate()>
<rx.internal.operators.OnSubscribeAmb: void unsubscribeAmbSubscribers(java.util.Collection)>
<rx.Completable: rx.Completable retry(rx.functions.Func2)>
<rx.Single: rx.Observable mergeWith(rx.Single)>
<rx.subjects.SubjectSubscriptionManager$State: rx.subjects.SubjectSubscriptionManager$State add(rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void onNext(java.lang.Object)>
<com.facebook.stetho.json.ObjectMapper: java.lang.reflect.Method getJsonValueMethod(java.lang.Class)>
<com.facebook.stetho.common.LogRedirector: void i(java.lang.String,java.lang.String,java.lang.Throwable)>
<retrofit2.Platform$Java8: void <init>()>
<rx.subjects.SubjectSubscriptionManager: rx.subjects.SubjectSubscriptionManager$SubjectObserver[] next(java.lang.Object)>
<rx.internal.util.InternalObservableUtils$RetryNotificationDematerializer: rx.Observable call(rx.Observable)>
<rx.internal.operators.OperatorBufferWithSingleObservable: void <init>(rx.Observable,int)>
<rx.internal.operators.OperatorUnsubscribeOn$1: void onError(java.lang.Throwable)>
<okhttp3.internal.framed.Http2$FrameLogger: java.lang.String formatHeader(boolean,int,int,byte,byte)>
<com.facebook.stetho.inspector.protocol.module.Network$ResponseReceivedParams: void <init>()>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: void getChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<com.facebook.stetho.inspector.elements.Document$3: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.ShadowDocument$Update)>
<retrofit2.ParameterHandler$RawPart: void <clinit>()>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcResponse: void <init>()>
<com.facebook.stetho.server.http.LightHttpBody$1: void <init>(java.lang.String,byte[])>
<retrofit2.BuiltInConverters$VoidResponseBodyConverter: void <init>()>
<okhttp3.internal.framed.Spdy3$Writer: void close()>
<rx.Scheduler: rx.Scheduler$Worker createWorker()>
<com.squareup.picasso.Dispatcher: void dispatchPauseTag(java.lang.Object)>
<okhttp3.CipherSuite: java.lang.String toString()>
<rx.internal.operators.OperatorReplay$UnboundedReplayBuffer: void error(java.lang.Throwable)>
<rx.internal.operators.OperatorPublish$PublishSubscriber: void remove(rx.internal.operators.OperatorPublish$InnerProducer)>
<rx.subjects.ReplaySubject$ReplayState: void call(java.lang.Object)>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1: void <init>(rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable,rx.subscriptions.CompositeSubscription,java.util.Queue,java.util.concurrent.atomic.AtomicInteger,rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorTakeLastTimed$TakeLastTimedSubscriber: void requestMore(long)>
<com.facebook.stetho.inspector.elements.android.WindowDescriptor: void onGetChildren(android.view.Window,com.facebook.stetho.common.Accumulator)>
<rx.internal.util.OpenHashSet: void terminate()>
<rx.internal.util.UtilityFunctions$AlwaysTrue: rx.internal.util.UtilityFunctions$AlwaysTrue valueOf(java.lang.String)>
<com.facebook.stetho.inspector.elements.Document: void addRef()>
<rx.subscriptions.RefCountSubscription$State: rx.subscriptions.RefCountSubscription$State removeChild()>
<com.facebook.stetho.inspector.protocol.module.DOM$GetSearchResultsRequest: void <init>()>
<rx.Completable: rx.Completable fromCallable(java.util.concurrent.Callable)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$StringMethodInvoker: java.lang.String convertArgument(java.lang.String)>
<okhttp3.Cache: java.io.File directory()>
<rx.observables.GroupedObservable: void <init>(java.lang.Object,rx.Observable$OnSubscribe)>
<okio.Buffer: okio.Buffer writeLongLe(long)>
<retrofit2.BuiltInConverters$StreamingResponseBodyConverter: okhttp3.ResponseBody convert(okhttp3.ResponseBody)>
<com.facebook.stetho.inspector.console.CLog: void writeToConsole(com.facebook.stetho.inspector.protocol.module.Console$MessageLevel,com.facebook.stetho.inspector.protocol.module.Console$MessageSource,java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.DOM$GetSearchResultsResponse: void <init>()>
<com.squareup.picasso.Utils: void checkNotMain()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void getAttributes(java.lang.Object,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<rx.Single: rx.Single retryWhen(rx.functions.Func1)>
<com.squareup.picasso.Downloader$Response: void <init>(java.io.InputStream,boolean)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$CancellationRunnable: void <init>(com.facebook.stetho.inspector.screencast.ScreencastDispatcher,com.facebook.stetho.inspector.screencast.ScreencastDispatcher$1)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber: void onNext(java.lang.Object)>
<rx.exceptions.Exceptions: void throwOrReport(java.lang.Throwable,rx.SingleSubscriber)>
<com.facebook.stetho.inspector.protocol.module.CSS: com.facebook.stetho.inspector.protocol.module.CSS$RuleMatch getAccessibilityRuleMatch()>
<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method)>
<rx.internal.operators.OperatorElementAt$InnerProducer: void <init>(rx.Producer)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker: void <init>()>
<rx.Observable: rx.Observable concatEager(rx.Observable,rx.Observable,rx.Observable)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder clearRotation()>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: boolean containsId(int)>
<rx.internal.producers.QueuedProducer: void drain()>
<rx.observables.SyncOnSubscribe: java.lang.Object generateState()>
<rx.internal.operators.OperatorSkipWhile$2: java.lang.Object call(java.lang.Object,java.lang.Object)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: java.lang.Object[] toArray(java.lang.Object[])>
<rx.BackpressureOverflow$DropOldest: void <clinit>()>
<com.squareup.picasso.PicassoDrawable: void <init>(android.content.Context,android.graphics.Bitmap,android.graphics.drawable.Drawable,com.squareup.picasso.Picasso$LoadedFrom,boolean,boolean)>
<rx.internal.operators.OperatorMaterialize$ParentSubscriber: void <init>(rx.Subscriber)>
<rx.Completable$33$1$1: void call()>
<okhttp3.internal.framed.Hpack$Writer: void writeHeaders(java.util.List)>
<rx.exceptions.OnErrorThrowable$OnNextValue: void <init>(java.lang.Object)>
<rx.internal.util.LinkedArrayList: int capacityHint()>
<okio.BufferedSink: okio.BufferedSink writeIntLe(int)>
<okhttp3.internal.cache.CacheInterceptor$2: okio.Timeout timeout()>
<rx.internal.operators.OperatorTakeLastTimed$1: void <init>(rx.internal.operators.OperatorTakeLastTimed,rx.internal.operators.OperatorTakeLastTimed$TakeLastTimedSubscriber)>
<rx.Observable$OnSubscribeExtend: void call(java.lang.Object)>
<rx.internal.operators.BlockingOperatorToFuture$2: java.lang.Object get()>
<rx.internal.operators.EmptyObservableHolder: void <init>(java.lang.String,int)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1: void onNext(java.lang.Object)>
<rx.internal.producers.QueuedProducer: void request(long)>
<rx.functions.FuncN: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.BlockingOperatorToFuture: void <init>()>
<rx.internal.operators.OperatorAsObservable$Holder: void <init>()>
<rx.internal.util.UtilityFunctions$AlwaysFalse: void <init>(java.lang.String,int)>
<okhttp3.Response: long sentRequestAtMillis()>
<com.facebook.stetho.common.Util: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>
<okio.ByteString: okio.ByteString toAsciiLowercase()>
<okio.Buffer: java.lang.String readUtf8()>
<rx.internal.util.IndexedRingBuffer: rx.internal.util.IndexedRingBuffer getInstance()>
<retrofit2.ParameterHandler$QueryMap: void apply(retrofit2.RequestBuilder,java.util.Map)>
<rx.Completable: rx.Observable toObservable()>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void nextIteration(long)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkJellyBean: android.app.FragmentManager getChildFragmentManager(android.app.Fragment)>
<com.facebook.stetho.inspector.protocol.module.DOM: void highlightNode(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OnSubscribeRedo$3$1: void <init>(rx.internal.operators.OnSubscribeRedo$3,rx.Subscriber,rx.Subscriber)>
<rx.internal.operators.OperatorBufferWithSize$BufferExact$1: void request(long)>
<rx.internal.util.unsafe.SpscArrayQueueColdField: void <clinit>()>
<rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction$1: void <init>(rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: com.facebook.stetho.inspector.network.AsyncPrettyPrinter initAsyncPrettyPrinterForResponse(com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse,com.facebook.stetho.inspector.network.NetworkPeerManager)>
<okhttp3.Handshake: boolean equals(java.lang.Object)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: java.util.ArrayList getDrinks()>
<rx.subjects.TestSubject$4: void <init>(rx.subjects.TestSubject,java.lang.Object)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1: void <init>(rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber,java.util.List)>
<rx.internal.operators.OperatorReplay$4: void <init>(rx.Observable$OnSubscribe,rx.observables.ConnectableObservable)>
<com.facebook.stetho.inspector.network.ResourceTypeHelper: com.facebook.stetho.inspector.protocol.module.Page$ResourceType determineResourceType(java.lang.String)>
<retrofit2.adapter.rxjava.CompletableHelper$CompletableCallAdapter: java.lang.Object adapt(retrofit2.Call)>
<okhttp3.internal.http.Http1xStream$ChunkedSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.HttpUrl)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.lang.String removeSuffix(java.lang.String,java.lang.String[])>
<rx.functions.Actions: rx.functions.Func9 toFunc(rx.functions.Action9,java.lang.Object)>
<rx.internal.operators.OperatorSwitch: rx.internal.operators.OperatorSwitch instance(boolean)>
<com.facebook.stetho.inspector.protocol.module.SimpleBooleanResult: void <init>()>
<rx.internal.util.UtilityFunctions: rx.functions.Func1 alwaysTrue()>
<rx.internal.operators.OperatorOnBackpressureLatest: rx.internal.operators.OperatorOnBackpressureLatest instance()>
<rx.internal.util.ActionSubscriber: void onNext(java.lang.Object)>
<okio.RealBufferedSource: java.lang.String readString(long,java.nio.charset.Charset)>
<rx.exceptions.OnErrorThrowable$OnNextValue$Primitives: java.util.Set create()>
<okio.DeflaterSink: void <init>(okio.BufferedSink,java.util.zip.Deflater)>
<rx.internal.operators.OperatorAny$1: void onNext(java.lang.Object)>
<rx.observers.TestObserver: java.util.List getOnErrorEvents()>
<rx.observables.AsyncOnSubscribe$4: java.lang.Void call(java.lang.Void,java.lang.Long,rx.Observer)>
<com.facebook.stetho.inspector.database.ContentProviderDatabaseDriver: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse executeSQL(java.lang.String,java.lang.String,com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler)>
<okio.Buffer: int read(byte[],int,int)>
<rx.Completable: rx.Completable mergeWith(rx.Completable)>
<okio.Buffer: okio.Buffer writeTo(java.io.OutputStream)>
<rx.Observable: rx.Observable range(int,int)>
<okio.Buffer: byte[] readByteArray()>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void onError(com.facebook.stetho.websocket.SimpleSession,java.lang.Throwable)>
<rx.internal.operators.OperatorToMultimap$DefaultToMultimapFactory: java.util.Map call()>
<rx.internal.operators.BlockingOperatorToFuture: java.util.concurrent.Future toFuture(rx.Observable)>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void getChangedElements(com.facebook.stetho.common.Accumulator)>
<okhttp3.FormBody: long writeOrCountBytes(okio.BufferedSink,boolean)>
<retrofit2.ServiceMethod$Builder: retrofit2.ParameterHandler parseParameter(int,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>
<okhttp3.Cache$Entry: void <init>(okio.Source)>
<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>
<com.squareup.picasso.Cache$1: void clearKeyUri(java.lang.String)>
<okio.Buffer: long readDecimalLong()>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$EventDispatchRunnable: void run()>
<okhttp3.internal.framed.FramedStream: void receiveRstStream(okhttp3.internal.framed.ErrorCode)>
<rx.Completable$15: void onError(java.lang.Throwable)>
<rx.observers.TestSubscriber: void awaitTerminalEvent(long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void closeSafely(com.facebook.stetho.websocket.SimpleSession,int,java.lang.String)>
<rx.internal.operators.OperatorTakeLast: void <init>(int)>
<rx.internal.operators.OperatorTakeUntil: rx.Subscriber call(rx.Subscriber)>
<rx.observers.Subscribers$3: void <init>(rx.functions.Action1,rx.functions.Action1)>
<com.facebook.stetho.dumpapp.Framer$FramingInputStream: int read(byte[])>
<com.facebook.stetho.common.ReflectionUtil: java.lang.reflect.Field tryGetDeclaredField(java.lang.Class,java.lang.String)>
<okhttp3.Call: okhttp3.Request request()>
<rx.internal.operators.OperatorOnBackpressureLatest$Holder: void <init>()>
<com.facebook.stetho.inspector.elements.NodeType: int getProtocolValue()>
<okio.Okio: okio.Sink sink(java.nio.file.Path,java.nio.file.OpenOption[])>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: void <init>(rx.Subscriber)>
<okhttp3.internal.framed.FramedConnection$Builder: void <init>(boolean)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: boolean isEmpty()>
<com.facebook.stetho.inspector.protocol.module.Runtime$EvaluateRequest: void <init>()>
<com.squareup.picasso.ContactsPhotoRequestHandler: void <init>(android.content.Context)>
<retrofit2.Platform$Java8: java.lang.Object invokeDefaultMethod(java.lang.reflect.Method,java.lang.Class,java.lang.Object,java.lang.Object[])>
<rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber: void requestMore(long)>
<okhttp3.internal.framed.Http2$Writer: void settings(okhttp3.internal.framed.Settings)>
<rx.internal.operators.OnSubscribeAmb$1: void call()>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: void clear()>
<rx.internal.operators.OperatorZip$Zip$InnerSubscriber: void onCompleted()>
<rx.Completable$4$1: void <init>(rx.Completable$4,java.util.concurrent.atomic.AtomicBoolean,rx.subscriptions.CompositeSubscription,rx.Completable$CompletableSubscriber)>
<com.facebook.stetho.common.LogUtil: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<retrofit2.BuiltInConverters$StringConverter: void <init>()>
<rx.internal.operators.OnSubscribeRedo: rx.Observable retry(rx.Observable,rx.functions.Func1,rx.Scheduler)>
<okio.SegmentedByteString: java.lang.String base64()>
<rx.internal.util.SubscriptionList: void remove(rx.Subscription)>
<rx.Completable$19: void onCompleted()>
<rx.internal.operators.OnSubscribeRedo$2$1: void onError(java.lang.Throwable)>
<rx.subjects.UnicastSubject: boolean hasObservers()>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber: rx.internal.operators.OperatorWindowWithStartEndObservable$SerializedSubject createSerializedSubject()>
<rx.Completable$10$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.android.FragmentCompat: void <init>()>
<rx.functions.Actions$EmptyAction: void call()>
<rx.internal.operators.OnSubscribeRedo$RedoFinite: java.lang.Object call(java.lang.Object)>
<okio.Buffer: okio.BufferedSink writeDecimalLong(long)>
<rx.internal.operators.OperatorTimeoutWithSelector$1: void <init>(rx.functions.Func0)>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void onClose(com.facebook.stetho.websocket.SimpleSession,int,java.lang.String)>
<rx.observables.SyncOnSubscribe$1: java.lang.Object call(java.lang.Object,rx.Observer)>
<rx.Single: rx.Single delay(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierNoParams: void <init>(rx.Observable,rx.internal.util.InternalObservableUtils$1)>
<com.facebook.stetho.inspector.network.GunzippingOutputStream: com.facebook.stetho.inspector.network.GunzippingOutputStream create(java.io.OutputStream)>
<com.squareup.picasso.MediaStoreRequestHandler: int getExifOrientation(android.content.ContentResolver,android.net.Uri)>
<rx.internal.operators.OperatorToObservableSortedList: java.lang.Object call(java.lang.Object)>
<rx.android.schedulers.HandlerScheduler: rx.android.schedulers.HandlerScheduler 'from'(android.os.Handler)>
<com.facebook.stetho.Stetho$Initializer: java.lang.Iterable getInspectorModules()>
<rx.Observable: rx.Observable toList()>
<rx.internal.operators.OnSubscribeGroupJoin: void <init>(rx.Observable,rx.Observable,rx.functions.Func1,rx.functions.Func1,rx.functions.Func2)>
<rx.internal.operators.OperatorMaterialize: java.lang.Object call(java.lang.Object)>
<rx.subjects.UnicastSubject: rx.subjects.UnicastSubject create(int)>
<rx.internal.util.InternalObservableUtils$PlusOneFunc2: java.lang.Integer call(java.lang.Integer,java.lang.Object)>
<okhttp3.internal.cache.CacheRequest: void abort()>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void onSaveInstanceState(android.os.Bundle)>
<okio.ByteString: okio.ByteString substring(int)>
<rx.Observable: rx.Observable lastOrDefault(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewGroupDescriptor: void onGetChildren(android.view.ViewGroup,com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void drain(java.util.List)>
<rx.Completable: rx.Completable error(java.lang.Throwable)>
<rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef: rx.internal.util.atomic.LinkedQueueNode lpProducerNode()>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor$ElementContext: void <init>(com.facebook.stetho.inspector.elements.android.TextViewDescriptor,com.facebook.stetho.inspector.elements.android.TextViewDescriptor$1)>
<rx.Single$25: void <init>(java.util.concurrent.Callable)>
<rx.internal.operators.OperatorGroupBy: rx.Subscriber call(rx.Subscriber)>
<rx.subscriptions.MultipleAssignmentSubscription$State: rx.subscriptions.MultipleAssignmentSubscription$State unsubscribe()>
<okhttp3.internal.framed.Huffman: void buildTree()>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectionPool(okhttp3.ConnectionPool)>
<rx.subjects.AsyncSubject: boolean hasCompleted()>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer: void invokeDisconnectReceivers()>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: boolean isElementChanged(java.lang.Object)>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterRegistry: void register(java.lang.String,com.facebook.stetho.inspector.network.AsyncPrettyPrinterFactory)>
<okhttp3.internal.framed.Spdy3$Writer: void pushPromise(int,int,java.util.List)>
<okio.RealBufferedSource: byte readByte()>
<rx.internal.operators.OperatorToMultimap$1: void onNext(java.lang.Object)>
<rx.schedulers.Schedulers: void reset()>
<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentView getDocumentView()>
<com.squareup.picasso.UrlConnectionDownloader$ResponseCacheIcs: void <init>()>
<rx.internal.operators.OnSubscribePublishMulticast: boolean checkTerminated(boolean,boolean)>
<okio.Buffer: java.io.InputStream inputStream()>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber: java.util.Queue getOrCreateErrors()>
<rx.internal.util.SynchronizedQueue: java.lang.String toString()>
<com.facebook.stetho.common.android.FragmentCompatUtil: java.lang.Object findFragmentForView(android.view.View)>
<rx.internal.util.SynchronizedQueue: boolean containsAll(java.util.Collection)>
<com.facebook.stetho.inspector.elements.android.ActivityDescriptor: java.lang.String onGetNodeName(java.lang.Object)>
<okhttp3.RequestBody$2: void writeTo(okio.BufferedSink)>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: void onNext(java.lang.Object)>
<com.squareup.picasso.Picasso: java.util.List getRequestHandlers()>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void emitScalar(java.lang.Object,long)>
<com.facebook.stetho.common.android.FragmentCompat: com.facebook.stetho.common.android.FragmentAccessor forFragment()>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.protocol.module.Runtime$GetPropertiesResponse getProperties(org.json.JSONObject)>
<rx.Completable$33$1$1: void <init>(rx.Completable$33$1,rx.Subscription)>
<rx.internal.operators.SingleOperatorOnErrorResumeNext$1: rx.Single call(java.lang.Throwable)>
<rx.subscriptions.SerialSubscription$State: rx.subscriptions.SerialSubscription$State set(rx.Subscription)>
<rx.schedulers.TimeInterval: long getIntervalInMilliseconds()>
<com.facebook.stetho.inspector.elements.NodeDescriptor: void getStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<rx.Observable: void forEach(rx.functions.Action1)>
<com.facebook.stetho.inspector.protocol.module.CSS$2$1: void store(java.lang.String,java.lang.String,boolean)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void setAttributesAsText(java.lang.Object,java.lang.String)>
<rx.observables.BlockingObservable: java.util.concurrent.Future toFuture()>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber: void <init>(rx.functions.Func1,int,int,rx.Subscriber)>
<okio.Okio: okio.Source source(java.io.InputStream)>
<okhttp3.internal.platform.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>
<rx.observables.BlockingObservable$4: void <init>(rx.observables.BlockingObservable,java.lang.Throwable[],java.util.concurrent.CountDownLatch)>
<okhttp3.internal.Util: boolean skipAll(okio.Source,int,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: boolean assertCapacity()>
<okio.HashingSink: okio.HashingSink sha256(okio.Sink)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse: java.lang.String reasonPhrase()>
<rx.internal.schedulers.CachedThreadScheduler$ThreadWorker: void setExpirationTime(long)>
<retrofit2.adapter.rxjava.Result: retrofit2.adapter.rxjava.Result response(retrofit2.Response)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber: void <init>(rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter)>
<okhttp3.internal.framed.Hpack$Reader: int readInt(int,int)>
<okhttp3.OkHttpClient: boolean followSslRedirects()>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer: void <init>(rx.internal.operators.OperatorWindowWithSize$WindowOverlap)>
<com.facebook.stetho.inspector.helper.PeersRegisteredListener: void <init>()>
<rx.functions.Func7: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.OnSubscribeRedo$4: void call()>
<rx.internal.operators.OnSubscribeRefCount: void doSubscribe(rx.Subscriber,rx.subscriptions.CompositeSubscription)>
<com.facebook.stetho.inspector.protocol.module.Page: void screencastFrameAck(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void onError(java.lang.Throwable)>
<okhttp3.internal.framed.Huffman: okhttp3.internal.framed.Huffman get()>
<rx.internal.util.unsafe.SpscArrayQueueProducerFields: void <clinit>()>
<com.facebook.stetho.common.android.HandlerUtil$WaitableRunnable: void join()>
<rx.internal.operators.OnSubscribeSingle$1: void onNext(java.lang.Object)>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object[])>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func8)>
<com.facebook.stetho.common.ListUtil: java.util.List copyToImmutableList(java.util.List)>
<rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorSkipLast: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.network.MimeMatcher: void <init>()>
<rx.Observable: rx.Observable ambWith(rx.Observable)>
<retrofit2.ParameterHandler$2: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty: android.view.ViewDebug$ExportedProperty getAnnotation()>
<rx.Completable$24$1: void onError(java.lang.Throwable)>
<okhttp3.internal.framed.FrameWriter: void synReply(boolean,int,java.util.List)>
<com.facebook.stetho.okhttp3.StethoInterceptor$ForwardingResponseBody: void <init>(okhttp3.ResponseBody,java.io.InputStream)>
<okhttp3.MultipartBody: okhttp3.MediaType contentType()>
<okhttp3.Cache: okhttp3.internal.cache.CacheRequest put(okhttp3.Response)>
<rx.internal.operators.OperatorScan$2: void onCompleted()>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber: void requestInner(long)>
<rx.internal.operators.CachedObservable$CacheState: void onCompleted()>
<okhttp3.internal.platform.Platform: java.util.List alpnProtocolNames(java.util.List)>
<rx.internal.operators.OperatorRetryWithPredicate: void <init>(rx.functions.Func2)>
<rx.internal.operators.OperatorTimeout$1: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.Observable: rx.Observable window(int)>
<okhttp3.TlsVersion: okhttp3.TlsVersion valueOf(java.lang.String)>
<rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl: void <init>(rx.functions.Func2,rx.functions.Action1)>
<rx.internal.operators.OperatorWindowWithStartEndObservable: void <init>(rx.Observable,rx.functions.Func1)>
<rx.Observable: rx.observables.ConnectableObservable replay(rx.Scheduler)>
<rx.internal.operators.OnSubscribeRedo$4$1: void onNext(java.lang.Object)>
<com.facebook.stetho.websocket.WebSocketSession: void markSentClose()>
<fr.masciulli.drinks.ui.view.RatioImageView: float getRatio()>
<rx.internal.operators.OperatorTimeoutBase: void <init>(rx.internal.operators.OperatorTimeoutBase$FirstTimeoutStub,rx.internal.operators.OperatorTimeoutBase$TimeoutStub,rx.Observable,rx.Scheduler)>
<rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorSkipTimed: rx.Subscriber call(rx.Subscriber)>
<okhttp3.internal.platform.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void init()>
<rx.Completable$22$1: void onCompleted()>
<okio.AsyncTimeout$2: java.lang.String toString()>
<com.squareup.picasso.Request$Builder: void <init>(com.squareup.picasso.Request,com.squareup.picasso.Request$1)>
<com.facebook.stetho.common.android.FragmentCompatFramework: java.lang.Class getDialogFragmentClass()>
<com.squareup.picasso.Picasso$Listener: void onImageLoadFailed(com.squareup.picasso.Picasso,android.net.Uri,java.lang.Exception)>
<rx.internal.operators.OperatorFilter: void <init>(rx.functions.Func1)>
<rx.subscriptions.BooleanSubscription$1: void call()>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentActivityAccessorFramework: void <init>()>
<okio.BufferedSource: byte readByte()>
<rx.subjects.UnicastSubject$State: void onCompleted()>
<rx.internal.util.InternalObservableUtils$EqualsWithFunc1: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.common.Utf8Charset: void <init>()>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: java.lang.Integer getIdForObject(java.lang.Object)>
<fr.masciulli.drinks.ui.activity.MainActivity: void openAbout()>
<okhttp3.internal.framed.FramedConnection: okhttp3.Protocol getProtocol()>
<com.facebook.stetho.inspector.elements.Document$ProviderListener: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.Document$1)>
<rx.observers.TestSubscriber: void assertNoValues()>
<com.squareup.picasso.PicassoDrawable: void <clinit>()>
<rx.internal.operators.OperatorTakeUntil$1: void onError(java.lang.Throwable)>
<rx.functions.Functions$11: void <init>(rx.functions.Action0)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$Request: void <init>(java.net.URL)>
<rx.internal.operators.SingleOnSubscribeUsing$1: void onSuccess(java.lang.Object)>
<okio.AsyncTimeout$1: java.lang.String toString()>
<rx.android.plugins.RxAndroidPlugins: void registerSchedulersHook(rx.android.plugins.RxAndroidSchedulersHook)>
<rx.Observable: rx.Observable ofType(java.lang.Class)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$NoOpViewHighlightOverlays: void highlightView(android.view.View,int)>
<rx.Observable: rx.Observable 'from'(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>
<rx.subscriptions.BooleanSubscription$1: void <init>()>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: boolean handleRequest(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpResponse)>
<rx.subjects.ReplaySubject$ReplayState: void remove(rx.subjects.ReplaySubject$ReplayProducer)>
<okhttp3.internal.framed.FramedStream$FramedDataSink: void <clinit>()>
<rx.internal.operators.OnSubscribeRefCount$1: void call(java.lang.Object)>
<rx.internal.operators.OperatorScan$3: void onCompleted()>
<rx.observers.Observers$3: void onNext(java.lang.Object)>
<retrofit2.Platform$IOS$MainThreadExecutor: void execute(java.lang.Runnable)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorRequest: java.lang.String friendlyName()>
<rx.internal.util.ScalarSynchronousObservable: rx.internal.util.ScalarSynchronousObservable create(java.lang.Object)>
<rx.functions.Functions$5: void <init>(rx.functions.Func4)>
<com.squareup.picasso.Dispatcher: void dispatchAirplaneModeChange(boolean)>
<rx.internal.util.OpenHashSet: void <init>(int,float)>
<com.squareup.picasso.Action: void error()>
<rx.internal.operators.OperatorTakeTimed$TakeSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorDoAfterTerminate: rx.Subscriber call(rx.Subscriber)>
<rx.SingleSubscriber: void onSuccess(java.lang.Object)>
<rx.internal.util.unsafe.SpscArrayQueueConsumerField: void <clinit>()>
<rx.internal.operators.OperatorBufferWithSingleObservable: rx.Subscriber call(rx.Subscriber)>
<okhttp3.internal.framed.FramedConnection$3: void execute()>
<rx.Completable: rx.Completable andThen(rx.Completable)>
<rx.internal.operators.CompletableOnSubscribeConcatIterable: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler: rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<rx.subscriptions.CompositeSubscription: void <init>(rx.Subscription[])>
<rx.observables.BlockingObservable$6: void <init>(rx.observables.BlockingObservable,java.util.concurrent.BlockingQueue,rx.internal.operators.NotificationLite,rx.Producer[])>
<rx.internal.operators.OperatorPublish$PublishSubscriber$1: void call()>
<com.facebook.stetho.json.ObjectMapper: java.lang.Object _convertFromJSONObject(org.json.JSONObject,java.lang.Class)>
<com.facebook.stetho.okhttp3.StethoInterceptor: void <init>()>
<rx.subjects.AsyncSubject$1: void call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<okhttp3.internal.framed.Settings: int getCurrentCwnd(int)>
<rx.Single$21: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.database.DefaultDatabaseConnectionProvider: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProviderFactory: com.facebook.stetho.inspector.elements.DocumentProvider create()>
<rx.internal.operators.OperatorGroupBy$GroupedUnicast: void <init>(java.lang.Object,rx.internal.operators.OperatorGroupBy$State)>
<rx.exceptions.CompositeException$PrintStreamOrWriter: void <init>()>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void removeSome(int)>
<okhttp3.internal.cache.DiskLruCache: void readJournalLine(java.lang.String)>
<rx.internal.operators.OperatorSequenceEqual$2: void <init>(rx.functions.Func2)>
<rx.internal.util.unsafe.SpmcArrayQueue: boolean isEmpty()>
<rx.observables.AsyncOnSubscribe: rx.observables.AsyncOnSubscribe createStateful(rx.functions.Func0,rx.functions.Func3,rx.functions.Action1)>
<rx.internal.producers.SingleProducer: void request(long)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void unhook(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: java.lang.Object getChildFragmentManager(java.lang.Object)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: boolean containsAll(java.util.Collection)>
<rx.internal.operators.CompletableOnSubscribeTimeout$1$1: void onCompleted()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void dataSent(java.lang.String,int,int)>
<com.facebook.stetho.inspector.protocol.module.Database: void <init>()>
<okhttp3.internal.framed.Settings: boolean isSet(int)>
<rx.internal.operators.OperatorGroupBy$State: boolean checkTerminated(boolean,boolean,rx.Subscriber,boolean)>
<okhttp3.internal.cache.CacheInterceptor$2: long read(okio.Buffer,long)>
<retrofit2.ParameterHandler$HeaderMap: void apply(retrofit2.RequestBuilder,java.util.Map)>
<rx.Observable: rx.Observable buffer(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorBufferWithSize$BufferOverlap: void <init>(rx.Subscriber,int,int)>
<rx.internal.operators.OperatorDoAfterTerminate$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorSampleWithTime: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void tryEmit(java.lang.Object)>
<com.facebook.stetho.common.ExceptionUtil: void <init>()>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.protocol.module.Runtime$GetPropertiesResponse getPropertiesForIterable(java.lang.Iterable,boolean)>
<okio.ByteString: java.lang.String toString()>
<rx.Observable: rx.Observable toMultimap(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0)>
<rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe: void call(java.lang.Object)>
<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okio.BufferedSource source()>
<rx.Completable: rx.Completable merge0(rx.Observable,int,boolean)>
<rx.Observable: rx.Observable amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<fr.masciulli.drinks.ui.view.RatioImageView: int getPriority()>
<okhttp3.internal.framed.Spdy3$Writer: void <init>(okio.BufferedSink,boolean)>
<rx.internal.operators.OperatorToMultimap: void <init>(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0)>
<rx.internal.operators.NeverObservableHolder: rx.internal.operators.NeverObservableHolder[] values()>
<rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber: void <init>(rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber,int)>
<okio.ByteString: int compareTo(okio.ByteString)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void getAttributes(java.lang.Object,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<okhttp3.internal.platform.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>
<com.facebook.stetho.inspector.elements.DocumentProvider: void highlightElement(java.lang.Object,int)>
<rx.internal.operators.OperatorToObservableList$1: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor$ElementContext: void <init>(com.facebook.stetho.inspector.elements.android.ApplicationDescriptor)>
<fr.masciulli.drinks.ui.view.RatioImageView: void setPriority(int)>
<okio.BufferedSource: okio.Buffer buffer()>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: java.lang.Object element()>
<okio.Buffer$1: void write(byte[],int,int)>
<rx.internal.operators.OnSubscribeRedo: rx.Observable retry(rx.Observable)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator rotate(float,float,float)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: void unregisterListener(com.facebook.stetho.inspector.elements.android.ActivityTracker$Listener)>
<com.facebook.stetho.inspector.helper.ChromePeerManager: void removePeer(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<com.squareup.picasso.Dispatcher$DispatcherHandler$1: void run()>
<okhttp3.Call: void enqueue(okhttp3.Callback)>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap: boolean checkTerminated(boolean,boolean,rx.Subscriber,java.util.Queue)>
<rx.Single$22: void <init>(rx.Single,rx.Single)>
<rx.functions.Actions: void <init>()>
<rx.Single$21$1: void onNext(java.lang.Object)>
<okhttp3.internal.framed.Http2$Writer: void applyAndAckSettings(okhttp3.internal.framed.Settings)>
<okio.Buffer: void readFrom(java.io.InputStream,long,boolean)>
<okio.BufferedSource: long readAll(okio.Sink)>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: void handleIOExceptionWritingToStream(java.io.IOException)>
<rx.observers.SafeCompletableSubscriber: boolean isUnsubscribed()>
<com.facebook.stetho.inspector.elements.Document: void setAttributesAsText(java.lang.Object,java.lang.String)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory: void <init>()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.lang.Object poll()>
<rx.internal.operators.SingleOnSubscribeUsing$1: void onError(java.lang.Throwable)>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: rx.Observer getActual()>
<com.facebook.stetho.inspector.elements.Document$ProviderListener: void onPossiblyChanged()>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: boolean isEmpty()>
<rx.internal.operators.NotificationLite$OnErrorSentinel: java.lang.String toString()>
<rx.internal.operators.OperatorReplay$InnerProducer: java.lang.Object index()>
<com.squareup.picasso.BitmapHunter: void detach(com.squareup.picasso.Action)>
<okhttp3.Cookie$Builder: okhttp3.Cookie$Builder name(java.lang.String)>
<retrofit2.http.Path: java.lang.String value()>
<rx.Observable: rx.Observable combineLatest(java.lang.Iterable,rx.functions.FuncN)>
<rx.internal.util.InternalObservableUtils$ErrorNotImplementedAction: void <init>()>
<com.facebook.stetho.common.android.HandlerUtil$1: void <init>(com.facebook.stetho.common.UncheckedCallable)>
<okhttp3.internal.framed.Hpack$Writer: void writeInt(int,int,int)>
<rx.internal.operators.OnSubscribeConcatMap: void <init>(rx.Observable,rx.functions.Func1,int,int)>
<rx.Completable$16: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber: void emitChunk(java.util.List)>
<rx.internal.operators.BufferUntilSubscriber: boolean hasObservers()>
<rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer: void truncate()>
<okio.HashingSource: okio.ByteString hash()>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: void complete()>
<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>
<okio.ForwardingSource: long read(okio.Buffer,long)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginTopHighlightDrawable: void draw(android.graphics.Canvas)>
<rx.Observable: rx.Observable zipWith(rx.Observable,rx.functions.Func2)>
<com.squareup.picasso.Picasso: com.squareup.picasso.RequestCreator load(int)>
<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String getFirstHeaderValue(com.facebook.stetho.server.http.LightHttpMessage,java.lang.String)>
<rx.internal.operators.OnSubscribeRefCount: void <init>(rx.observables.ConnectableObservable)>
<com.squareup.picasso.OkHttpDownloader: com.squareup.picasso.Downloader$Response load(android.net.Uri,int)>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void <init>(android.content.Context)>
<com.facebook.stetho.websocket.ReadHandler: void readLoop(com.facebook.stetho.websocket.ReadCallback)>
<com.squareup.picasso.Action: java.lang.Object getTarget()>
<okhttp3.HttpUrl: okhttp3.HttpUrl getChecked(java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.Page$ResourceType: com.facebook.stetho.inspector.protocol.module.Page$ResourceType valueOf(java.lang.String)>
<okhttp3.OkHttpClient$Builder: java.util.List networkInterceptors()>
<rx.internal.operators.OperatorTimeInterval: void <init>(rx.Scheduler)>
<fr.masciulli.drinks.ui.activity.DrinkActivity$$Lambda$1: void <init>(fr.masciulli.drinks.ui.activity.DrinkActivity)>
<okhttp3.internal.framed.FrameReader$Handler: void headers(boolean,boolean,int,int,java.util.List,okhttp3.internal.framed.HeadersMode)>
<rx.internal.util.unsafe.MpmcArrayQueue: boolean isEmpty()>
<rx.Completable$3$1: void onCompleted()>
<com.squareup.picasso.Dispatcher: void <init>(android.content.Context,java.util.concurrent.ExecutorService,android.os.Handler,com.squareup.picasso.Downloader,com.squareup.picasso.Cache,com.squareup.picasso.Stats)>
<rx.Completable: rx.Completable unsubscribeOn(rx.Scheduler)>
<rx.subjects.BehaviorSubject: rx.subjects.BehaviorSubject create(java.lang.Object)>
<okhttp3.internal.framed.FrameWriter: void windowUpdate(int,long)>
<com.facebook.stetho.inspector.protocol.module.DOM$ResolveNodeResponse: void <init>()>
<com.squareup.picasso.PicassoDrawable: void setColorFilter(android.graphics.ColorFilter)>
<rx.internal.util.InternalObservableUtils$ObjectEqualsFunc2: java.lang.Boolean call(java.lang.Object,java.lang.Object)>
<com.squareup.picasso.Dispatcher$NetworkBroadcastReceiver: void register()>
<com.squareup.picasso.RequestCreator: void into(android.widget.RemoteViews,int,int,android.app.Notification)>
<okhttp3.internal.framed.Http2$Reader: void readConnectionPreface()>
<okio.RealBufferedSource: int read(byte[],int,int)>
<okio.Buffer: okio.Buffer copyTo(java.io.OutputStream,long,long)>
<com.squareup.picasso.ContentStreamRequestHandler: java.io.InputStream getInputStream(com.squareup.picasso.Request)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentActivityAccessorSupportLib forFragmentActivity()>
<rx.internal.operators.OperatorToObservableList$1: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: void <init>()>
<rx.observables.BlockingObservable: java.lang.Iterable next()>
<okhttp3.internal.Util: java.lang.String[] concat(java.lang.String[],java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.Database: void add(com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver)>
<com.squareup.picasso.Dispatcher: void performResumeTag(java.lang.Object)>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder: void <init>()>
<okhttp3.internal.cache.DiskLruCache$Snapshot: void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String,long,okio.Source[],long[])>
<com.squareup.picasso.Dispatcher: void performError(com.squareup.picasso.BitmapHunter,boolean)>
<com.squareup.picasso.MarkableInputStream: void mark(int)>
<rx.internal.util.atomic.SpscLinkedAtomicQueue: java.lang.Object peek()>
<rx.internal.operators.OperatorDistinctUntilChanged$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorTakeLast$TakeLastSubscriber: void onCompleted()>
<rx.observables.BlockingObservable$7: void <init>(rx.observables.BlockingObservable,java.util.concurrent.BlockingQueue)>
<retrofit2.Utils$GenericArrayTypeImpl: int hashCode()>
<rx.Observable: rx.Observable zipWith(java.lang.Iterable,rx.functions.Func2)>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode: int getProtocolValue()>
<com.facebook.stetho.common.android.HandlerUtil$WaitableRunnable: void <init>()>
<rx.internal.operators.OnSubscribeUsing: void call(rx.Subscriber)>
<rx.subjects.PublishSubject$1: void call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<rx.Completable$31: void call(rx.SingleSubscriber)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse executeSQL(java.lang.String,java.lang.String,com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler)>
<rx.Completable$33: void <init>(rx.Completable,rx.Scheduler)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void queueScalar(java.lang.Object)>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: void index(java.lang.Object)>
<rx.subjects.TestSubject$2: void <init>(rx.subjects.TestSubject)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: java.lang.String headerName(int)>
<rx.Single: rx.Observable concat(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<rx.internal.operators.OperatorDematerialize: java.lang.Object call(java.lang.Object)>
<com.squareup.picasso.MarkableInputStream: int read(byte[])>
<rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool: rx.internal.schedulers.EventLoopsScheduler$PoolWorker getEventLoop()>
<com.facebook.stetho.inspector.helper.ThreadBoundProxy: void postAndWait(java.lang.Runnable)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean remove(java.lang.Object)>
<rx.internal.operators.CompletableOnSubscribeTimeout: void <init>(rx.Completable,long,java.util.concurrent.TimeUnit,rx.Scheduler,rx.Completable)>
<rx.BackpressureOverflow: void <clinit>()>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: void printRecursive(java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<retrofit2.RequestBuilder: void addFormField(java.lang.String,java.lang.String,boolean)>
<okio.RealBufferedSource$1: java.lang.String toString()>
<com.facebook.stetho.inspector.elements.android.ActivityDescriptor: java.lang.String onGetNodeName(android.app.Activity)>
<okhttp3.MultipartBody: java.util.List parts()>
<com.facebook.stetho.dumpapp.DumpappSocketLikeHandler: void <clinit>()>
<rx.plugins.RxJavaSingleExecutionHook: rx.Observable$OnSubscribe onSubscribeStart(rx.Single,rx.Observable$OnSubscribe)>
<rx.subjects.ReplaySubject$ReplayState: boolean add(rx.subjects.ReplaySubject$ReplayProducer)>
<com.facebook.stetho.inspector.elements.StyleAccumulator: void store(java.lang.String,java.lang.String,boolean)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1: void onFailure(retrofit2.Call,java.lang.Throwable)>
<retrofit2.ParameterHandler$Field: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<com.facebook.stetho.server.http.LightHttpMessage: void <init>()>
<retrofit2.Call: retrofit2.Call clone()>
<com.facebook.stetho.common.ThreadBound: boolean checkThreadAccess()>
<okhttp3.Request$Builder: okhttp3.Request$Builder patch(okhttp3.RequestBody)>
<okhttp3.internal.framed.PushObserver$1: void onReset(int,okhttp3.internal.framed.ErrorCode)>
<com.squareup.picasso.BitmapHunter: boolean cancel()>
<rx.internal.operators.OperatorSkipTimed$2: void onCompleted()>
<rx.internal.util.LinkedArrayList: void <init>(int)>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager: void signalItemAdded(com.facebook.stetho.inspector.protocol.module.DOMStorage$StorageId,java.lang.String,java.lang.String)>
<com.squareup.picasso.Picasso: void <clinit>()>
<rx.internal.operators.OnSubscribeAmb$2: void <init>(rx.internal.operators.OnSubscribeAmb,java.util.concurrent.atomic.AtomicReference,rx.internal.operators.OnSubscribeAmb$Selection)>
<com.squareup.picasso.RemoteViewsAction$NotificationAction: java.lang.Object getTarget()>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: void spElement(java.lang.Object[],long,java.lang.Object)>
<okhttp3.internal.Internal: okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation)>
<okio.Buffer: boolean equals(java.lang.Object)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: rx.internal.operators.OperatorReplay$InnerProducer[] copyProducers()>
<okhttp3.Handshake: java.util.List localCertificates()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProviderFactory: void postDelayed(java.lang.Runnable,long)>
<okio.ByteString: int lastIndexOf(byte[],int)>
<rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector: void call(rx.Subscriber)>
<okio.Buffer: long indexOf(okio.ByteString)>
<retrofit2.adapter.rxjava.SingleHelper$1: java.lang.reflect.Type responseType()>
<com.facebook.stetho.inspector.elements.Document$DocumentObjectIdMapper: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.Document$1)>
<com.squareup.picasso.MediaStoreRequestHandler: void <clinit>()>
<okhttp3.internal.cache.DiskLruCache$Editor: void <init>(okhttp3.internal.cache.DiskLruCache,okhttp3.internal.cache.DiskLruCache$Entry,okhttp3.internal.cache.DiskLruCache$1)>
<rx.internal.operators.OperatorSkipLast: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber: void <init>(rx.Subscriber,rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber)>
<rx.Single: rx.Single retry(rx.functions.Func2)>
<rx.Single: rx.Single zip(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.functions.Func8)>
<rx.observers.Observers: void <clinit>()>
<com.squareup.picasso.Utils: int calculateMemoryCacheSize(android.content.Context)>
<rx.internal.operators.BlockingOperatorNext: void <init>()>
<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$BooleanMethodInvoker: java.lang.Object convertArgument(java.lang.String)>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: int size()>
<rx.internal.operators.OnSubscribeDetach$TerminatedProducer: void <init>(java.lang.String,int)>
<rx.Completable$31$1: void onSubscribe(rx.Subscription)>
<rx.internal.util.atomic.SpscLinkedAtomicQueue: java.lang.Object poll()>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$1: void <init>(fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter,int)>
<okhttp3.Cache: long maxSize()>
<rx.internal.operators.OperatorSkip$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.server.CompositeInputStream: int read(byte[])>
<rx.internal.schedulers.ScheduledAction$Remover2: boolean isUnsubscribed()>
<retrofit2.ParameterHandler: retrofit2.ParameterHandler array()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: long lpConsumerIndex()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.lang.Object element()>
<rx.observers.Subscribers$5: void onCompleted()>
<rx.internal.operators.OperatorDoOnRequest$ParentSubscriber: void onCompleted()>
<rx.internal.util.OpenHashSet: void rehash()>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: android.view.View getView(java.lang.Object)>
<rx.Observable: rx.Observable debounce(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler: void unsubscribe()>
<okio.BufferedSource: boolean request(long)>
<rx.internal.operators.OperatorBufferWithSize$BufferSkip: rx.Producer createProducer()>
<rx.schedulers.TestScheduler$InnerTestScheduler: void <init>(rx.schedulers.TestScheduler)>
<retrofit2.ParameterHandler$Body: void <init>(retrofit2.Converter)>
<rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber: void next()>
<okio.Buffer: okio.BufferedSink writeUtf8(java.lang.String,int,int)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void <init>(rx.Subscriber)>
<com.facebook.stetho.dumpapp.ArgsHelper: void <init>()>
<retrofit2.Utils: java.lang.String typeToString(java.lang.reflect.Type)>
<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>
<retrofit2.BuiltInConverters$RequestBodyConverter: void <clinit>()>
<fr.masciulli.drinks.ui.activity.DrinkActivity: boolean onCreateOptionsMenu(android.view.Menu)>
<okhttp3.Cache$Entry: void <init>(okhttp3.Response)>
<com.squareup.picasso.Dispatcher: void performNetworkStateChange(android.net.NetworkInfo)>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: void onMapped(java.lang.Object,int)>
<rx.internal.operators.OnSubscribeUsing: void call(java.lang.Object)>
<okhttp3.internal.cache.DiskLruCache: java.io.File getDirectory()>
<rx.Completable$CompletableSubscriber: void onCompleted()>
<fr.masciulli.drinks.ui.EnterPostponeTransitionCallback: void onError()>
<rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber: void onCompleted()>
<rx.observables.BlockingObservable$6: void setProducer(rx.Producer)>
<com.facebook.stetho.inspector.elements.ShadowDocument: com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder beginUpdate()>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: boolean offer(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$PaddingLeftHighlightDrawable: void <init>()>
<rx.internal.operators.OperatorCast: rx.Subscriber call(rx.Subscriber)>
<com.squareup.picasso.Dispatcher: void dispatchRetry(com.squareup.picasso.BitmapHunter)>
<rx.functions.Actions$3: java.lang.Object call(java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorScan$InitialProducer: void emitLoop()>
<rx.subscriptions.BooleanSubscription: void <init>()>
<rx.Observable: rx.Observable just(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorTimeoutWithSelector: void <init>(rx.functions.Func0,rx.functions.Func1,rx.Observable)>
<rx.internal.util.InternalObservableUtils$CollectorCaller: java.lang.Object call(java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber: void onError(java.lang.Throwable)>
<rx.subjects.ReplaySubject$ReplayBuffer: java.lang.Object last()>
<com.squareup.picasso.Picasso$Builder: void <init>(android.content.Context)>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager$DevToolsSharedPreferencesListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>
<rx.observers.TestSubscriber$1: void <init>()>
<com.facebook.stetho.common.Utf8Charset: void <clinit>()>
<rx.Notification$Kind: rx.Notification$Kind valueOf(java.lang.String)>
<okio.RealBufferedSink$1: void close()>
<retrofit2.ParameterHandler$Field: void <init>(java.lang.String,retrofit2.Converter,boolean)>
<rx.Notification: rx.Notification createOnNext(java.lang.Object)>
<rx.Notification: boolean isOnCompleted()>
<rx.observables.BlockingObservable: java.lang.Object lastOrDefault(java.lang.Object,rx.functions.Func1)>
<rx.schedulers.TestScheduler: rx.Scheduler$Worker createWorker()>
<rx.internal.producers.ProducerObserverArbiter: void request(long)>
<okhttp3.HttpUrl$Builder: boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int)>
<okio.Buffer: okio.BufferedSink writeString(java.lang.String,java.nio.charset.Charset)>
<okio.GzipSource: okio.Timeout timeout()>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: void accept(java.lang.Object,rx.internal.operators.NotificationLite)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: com.facebook.stetho.inspector.network.AsyncPrettyPrinter createPrettyPrinterForResponse(com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse,com.facebook.stetho.inspector.network.AsyncPrettyPrinterRegistry)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void emitLoop()>
<okhttp3.internal.framed.Http2$Reader: void readPushPromise(okhttp3.internal.framed.FrameReader$Handler,int,byte,int)>
<rx.Observable: rx.Observable takeLast(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.squareup.picasso.AssetRequestHandler: void <init>(android.content.Context)>
<rx.internal.operators.CompletableOnSubscribeConcatArray: void <init>(rx.Completable[])>
<rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber: void onCompleted()>
<com.squareup.picasso.Utils: com.squareup.picasso.Downloader createDefaultDownloader(android.content.Context)>
<okhttp3.Dispatcher: void <init>(java.util.concurrent.ExecutorService)>
<rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef: void spConsumerNode(rx.internal.util.atomic.LinkedQueueNode)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: java.lang.Class getFragmentClass()>
<com.squareup.picasso.BitmapHunter: java.lang.String getKey()>
<okhttp3.Headers: void <init>(java.lang.String[])>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean contains(java.lang.Object)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: int size()>
<rx.internal.operators.OperatorWindowWithObservable: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OnSubscribeRedo$RetryWithPredicate$1: java.lang.Object call(java.lang.Object,java.lang.Object)>
<okhttp3.internal.framed.Settings: int getMaxFrameSize(int)>
<rx.subjects.BehaviorSubject: boolean hasObservers()>
<rx.internal.util.InternalObservableUtils: rx.functions.Func1 isInstanceOf(java.lang.Class)>
<okhttp3.internal.framed.FramedConnection: okhttp3.internal.framed.FramedStream newStream(java.util.List,boolean,boolean)>
<rx.observers.TestObserver: void onError(java.lang.Throwable)>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.Stetho$DefaultDumperPluginsBuilder: com.facebook.stetho.Stetho$DefaultDumperPluginsBuilder provide(com.facebook.stetho.dumpapp.DumperPlugin)>
<rx.internal.operators.OperatorSkipLastTimed: java.lang.Object call(java.lang.Object)>
<rx.Single: rx.Observable concat(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<com.squareup.picasso.Picasso$1: void handleMessage(android.os.Message)>
<rx.internal.operators.OperatorMap$MapSubscriber: void setProducer(rx.Producer)>
<rx.internal.operators.OperatorPublish$2$1: void onCompleted()>
<com.facebook.stetho.common.android.FragmentActivityAccessor: java.lang.Object getFragmentManager(android.app.Activity)>
<com.facebook.stetho.inspector.protocol.module.Page$ExecutionContextCreatedParams: void <init>()>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dispatcher(okhttp3.Dispatcher)>
<com.facebook.stetho.server.LeakyBufferedInputStream: void throwIfMarked()>
<rx.observers.TestObserver: void <clinit>()>
<com.facebook.stetho.inspector.protocol.module.DOM: void setAttributesAsText(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.common.Util: java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>
<rx.Notification: boolean isOnNext()>
<com.squareup.picasso.FileRequestHandler: com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request,int)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier)>
<rx.Completable$8: void call(rx.Completable$CompletableSubscriber)>
<retrofit2.ParameterHandler$HeaderMap: void <init>(retrofit2.Converter)>
<rx.internal.schedulers.SchedulerLifecycle: void start()>
<com.squareup.picasso.LruCache: int evictionCount()>
<rx.observers.Observers$4: void onError(java.lang.Throwable)>
<retrofit2.Retrofit: java.util.List converterFactories()>
<rx.internal.operators.BlockingOperatorNext$NextObserver: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.FragmentDescriptor: void onGetChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<rx.Completable$22$1$1: void call()>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void complete(long)>
<com.squareup.picasso.LruCache: void clearKeyUri(java.lang.String)>
<rx.Observable: rx.Single toSingle()>
<rx.internal.operators.OperatorPublish$PublishSubscriber: void init()>
<okhttp3.internal.http.Http1xStream$ChunkedSink: void close()>
<com.squareup.picasso.Transformation: java.lang.String key()>
<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void <init>(com.facebook.stetho.inspector.elements.Document)>
<okio.Buffer: okio.Buffer buffer()>
<rx.subjects.PublishSubject: void <init>(rx.Observable$OnSubscribe,rx.subjects.SubjectSubscriptionManager)>
<rx.Observable: rx.Observable window(long,java.util.concurrent.TimeUnit,int,rx.Scheduler)>
<rx.Single$1$1: void <init>(rx.Single$1,rx.internal.producers.SingleDelayedProducer,rx.Subscriber)>
<rx.internal.operators.BlockingOperatorNext$NextIterator: boolean moveToNext()>
<com.squareup.picasso.UrlConnectionDownloader$1: java.lang.StringBuilder initialValue()>
<rx.Completable$4$1: void onSubscribe(rx.Subscription)>
<rx.functions.Actions$Action1CallsAction0: void call(java.lang.Object)>
<rx.internal.util.atomic.LinkedQueueNode: rx.internal.util.atomic.LinkedQueueNode lvNext()>
<rx.subjects.TestSubject: void onError(java.lang.Throwable)>
<rx.Completable$17$1$1: void call()>
<rx.internal.operators.OperatorGroupBy$State: void onNext(java.lang.Object)>
<rx.observables.BlockingObservable$5: void <init>(rx.observables.BlockingObservable,java.util.concurrent.BlockingQueue,rx.internal.operators.NotificationLite)>
<rx.Completable$22$1: void <init>(rx.Completable$22,rx.Scheduler$Worker,rx.Completable$CompletableSubscriber,rx.internal.util.SubscriptionList)>
<rx.internal.util.OpenHashSet: boolean add(java.lang.Object)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: rx.subscriptions.CompositeSubscription getOrCreateComposite()>
<okhttp3.Response: void close()>
<okhttp3.internal.framed.FramedConnection$1: void execute()>
<rx.internal.operators.OperatorSerialize$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void replaceWindow()>
<rx.internal.util.InternalObservableUtils$RepeatNotificationDematerializer: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.FragmentDescriptor: void <init>(com.facebook.stetho.common.android.FragmentCompat)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: java.lang.String getLocalName(java.lang.Object)>
<rx.internal.util.OpenHashSet: void clear(rx.functions.Action1)>
<fr.masciulli.drinks.ui.activity.AboutActivity: void onCreate(android.os.Bundle)>
<com.squareup.picasso.MemoryPolicy: void <clinit>()>
<rx.observables.BlockingObservable: java.lang.Object single()>
<okhttp3.MultipartBody$Builder: okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String,okhttp3.RequestBody)>
<okio.Buffer: okio.BufferedSink writeUtf8CodePoint(int)>
<rx.subjects.SerializedSubject$1: void call(rx.Subscriber)>
<rx.Completable$1: void call(rx.Completable$CompletableSubscriber)>
<rx.Observable: rx.Observable finallyDo(rx.functions.Action0)>
<rx.internal.util.IndexedRingBuffer: int getIndexFromPreviouslyRemoved()>
<rx.Observable: rx.observables.ConnectableObservable replay(long,java.util.concurrent.TimeUnit)>
<okhttp3.internal.platform.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>
<rx.internal.operators.OnSubscribeDetach$DetachSubscriber: void <init>(rx.Subscriber)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: java.util.Iterator iterator()>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler$ExactMagicMatcher: boolean matches(java.io.InputStream)>
<okhttp3.internal.framed.Hpack$Writer: void insertIntoDynamicTable(okhttp3.internal.framed.Header)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$6: void <init>(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<okio.SegmentedByteString: okio.ByteString substring(int,int)>
<com.squareup.picasso.RequestHandler: void calculateInSampleSize(int,int,android.graphics.BitmapFactory$Options,com.squareup.picasso.Request)>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void loadDrinks()>
<rx.Single: rx.Single zip(java.lang.Iterable,rx.functions.FuncN)>
<rx.internal.operators.OperatorTimeInterval$1: void onNext(java.lang.Object)>
<okio.ForwardingSink: okio.Timeout timeout()>
<rx.observers.Subscribers$2: void <init>(rx.functions.Action1)>
<rx.observers.TestObserver: void assertionError(java.lang.String)>
<com.squareup.picasso.FetchAction: java.lang.Object getTarget()>
<okhttp3.internal.framed.Settings: void <init>()>
<rx.internal.operators.OnSubscribeRedo$RetryWithPredicate: rx.Observable call(rx.Observable)>
<rx.internal.operators.OnSubscribeUsing$DisposeAction: void <init>(rx.functions.Action1,java.lang.Object)>
<rx.internal.util.InternalObservableUtils: rx.functions.Func0 createReplaySupplier(rx.Observable,int)>
<rx.internal.util.UtilityFunctions$NullFunction: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder cache(okhttp3.Cache)>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: void onError(java.lang.Throwable)>
<rx.internal.schedulers.GenericScheduledExecutorService: void <clinit>()>
<rx.observers.Observers: rx.Observer create(rx.functions.Action1,rx.functions.Action1,rx.functions.Action0)>
<okhttp3.Cookie$Builder: okhttp3.Cookie$Builder expiresAt(long)>
<com.facebook.stetho.common.LogUtil: void i(java.lang.String,java.lang.Object[])>
<rx.Observable: rx.Observable debounce(long,java.util.concurrent.TimeUnit)>
<rx.Observable: rx.Observable isEmpty()>
<fr.masciulli.drinks.ui.EnterPostponeTransitionCallback: void <init>(android.app.Activity)>
<rx.internal.operators.OperatorElementAt$1: void <init>(rx.internal.operators.OperatorElementAt,rx.Subscriber)>
<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1: void <init>(rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber,rx.Observable)>
<rx.internal.util.UtilityFunctions$AlwaysFalse: java.lang.Object call(java.lang.Object)>
<okhttp3.internal.framed.FramedConnection: okhttp3.internal.framed.Ping ping()>
<rx.internal.operators.OperatorDelay: java.lang.Object call(java.lang.Object)>
<okhttp3.internal.tls.DistinguishedNameParser: java.lang.String escapedAV()>
<okio.Buffer: okio.BufferedSink write(okio.ByteString)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder removePathSegment(int)>
<rx.Single: rx.Single doOnUnsubscribe(rx.functions.Action0)>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<okio.Source: okio.Timeout timeout()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void loadingFinished(java.lang.String)>
<okhttp3.internal.http.HttpMethod: boolean redirectsToGet(java.lang.String)>
<com.facebook.stetho.inspector.elements.ShadowDocument: void <init>(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent: void <init>()>
<okio.Okio$3: java.io.IOException newTimeoutException(java.io.IOException)>
<rx.internal.operators.OperatorOnBackpressureDrop$2: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorThrottleFirst$1: void onNext(java.lang.Object)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedFragment(java.lang.String)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: long lvConsumerIndex()>
<okio.Buffer$2: int read()>
<retrofit2.BuiltInConverters: retrofit2.Converter stringConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<rx.internal.util.SynchronizedQueue: boolean addAll(java.util.Collection)>
<com.facebook.stetho.inspector.protocol.module.DOM$DiscardSearchResultsRequest: void <init>()>
<rx.Single$6: void <init>(rx.functions.Func2)>
<okio.BufferedSink: okio.BufferedSink writeDecimalLong(long)>
<com.facebook.stetho.inspector.jsonrpc.PendingRequestCallback: void onResponse(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcResponse)>
<okio.Buffer: okio.Buffer emitCompleteSegments()>
<rx.observers.TestSubscriber: void assertTerminalEvent()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder setPathSegment(int,java.lang.String)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.DOMStorage: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.server.http.LightHttpResponse: void prepare()>
<rx.exceptions.CompositeException: void <init>(java.lang.String,java.util.Collection)>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse executeSQL(java.lang.String,java.lang.String,com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler)>
<okio.Buffer: okio.BufferedSink writeUtf8(java.lang.String)>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: java.lang.Object last()>
<okhttp3.internal.framed.FramedStream: void reply(java.util.List,boolean)>
<rx.Observable: rx.Observable skip(int)>
<rx.internal.util.ExceptionsUtils: boolean addThrowable(java.util.concurrent.atomic.AtomicReference,java.lang.Throwable)>
<okhttp3.internal.framed.PushObserver$1: boolean onHeaders(int,java.util.List,boolean)>
<rx.Observable: rx.Observable interval(long,java.util.concurrent.TimeUnit)>
<okhttp3.Cookie: boolean persistent()>
<com.squareup.picasso.Utils$1: void handleMessage(android.os.Message)>
<okhttp3.Headers$Builder: java.lang.String get(java.lang.String)>
<okhttp3.internal.framed.FramedStream$StreamTimeout: void timedOut()>
<rx.Observable: rx.Observable first()>
<okhttp3.internal.Util: void <init>()>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$1: void <init>(rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker,rx.subscriptions.MultipleAssignmentSubscription)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void onSetAttributesAsText(java.lang.Object,java.lang.String)>
<rx.Single$10: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.OperatorSampleWithObservable: java.lang.Object call(java.lang.Object)>
<retrofit2.Platform: java.lang.Object invokeDefaultMethod(java.lang.reflect.Method,java.lang.Class,java.lang.Object,java.lang.Object[])>
<com.facebook.stetho.inspector.helper.ChromePeerManager$UnregisterOnDisconnect: void <init>(com.facebook.stetho.inspector.helper.ChromePeerManager,com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<com.facebook.stetho.websocket.WebSocketSession$1: void handleTextFrame(byte[],int)>
<rx.internal.operators.OperatorMerge$HolderDelayErrors: void <init>()>
<rx.Single$1$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorDoOnEach$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorGroupBy$GroupBySubscriber: void errorAll(rx.Subscriber,java.util.Queue,java.lang.Throwable)>
<rx.internal.util.SynchronizedQueue: boolean isEmpty()>
<com.squareup.picasso.BitmapHunter$1: void <init>()>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder clearCenterCrop()>
<com.facebook.stetho.inspector.protocol.module.Runtime: void <clinit>()>
<rx.functions.Actions$11: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.OperatorToObservableList$1: void <init>(rx.internal.operators.OperatorToObservableList,rx.internal.producers.SingleDelayedProducer,rx.Subscriber)>
<rx.Completable$15: void onCompleted()>
<rx.internal.operators.OnSubscribeRedo$2: void <init>(rx.internal.operators.OnSubscribeRedo,rx.Subscriber,rx.subjects.BehaviorSubject,rx.internal.producers.ProducerArbiter,java.util.concurrent.atomic.AtomicLong,rx.subscriptions.SerialSubscription)>
<okio.ByteString: boolean equals(java.lang.Object)>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void <clinit>()>
<rx.internal.operators.CachedObservable$ReplayProducer: void <init>(rx.Subscriber,rx.internal.operators.CachedObservable$CacheState)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void <clinit>()>
<okhttp3.internal.Util: java.lang.String trimSubstring(java.lang.String,int,int)>
<retrofit2.Utils: java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable)>
<rx.internal.operators.OperatorMerge$InnerSubscriber: void <init>(rx.internal.operators.OperatorMerge$MergeSubscriber,long)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: void <init>(int)>
<okhttp3.internal.cache.DiskLruCache: void processJournal()>
<rx.Observable: rx.Observable merge(rx.Observable[])>
<com.facebook.stetho.common.android.FragmentCompatUtil: java.lang.Object findFragmentForViewInActivity(com.facebook.stetho.common.android.FragmentCompat,android.app.Activity,android.view.View)>
<rx.internal.operators.OnSubscribeSingle$1: void onStart()>
<rx.internal.operators.OperatorSampleWithObservable$1: void onNext(java.lang.Object)>
<rx.observables.AsyncOnSubscribe$UnicastSubject$State: void call(rx.Subscriber)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$OverlayHighlighter: void setHighlightedView(android.view.View,int)>
<rx.internal.util.ScalarSynchronousObservable$ScalarAsyncOnSubscribe: void call(rx.Subscriber)>
<okio.Buffer: okio.Buffer write(okio.ByteString)>
<rx.internal.operators.OperatorMaterialize$ParentSubscriber: void drain()>
<com.facebook.stetho.inspector.network.ResponseHandler: void onError(java.io.IOException)>
<rx.internal.operators.OnSubscribeRedo$RetryWithPredicate$1: void <init>(rx.internal.operators.OnSubscribeRedo$RetryWithPredicate)>
<okhttp3.Authenticator: okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response)>
<rx.subjects.ReplaySubject: java.lang.Object[] getValues()>
<com.squareup.picasso.DeferredRequestCreator: void cancel()>
<okhttp3.Cookie: java.lang.String name()>
<rx.internal.operators.OperatorSampleWithObservable$2: void onCompleted()>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder addRequestHandler(com.squareup.picasso.RequestHandler)>
<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.Document$1)>
<rx.internal.operators.OperatorOnBackpressureDrop$1: void <init>(rx.internal.operators.OperatorOnBackpressureDrop,java.util.concurrent.atomic.AtomicLong)>
<com.facebook.stetho.inspector.protocol.module.DOM$PeerManagerListener: void <init>(com.facebook.stetho.inspector.protocol.module.DOM)>
<rx.observables.GroupedObservable: rx.observables.GroupedObservable 'from'(java.lang.Object,rx.Observable)>
<com.facebook.stetho.Stetho$InitializerBuilder: void <init>(android.content.Context,com.facebook.stetho.Stetho$1)>
<com.facebook.stetho.inspector.protocol.module.CSS$CSSComputedStyleProperty: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<rx.internal.operators.OnSubscribeAmb: rx.Observable$OnSubscribe amb(rx.Observable,rx.Observable,rx.Observable)>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void doDownload(java.io.PrintStream,java.util.Iterator)>
<rx.exceptions.CompositeException: java.lang.Throwable getRootCause(java.lang.Throwable)>
<com.facebook.stetho.inspector.helper.IntegerFormatter$IntegerFormatterWithHex: void <init>(com.facebook.stetho.inspector.helper.IntegerFormatter$1)>
<rx.subjects.TestSubject: void onNext(java.lang.Object,long)>
<rx.internal.operators.OnSubscribePublishMulticast: void remove(rx.internal.operators.OnSubscribePublishMulticast$PublishProducer)>
<com.facebook.stetho.json.ObjectMapper: java.lang.Enum getEnumByMethod(java.lang.String,java.lang.Class,java.lang.reflect.Method)>
<okhttp3.internal.framed.ErrorCode: void <init>(java.lang.String,int,int,int,int)>
<rx.Completable$12: void call(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void onNext(java.lang.Object)>
<rx.Notification: rx.Notification createOnError(java.lang.Throwable)>
<rx.internal.operators.BlockingOperatorLatest$1: void <init>(rx.Observable)>
<rx.internal.util.unsafe.SpscArrayQueue: void soConsumerIndex(long)>
<rx.internal.util.unsafe.SpmcArrayQueueConsumerField: void <clinit>()>
<okio.RealBufferedSource$1: void <init>(okio.RealBufferedSource)>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void lambda$setupRecyclerView$0(int,fr.masciulli.drinks.model.Liquor)>
<rx.internal.operators.BufferUntilSubscriber$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorScan: java.lang.Object call(java.lang.Object)>
<okhttp3.Headers: int hashCode()>
<rx.internal.util.IndexedRingBuffer$1: rx.internal.util.IndexedRingBuffer createObject()>
<rx.Completable$8: void <init>(rx.functions.Action0)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber: void onError(java.lang.Throwable)>
<retrofit2.http.DELETE: java.lang.String value()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$MethodBackedCSSProperty: void <init>(com.facebook.stetho.inspector.elements.android.ViewDescriptor,java.lang.reflect.Method,java.lang.String,android.view.ViewDebug$ExportedProperty)>
<okhttp3.internal.cache.DiskLruCache$Entry: void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String,okhttp3.internal.cache.DiskLruCache$1)>
<okhttp3.internal.framed.Hpack$Reader: void insertIntoDynamicTable(int,okhttp3.internal.framed.Header)>
<com.facebook.stetho.server.http.LightHttpServer: void <init>(com.facebook.stetho.server.http.HandlerRegistry)>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: java.lang.Iterable finish()>
<retrofit2.ServiceMethod$Builder: void parseMethodAnnotation(java.lang.'annotation'.Annotation)>
<rx.internal.operators.OperatorTakeUntilPredicate: void <init>(rx.functions.Func1)>
<rx.internal.util.InternalObservableUtils: void <clinit>()>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: java.lang.String firstHeaderValue(java.lang.String)>
<okio.BufferedSource: int readInt()>
<com.facebook.stetho.inspector.protocol.module.CSS: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getMatchedStylesForNode(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.Single: rx.Single doOnError(rx.functions.Action1)>
<okhttp3.internal.tls.OkHostnameVerifier: java.util.List allSubjectAltNames(java.security.cert.X509Certificate)>
<fr.masciulli.drinks.model.Drink: void <init>(android.os.Parcel)>
<okhttp3.Callback: void onFailure(okhttp3.Call,java.io.IOException)>
<com.squareup.picasso.Utils: java.lang.String createKey(com.squareup.picasso.Request,java.lang.StringBuilder)>
<okio.GzipSink: okio.Timeout timeout()>
<com.facebook.stetho.inspector.database.ContentProviderSchema: void <init>(com.facebook.stetho.inspector.database.ContentProviderSchema$Builder)>
<okhttp3.RealCall: void enqueue(okhttp3.Callback)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightDurationObserver: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer: void registerDisconnectReceiver(com.facebook.stetho.inspector.jsonrpc.DisconnectReceiver)>
<rx.Observable: rx.Observable materialize()>
<rx.internal.operators.SingleOperatorZip$1$1: void onError(java.lang.Throwable)>
<okio.Buffer: okio.Buffer writeLong(long)>
<rx.schedulers.Timestamped: boolean equals(java.lang.Object)>
<okhttp3.Dispatcher: void cancelAll()>
<rx.Observable: rx.Observable cacheWithInitialCapacity(int)>
<rx.Completable: rx.Completable concat(rx.Completable[])>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean writeToQueue(java.util.concurrent.atomic.AtomicReferenceArray,java.lang.Object,long,int)>
<com.facebook.stetho.inspector.ChromeDevtoolsServer$1: void <clinit>()>
<okhttp3.internal.io.FileSystem: long size(java.io.File)>
<com.facebook.stetho.common.android.FragmentCompatFramework: com.facebook.stetho.common.android.FragmentCompatFramework$FragmentActivityAccessorFramework forFragmentActivity()>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode: com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode[] values()>
<fr.masciulli.drinks.ui.view.RatioImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<rx.internal.operators.OperatorPublish$2: void call(rx.Subscriber)>
<rx.internal.operators.OnSubscribeRedo$2$1: void onCompleted()>
<rx.internal.operators.OperatorOnBackpressureDrop$1: void request(long)>
<rx.internal.operators.OperatorSwitch$Holder: void <clinit>()>
<com.facebook.stetho.json.ObjectMapper: java.lang.Object getJsonValue(java.lang.Object,java.lang.Class,java.lang.reflect.Field)>
<okhttp3.internal.cache.CacheInterceptor: void <clinit>()>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: android.support.v7.widget.RecyclerView$LayoutManager craftLayoutManager(android.content.Context)>
<retrofit2.OkHttpCall$NoContentResponseBody: okhttp3.MediaType contentType()>
<rx.internal.operators.OperatorIgnoreElements$1: void onNext(java.lang.Object)>
<rx.observers.TestObserver$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Console$MessageLevel: com.facebook.stetho.inspector.protocol.module.Console$MessageLevel valueOf(java.lang.String)>
<okhttp3.internal.framed.Variant: okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean)>
<rx.internal.operators.OperatorOnBackpressureLatest: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.AttributeAccumulator: void store(java.lang.String,java.lang.String)>
<rx.internal.operators.CompletableOnSubscribeMergeIterable$1: void onCompleted()>
<rx.subscriptions.BooleanSubscription: rx.subscriptions.BooleanSubscription create(rx.functions.Action0)>
<rx.Observable: rx.Observable replay(rx.functions.Func1,rx.Scheduler)>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: android.app.Dialog getDialog(java.lang.Object)>
<rx.internal.operators.NotificationLite$2: java.lang.String toString()>
<okhttp3.Headers: boolean equals(java.lang.Object)>
<rx.android.schedulers.AndroidSchedulers: void reset()>
<rx.Observable: rx.Observable just(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinter: void printTo(java.io.PrintWriter,java.io.InputStream)>
<rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1: boolean hasNext()>
<rx.internal.operators.CachedObservable$CachedSubscribe: void call(java.lang.Object)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierTime: rx.observables.ConnectableObservable call()>
<com.facebook.stetho.dumpapp.Dumper: java.util.Map generatePluginMap(java.lang.Iterable)>
<rx.Observable: rx.Observable repeat(long)>
<rx.internal.schedulers.TrampolineScheduler: void <init>()>
<com.facebook.stetho.inspector.protocol.module.Runtime: void <init>(android.content.Context)>
<retrofit2.RequestBuilder: void addPart(okhttp3.MultipartBody$Part)>
<retrofit2.Response: okhttp3.Response raw()>
<com.facebook.stetho.inspector.network.RequestBodyHelper: java.io.OutputStream createBodySink(java.lang.String)>
<com.squareup.picasso.PicassoDrawable: void setBitmap(android.widget.ImageView,android.content.Context,android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom,boolean,boolean)>
<okhttp3.internal.framed.FrameWriter: void rstStream(int,okhttp3.internal.framed.ErrorCode)>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: java.lang.Object lpElement(java.lang.Object[],long)>
<com.squareup.picasso.Cache: int size()>
<com.facebook.stetho.inspector.protocol.module.Runtime$GetPropertiesResponse: void <init>()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void setSuper(com.facebook.stetho.inspector.elements.Descriptor)>
<com.facebook.stetho.inspector.console.RuntimeReplFactory: com.facebook.stetho.inspector.console.RuntimeRepl newInstance()>
<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.io.File)>
<rx.Observable: rx.Observable takeLastBuffer(long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: com.facebook.stetho.inspector.network.ResourceTypeHelper getResourceTypeHelper()>
<rx.internal.producers.ProducerObserverArbiter: void <clinit>()>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner)>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1: void onError(java.lang.Throwable)>
<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>
<rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber: void onCompleted()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder setEncodedQueryParameter(java.lang.String,java.lang.String)>
<rx.internal.operators.OperatorReplay$2: void call(java.lang.Object)>
<rx.internal.util.InternalObservableUtils$PlusOneFunc2: void <init>()>
<rx.internal.operators.OnSubscribeTimerPeriodically$1: void <init>(rx.internal.operators.OnSubscribeTimerPeriodically,rx.Subscriber,rx.Scheduler$Worker)>
<okio.SegmentedByteString: okio.ByteString toAsciiUppercase()>
<rx.internal.util.IndexedRingBuffer: int add(java.lang.Object)>
<okhttp3.Cookie: boolean secure()>
<retrofit2.Utils$ParameterizedTypeImpl: java.lang.reflect.Type getOwnerType()>
<rx.Completable: rx.Completable concatWith(rx.Completable)>
<rx.subjects.ReplaySubject: rx.subjects.ReplaySubject create()>
<rx.internal.operators.OperatorPublish: rx.Observable create(rx.Observable,rx.functions.Func1)>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder: com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder projection(java.lang.String[])>
<com.facebook.stetho.inspector.elements.DescriptorMap: com.facebook.stetho.inspector.elements.DescriptorMap setHost(com.facebook.stetho.inspector.elements.Descriptor$Host)>
<com.facebook.stetho.server.http.LightHttpBody$1: void writeTo(java.io.OutputStream)>
<rx.Observable: rx.Observable switchOnNextDelayError(rx.Observable)>
<rx.internal.operators.OperatorDistinct: void <init>(rx.functions.Func1)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber: void onCompleted()>
<rx.internal.operators.OperatorReplay$6: java.lang.Object call()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty: void <init>(com.facebook.stetho.inspector.elements.android.ViewDescriptor,java.lang.String,android.view.ViewDebug$ExportedProperty)>
<okhttp3.internal.platform.JdkWithJettyBootPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: boolean updateError(java.lang.Throwable)>
<com.squareup.picasso.UrlConnectionDownloader: void shutdown()>
<rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber: void expire(int,rx.Subscription)>
<com.facebook.stetho.inspector.protocol.module.CSS$2$1: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$2)>
<rx.internal.operators.CompletableOnSubscribeMergeArray: void call(java.lang.Object)>
<rx.exceptions.OnErrorThrowable: void <init>(java.lang.Throwable,java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.DialogDescriptor: void onGetChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcEvent: void <init>(java.lang.String,org.json.JSONObject)>
<rx.internal.operators.OperatorSampleWithObservable: void <clinit>()>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.protocol.module.Runtime$EvaluateResponse evaluate(com.facebook.stetho.inspector.console.RuntimeReplFactory,org.json.JSONObject)>
<rx.internal.operators.OnSubscribeRedo: rx.Observable repeat(rx.Observable)>
<rx.internal.operators.OperatorBufferWithTime$ExactSubscriber: void emit()>
<okio.Buffer: void readFully(byte[])>
<com.facebook.stetho.Stetho$InitializerBuilder: com.facebook.stetho.Stetho$InitializerBuilder enableDumpapp(com.facebook.stetho.DumperPluginsProvider)>
<rx.subscriptions.BooleanSubscription: void <init>(rx.functions.Action0)>
<rx.subjects.AsyncSubject: void <init>(rx.Observable$OnSubscribe,rx.subjects.SubjectSubscriptionManager)>
<okhttp3.internal.framed.NameValueBlockReader: void doneReading()>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcEvent: void <init>()>
<com.squareup.picasso.Stats: long getAverage(int,long)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void <init>(rx.Subscriber,boolean)>
<rx.subjects.UnicastSubject: void onError(java.lang.Throwable)>
<okio.SegmentedByteString: int hashCode()>
<rx.internal.schedulers.ExecutorScheduler: void <init>(java.util.concurrent.Executor)>
<com.facebook.stetho.inspector.network.RequestBodyHelper: void reportDataSent()>
<com.squareup.picasso.UrlConnectionDownloader$1: void <init>()>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber: void startBuffer(java.lang.Object)>
<rx.internal.util.InternalObservableUtils$SelectorAndObserveOn: void <init>(rx.functions.Func1,rx.Scheduler)>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$JellyBeanAndBeyondImpl: void <init>()>
<okio.Buffer: okio.BufferedSink writeByte(int)>
<com.facebook.stetho.inspector.protocol.module.Console$MessageLevel: void <clinit>()>
<rx.internal.producers.SingleDelayedProducer: void setValue(java.lang.Object)>
<rx.internal.operators.OnSubscribeRefCount$1: void call(rx.Subscription)>
<rx.plugins.RxJavaSingleExecutionHook: rx.Observable$Operator onLift(rx.Observable$Operator)>
<rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction: void call()>
<rx.observers.Observers$4: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorBufferWithStartEndObservable: void <init>(rx.Observable,rx.functions.Func1)>
<okio.SegmentedByteString: boolean rangeEquals(int,byte[],int,int)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter: rx.Observable adapt(retrofit2.Call)>
<rx.Completable$18: void call(java.lang.Throwable)>
<okio.ByteString: boolean startsWith(okio.ByteString)>
<rx.internal.util.InternalObservableUtils: rx.functions.Func1 createRepeatDematerializer(rx.functions.Func1)>
<com.facebook.stetho.dumpapp.plugins.HprofDumperPlugin: void truncateAndDeleteFile(java.io.File)>
<rx.exceptions.CompositeException: java.lang.String getMessage()>
<rx.internal.util.SynchronizedQueue: void <init>(int)>
<rx.Completable: rx.Completable create(rx.Completable$CompletableOnSubscribe)>
<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>
<rx.internal.operators.OperatorTimeoutWithSelector$2: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.functions.Actions$7: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<retrofit2.ExecutorCallAdapterFactory$1: java.lang.reflect.Type responseType()>
<rx.Completable: rx.Completable amb(java.lang.Iterable)>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1: void onCompleted()>
<rx.internal.schedulers.ImmediateScheduler$InnerImmediateScheduler: void <init>(rx.internal.schedulers.ImmediateScheduler)>
<com.facebook.stetho.inspector.protocol.module.Page: void setDeviceMetricsOverride(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: android.content.res.Resources getResources(android.app.Fragment)>
<okhttp3.Cache: int networkCount()>
<retrofit2.ExecutorCallAdapterFactory: retrofit2.CallAdapter get(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<rx.internal.operators.OperatorSampleWithObservable$1: void <init>(rx.internal.operators.OperatorSampleWithObservable,java.util.concurrent.atomic.AtomicReference,rx.observers.SerializedSubscriber,java.util.concurrent.atomic.AtomicReference)>
<com.squareup.picasso.Dispatcher: void performSubmit(com.squareup.picasso.Action)>
<com.facebook.stetho.Stetho$2: java.lang.Iterable get()>
<rx.internal.util.RxRingBuffer: void <init>(rx.internal.util.ObjectPool,int)>
<okio.InflaterSource: void <init>(okio.Source,java.util.zip.Inflater)>
<rx.Observable: rx.Observable takeLastBuffer(int)>
<rx.observables.BlockingObservable: java.lang.Object firstOrDefault(java.lang.Object,rx.functions.Func1)>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer: com.facebook.stetho.inspector.jsonrpc.PendingRequest getAndRemovePendingRequest(long)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond$1: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>
<retrofit2.RequestBuilder: void addPart(okhttp3.Headers,okhttp3.RequestBody)>
<okhttp3.internal.framed.FrameReader$Handler: void ackSettings()>
<okhttp3.FormBody: long contentLength()>
<rx.internal.util.SubscriptionList: void clear()>
<rx.internal.util.RxThreadFactory$1: java.lang.Thread newThread(java.lang.Runnable)>
<rx.Observable: rx.Observable interval(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<okio.Options: java.lang.Object get(int)>
<okio.RealBufferedSource: int read(byte[])>
<rx.Completable: rx.Completable lift(rx.Completable$CompletableOperator)>
<com.facebook.stetho.inspector.protocol.module.CSS: void <init>(com.facebook.stetho.inspector.elements.Document)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber: void startNewChunk()>
<rx.Observable: rx.Observable amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker: void <init>(java.util.concurrent.Executor)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$6: void call(java.lang.Object)>
<rx.internal.operators.OperatorSkip$1: void <init>(rx.internal.operators.OperatorSkip,rx.Subscriber,rx.Subscriber)>
<com.facebook.stetho.inspector.elements.android.AccessibilityNodeInfoWrapper: java.lang.CharSequence getDescription(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.View)>
<retrofit2.DefaultCallAdapterFactory$1: java.lang.Object adapt(retrofit2.Call)>
<rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorOnBackpressureDrop: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String)>
<com.facebook.stetho.common.LogUtil: void e(java.lang.String)>
<rx.internal.operators.OperatorTakeUntil: void <init>(rx.Observable)>
<rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction: void call(rx.Subscriber)>
<okio.Buffer: okio.Timeout timeout()>
<com.facebook.stetho.inspector.elements.android.ActivityDescriptor: void getDialogFragments(com.facebook.stetho.common.android.FragmentCompat,android.app.Activity,com.facebook.stetho.common.Accumulator)>
<com.facebook.stetho.inspector.protocol.module.Runtime$1$1: void <init>(com.facebook.stetho.inspector.protocol.module.Runtime$1)>
<fr.masciulli.drinks.ui.activity.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>
<rx.internal.operators.OperatorDistinct: rx.internal.operators.OperatorDistinct instance()>
<com.squareup.picasso.LruCache: void set(java.lang.String,android.graphics.Bitmap)>
<rx.internal.operators.OnSubscribeRedo$4$1: void onCompleted()>
<okhttp3.internal.connection.RealConnection: void cancel()>
<okhttp3.internal.framed.FramedStream$FramedDataSource: void close()>
<okio.Okio: okio.Source source(java.nio.file.Path,java.nio.file.OpenOption[])>
<rx.Completable$25: void onSubscribe(rx.Subscription)>
<com.facebook.stetho.common.LogUtil: void v(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<rx.Completable: rx.Completable using(rx.functions.Func0,rx.functions.Func1,rx.functions.Action1)>
<rx.Observable: rx.Observable replay(rx.functions.Func1,long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer: void <init>(rx.internal.operators.OperatorWindowWithSize$WindowSkip)>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: rx.Notification take()>
<com.facebook.stetho.server.LeakyBufferedInputStream: boolean markSupported()>
<okhttp3.internal.cache.CacheStrategy$Factory: long cacheResponseAge()>
<rx.Observable: rx.observables.ConnectableObservable replay(int)>
<rx.functions.Actions$2: java.lang.Object call(java.lang.Object)>
<okio.BufferedSource: short readShortLe()>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: com.facebook.stetho.inspector.elements.Document$UpdateListener[] getListenersSnapshot()>
<okio.RealBufferedSource: void readFully(okio.Buffer,long)>
<rx.internal.operators.OperatorSingle$ParentSubscriber: void <init>(rx.Subscriber,boolean,java.lang.Object)>
<rx.observables.AsyncOnSubscribe$6: void setProducer(rx.Producer)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty: java.lang.String getCSSName()>
<rx.internal.operators.EmptyObservableHolder: void call(java.lang.Object)>
<retrofit2.Utils: void checkNotPrimitive(java.lang.reflect.Type)>
<rx.internal.operators.OnSubscribeRedo: void <clinit>()>
<rx.Single$17: void <init>(rx.Single,rx.Observer)>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$OverlayHighlighter: void clearHighlight()>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: boolean hasNext()>
<com.facebook.stetho.Stetho$PluginBuilder: void provideIfDesired(java.lang.String,java.lang.Object)>
<rx.internal.operators.OperatorSkipUntil$1: void onError(java.lang.Throwable)>
<com.squareup.picasso.Request$Builder: boolean hasImage()>
<rx.internal.operators.OperatorReplay$InnerProducer: long produced(long)>
<rx.internal.operators.OperatorMapPair$MapPairSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginLeftHighlightDrawable: void <init>()>
<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void throwIfCaught()>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: void setLiquors(java.util.List)>
<rx.Observable: void forEach(rx.functions.Action1,rx.functions.Action1,rx.functions.Action0)>
<rx.internal.operators.BlockingOperatorToFuture$2: void <init>(java.util.concurrent.CountDownLatch,rx.Subscription,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference)>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: void spConsumerNode(rx.internal.util.atomic.LinkedQueueNode)>
<okhttp3.logging.HttpLoggingInterceptor: void <init>()>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void complete()>
<com.squareup.picasso.BitmapHunter$5: void run()>
<okhttp3.internal.http.Http1xStream$UnknownLengthSource: void close()>
<okhttp3.MultipartBody$Part: okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.Page$Frame: void <init>()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator networkPolicy(com.squareup.picasso.NetworkPolicy,com.squareup.picasso.NetworkPolicy[])>
<com.facebook.stetho.inspector.helper.ChromePeerManager$UnregisterOnDisconnect: void onDisconnect()>
<okio.ByteString: okio.ByteString decodeHex(java.lang.String)>
<rx.internal.operators.OperatorDelayWithSelector$1: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.WindowDescriptor: android.view.View getViewForHighlighting(java.lang.Object)>
<rx.schedulers.TestScheduler: void <clinit>()>
<com.facebook.stetho.inspector.protocol.module.CSS$2: void <init>(com.facebook.stetho.inspector.protocol.module.CSS,com.facebook.stetho.inspector.protocol.module.CSS$GetMatchedStylesForNodeRequest,com.facebook.stetho.inspector.protocol.module.CSS$RuleMatch,com.facebook.stetho.inspector.protocol.module.CSS$RuleMatch)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: boolean offer(java.lang.Object)>
<com.facebook.stetho.common.LogUtil: void v(java.lang.String)>
<rx.internal.schedulers.CachedThreadScheduler: void shutdown()>
<rx.functions.Functions: rx.functions.FuncN fromAction(rx.functions.Action3)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: android.content.SharedPreferences getSharedPreferences(java.lang.String)>
<rx.internal.schedulers.NewThreadWorker$1: void <init>()>
<rx.Completable$16$1$1: void <init>(rx.Completable$16$1)>
<okio.Okio$2: java.lang.String toString()>
<com.facebook.stetho.inspector.elements.ShadowDocument: java.lang.Object getRootElement()>
<rx.internal.operators.OperatorTakeUntil: java.lang.Object call(java.lang.Object)>
<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>
<rx.internal.operators.OperatorZip$Zip$InnerSubscriber: void onNext(java.lang.Object)>
<okhttp3.MultipartBody$Builder: okhttp3.MultipartBody$Builder setType(okhttp3.MediaType)>
<com.facebook.stetho.server.SecureSocketHandler: void onSecured(android.net.LocalSocket)>
<com.facebook.stetho.common.Util: void throwIfNull(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.subscriptions.Subscriptions: rx.Subscription create(rx.functions.Action0)>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber: void <init>(rx.internal.operators.OperatorWindowWithStartEndObservable,rx.Subscriber,rx.subscriptions.CompositeSubscription)>
<rx.internal.operators.OperatorScan$3: void setProducer(rx.Producer)>
<okhttp3.internal.framed.Settings: int size()>
<okio.AsyncTimeout: java.io.IOException newTimeoutException(java.io.IOException)>
<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLRequest: void <init>()>
<com.facebook.stetho.inspector.domstorage.SharedPreferencesHelper: java.lang.Boolean parseBoolean(java.lang.String)>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void requestWillBeSent(com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorRequest)>
<com.facebook.stetho.common.android.FragmentCompat$FragmentManagerAccessorViaReflection: void <init>()>
<rx.internal.util.ScalarSynchronousSingle: rx.Single scalarScheduleOn(rx.Scheduler)>
<com.facebook.stetho.inspector.helper.PeersRegisteredListener: void onPeerUnregistered(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: void onNext(java.lang.Object)>
<rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc$WindowSubscriber: void onCompleted()>
<rx.observers.TestSubscriber: void assertNoTerminalEvent()>
<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: void onChildNodeRemoved(int,int)>
<okhttp3.Connection: okhttp3.Route route()>
<rx.internal.operators.CachedObservable$CacheState: void <init>(rx.Observable,int)>
<fr.masciulli.drinks.ui.activity.AboutActivity: void <init>()>
<rx.Observable: rx.Observable concat(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<retrofit2.Callback: void onFailure(retrofit2.Call,java.lang.Throwable)>
<okhttp3.internal.connection.RouteSelector: boolean hasNextProxy()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker: void unregister()>
<okhttp3.internal.framed.Http2$Reader: void <init>(okio.BufferedSource,int,boolean)>
<rx.internal.operators.OnSubscribeRefCount$1: void <init>(rx.internal.operators.OnSubscribeRefCount,rx.Subscriber,java.util.concurrent.atomic.AtomicBoolean)>
<rx.observables.ConnectableObservable: rx.Observable autoConnect(int,rx.functions.Action1)>
<rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc$WindowSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber$1: void call()>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void copy(java.io.InputStream,java.io.OutputStream,byte[])>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: rx.internal.util.atomic.LinkedQueueNode lvProducerNode()>
<rx.internal.operators.OperatorBufferWithSingleObservable: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithSize$WindowExact: void onNext(java.lang.Object)>
<rx.Observable: rx.observables.ConnectableObservable replay(int,rx.Scheduler)>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber: void onError(java.lang.Throwable)>
<okhttp3.ConnectionPool: void <clinit>()>
<rx.internal.util.unsafe.ConcurrentCircularArrayQueue: java.lang.Object lpElement(long)>
<okhttp3.internal.framed.HeadersMode: void <clinit>()>
<okio.ByteString: int hashCode()>
<com.squareup.picasso.BitmapHunter: com.squareup.picasso.Action getAction()>
<rx.internal.operators.OperatorAny$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: void <init>()>
<okhttp3.MultipartBody: okhttp3.MediaType type()>
<rx.Observable: rx.Observable sample(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory: com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$MatchResult matchAndParseHeader(java.lang.String,java.lang.String)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter$$Lambda$1: void onClick(android.view.View)>
<rx.internal.operators.OperatorSubscribeOn$1$1: void onNext(java.lang.Object)>
<okio.BufferedSource: long indexOf(byte)>
<com.squareup.picasso.FetchAction: void cancel()>
<okhttp3.internal.framed.FramedStream: void closeLater(okhttp3.internal.framed.ErrorCode)>
<rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl: java.lang.Object next(java.lang.Object,rx.Observer)>
<com.facebook.stetho.common.LogUtil: void <init>()>
<rx.Observable: rx.Subscription subscribe(rx.functions.Action1)>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: void <init>(int)>
<fr.masciulli.drinks.model.Liquor: java.lang.String getImageUrl()>
<rx.internal.util.InternalObservableUtils$RepeatNotificationDematerializer: void <init>(rx.functions.Func1)>
<rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber: void <init>(rx.Subscriber)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$$Lambda$1: void <init>(fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter,fr.masciulli.drinks.ui.adapter.holder.RelatedHeaderViewHolder)>
<rx.Observable: rx.Observable combineLatest(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func8)>
<com.facebook.stetho.inspector.protocol.module.CSS$PeerManagerListener: void onFirstPeerRegistered()>
<okhttp3.internal.framed.FramedConnection$Reader: void alternateService(int,java.lang.String,okio.ByteString,java.lang.String,int,long)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: int getItemViewType(int)>
<rx.plugins.RxJavaSingleExecutionHookDefault: void <init>()>
<rx.exceptions.Exceptions: void <init>()>
<okhttp3.internal.framed.Settings: boolean isPersisted(int)>
<rx.internal.util.atomic.LinkedQueueNode: java.lang.Object lpValue()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler$1: boolean apply(java.lang.Object)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: int getItemViewType(int)>
<com.facebook.stetho.inspector.protocol.module.Profiler: void setSamplingInterval(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.squareup.picasso.Dispatcher: void performSubmit(com.squareup.picasso.Action,boolean)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory: void doErrorPrint(java.io.PrintWriter,java.io.InputStream,java.lang.String)>
<okio.Buffer: boolean rangeEquals(okio.Segment,int,okio.ByteString,int,int)>
<com.facebook.stetho.common.LogRedirector$Logger: void log(int,java.lang.String,java.lang.String)>
<rx.internal.operators.OperatorReplay$UnboundedReplayBuffer: void next(java.lang.Object)>
<rx.internal.operators.OnSubscribeFlattenIterable: void call(rx.Subscriber)>
<okhttp3.Cache: int readInt(okio.BufferedSource)>
<rx.internal.operators.OperatorWindowWithTime$State: rx.internal.operators.OperatorWindowWithTime$State empty()>
<rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber: void <init>(rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber,int)>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: android.content.res.Resources getResources(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber$2: void call()>
<rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc: void call(java.lang.Object)>
<rx.observables.SyncOnSubscribe: rx.observables.SyncOnSubscribe createStateful(rx.functions.Func0,rx.functions.Func2,rx.functions.Action1)>
<okhttp3.internal.framed.Header: void <init>(okio.ByteString,okio.ByteString)>
<com.facebook.stetho.inspector.protocol.module.Profiler: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getProfileHeaders(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.observers.TestObserver$1: void onNext(java.lang.Object)>
<okhttp3.internal.framed.Http2: okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean)>
<okhttp3.Headers: okhttp3.Headers of(java.util.Map)>
<com.facebook.stetho.common.LogUtil: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>
<com.facebook.stetho.inspector.protocol.module.CSS$GetComputedStyleForNodeRequest: void <init>()>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void innerError(java.lang.Throwable,long)>
<fr.masciulli.drinks.ui.activity.DrinkActivity: void setupViews()>
<rx.Single: rx.Observable merge(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<com.facebook.stetho.inspector.elements.NodeDescriptor: void hook(java.lang.Object)>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$NoopImpl: void <init>(com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$1)>
<rx.internal.operators.OnSubscribeAmb: rx.Observable$OnSubscribe amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer: void <init>(int,long,rx.Scheduler)>
<com.facebook.stetho.Stetho$DefaultDumperPluginsBuilder: void <init>(android.content.Context)>
<rx.Observable: rx.Observable last(rx.functions.Func1)>
<okhttp3.internal.cache.DiskLruCache$Editor: okio.Sink newSink(int)>
<okhttp3.internal.framed.Spdy3$Reader: boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler)>
<rx.observables.AsyncOnSubscribe$2: java.lang.Object call(java.lang.Object,java.lang.Long,rx.Observer)>
<rx.Observable: rx.Observable doOnEach(rx.functions.Action1)>
<com.squareup.picasso.Action: void <init>(com.squareup.picasso.Picasso,java.lang.Object,com.squareup.picasso.Request,int,int,int,android.graphics.drawable.Drawable,java.lang.String,java.lang.Object,boolean)>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber: void onTimeout(long)>
<rx.internal.util.IndexedRingBuffer$ElementSection: rx.internal.util.IndexedRingBuffer$ElementSection getNext()>
<com.facebook.stetho.inspector.network.NetworkEventReporter: void dataReceived(java.lang.String,int,int)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory: void doPrint(java.io.PrintWriter,java.io.InputStream,java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.CSS$CSSProperty: void <init>()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean addAll(java.util.Collection)>
<okhttp3.internal.framed.FramedConnection$Builder: okhttp3.internal.framed.FramedConnection$Builder pushObserver(okhttp3.internal.framed.PushObserver)>
<rx.internal.operators.OnSubscribeSingle$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.ThreadBound: void removeCallbacks(java.lang.Runnable)>
<com.squareup.picasso.MarkableInputStream: boolean markSupported()>
<rx.internal.operators.OperatorScan$1: void <init>(java.lang.Object)>
<rx.Completable$31: void call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: com.facebook.stetho.inspector.elements.NodeType onGetNodeType(java.lang.Object)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.lang.Object newBufferPeek(java.util.concurrent.atomic.AtomicReferenceArray,long,int)>
<rx.Observable: rx.Observable throttleFirst(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: rx.Producer manager()>
<com.facebook.stetho.Stetho$PluginBuilder: void <init>(com.facebook.stetho.Stetho$1)>
<rx.Observable: rx.Observable merge(rx.Observable,int)>
<rx.exceptions.OnErrorThrowable: java.lang.Object getValue()>
<com.facebook.stetho.inspector.protocol.module.Console$MessageSource: java.lang.String getProtocolValue()>
<okhttp3.CookieJar$1: void saveFromResponse(okhttp3.HttpUrl,java.util.List)>
<rx.internal.operators.OnSubscribeRedo$3: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.protocol.module.Console$MessageLevel: void <init>(java.lang.String,int,java.lang.String)>
<retrofit2.adapter.rxjava.SingleHelper$1: rx.Single adapt(retrofit2.Call)>
<rx.internal.util.atomic.LinkedQueueNode: void <init>(java.lang.Object)>
<rx.Single$15: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.DOM: void <init>(com.facebook.stetho.inspector.elements.Document)>
<okhttp3.internal.framed.FramedConnection$Reader: void priority(int,int,int,boolean)>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void removeFirst()>
<rx.observables.AsyncOnSubscribe$UnicastSubject: void onError(java.lang.Throwable)>
<rx.internal.operators.OnSubscribeRedo$1: void <init>()>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$TypedMethodInvoker: boolean invoke(java.lang.Object,java.lang.String,java.lang.String)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator resizeDimen(int,int)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory: retrofit2.adapter.rxjava.RxJavaCallAdapterFactory createWithScheduler(rx.Scheduler)>
<com.facebook.stetho.common.android.HandlerUtil$1: java.lang.Object onRun()>
<com.facebook.stetho.inspector.DevtoolsSocketHandler: void onAccepted(com.facebook.stetho.server.SocketLike)>
<rx.Observable: rx.Observable doOnNext(rx.functions.Action1)>
<com.facebook.stetho.common.android.FragmentAccessor: java.lang.String getTag(java.lang.Object)>
<rx.internal.operators.OnSubscribePublishMulticast: rx.Subscriber subscriber()>
<okhttp3.internal.http.HttpDate: java.lang.String format(java.util.Date)>
<rx.internal.operators.OperatorReplay: rx.observables.ConnectableObservable create(rx.Observable,long,java.util.concurrent.TimeUnit,rx.Scheduler,int)>
<rx.observers.TestSubscriber: void assertValueCount(int)>
<rx.internal.operators.OperatorDebounceWithTime: void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.observers.Subscribers$3: void onNext(java.lang.Object)>
<rx.internal.producers.SingleProducer: void <init>(rx.Subscriber,java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Profiler$ProfileHeaderResponse: void <init>()>
<rx.internal.operators.OperatorScan: void <init>(rx.functions.Func2)>
<rx.Completable$27: void onCompleted()>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable,rx.Observable,rx.Observable)>
<rx.subjects.BehaviorSubject: java.lang.Object[] getValues(java.lang.Object[])>
<okhttp3.Cookie: boolean hostOnly()>
<rx.observers.TestSubscriber: void requestMore(long)>
<com.facebook.stetho.inspector.protocol.module.Runtime: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult evaluate(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler$1: void <init>(rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler,rx.internal.schedulers.TrampolineScheduler$TimedAction)>
<rx.internal.operators.OperatorWindowWithSize$WindowExact: void <init>(rx.Subscriber,int)>
<com.squareup.picasso.Picasso: com.squareup.picasso.RequestCreator load(java.lang.String)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: com.facebook.stetho.inspector.elements.NodeDescriptor getNodeDescriptor(java.lang.Object)>
<okhttp3.internal.framed.Header: int hashCode()>
<com.squareup.picasso.Cache: void clear()>
<rx.Completable$21: void <init>(rx.Completable,rx.Completable$CompletableOperator)>
<rx.internal.operators.CompletableOnSubscribeConcat: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.CompletableOnSubscribeMergeIterable: void <init>(java.lang.Iterable)>
<com.facebook.stetho.inspector.protocol.module.Database: java.lang.String blobToString(byte[])>
<rx.subjects.PublishSubject$1: void <init>(rx.subjects.SubjectSubscriptionManager)>
<okhttp3.internal.framed.Http2: void <init>()>
<rx.internal.operators.OperatorPublish$PublishSubscriber: void <init>(java.util.concurrent.atomic.AtomicReference)>
<rx.observers.Subscribers$3: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.android.ViewGroupDescriptor: void <init>()>
<com.squareup.picasso.TargetAction: void <init>(com.squareup.picasso.Picasso,com.squareup.picasso.Target,com.squareup.picasso.Request,int,int,android.graphics.drawable.Drawable,java.lang.String,java.lang.Object,int)>
<rx.schedulers.TestScheduler: long now()>
<rx.internal.operators.OperatorSkipUntil: rx.Subscriber call(rx.Subscriber)>
<com.squareup.picasso.Dispatcher: void dispatchSubmit(com.squareup.picasso.Action)>
<okhttp3.internal.framed.Spdy3$Reader: void close()>
<okio.SegmentedByteString: int size()>
<okio.Source: long read(okio.Buffer,long)>
<com.facebook.stetho.common.Util: void <init>()>
<rx.internal.util.RxJavaPluginUtils: void <init>()>
<com.facebook.stetho.inspector.protocol.module.Database$1: java.lang.Object handleInsert(long)>
<rx.internal.operators.OnSubscribeFlattenIterable: void <init>(rx.Observable,rx.functions.Func1,int)>
<rx.internal.operators.OperatorSkipUntil$1: void <init>(rx.internal.operators.OperatorSkipUntil,java.util.concurrent.atomic.AtomicBoolean,rx.observers.SerializedSubscriber)>
<rx.schedulers.Schedulers: void start()>
<rx.exceptions.CompositeException: void printStackTrace(java.io.PrintStream)>
<okhttp3.internal.http.HttpStream: void cancel()>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void emitScalar(rx.internal.operators.OperatorMerge$InnerSubscriber,java.lang.Object,long)>
<rx.internal.util.unsafe.MpscLinkedQueue: boolean offer(java.lang.Object)>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder listener(com.squareup.picasso.Picasso$Listener)>
<rx.Single$5$1: void onError(java.lang.Throwable)>
<retrofit2.http.PATCH: java.lang.String value()>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber$1: void <init>(rx.internal.operators.OperatorWindowWithTime$InexactSubscriber)>
<okhttp3.ConnectionPool: void evictAll()>
<okhttp3.internal.http.Http1xStream$ChunkedSink: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: java.util.Iterator iterator()>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$StringMethodInvoker: java.lang.Object convertArgument(java.lang.String)>
<rx.schedulers.Timestamped: java.lang.Object getValue()>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver: java.util.List getTableNames(java.lang.String)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: void soConsumerIndex(long)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: void fakeRatios()>
<rx.internal.operators.OnSubscribeUsing: java.lang.Throwable dispose(rx.functions.Action0)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$BooleanMethodInvoker: java.lang.Boolean convertArgument(java.lang.String)>
<okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>
<okhttp3.internal.framed.ErrorCode: okhttp3.internal.framed.ErrorCode fromSpdy3Rst(int)>
<okhttp3.Request$Builder: okhttp3.Request$Builder get()>
<okhttp3.Dns: java.util.List lookup(java.lang.String)>
<com.squareup.picasso.RequestHandler: com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request,int)>
<rx.internal.operators.OnSubscribeDelaySubscription: void <init>(rx.Observable,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.elements.Descriptor: boolean checkThreadAccess()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean removeAll(java.util.Collection)>
<okio.RealBufferedSink$1: void <init>(okio.RealBufferedSink)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: boolean retainAll(java.util.Collection)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor$1: void <init>(com.facebook.stetho.inspector.elements.android.ViewDescriptor)>
<rx.internal.operators.OperatorSingle: void <init>(java.lang.Object)>
<rx.subjects.ReplaySubject$ReplayState: void call(rx.Subscriber)>
<com.facebook.stetho.inspector.protocol.module.HeapProfiler: void <init>()>
<com.facebook.stetho.inspector.protocol.module.DOM: void hideHighlight(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<okhttp3.internal.http.HttpDate$1: java.text.DateFormat initialValue()>
<okhttp3.internal.framed.Hpack$Writer: int evictToRecoverBytes(int)>
<okio.Base64: void <init>()>
<rx.Completable$18: void <init>(rx.Completable,rx.functions.Action0)>
<okio.ByteString: byte getByte(int)>
<okhttp3.internal.cache.DiskLruCache: void trimToSize()>
<okhttp3.internal.platform.Jdk9Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>
<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>
<rx.internal.operators.OperatorDelay$1$2: void <init>(rx.internal.operators.OperatorDelay$1,java.lang.Throwable)>
<rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber: void tryEmit()>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void onMessage(com.facebook.stetho.websocket.SimpleSession,java.lang.String)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager$2: void call()>
<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder noStore()>
<rx.internal.operators.OperatorMulticast$1: void call(java.lang.Object)>
<rx.internal.operators.OnSubscribeRedo$1$1: rx.Notification call(rx.Notification)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4: void <init>(rx.internal.operators.OperatorOnErrorResumeNextViaFunction,rx.Subscriber,rx.internal.producers.ProducerArbiter,rx.subscriptions.SerialSubscription)>
<rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber: void <init>(rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator,int)>
<rx.internal.operators.OperatorSwitch$InnerSubscriber: void setProducer(rx.Producer)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$$Lambda$3: java.lang.Runnable lambdaFactory$(fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter,fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Drink)>
<rx.Completable$17$1: void onCompleted()>
<rx.internal.operators.OperatorSingle: void <init>(boolean,java.lang.Object)>
<rx.subjects.ReplaySubject$ReplayState: void onNext(java.lang.Object)>
<rx.Observable: rx.Observable observeOn(rx.Scheduler,boolean)>
<rx.observers.TestSubscriber: java.util.List getOnCompletedEvents()>
<com.facebook.stetho.inspector.network.NetworkPeerManager: com.facebook.stetho.inspector.network.NetworkPeerManager getOrCreateInstance(android.content.Context)>
<rx.Observable: rx.Observable concatEager(java.lang.Iterable,int)>
<rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber: void onNext(rx.Completable)>
<rx.Completable$4$1: void onError(java.lang.Throwable)>
<okio.GzipSink: void write(okio.Buffer,long)>
<rx.observables.BlockingObservable$4: void onNext(java.lang.Object)>
<rx.Completable: rx.Single toSingleDefault(java.lang.Object)>
<rx.internal.operators.SingleOperatorZip$1: void call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.Document: void updateListenerChildren(com.facebook.stetho.inspector.elements.Document$ChildEventingList,java.util.List,com.facebook.stetho.common.Accumulator)>
<com.facebook.stetho.common.ListUtil$FourItemImmutableList: java.lang.Object get(int)>
<com.facebook.stetho.common.android.ViewUtil: android.app.Activity tryGetActivity(android.view.View)>
<rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector$1: void onCompleted()>
<rx.internal.operators.OnSubscribeFromIterable: void call(rx.Subscriber)>
<rx.Completable: rx.Completable observeOn(rx.Scheduler)>
<rx.internal.operators.OperatorTimeoutWithSelector$1$1: void onCompleted()>
<rx.internal.util.unsafe.SpscUnboundedArrayQueueConsumerColdField: void <init>()>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: void <init>(rx.Subscriber,java.lang.Long,rx.functions.Action0,rx.BackpressureOverflow$Strategy)>
<com.facebook.stetho.inspector.protocol.module.Network$Initiator: void <init>()>
<com.squareup.picasso.Picasso: void cancelRequest(com.squareup.picasso.Target)>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: void <clinit>()>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Table: void <init>(com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder,com.facebook.stetho.inspector.database.ContentProviderSchema$1)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$5: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.DocumentProviderListener: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String)>
<okhttp3.internal.framed.Http2$Reader: void readPriority(okhttp3.internal.framed.FrameReader$Handler,int)>
<rx.observables.ConnectableObservable: rx.Subscription connect()>
<rx.internal.util.unsafe.SpmcArrayQueueMidPad: void <init>(int)>
<okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult[] values()>
<com.facebook.stetho.inspector.elements.DescriptorMap: com.facebook.stetho.inspector.elements.DescriptorMap beginInit()>
<rx.observables.SyncOnSubscribe$4: void <init>(rx.functions.Action1)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: java.lang.Object getRootElement()>
<com.facebook.stetho.common.LogUtil: void d(java.lang.String,java.lang.Object[])>
<okhttp3.ResponseBody: long contentLength()>
<com.facebook.stetho.server.LocalSocketServer: void run()>
<rx.Completable: rx.Completable amb(rx.Completable[])>
<rx.Observable: rx.Observable concatEager(rx.Observable,rx.Observable)>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void replaceSubject()>
<com.facebook.stetho.inspector.protocol.module.DOM$4: void <init>(com.facebook.stetho.inspector.protocol.module.DOM,com.facebook.stetho.inspector.protocol.module.DOM$ResolveNodeRequest)>
<com.facebook.stetho.dumpapp.Framer: void <init>(java.io.InputStream,java.io.OutputStream)>
<rx.observers.SafeSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorUnsubscribeOn$2$1: void <init>(rx.internal.operators.OperatorUnsubscribeOn$2,rx.Scheduler$Worker)>
<com.squareup.picasso.BitmapHunter: java.lang.Exception getException()>
<com.facebook.stetho.inspector.protocol.module.Network$InitiatorType: com.facebook.stetho.inspector.protocol.module.Network$InitiatorType[] values()>
<com.facebook.stetho.inspector.protocol.module.Page$ResourceType: com.facebook.stetho.inspector.protocol.module.Page$ResourceType[] values()>
<retrofit2.OkHttpCall$ExceptionCatchingRequestBody$1: void <init>(retrofit2.OkHttpCall$ExceptionCatchingRequestBody,okio.Source)>
<rx.internal.operators.OperatorGroupBy$State: void <init>(int,rx.internal.operators.OperatorGroupBy$GroupBySubscriber,java.lang.Object,boolean)>
<rx.internal.util.unsafe.UnsafeAccess: int getAndIncrementInt(java.lang.Object,long)>
<okhttp3.internal.framed.FrameReader$Handler: void goAway(int,okhttp3.internal.framed.ErrorCode,okio.ByteString)>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func7)>
<rx.exceptions.CompositeException: void printStackTrace(rx.exceptions.CompositeException$PrintStreamOrWriter)>
<rx.Observable: rx.Observable repeat()>
<rx.internal.operators.OnSubscribeAmb: rx.Observable$OnSubscribe amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.CompletableOnSubscribeMerge: void call(java.lang.Object)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber: void <init>(rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber,int)>
<rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber: void onNext(java.lang.Object)>
<rx.android.schedulers.HandlerScheduler: void <init>(android.os.Handler)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: void <init>(int)>
<rx.observers.TestSubscriber: void assertValue(java.lang.Object)>
<okio.RealBufferedSource: void require(long)>
<com.facebook.stetho.inspector.protocol.module.Runtime$1: void <init>()>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver: void onCompleted()>
<rx.internal.operators.OperatorMapPair: rx.functions.Func1 convertSelector(rx.functions.Func1)>
<retrofit2.adapter.rxjava.SingleHelper$1: java.lang.Object adapt(retrofit2.Call)>
<okio.RealBufferedSource: boolean request(long)>
<okhttp3.MultipartBody$Part: okhttp3.MultipartBody$Part create(okhttp3.Headers,okhttp3.RequestBody)>
<okhttp3.internal.http.HttpHeaders: java.util.Set varyFields(okhttp3.Headers)>
<rx.internal.util.atomic.SpscAtomicArrayQueue: void <init>(int)>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String)>
<com.squareup.picasso.Utils: int getResourceId(android.content.res.Resources,com.squareup.picasso.Request)>
<com.squareup.picasso.Request: java.lang.String plainId()>
<okhttp3.Request$Builder: okhttp3.Request$Builder head()>
<rx.internal.operators.BlockingOperatorToFuture$1: void onError(java.lang.Throwable)>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$2: void onNext(java.lang.Object)>
<retrofit2.Utils: int hashCodeOrZero(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.BufferUntilSubscriber$1: void onCompleted()>
<rx.internal.operators.OperatorSwitch$InnerSubscriber: void onError(java.lang.Throwable)>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin: void doSystemExit(java.util.Iterator)>
<rx.functions.Action1: void call(java.lang.Object)>
<rx.Observable: rx.Observable distinctUntilChanged()>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber: void innerComplete()>
<okhttp3.Route: boolean equals(java.lang.Object)>
<okio.Pipe$PipeSource: okio.Timeout timeout()>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void setFirst(rx.internal.operators.OperatorReplay$Node)>
<com.facebook.stetho.dumpapp.plugins.HprofDumperPlugin: java.lang.String getName()>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: java.lang.String id()>
<com.squareup.picasso.RequestHandler: boolean shouldRetry(boolean,android.net.NetworkInfo)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse: int statusCode()>
<rx.internal.util.unsafe.SpmcArrayQueueProducerField: void <init>(int)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$Listener: void onActivityAdded(android.app.Activity)>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: void emitFirst(java.lang.Object,rx.internal.operators.NotificationLite)>
<rx.Single$22$1: void <init>(rx.Single$22,rx.Subscriber,boolean,rx.Subscriber)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean retainAll(java.util.Collection)>
<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(java.lang.Object)>
<rx.internal.operators.OperatorDebounceWithTime$1: void <init>(rx.internal.operators.OperatorDebounceWithTime,rx.Subscriber,rx.subscriptions.SerialSubscription,rx.Scheduler$Worker,rx.observers.SerializedSubscriber)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: java.lang.Object poll()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator transform(com.squareup.picasso.Transformation)>
<rx.subscriptions.CompositeSubscription: boolean hasSubscriptions()>
<com.facebook.stetho.inspector.elements.DescriptorMap: com.facebook.stetho.inspector.elements.Descriptor get(java.lang.Class)>
<com.squareup.picasso.RemoteViewsAction: void error()>
<rx.internal.producers.ProducerObserverArbiter: void <init>(rx.Subscriber)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder clearResize()>
<rx.internal.operators.OperatorDematerialize$1: void onNext(rx.Notification)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void subscribeBufferToObservable(rx.Observable)>
<rx.Observable: rx.Observable window(rx.Observable)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter$1: void <init>(retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter)>
<com.squareup.picasso.Utils$ActivityManagerHoneycomb: void <init>()>
<okhttp3.internal.framed.FramedStream: boolean isOpen()>
<com.squareup.picasso.Picasso: void setDebugging(boolean)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: long lvProducerIndex()>
<rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$HoneycombImpl: void <init>(com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$1)>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$OverlayHighlighter$1: void <init>(com.facebook.stetho.inspector.elements.android.ViewHighlighter$OverlayHighlighter)>
<rx.functions.Actions$5: void <init>(rx.functions.Action4,java.lang.Object)>
<rx.internal.schedulers.ImmediateScheduler: void <init>()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginLeftHighlightDrawable: void highlightView(android.view.View)>
<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>
<com.squareup.picasso.Picasso$CleanupThread$1: void <init>(com.squareup.picasso.Picasso$CleanupThread,java.lang.Exception)>
<rx.internal.operators.OperatorMerge$MergeProducer: long produced(int)>
<rx.internal.operators.OperatorIgnoreElements: rx.internal.operators.OperatorIgnoreElements instance()>
<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>
<rx.internal.util.BackpressureDrainManager: void terminateAndDrain(java.lang.Throwable)>
<okhttp3.internal.cache.DiskLruCache$3: boolean hasNext()>
<rx.internal.util.SynchronizedQueue: boolean equals(java.lang.Object)>
<rx.internal.operators.OnSubscribeAmb: rx.Observable$OnSubscribe amb(rx.Observable,rx.Observable)>
<rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer: java.lang.String toString()>
<rx.schedulers.TestScheduler$CompareActionsByTime: void <init>()>
<com.facebook.stetho.inspector.network.CountingOutputStream: void write(byte[],int,int)>
<rx.Observable: rx.Observable sample(long,java.util.concurrent.TimeUnit)>
<okhttp3.internal.cache.DiskLruCache$Editor: void abortUnlessCommitted()>
<rx.subscriptions.Subscriptions$FutureSubscription: void unsubscribe()>
<rx.Completable$4: void call(rx.Completable$CompletableSubscriber)>
<okhttp3.ResponseBody: byte[] bytes()>
<okhttp3.internal.platform.OptionalMethod: boolean isSupported(java.lang.Object)>
<rx.Single: rx.Single takeUntil(rx.Observable)>
<rx.functions.Actions$10: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorDebounceWithSelector$1: void <init>(rx.internal.operators.OperatorDebounceWithSelector,rx.Subscriber,rx.observers.SerializedSubscriber,rx.subscriptions.SerialSubscription)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.regex.Pattern getWordBoundaryPattern()>
<rx.internal.operators.OnSubscribeConcatMap$1: void <init>(rx.internal.operators.OnSubscribeConcatMap,rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber)>
<rx.internal.operators.OperatorTimeoutWithSelector$2: rx.Subscription call(rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber,java.lang.Long,java.lang.Object,rx.Scheduler$Worker)>
<okhttp3.Cache: void trackConditionalCacheHit()>
<retrofit2.BuiltInConverters$StreamingResponseBodyConverter: void <clinit>()>
<com.squareup.picasso.PicassoExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1$2: void <init>(retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1,java.lang.Throwable)>
<rx.Single$1$1: void onSuccess(java.lang.Object)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: boolean isComplete()>
<com.facebook.stetho.inspector.elements.DocumentProvider: java.lang.Object getRootElement()>
<rx.internal.util.OpenHashSet: void <init>(int)>
<rx.internal.schedulers.NewThreadWorker: rx.internal.schedulers.ScheduledAction scheduleActual(rx.functions.Action0,long,java.util.concurrent.TimeUnit,rx.internal.util.SubscriptionList)>
<okhttp3.internal.framed.FramedConnection: void shutdown(okhttp3.internal.framed.ErrorCode)>
<com.facebook.stetho.inspector.elements.NodeDescriptor: void getAttributes(java.lang.Object,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<okhttp3.internal.framed.FramedStream: void waitForIo()>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat: void <clinit>()>
<rx.internal.operators.CachedObservable$CacheState: void onNext(java.lang.Object)>
<rx.Single: rx.Single using(rx.functions.Func0,rx.functions.Func1,rx.functions.Action1,boolean)>
<com.facebook.stetho.inspector.protocol.module.DOMStorage$DomStorageItemRemovedParams: void <init>()>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber: void error(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Runtime$CallFunctionOnRequest: void <init>()>
<okhttp3.MultipartBody$Builder: okhttp3.MultipartBody$Builder addPart(okhttp3.RequestBody)>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer$DisconnectObservable: void <init>()>
<com.squareup.picasso.Utils: boolean hasPermission(android.content.Context,java.lang.String)>
<okhttp3.internal.framed.Spdy3$Writer: void goAway(int,okhttp3.internal.framed.ErrorCode,byte[])>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: void combine(java.lang.Object,int)>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void doTree(java.io.PrintStream)>
<rx.Observable: rx.Observable combineLatest(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func7)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginBottomHighlightDrawable: void draw(android.graphics.Canvas)>
<okhttp3.internal.framed.Hpack$Reader: void readLiteralHeaderWithoutIndexingIndexedName(int)>
<okio.Buffer: okio.Buffer writeString(java.lang.String,java.nio.charset.Charset)>
<rx.internal.util.BackpressureDrainManager$BackpressureQueueCallback: java.lang.Object poll()>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func1)>
<retrofit2.Retrofit: retrofit2.Converter stringConverter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>
<com.facebook.stetho.Stetho$PluginBuilder: void remove(java.lang.String)>
<rx.Observable: rx.Observable timeInterval(rx.Scheduler)>
<rx.internal.operators.BackpressureUtils: long produced(java.util.concurrent.atomic.AtomicLong,long)>
<rx.internal.operators.OnSubscribeDetach: void call(rx.Subscriber)>
<rx.Single$4: void <init>(java.util.concurrent.Callable)>
<com.squareup.picasso.Dispatcher: void flushFailedActions()>
<retrofit2.http.HTTP: boolean hasBody()>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SerializedSubject: void <init>(rx.Observer,rx.Observable)>
<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator acquireCachedAttributeAccumulator()>
<com.facebook.stetho.server.http.LightHttpMessage: java.lang.String getFirstHeaderValue(java.lang.String)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: com.facebook.stetho.inspector.elements.android.ApplicationDescriptor$ElementContext getContext(android.app.Application)>
<okhttp3.internal.framed.FramedStream$FramedDataSource: void <clinit>()>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void onError(java.lang.Throwable)>
<okhttp3.internal.io.FileSystem: void deleteContents(java.io.File)>
<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: void <init>(com.facebook.stetho.inspector.protocol.module.DOM,com.facebook.stetho.inspector.protocol.module.DOM$1)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: int size()>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$3: void call(java.lang.Object)>
<rx.Completable: rx.Observable andThen(rx.Observable)>
<com.facebook.stetho.common.android.AccessibilityUtil: boolean isTopLevelScrollItem(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.View)>
<rx.internal.util.SynchronizedQueue: java.lang.Object[] toArray()>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void doUnsubscribe()>
<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache$Snapshot snapshot()>
<okhttp3.internal.framed.FramedConnection$Reader: void windowUpdate(int,long)>
<rx.internal.util.atomic.SpscAtomicArrayQueue: long lvProducerIndex()>
<com.squareup.picasso.LruCache: android.graphics.Bitmap get(java.lang.String)>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: rx.internal.util.atomic.LinkedQueueNode lpConsumerNode()>
<rx.plugins.RxJavaCompletableExecutionHook: void <init>()>
<okhttp3.Cookie: void <init>(okhttp3.Cookie$Builder)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: long currentProducerIndex()>
<rx.Single$20: void <init>(rx.Single,rx.Completable)>
<rx.internal.operators.OperatorIgnoreElements$Holder: void <init>()>
<com.squareup.picasso.Utils: boolean isMain()>
<okio.Buffer: okio.Buffer writeIntLe(int)>
<com.facebook.stetho.inspector.protocol.module.Page: void startScreencast(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<retrofit2.BuiltInConverters$BufferingResponseBodyConverter: void <clinit>()>
<rx.internal.operators.OperatorWindowWithSize$WindowSkip: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.List getViewProperties()>
<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder noTransform()>
<com.squareup.picasso.RequestHandler: void <init>()>
<rx.internal.operators.OperatorElementAt$1: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorToMultimap$DefaultMultimapCollectionFactory: java.lang.Object call(java.lang.Object)>
<okhttp3.MultipartBody$Part: okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String,okhttp3.RequestBody)>
<rx.Observable: rx.Observable filter(rx.functions.Func1)>
<fr.masciulli.drinks.net.WebApi: rx.Observable getLiquors()>
<okhttp3.internal.connection.RouteSelector: boolean hasNextPostponed()>
<rx.internal.util.LinkedArrayList: int indexInTail()>
<com.squareup.picasso.RemoteViewsAction$NotificationAction: void update()>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: java.lang.String friendlyName()>
<rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator: void onCompleted()>
<okhttp3.internal.framed.Http2$Reader: void readPing(okhttp3.internal.framed.FrameReader$Handler,int,byte,int)>
<okhttp3.Request$Builder: okhttp3.Request$Builder headers(okhttp3.Headers)>
<okhttp3.TlsVersion: okhttp3.TlsVersion[] values()>
<rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer: void truncateFinal()>
<com.facebook.stetho.server.http.LightHttpBody: void <init>()>
<okhttp3.internal.framed.FrameReader$Handler: void priority(int,int,int,boolean)>
<com.facebook.stetho.inspector.elements.android.WindowDescriptor: void <init>()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void getAccessibilityStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<rx.internal.operators.OperatorSerialize: rx.internal.operators.OperatorSerialize instance()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MainHighlightDrawable: void draw(android.graphics.Canvas)>
<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>
<com.squareup.picasso.RemoteViewsAction$AppWidgetAction: java.lang.Object getTarget()>
<com.facebook.stetho.common.android.FragmentAccessor: int getId(java.lang.Object)>
<okio.Pipe$PipeSink: void close()>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: int getItemCount()>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: rx.internal.util.atomic.LinkedQueueNode lvConsumerNode()>
<okhttp3.Cookie: boolean matches(okhttp3.HttpUrl)>
<rx.observables.BlockingObservable$2: java.util.Iterator iterator()>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void requestRemaining(long)>
<okhttp3.Challenge: void <init>(java.lang.String,java.lang.String)>
<rx.internal.operators.OperatorTakeLastOne$ParentSubscriber: void onCompleted()>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: java.io.File resolvePossibleAppStoragePath(android.content.Context,java.lang.String)>
<rx.internal.operators.OperatorSkipWhile: rx.functions.Func2 toPredicate2(rx.functions.Func1)>
<rx.internal.operators.OperatorDoAfterTerminate: java.lang.Object call(java.lang.Object)>
<retrofit2.Response: okhttp3.ResponseBody errorBody()>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1: void onCompleted()>
<rx.Observable: rx.Observable onBackpressureBuffer()>
<com.facebook.stetho.inspector.runtime.RhinoDetectingRuntimeReplFactory: com.facebook.stetho.inspector.console.RuntimeReplFactory findRhinoReplFactory(android.content.Context)>
<rx.Single: rx.Single zip(rx.Single,rx.Single,rx.Single,rx.Single,rx.functions.Func4)>
<rx.internal.util.SynchronizedQueue: void clear()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: com.facebook.stetho.inspector.elements.Descriptor getSuper()>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void printHeaderVisual(int,java.io.PrintStream)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: java.lang.String getNodeName(java.lang.Object)>
<okhttp3.Challenge: java.lang.String realm()>
<fr.masciulli.drinks.ui.adapter.holder.RelatedHeaderViewHolder: android.widget.Button getWikipediaButton()>
<rx.plugins.RxJavaPlugins: rx.plugins.RxJavaSingleExecutionHook getSingleExecutionHook()>
<okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>
<okhttp3.HttpUrl: okhttp3.HttpUrl get(java.net.URI)>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1: void onCompleted()>
<rx.internal.operators.CachedObservable: void <init>(rx.Observable$OnSubscribe,rx.internal.operators.CachedObservable$CacheState)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$NoOpViewHighlightOverlays: void removeHighlight(android.view.View)>
<okio.SegmentedByteString: okio.ByteString toAsciiLowercase()>
<rx.internal.operators.OperatorDebounceWithTime$DebounceState: void <init>()>
<okhttp3.MultipartBody: void <init>(okio.ByteString,okhttp3.MediaType,java.util.List)>
<rx.internal.operators.OperatorWindowWithObservableFactory: java.lang.Object call(java.lang.Object)>
<retrofit2.adapter.rxjava.CompletableHelper$CompletableCallOnSubscribe: void <init>(retrofit2.Call)>
<rx.observables.AsyncOnSubscribe$7: rx.Observable call(rx.Observable)>
<rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber: void subscribeToAlternate()>
<okhttp3.internal.framed.HeadersMode: okhttp3.internal.framed.HeadersMode[] values()>
<rx.internal.util.InternalObservableUtils: rx.functions.Func0 createReplaySupplier(rx.Observable,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.squareup.picasso.Stats$StatsHandler: void <init>(android.os.Looper,com.squareup.picasso.Stats)>
<okhttp3.CertificatePinner: void check(java.lang.String,java.security.cert.Certificate[])>
<com.facebook.stetho.websocket.FrameHelper: com.facebook.stetho.websocket.Frame createPongFrame(byte[],int)>
<okhttp3.RealCall: okhttp3.Request request()>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: void remove(android.app.Activity)>
<com.squareup.picasso.BitmapHunter: com.squareup.picasso.Picasso getPicasso()>
<okhttp3.ResponseBody: okhttp3.ResponseBody create(okhttp3.MediaType,java.lang.String)>
<rx.internal.util.InternalObservableUtils$EqualsWithFunc1: void <init>(java.lang.Object)>
<rx.Single$19$1$1: void <init>(rx.Single$19$1)>
<retrofit2.http.FieldMap: boolean encoded()>
<retrofit2.http.Field: java.lang.String value()>
<rx.internal.operators.OperatorReplay$3$1: void onCompleted()>
<rx.singles.BlockingSingle: java.util.concurrent.Future toFuture()>
<okhttp3.internal.framed.Settings: int getUploadBandwidth(int)>
<rx.internal.producers.QueuedProducer: void <init>(rx.Subscriber)>
<rx.functions.Functions$12: void <init>(rx.functions.Action1)>
<rx.internal.operators.OperatorTake$1: void <init>(rx.internal.operators.OperatorTake,rx.Subscriber)>
<rx.Completable: rx.Completable compose(rx.Completable$CompletableTransformer)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$5: rx.functions.Func1 lambdaFactory$(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<com.facebook.stetho.inspector.database.ContentProviderDatabaseDriver: java.util.List getDatabaseNames()>
<rx.Observable: rx.Observable flatMapIterable(rx.functions.Func1,rx.functions.Func2)>
<rx.internal.operators.OperatorTakeUntil$2: void <init>(rx.internal.operators.OperatorTakeUntil,rx.Subscriber)>
<okhttp3.internal.framed.FramedConnection$Reader$1: void execute()>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void replay()>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: void cancel(java.util.Queue)>
<rx.internal.operators.OperatorCast$CastSubscriber: void <init>(rx.Subscriber,java.lang.Class)>
<okhttp3.internal.connection.RouteSelector: java.lang.String getHostString(java.net.InetSocketAddress)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: java.util.Iterator iterator()>
<rx.schedulers.TimeInterval: void <init>(long,java.lang.Object)>
<okhttp3.RequestBody: long contentLength()>
<rx.internal.util.ObjectPool: void start()>
<rx.internal.operators.OperatorWithLatestFrom: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber: void endWindow(rx.internal.operators.OperatorWindowWithStartEndObservable$SerializedSubject)>
<com.facebook.stetho.common.android.HandlerUtil: java.lang.Object postAndWait(android.os.Handler,com.facebook.stetho.common.UncheckedCallable)>
<rx.subjects.UnicastSubject$State: void onNext(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatUtil: java.lang.Object findFragmentForViewInFragment(com.facebook.stetho.common.android.FragmentCompat,java.lang.Object,android.view.View)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1: void <init>(rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4)>
<rx.internal.operators.OperatorSkipLast$1: void onCompleted()>
<rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl: void <init>(rx.functions.Func0,rx.functions.Func3)>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func2)>
<rx.internal.operators.OperatorScan$InitialProducer: void onCompleted()>
<rx.internal.util.atomic.LinkedQueueNode: java.lang.Object getAndNullValue()>
<com.facebook.stetho.inspector.protocol.module.Worker: void <init>()>
<com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder: void <init>(com.facebook.stetho.inspector.elements.ShadowDocument)>
<com.facebook.stetho.inspector.protocol.module.CSS$CSSStyle: void <init>()>
<com.squareup.picasso.Dispatcher: void performPauseTag(java.lang.Object)>
<rx.functions.Actions$6: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<okio.Timeout: long deadlineNanoTime()>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap: void <init>(rx.Subscriber,int,int)>
<rx.internal.operators.BlockingOperatorNext$NextObserver: rx.Notification takeNext()>
<okhttp3.internal.cache.DiskLruCache: okhttp3.internal.cache.DiskLruCache$Editor edit(java.lang.String)>
<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder addEncoded(java.lang.String,java.lang.String)>
<okhttp3.internal.http.RetryAndFollowUpInterceptor: boolean isRecoverable(java.io.IOException,boolean)>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler: java.lang.Object handleUpdateDelete(int)>
<rx.internal.operators.OperatorDelay: void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OperatorToMap: void <init>(rx.functions.Func1,rx.functions.Func1)>
<rx.functions.Actions: rx.functions.Func0 toFunc(rx.functions.Action0)>
<rx.internal.operators.OnSubscribeFromArray$FromArrayProducer: void request(long)>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer$DisconnectObservable: void onDisconnect()>
<com.squareup.picasso.Picasso: void shutdown()>
<okhttp3.internal.http.Http2xStream: okhttp3.Response$Builder readSpdy3HeadersList(java.util.List)>
<rx.BackpressureOverflow$DropLatest: boolean mayAttemptDrop()>
<okhttp3.Cache$Entry: boolean matches(okhttp3.Request,okhttp3.Response)>
<okio.BufferedSink: okio.BufferedSink write(byte[],int,int)>
<com.squareup.picasso.GetAction: void complete(android.graphics.Bitmap,com.squareup.picasso.Picasso$LoadedFrom)>
<retrofit2.ServiceMethod$Builder: java.lang.RuntimeException methodError(java.lang.String,java.lang.Object[])>
<rx.Observable: rx.Observable zip(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func6)>
<com.squareup.picasso.Picasso: void defer(android.widget.ImageView,com.squareup.picasso.DeferredRequestCreator)>
<com.facebook.stetho.inspector.protocol.module.Runtime$PropertyDescriptor: void <init>()>
<rx.internal.util.BackpressureDrainManager: boolean isTerminated()>
<rx.observers.TestSubscriber: void assertError(java.lang.Class)>
<com.facebook.stetho.inspector.jsonrpc.DisconnectReceiver: void onDisconnect()>
<okhttp3.internal.http.HttpHeaders: okhttp3.Headers varyHeaders(okhttp3.Response)>
<com.facebook.stetho.inspector.protocol.module.Debugger: void setPauseOnExceptions(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: long lvConsumerIndex()>
<com.facebook.stetho.inspector.network.PrettyPrinterDisplayType: void <init>(java.lang.String,int,com.facebook.stetho.inspector.protocol.module.Page$ResourceType)>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$NoopHighlighter: void setHighlightedView(android.view.View,int)>
<rx.internal.operators.OperatorGroupBy$State: void call(java.lang.Object)>
<rx.internal.operators.BlockingOperatorLatest$1: java.util.Iterator iterator()>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: void <init>(android.content.Context)>
<okhttp3.Cookie: okhttp3.Cookie parse(long,okhttp3.HttpUrl,java.lang.String)>
<retrofit2.BuiltInConverters$RequestBodyConverter: okhttp3.RequestBody convert(okhttp3.RequestBody)>
<rx.observers.TestSubscriber: rx.observers.TestSubscriber create(rx.Observer,long)>
<rx.Single: rx.Single zip(rx.Single,rx.Single,rx.functions.Func2)>
<com.facebook.stetho.dumpapp.Framer$FramingInputStream: int read(byte[],int,int)>
<okhttp3.logging.HttpLoggingInterceptor: okhttp3.logging.HttpLoggingInterceptor setLevel(okhttp3.logging.HttpLoggingInterceptor$Level)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode: void <init>(java.lang.Object,long)>
<okhttp3.Cache: int requestCount()>
<retrofit2.Utils$ParameterizedTypeImpl: java.lang.String toString()>
<rx.functions.Actions: rx.functions.FuncN toFunc(rx.functions.ActionN)>
<rx.Single$18: void onNext(java.lang.Object)>
<com.facebook.stetho.server.SocketLike: java.io.OutputStream getOutput()>
<rx.internal.util.IndexedRingBuffer: void unsubscribe()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$PaddingRightHighlightDrawable: void <init>()>
<rx.internal.util.ObjectPool: void returnObject(java.lang.Object)>
<com.squareup.picasso.Utils$OkHttpLoaderCreator: void <init>()>
<com.facebook.stetho.inspector.elements.android.WindowDescriptor: void onGetChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<com.facebook.stetho.inspector.network.MimeMatcher: java.lang.Object match(java.lang.String)>
<rx.internal.operators.OperatorTakeLast: java.lang.Object call(java.lang.Object)>
<rx.Single$2: void <init>(rx.Single,rx.Observable$Operator)>
<okhttp3.internal.cache.DiskLruCache$4: okio.Timeout timeout()>
<rx.internal.util.SubscriptionList: void <init>(rx.Subscription)>
<rx.Observable: rx.Observable concatEager(rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.Observable: rx.Observable replay(rx.functions.Func1,int,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool: rx.internal.schedulers.CachedThreadScheduler$ThreadWorker get()>
<rx.subscriptions.SerialSubscription: void set(rx.Subscription)>
<okio.RealBufferedSink$1: void write(byte[],int,int)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager: void init()>
<rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer: java.lang.Object leaveTransform(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.HeapProfiler: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getProfileHeaders(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef: void <init>()>
<okio.DeflaterSink: void close()>
<rx.observers.Observers: rx.Observer create(rx.functions.Action1,rx.functions.Action1)>
<rx.Completable: boolean await(long,java.util.concurrent.TimeUnit)>
<rx.Observable: rx.Observable retryWhen(rx.functions.Func1)>
<okhttp3.HttpUrl: boolean percentEncoded(java.lang.String,int,int)>
<rx.internal.operators.OperatorSwitch$HolderDelayError: void <clinit>()>
<rx.internal.operators.OperatorAsObservable: rx.internal.operators.OperatorAsObservable instance()>
<rx.observers.TestSubscriber$1: void onNext(java.lang.Object)>
<rx.Observable: rx.Observable concatDelayError(java.lang.Iterable)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray lvNext(java.util.concurrent.atomic.AtomicReferenceArray)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: void <clinit>()>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber: void next()>
<com.facebook.stetho.inspector.elements.Document: void hideHighlight()>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor: void onHook(java.lang.Object)>
<com.squareup.picasso.MarkableInputStream: long skip(long)>
<com.facebook.stetho.common.android.FragmentCompatFramework: com.facebook.stetho.common.android.FragmentCompat$FragmentManagerAccessorViaReflection forFragmentManager()>
<rx.subjects.TestSubject$1: void <init>(rx.subjects.SubjectSubscriptionManager)>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void hook(java.lang.Object)>
<rx.internal.util.unsafe.SpmcArrayQueueProducerField: void <clinit>()>
<okhttp3.FormBody: int size()>
<rx.observables.GroupedObservable: java.lang.Object getKey()>
<rx.internal.operators.OperatorZip: void <init>(rx.functions.Func9)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$AutomaticTracker$AutomaticTrackerICSAndBeyond: void unregister()>
<rx.internal.operators.OperatorTakeWhile: rx.Subscriber call(rx.Subscriber)>
<okio.Buffer: long readAll(okio.Sink)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter$2: void <init>(retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter)>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap: void onError(java.lang.Throwable)>
<okhttp3.Cache$1: okhttp3.internal.cache.CacheRequest put(okhttp3.Response)>
<com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent acquireChildNodeInsertedEvent()>
<com.facebook.stetho.inspector.elements.android.ActivityDescriptor: android.view.View getViewForHighlighting(java.lang.Object)>
<rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber: void onNext(java.lang.Object)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void onDrinksRetrieved(java.util.List)>
<com.facebook.stetho.inspector.protocol.module.Page: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<okhttp3.internal.framed.Spdy3$Reader: java.io.IOException ioException(java.lang.String,java.lang.Object[])>
<rx.internal.operators.OperatorDelay$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.android.ViewGroupDescriptor: boolean isChildVisible(android.view.View)>
<rx.internal.operators.OperatorOnBackpressureLatest: rx.Subscriber call(rx.Subscriber)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: fr.masciulli.drinks.ui.adapter.holder.TileViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object[])>
<okhttp3.internal.framed.Ping: long roundTripTime()>
<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>
<rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker: rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<rx.subscriptions.Subscriptions$FutureSubscription: boolean isUnsubscribed()>
<rx.Observable: rx.Observable skipWhile(rx.functions.Func1)>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: void handleVersion(com.facebook.stetho.server.http.LightHttpResponse)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: void <init>(int)>
<okhttp3.internal.framed.FramedConnection: void <init>(okhttp3.internal.framed.FramedConnection$Builder)>
<rx.internal.util.ExceptionsUtils: boolean isTerminated(java.lang.Throwable)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: java.lang.String headerName(int)>
<com.squareup.picasso.ContentStreamRequestHandler: void <init>(android.content.Context)>
<rx.internal.operators.OperatorTakeLastTimed: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.DialogDescriptor: void <init>()>
<rx.internal.schedulers.TrampolineScheduler$TimedAction: int compareTo(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$DialogFragmentAccessorSupportLib: void <init>()>
<okhttp3.Cookie: void <init>(java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor: void onUnhook(android.widget.TextView)>
<com.facebook.stetho.inspector.network.NetworkPeerManager$1: void onFirstPeerRegistered()>
<rx.Completable: rx.Completable onErrorComplete(rx.functions.Func1)>
<rx.internal.operators.OperatorSerialize: void <init>()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void onHook(java.lang.Object)>
<rx.Observable: rx.Observable timestamp(rx.Scheduler)>
<rx.internal.util.InternalObservableUtils$ErrorNotImplementedAction: void call(java.lang.Throwable)>
<rx.internal.operators.CompletableOnSubscribeMerge: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorTimeInterval: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterExecutorHolder: void ensureInitialized()>
<rx.Notification: java.lang.Object getValue()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: java.lang.String getContentType(com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorHeaders)>
<rx.internal.util.SynchronizedQueue: void <init>()>
<rx.internal.util.ExceptionsUtils: rx.internal.util.ExceptionsUtils valueOf(java.lang.String)>
<retrofit2.Platform$IOS: retrofit2.CallAdapter$Factory defaultCallAdapterFactory(java.util.concurrent.Executor)>
<rx.internal.util.ScalarSynchronousSingle$1: void call(rx.SingleSubscriber)>
<com.facebook.stetho.dumpapp.plugins.HprofDumperPlugin: void writeHprof(java.io.File)>
<okhttp3.internal.framed.Http2$Writer: void writeContinuationFrames(int,long)>
<rx.Single$5$1: void <init>(rx.Single$5,rx.SingleSubscriber)>
<rx.internal.operators.OperatorMapPair$MapPairSubscriber: void onCompleted()>
<rx.Single: rx.Single timeout(long,java.util.concurrent.TimeUnit)>
<rx.observables.BlockingObservable$4: void onError(java.lang.Throwable)>
<rx.internal.util.atomic.MpscLinkedAtomicQueue: void <init>()>
<okhttp3.internal.connection.StreamAllocation: void streamFailed(java.io.IOException)>
<rx.observables.SyncOnSubscribe$4: java.lang.Void call(java.lang.Void,rx.Observer)>
<rx.subjects.TestSubject: void _onCompleted()>
<okio.GzipSink: void <init>(okio.Sink)>
<rx.Completable$21: void call(java.lang.Object)>
<rx.internal.operators.CompletableOnSubscribeMerge: java.lang.Throwable collectErrors(java.util.Queue)>
<com.facebook.stetho.inspector.elements.Document$5$1: void <init>(com.facebook.stetho.inspector.elements.Document$5)>
<okhttp3.ResponseBody: java.io.InputStream byteStream()>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap: void call()>
<rx.internal.operators.OperatorZip$ZipSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.BlockingOperatorToFuture$2: java.lang.Object get(long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.BufferUntilSubscriber$State: boolean casObserverRef(rx.Observer,rx.Observer)>
<rx.Completable: void unsafeSubscribe(rx.Subscriber)>
<com.squareup.picasso.Request: void <clinit>()>
<rx.internal.operators.OperatorDistinct$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.network.NetworkPeerManager$1: void onLastPeerUnregistered()>
<com.squareup.picasso.Picasso$Priority: void <clinit>()>
<rx.internal.operators.OperatorSerialize$1: void <init>(rx.internal.operators.OperatorSerialize,rx.Subscriber,rx.Subscriber)>
<okhttp3.internal.cache.DiskLruCache: java.util.Iterator snapshots()>
<rx.internal.operators.OperatorCast$CastSubscriber: void onCompleted()>
<rx.Single$22: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void logDispatchException(com.facebook.stetho.inspector.jsonrpc.JsonRpcException)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: int calcElementOffset(long,int)>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void innerCompleted(long)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: void adjustLookAheadStep(int)>
<rx.Observable: rx.Observable onBackpressureBuffer(long)>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void onAttributeRemoved(java.lang.Object,java.lang.String)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.FragmentDescriptor: void onGetAttributes(java.lang.Object,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<okio.BufferedSource: long readDecimalLong()>
<okio.ForwardingTimeout: okio.Timeout deadlineNanoTime(long)>
<rx.exceptions.CompositeException$WrappedPrintStream: void <init>(java.io.PrintStream)>
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder validateEagerly(boolean)>
<com.squareup.picasso.LruCache: void <init>(android.content.Context)>
<rx.BackpressureOverflow: void <init>()>
<rx.internal.operators.OperatorBufferWithTime: java.lang.Object call(java.lang.Object)>
<rx.Single$13: java.lang.Object call(java.lang.Object[])>
<okhttp3.Challenge: boolean equals(java.lang.Object)>
<com.facebook.stetho.websocket.SimpleEndpoint: void onOpen(com.facebook.stetho.websocket.SimpleSession)>
<com.facebook.stetho.inspector.protocol.module.Runtime$EvaluateResponse: void <init>(com.facebook.stetho.inspector.protocol.module.Runtime$1)>
<rx.Observable: rx.Observable onExceptionResumeNext(rx.Observable)>
<rx.observables.BlockingObservable$7: void call()>
<rx.observables.AsyncOnSubscribe$1: java.lang.Object call(java.lang.Object,java.lang.Long,rx.Observer)>
<rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture: void <init>(java.util.concurrent.Future)>
<okio.BufferedSink: okio.BufferedSink write(okio.ByteString)>
<com.squareup.picasso.MediaStoreRequestHandler$PicassoKind: com.squareup.picasso.MediaStoreRequestHandler$PicassoKind[] values()>
<retrofit2.Utils$WildcardTypeImpl: int hashCode()>
<com.facebook.stetho.common.LogUtil: void w(java.lang.String)>
<com.facebook.stetho.common.Util: void throwIfNotNull(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker$Listener: void onActivityRemoved(android.app.Activity)>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void <init>(java.lang.Iterable)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>
<rx.internal.operators.OperatorWindowWithSize$WindowOverlap: rx.Producer createProducer()>
<rx.internal.util.atomic.SpscLinkedAtomicQueue: void <init>()>
<okio.AsyncTimeout$2: void close()>
<okhttp3.RealCall: boolean isCanceled()>
<rx.internal.operators.OperatorSampleWithTime: void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.Single$15: void <init>(rx.Single,rx.functions.Action1)>
<rx.internal.operators.BlockingOperatorToIterator: void <init>()>
<com.facebook.stetho.websocket.WebSocketSession: void signalError(java.io.IOException)>
<okio.ByteString: boolean rangeEquals(int,byte[],int,int)>
<okhttp3.internal.framed.FramedConnection: void writePing(boolean,int,int,okhttp3.internal.framed.Ping)>
<okhttp3.Dns: void <clinit>()>
<okhttp3.internal.framed.Header: boolean equals(java.lang.Object)>
<okhttp3.internal.framed.Spdy3$Writer: void rstStream(int,okhttp3.internal.framed.ErrorCode)>
<okhttp3.internal.connection.RealConnection: void buildTunneledConnection(int,int,int,okhttp3.internal.connection.ConnectionSpecSelector)>
<okhttp3.internal.framed.FrameWriter: void synStream(boolean,boolean,int,int,java.util.List)>
<rx.Single: void <init>(rx.Observable$OnSubscribe)>
<okio.RealBufferedSource$1: void close()>
<rx.subjects.ReplaySubject: rx.subjects.ReplaySubject createWithTime(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.util.unsafe.SpmcArrayQueue: java.lang.Object peek()>
<retrofit2.Response: retrofit2.Response success(java.lang.Object)>
<com.squareup.picasso.RemoteViewsAction$RemoteViewsTarget: void <init>(android.widget.RemoteViews,int)>
<rx.Completable: rx.Completable doOnTerminate(rx.functions.Action0)>
<com.squareup.picasso.NetworkPolicy: boolean isOfflineOnly(int)>
<rx.Observable: rx.Observable take(long,java.util.concurrent.TimeUnit)>
<rx.exceptions.CompositeException$WrappedPrintWriter: void <init>(java.io.PrintWriter)>
<fr.masciulli.drinks.ui.activity.LicensesActivity: void onCreate(android.os.Bundle)>
<rx.Single: rx.Single observeOn(rx.Scheduler)>
<rx.observers.TestSubscriber: void <init>(rx.Subscriber)>
<rx.Single$11: java.lang.Object call(java.lang.Object[])>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays: void highlightView(android.view.View,int)>
<com.facebook.stetho.common.android.HandlerUtil$WaitableRunnable: java.lang.Object onRun()>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: java.lang.Object getFragmentManager(java.lang.Object)>
<okio.Buffer: short readShortLe()>
<rx.internal.operators.OperatorSkipTimed: java.lang.Object call(java.lang.Object)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment$$Lambda$1: void onClick(android.view.View)>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager: void associateAsyncPrettyPrinterWithId(java.lang.String,com.facebook.stetho.inspector.network.AsyncPrettyPrinter)>
<rx.Single$22: java.lang.Object call(java.lang.Object)>
<rx.internal.util.ScalarSynchronousSingle$DirectScheduledEmission: void call(rx.SingleSubscriber)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: void <init>(com.facebook.stetho.common.android.FragmentCompatSupportLib$1)>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void onDrinksRetrieved(java.util.List)>
<rx.Single$23: void onError(java.lang.Throwable)>
<rx.Single: rx.Observable concat(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction: rx.internal.operators.OperatorOnErrorResumeNextViaFunction withSingle(rx.functions.Func1)>
<rx.Observable: rx.observables.BlockingObservable toBlocking()>
<rx.subjects.TestSubject: void _onNext(java.lang.Object)>
<rx.Single$21$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.server.CompositeInputStream: int read(byte[],int,int)>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: void lambda$onBindViewHolder$0(fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Drink,android.view.View)>
<retrofit2.converter.gson.GsonRequestBodyConverter: void <clinit>()>
<okhttp3.internal.framed.Ping: long roundTripTime(long,java.util.concurrent.TimeUnit)>
<retrofit2.BuiltInConverters$ToStringConverter: void <init>()>
<okio.BufferedSource: byte[] readByteArray(long)>
<okio.Base64: java.lang.String encode(byte[],byte[])>
<rx.Single$3: void call(java.lang.Object)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder priority(com.squareup.picasso.Picasso$Priority)>
<retrofit2.http.HTTP: java.lang.String method()>
<rx.Single$16: void <init>(rx.Single,rx.functions.Action1,rx.functions.Action1)>
<rx.internal.util.IndexedRingBuffer: void pushRemovedIndex(int)>
<rx.schedulers.TestScheduler$InnerTestScheduler: rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<rx.Single: rx.Single doOnSuccess(rx.functions.Action1)>
<com.squareup.picasso.Transformation: android.graphics.Bitmap transform(android.graphics.Bitmap)>
<com.facebook.stetho.inspector.elements.Descriptor$Host: void onAttributeRemoved(java.lang.Object,java.lang.String)>
<okhttp3.internal.framed.Settings: int getDownloadRetransRate(int)>
<okhttp3.internal.framed.Hpack$Reader: void readLiteralHeaderWithIncrementalIndexingNewName()>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso$Builder loggingEnabled(boolean)>
<rx.functions.Functions$5: java.lang.Object call(java.lang.Object[])>
<rx.internal.util.ScalarSynchronousSingle$1: void call(java.lang.Object)>
<com.facebook.stetho.inspector.network.NetworkPeerManager: com.facebook.stetho.inspector.network.AsyncPrettyPrinterRegistry getAsyncPrettyPrinterRegistry()>
<rx.internal.operators.OperatorReplay: rx.Observable multicastSelector(rx.functions.Func0,rx.functions.Func1)>
<okhttp3.Cookie$Builder: okhttp3.Cookie$Builder domain(java.lang.String)>
<okhttp3.MediaType: java.lang.String toString()>
<com.squareup.picasso.Cache: void clearKeyUri(java.lang.String)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber: void onError(java.lang.Throwable)>
<retrofit2.BuiltInConverters$VoidResponseBodyConverter: java.lang.Void convert(okhttp3.ResponseBody)>
<rx.Observable: rx.Observable throttleWithTimeout(long,java.util.concurrent.TimeUnit)>
<rx.observables.BlockingObservable: java.lang.Object lastOrDefault(java.lang.Object)>
<okhttp3.internal.framed.FrameReader$Handler: void windowUpdate(int,long)>
<com.facebook.stetho.websocket.WebSocketSession: boolean isOpen()>
<rx.internal.operators.OperatorBufferWithSize$BufferExact: void onNext(java.lang.Object)>
<okhttp3.internal.framed.FramedConnection: void writeSynResetLater(int,okhttp3.internal.framed.ErrorCode)>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void doLs(java.io.PrintStream)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentActivityAccessorSupportLib: java.lang.Object getFragmentManager(android.app.Activity)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: java.lang.Object lpElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>
<rx.subjects.ReplaySubject: java.lang.Object getValue()>
<retrofit2.http.PartMap: java.lang.String encoding()>
<com.facebook.stetho.inspector.network.RequestBodyHelper: byte[] getDisplayBody()>
<rx.Completable$4: void call(java.lang.Object)>
<rx.Single: rx.Single 'from'(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OnSubscribeTimerOnce: void call(java.lang.Object)>
<rx.internal.operators.OperatorSwitch$HolderDelayError: void <init>()>
<okhttp3.internal.framed.FramedConnection: int maxConcurrentStreams()>
<okio.AsyncTimeout$2: long read(okio.Buffer,long)>
<rx.Observable: rx.Observable merge(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.OperatorMerge$InnerSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4: void onNext(java.lang.Object)>
<rx.internal.util.unsafe.SpscLinkedQueue: void <init>()>
<okhttp3.internal.framed.HeadersMode: boolean failIfStreamPresent()>
<rx.Notification: java.lang.String toString()>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: int size()>
<rx.internal.operators.OperatorTimeInterval$1: void onCompleted()>
<com.squareup.picasso.NetworkPolicy: boolean shouldWriteToDiskCache(int)>
<com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesRequest: void <init>()>
<com.facebook.stetho.common.Util: void throwIfNot(boolean,java.lang.String,java.lang.Object[])>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$1: void <init>(com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory,java.util.concurrent.Future,com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$MatchResult)>
<rx.internal.util.unsafe.SpscArrayQueue: java.lang.Object peek()>
<rx.internal.operators.OnSubscribeAmb: void call(rx.Subscriber)>
<rx.internal.operators.OperatorScan$InitialProducer: void onNext(java.lang.Object)>
<rx.Completable: rx.Completable timeout(long,java.util.concurrent.TimeUnit,rx.Completable)>
<rx.Single$2: void call(rx.Subscriber)>
<rx.exceptions.MissingBackpressureException: void <init>(java.lang.String)>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: boolean isEmpty()>
<okio.Buffer: int select(okio.Options)>
<rx.Completable: rx.Completable doAfterTerminate(rx.functions.Action0)>
<rx.exceptions.OnErrorThrowable: boolean isValueNull()>
<rx.internal.operators.OnSubscribeConcatMap: void call(java.lang.Object)>
<rx.observers.Subscribers$4: void onError(java.lang.Throwable)>
<okhttp3.Dispatcher: void setMaxRequests(int)>
<rx.Completable: rx.Completable retry()>
<okhttp3.internal.cache.CacheInterceptor: okhttp3.Headers combine(okhttp3.Headers,okhttp3.Headers)>
<okhttp3.internal.cache.DiskLruCache: void evictAll()>
<rx.internal.operators.OnSubscribeSingle: void call(java.lang.Object)>
<okhttp3.internal.framed.Huffman: void addCode(int,int,byte)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void setAttributesAsText(java.lang.Object,java.lang.String)>
<rx.internal.operators.OnSubscribeRefCount$2: void onError(java.lang.Throwable)>
<rx.observables.BlockingObservable: java.lang.Object singleOrDefault(java.lang.Object)>
<okio.Options: void <init>(okio.ByteString[])>
<retrofit2.Utils: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>
<rx.Observable: rx.Observable lastOrDefault(java.lang.Object,rx.functions.Func1)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void onItemClick(int,java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: android.support.v4.app.FragmentManager getChildFragmentManager(android.support.v4.app.Fragment)>
<com.facebook.stetho.inspector.database.DatabaseConnectionProvider: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File)>
<rx.internal.operators.OperatorThrottleFirst: rx.Subscriber call(rx.Subscriber)>
<rx.internal.util.OpenHashSet: boolean isEmpty()>
<com.facebook.stetho.Stetho$BuilderBasedInitializer: java.lang.Iterable getDumperPlugins()>
<com.facebook.stetho.inspector.network.NetworkEventReporter: void responseReadFinished(java.lang.String)>
<com.facebook.stetho.inspector.elements.Origin: com.facebook.stetho.inspector.elements.Origin valueOf(java.lang.String)>
<rx.internal.util.SynchronizedQueue: java.lang.Object poll()>
<okhttp3.internal.io.FileSystem: void delete(java.io.File)>
<rx.internal.operators.OperatorZipIterable: void <init>(java.lang.Iterable,rx.functions.Func2)>
<rx.observers.Observers$4: void onCompleted()>
<okio.InflaterSource: long read(okio.Buffer,long)>
<com.facebook.stetho.inspector.protocol.module.DOM$Node: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<okio.ByteString: boolean endsWith(byte[])>
<okhttp3.internal.framed.NameValueBlockReader$2: int inflate(byte[],int,int)>
<okio.Buffer: java.lang.String toString()>
<rx.Completable: rx.Completable fromSingle(rx.Single)>
<okhttp3.FormBody: void writeTo(okio.BufferedSink)>
<rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber: void <init>(rx.Completable$CompletableSubscriber,java.util.Iterator)>
<rx.internal.operators.OperatorWindowWithSize$WindowSkip: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.network.PrettyPrinterDisplayType: com.facebook.stetho.inspector.network.PrettyPrinterDisplayType[] values()>
<rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef: rx.internal.util.atomic.LinkedQueueNode lvProducerNode()>
<okhttp3.internal.framed.FramedConnection$Reader$3: void <init>(okhttp3.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[],okhttp3.internal.framed.Settings)>
<rx.internal.operators.BackpressureUtils: void <init>()>
<rx.internal.operators.OperatorZip$ZipSubscriber: void <init>(rx.internal.operators.OperatorZip,rx.Subscriber,rx.internal.operators.OperatorZip$Zip,rx.internal.operators.OperatorZip$ZipProducer)>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler: java.lang.Object handleRawQuery()>
<okhttp3.internal.cache.DiskLruCache$Entry: void writeLengths(okio.BufferedSink)>
<okio.Pipe: okio.Sink sink()>
<rx.internal.operators.OperatorMaterialize$ParentSubscriber: void onNext(java.lang.Object)>
<rx.internal.producers.QueuedProducer: void <clinit>()>
<com.squareup.picasso.Cache$1: android.graphics.Bitmap get(java.lang.String)>
<rx.observers.Observers: rx.Observer empty()>
<com.facebook.stetho.common.ReflectionUtil: void <init>()>
<com.squareup.picasso.Request$Builder: void <init>(int)>
<rx.Completable: rx.Completable timeout0(long,java.util.concurrent.TimeUnit,rx.Scheduler,rx.Completable)>
<rx.internal.operators.OnSubscribeDetach$DetachSubscriber: void onError(java.lang.Throwable)>
<rx.Completable: rx.Single toSingle(rx.functions.Func0)>
<rx.Observable: rx.Observable toMap(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0)>
<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: void getAccessibilityStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$BitmapFetchRunnable: void <init>(com.facebook.stetho.inspector.screencast.ScreencastDispatcher,com.facebook.stetho.inspector.screencast.ScreencastDispatcher$1)>
<com.facebook.stetho.inspector.console.CLog: void <init>()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void <init>(com.facebook.stetho.common.android.FragmentCompat)>
<fr.masciulli.drinks.ui.activity.DrinkActivity: void <init>()>
<com.facebook.stetho.inspector.protocol.module.DOM$AttributeModifiedEvent: void <init>()>
<rx.Completable: rx.Observable endWith(rx.Observable)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$TypedMethodInvoker: java.lang.Object convertArgument(java.lang.String)>
<com.facebook.stetho.common.android.FragmentAccessor: java.lang.Object getFragmentManager(java.lang.Object)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator error(android.graphics.drawable.Drawable)>
<okhttp3.internal.framed.PushObserver$1: void <init>()>
<rx.Single: rx.Observable concat(rx.Single,rx.Single)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager: void complete(java.util.List)>
<okhttp3.internal.framed.FramedStream$FramedDataSource: void <init>(okhttp3.internal.framed.FramedStream,long)>
<com.facebook.stetho.json.ObjectMapper: java.lang.Enum getEnumValue(java.lang.String,java.lang.Class)>
<rx.Completable$23$1: void <init>(rx.Completable$23,rx.Completable$CompletableSubscriber)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: long calcDirectOffset(long)>
<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void <init>(com.facebook.stetho.inspector.elements.ShadowDocument,java.util.Map,java.util.Set)>
<com.squareup.picasso.Utils$BitmapHoneycombMR1: void <init>()>
<rx.Single: rx.Single zipWith(rx.Single,rx.functions.Func2)>
<rx.internal.operators.CompletableOnSubscribeMergeIterable: void call(java.lang.Object)>
<rx.internal.operators.OperatorScan: rx.Subscriber call(rx.Subscriber)>
<rx.schedulers.Schedulers: rx.Scheduler immediate()>
<okhttp3.MediaType: java.lang.String subtype()>
<rx.internal.operators.OperatorWithLatestFrom$2: void onNext(java.lang.Object)>
<okhttp3.internal.framed.Header: java.lang.String toString()>
<rx.internal.operators.OperatorSkipLastTimed$1: void emitItemsOutOfWindow(long)>
<rx.internal.util.InternalObservableUtils$EqualsWithFunc1: java.lang.Boolean call(java.lang.Object)>
<okio.Buffer: long indexOfElement(okio.ByteString,long)>
<rx.Completable: rx.Completable repeat(long)>
<rx.internal.operators.OperatorToMap$1: void onError(java.lang.Throwable)>
<rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber: void doAction()>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: com.facebook.stetho.inspector.elements.DocumentProviderFactory resolveDocumentProvider()>
<okio.SegmentedByteString: okio.ByteString substring(int)>
<okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>
<rx.internal.operators.OperatorWindowWithObservable: void <init>(rx.Observable)>
<com.facebook.stetho.inspector.network.NetworkPeerManager: void <init>(com.facebook.stetho.inspector.network.ResponseBodyFileManager)>
<rx.schedulers.TestScheduler$CompareActionsByTime: int compare(rx.schedulers.TestScheduler$TimedAction,rx.schedulers.TestScheduler$TimedAction)>
<com.facebook.stetho.inspector.elements.Descriptor: com.facebook.stetho.inspector.elements.Descriptor$Host getHost()>
<okio.DeflaterSink: void flush()>
<rx.observers.Subscribers: rx.Subscriber create(rx.functions.Action1,rx.functions.Action1)>
<rx.subjects.ReplaySubject$ReplayState: boolean isTerminated()>
<rx.subjects.TestSubject: void _onError(java.lang.Throwable)>
<okhttp3.internal.NamedRunnable: void execute()>
<rx.internal.util.unsafe.MpscLinkedQueue: void <init>()>
<com.squareup.picasso.BitmapHunter$1: java.lang.Object initialValue()>
<rx.Completable: rx.Subscription subscribe(rx.functions.Action0)>
<com.facebook.stetho.inspector.elements.Descriptor: java.util.Map parseSetAttributesAsTextArg(java.lang.String)>
<okio.RealBufferedSource: int readUtf8CodePoint()>
<rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1: void remove()>
<rx.internal.operators.OperatorToMap: java.lang.Object call(java.lang.Object)>
<rx.observables.ConnectableObservable: void connect(rx.functions.Action1)>
<okio.ByteString: int indexOf(okio.ByteString,int)>
<rx.internal.operators.OperatorDistinctUntilChanged: void <init>(rx.functions.Func1)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$1: void printTo(java.io.PrintWriter,java.io.InputStream)>
<rx.internal.operators.OperatorZip: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OnSubscribeRefCount: rx.Subscription disconnect(rx.subscriptions.CompositeSubscription)>
<com.facebook.stetho.common.LogUtil: void v(java.lang.String,java.lang.Object[])>
<retrofit2.adapter.rxjava.CompletableHelper$CompletableCallOnSubscribe$1: void <init>(retrofit2.adapter.rxjava.CompletableHelper$CompletableCallOnSubscribe,retrofit2.Call)>
<rx.internal.util.RxRingBuffer: int available()>
<rx.internal.operators.OperatorReplay$BoundedReplayBuffer: void error(java.lang.Throwable)>
<com.squareup.picasso.Dispatcher: void performAirplaneModeChange(boolean)>
<com.facebook.stetho.inspector.elements.android.ActivityTracker: boolean endTracking()>
<rx.internal.util.unsafe.SpscArrayQueue: int size()>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: void dump(com.facebook.stetho.dumpapp.DumperContext)>
<rx.internal.operators.CompletableOnSubscribeMergeIterable$1: void <init>(rx.internal.operators.CompletableOnSubscribeMergeIterable,rx.subscriptions.CompositeSubscription,java.util.concurrent.atomic.AtomicBoolean,rx.Completable$CompletableSubscriber,java.util.concurrent.atomic.AtomicInteger)>
<rx.internal.operators.OperatorToObservableSortedList$2: void <init>(rx.internal.operators.OperatorToObservableSortedList,rx.internal.producers.SingleDelayedProducer,rx.Subscriber)>
<rx.schedulers.TimeInterval: boolean equals(java.lang.Object)>
<com.facebook.stetho.common.ListUtil$TwoItemImmutableList: java.lang.Object get(int)>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder: com.facebook.stetho.inspector.database.ContentProviderSchema$Table$Builder uri(android.net.Uri)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void <init>(java.util.concurrent.atomic.AtomicReference,rx.internal.operators.OperatorReplay$ReplayBuffer)>
<rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber: void onStart()>
<com.facebook.stetho.inspector.protocol.module.DOM$1: void <init>(com.facebook.stetho.inspector.protocol.module.DOM)>
<rx.internal.operators.OperatorRetryWithPredicate: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompat: com.facebook.stetho.common.android.FragmentCompat getFrameworkInstance()>
<okhttp3.internal.framed.Settings: int flags(int)>
<com.facebook.stetho.inspector.elements.android.ActivityDescriptor: void onGetChildren(android.app.Activity,com.facebook.stetho.common.Accumulator)>
<com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeRemovedEvent: void <init>()>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1: void onSubscribe(rx.Subscription)>
<rx.Completable: rx.Completable doOnUnsubscribe(rx.functions.Action0)>
<rx.Observable: rx.Observable onErrorResumeNext(rx.functions.Func1)>
<com.facebook.stetho.inspector.database.ContentProviderDatabaseDriver: void <init>(android.content.Context,com.facebook.stetho.inspector.database.ContentProviderSchema[])>
<com.facebook.stetho.inspector.network.DecompressionHelper: void <init>()>
<rx.Observable: rx.Observable replay(rx.functions.Func1,int,rx.Scheduler)>
<rx.Observable: rx.Observable flatMap(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0)>
<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String)>
<com.squareup.picasso.Utils$PicassoThread: void run()>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler$OverlayView: void onDraw(android.graphics.Canvas)>
<com.facebook.stetho.common.ListUtil$OneItemImmutableList: int size()>
<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError: void <init>(com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode,java.lang.String,org.json.JSONObject)>
<okhttp3.internal.framed.HeadersMode: boolean failIfStreamAbsent()>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$1: void <clinit>()>
<okio.ForwardingSource: okio.Timeout timeout()>
<okhttp3.internal.framed.Hpack: void <clinit>()>
<rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator: void onNext(rx.Notification)>
<rx.android.schedulers.LooperScheduler$ScheduledAction: boolean isUnsubscribed()>
<rx.internal.operators.CachedObservable$CachedSubscribe: void <init>(rx.internal.operators.CachedObservable$CacheState)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: android.content.res.Resources getResources(android.support.v4.app.Fragment)>
<okio.HashingSource: okio.HashingSource sha1(okio.Source)>
<okhttp3.internal.framed.FramedConnection: void writeSynReset(int,okhttp3.internal.framed.ErrorCode)>
<com.facebook.stetho.common.ListUtil$ImmutableArrayList: int size()>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: java.lang.Object[] toArray(java.lang.Object[])>
<okhttp3.Challenge: java.lang.String toString()>
<rx.Completable: rx.Completable merge(rx.Observable)>
<rx.Observable: rx.Observable startWith(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$EventDispatchRunnable: com.facebook.stetho.inspector.screencast.ScreencastDispatcher$EventDispatchRunnable withEndAction(java.lang.Runnable)>
<com.squareup.picasso.Dispatcher$DispatcherHandler: void handleMessage(android.os.Message)>
<retrofit2.Retrofit: retrofit2.CallAdapter callAdapter(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: void dump(com.facebook.stetho.dumpapp.DumperContext)>
<rx.observables.AsyncOnSubscribe: void call(rx.Subscriber)>
<fr.masciulli.drinks.model.Liquor$1: fr.masciulli.drinks.model.Liquor createFromParcel(android.os.Parcel)>
<rx.Single$23: void <init>(rx.Single,rx.functions.Action1)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder followRedirects(boolean)>
<rx.internal.operators.OperatorDistinctUntilChanged: java.lang.Object call(java.lang.Object)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: void clear()>
<okio.HashingSource: void <init>(okio.Source,java.lang.String)>
<rx.internal.operators.OperatorTimeInterval$1: void <init>(rx.internal.operators.OperatorTimeInterval,rx.Subscriber,rx.Subscriber)>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler$HandlerInfo: void <init>(com.facebook.stetho.server.ProtocolDetectingSocketHandler$MagicMatcher,com.facebook.stetho.server.SocketLikeHandler,com.facebook.stetho.server.ProtocolDetectingSocketHandler$1)>
<rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber: void onError(java.lang.Throwable)>
<rx.internal.producers.ProducerArbiter: void <clinit>()>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter$$Lambda$1: void onClick(android.view.View)>
<okio.Buffer: java.util.List segmentSizes()>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierTime: void <init>(rx.Observable,int,long,java.util.concurrent.TimeUnit,rx.Scheduler,rx.internal.util.InternalObservableUtils$1)>
<fr.masciulli.drinks.model.Drink: int describeContents()>
<com.squareup.picasso.Action: java.lang.String getKey()>
<rx.Completable: rx.Completable doOnComplete(rx.functions.Action0)>
<rx.subjects.SubjectSubscriptionManager$State: void <init>(boolean,rx.subjects.SubjectSubscriptionManager$SubjectObserver[])>
<com.facebook.stetho.inspector.elements.Document$UpdateListener: void onChildNodeRemoved(int,int)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: byte[] body()>
<rx.Observer: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorSkipUntil: java.lang.Object call(java.lang.Object)>
<rx.internal.util.LinkedArrayList: int size()>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void requestMore(long)>
<rx.internal.operators.OperatorBufferWithSingleObservable: void <init>(rx.functions.Func0,int)>
<rx.exceptions.OnCompletedFailedException: void <init>(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$FloatMethodInvoker: java.lang.Object convertArgument(java.lang.String)>
<com.facebook.stetho.common.LogRedirector: void setLogger(com.facebook.stetho.common.LogRedirector$Logger)>
<com.facebook.stetho.inspector.helper.PeersRegisteredListener: void onPeerRegistered(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<rx.observers.SafeCompletableSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.Network$InitiatorType: void <init>(java.lang.String,int,java.lang.String)>
<rx.internal.util.UtilityFunctions$AlwaysFalse: rx.internal.util.UtilityFunctions$AlwaysFalse[] values()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator transform(java.util.List)>
<rx.internal.operators.CachedObservable$CacheState: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.Observable: rx.Observable switchIfEmpty(rx.Observable)>
<rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator: java.lang.Object next()>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkJellyBean: void <init>()>
<rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber: void pluginError(java.lang.Throwable)>
<rx.observers.Subscribers$4: void onNext(java.lang.Object)>
<okhttp3.internal.framed.Http2$Writer: void windowUpdate(int,long)>
<rx.internal.operators.CachedObservable$CacheState: void connect()>
<rx.internal.operators.OperatorSkip$1: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void unhook(java.lang.Object)>
<okio.Buffer: java.io.OutputStream outputStream()>
<com.facebook.stetho.inspector.protocol.module.Runtime: java.lang.String getPropertyClassName(java.lang.Object)>
<rx.functions.Actions: rx.functions.Func1 toFunc(rx.functions.Action1)>
<com.facebook.stetho.common.LogRedirector: void e(java.lang.String,java.lang.String)>
<com.facebook.stetho.websocket.WebSocketSession: void handle()>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void onCreate(android.os.Bundle)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin$Type: void <clinit>()>
<com.facebook.stetho.inspector.network.MimeMatcher: void clear()>
<retrofit2.BuiltInConverters$StringConverter: java.lang.String convert(java.lang.String)>
<com.squareup.picasso.PicassoDrawable: void draw(android.graphics.Canvas)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: java.lang.String getName()>
<okhttp3.internal.framed.FramedConnection$Reader$1: void <init>(okhttp3.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[],okhttp3.internal.framed.FramedStream)>
<com.facebook.stetho.inspector.MethodDispatcher: boolean isDevtoolsMethod(java.lang.reflect.Method)>
<okhttp3.Response: okhttp3.Protocol protocol()>
<com.facebook.stetho.inspector.elements.Document: java.lang.Object getRootElement()>
<rx.internal.operators.OperatorTimeout$2: void <init>(long,java.util.concurrent.TimeUnit)>
<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder minFresh(int,java.util.concurrent.TimeUnit)>
<rx.internal.util.atomic.SpscAtomicArrayQueue: java.lang.Object poll()>
<com.facebook.stetho.json.ObjectMapper: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2: void highlightView(android.view.View,int)>
<okhttp3.internal.framed.Spdy3$Writer: void connectionPreface()>
<rx.Observable: rx.Observable doOnTerminate(rx.functions.Action0)>
<rx.internal.operators.OperatorTakeLastOne: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.websocket.WebSocketSession: void markAndSignalClosed(int,java.lang.String)>
<fr.masciulli.drinks.ui.activity.DrinkActivity$$Lambda$1: android.view.View$OnClickListener lambdaFactory$(fr.masciulli.drinks.ui.activity.DrinkActivity)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber: rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject createCountedSerializedSubject()>
<rx.internal.operators.OperatorWithLatestFrom$2: void <init>(rx.internal.operators.OperatorWithLatestFrom,java.util.concurrent.atomic.AtomicReference,rx.observers.SerializedSubscriber)>
<retrofit2.Utils: java.lang.reflect.Type getCallResponseType(java.lang.reflect.Type)>
<rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool: void shutdown()>
<com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator: void store(java.lang.String,java.lang.String)>
<rx.Single$5: void <init>(rx.Single)>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: boolean tryUnsubscribe()>
<rx.plugins.RxJavaPlugins: void registerSingleExecutionHook(rx.plugins.RxJavaSingleExecutionHook)>
<com.facebook.stetho.inspector.network.DefaultResponseHandler: void onRead(int)>
<rx.observers.Observers: void <init>()>
<rx.internal.operators.OperatorAll: void <init>(rx.functions.Func1)>
<rx.internal.util.BackpressureDrainManager: void drain()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator noPlaceholder()>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin: void doUsage(java.io.PrintStream)>
<okhttp3.Dispatcher: void setMaxRequestsPerHost(int)>
<rx.observables.BlockingObservable: rx.observables.BlockingObservable 'from'(rx.Observable)>
<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine get(okhttp3.Response)>
<okio.ByteString: okio.ByteString sha1()>
<com.squareup.picasso.Utils: byte[] toByteArray(java.io.InputStream)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: java.lang.Object[] toArray(java.lang.Object[])>
<com.facebook.stetho.inspector.elements.android.ViewGroupDescriptor: java.lang.Object getElement(android.view.View,java.lang.Object)>
<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>
<retrofit2.DefaultCallAdapterFactory: retrofit2.CallAdapter get(java.lang.reflect.Type,java.lang.'annotation'.Annotation[],retrofit2.Retrofit)>
<okio.Buffer: okio.ByteString readByteString()>
<com.facebook.stetho.dumpapp.Framer$FramingInputStream: int read()>
<rx.internal.util.InternalObservableUtils$CollectorCaller: void <init>(rx.functions.Action2)>
<rx.internal.operators.OperatorScan$1: java.lang.Object call()>
<rx.internal.operators.OperatorBufferWithSize$BufferOverlap$BufferOverlapProducer: void <init>(rx.internal.operators.OperatorBufferWithSize$BufferOverlap)>
<com.facebook.stetho.Stetho$3: void <init>(android.content.Context)>
<okhttp3.CacheControl: boolean isPrivate()>
<rx.internal.operators.OperatorWindowWithTime: void <init>(long,long,java.util.concurrent.TimeUnit,int,rx.Scheduler)>
<rx.internal.util.UtilityFunctions$AlwaysTrue: rx.internal.util.UtilityFunctions$AlwaysTrue[] values()>
<rx.internal.operators.OperatorSequenceEqual: rx.Observable materializeLite(rx.Observable)>
<rx.Observable: rx.Observable buffer(long,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$IntegerMethodInvoker: void <init>()>
<rx.Observable: rx.Observable startWith(rx.Observable)>
<rx.internal.schedulers.SleepingAction: void <init>(rx.functions.Action0,rx.Scheduler$Worker,long)>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: void onUnmapped(java.lang.Object,int)>
<okhttp3.OkHttpClient$1: okhttp3.internal.connection.StreamAllocation callEngineGetStreamAllocation(okhttp3.Call)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: java.lang.Class getDialogFragmentClass()>
<okhttp3.Response$Builder: okhttp3.Response$Builder removeHeader(java.lang.String)>
<rx.internal.operators.OperatorMapPair$MapPairSubscriber: void <init>(rx.Subscriber,rx.functions.Func1,rx.functions.Func2)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: void onUnhook(android.app.Application)>
<rx.Single$21$2: void <init>(rx.Single$21,rx.Subscriber)>
<com.facebook.stetho.dumpapp.Framer: void writeIntFrame(byte,int)>
<com.facebook.stetho.common.android.FragmentCompat$FragmentManagerAccessorViaReflection: java.util.List getAddedFragments(java.lang.Object)>
<rx.internal.operators.OperatorDebounceWithSelector$1: void onStart()>
<com.facebook.stetho.inspector.elements.Document$2: void run()>
<com.facebook.stetho.inspector.protocol.module.Database$1: java.lang.Object handleUpdateDelete(int)>
<retrofit2.BuiltInConverters$VoidResponseBodyConverter: void <clinit>()>
<com.facebook.stetho.websocket.Frame: void <init>()>
<rx.internal.schedulers.GenericScheduledExecutorService: void shutdown()>
<rx.functions.Action8: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorMerge$MergeSubscriber: void emit()>
<rx.functions.Func3: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.Observable: rx.Observable window(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<fr.masciulli.drinks.ui.activity.MainActivity: void openLicenses()>
<okio.RealBufferedSource: int select(okio.Options)>
<rx.internal.operators.OperatorBufferWithTime$ExactSubscriber$1: void call()>
<rx.internal.util.BackpressureDrainManager: void <init>(rx.internal.util.BackpressureDrainManager$BackpressureQueueCallback)>
<com.facebook.stetho.websocket.FrameHelper: com.facebook.stetho.websocket.Frame createSimpleFrame(byte,byte[])>
<okio.ForwardingSink: void write(okio.Buffer,long)>
<rx.functions.Functions$10: void <init>(rx.functions.Func9)>
<rx.Scheduler: long now()>
<okhttp3.internal.framed.FramedConnection$Listener: void onSettings(okhttp3.internal.framed.FramedConnection)>
<rx.Single$15: void onNext(java.lang.Object)>
<rx.Observable: rx.Observable last()>
<okhttp3.internal.platform.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>
<okhttp3.internal.http.Http2xStream: void <clinit>()>
<rx.observables.BlockingObservable$8: void call(java.lang.Throwable)>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void handleRemoteMessage(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,java.lang.String)>
<rx.Observable: rx.observables.ConnectableObservable replay(int,long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$EventDispatchRunnable: void <init>(com.facebook.stetho.inspector.screencast.ScreencastDispatcher,com.facebook.stetho.inspector.screencast.ScreencastDispatcher$1)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void lambda$bindDrinkHolder$2(fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Drink,android.view.View)>
<okhttp3.internal.framed.FrameWriter: void data(boolean,int,okio.Buffer,int)>
<rx.observers.TestObserver: void onCompleted()>
<rx.internal.operators.OperatorScan$InitialProducer: void <init>(java.lang.Object,rx.Subscriber)>
<rx.functions.Actions$Action1CallsAction0: void <init>(rx.functions.Action0)>
<okio.Util: void <init>()>
<rx.internal.operators.OnSubscribeRefCount: void call(rx.Subscriber)>
<rx.internal.producers.ProducerObserverArbiter$1: void <init>()>
<rx.internal.producers.ProducerArbiter$1: void <init>()>
<rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker: rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2: void <init>(rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker,rx.subscriptions.MultipleAssignmentSubscription,rx.functions.Action0,rx.Subscription)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: void <clinit>()>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1: void onCompleted()>
<okhttp3.internal.http.Http1xStream: boolean isClosed()>
<rx.internal.operators.OperatorDoOnRequest$1: void <init>(rx.internal.operators.OperatorDoOnRequest,rx.internal.operators.OperatorDoOnRequest$ParentSubscriber)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber$1: void <init>(rx.internal.operators.OperatorSwitch$SwitchSubscriber)>
<rx.internal.operators.OperatorSequenceEqual: void <init>()>
<rx.internal.operators.OnSubscribeFromArray: void call(java.lang.Object)>
<rx.internal.operators.OperatorMerge: void <init>(boolean,int)>
<rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber: void onNext(java.lang.Object)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder onlyScaleDown()>
<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>
<rx.observers.Observers$3: void onCompleted()>
<rx.observables.ConnectableObservable: rx.Observable autoConnect(int)>
<com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener: void <init>(java.util.List,com.facebook.stetho.inspector.protocol.module.Database$1)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.lang.Object executeSelect(android.database.sqlite.SQLiteDatabase,java.lang.String,com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler)>
<rx.internal.operators.OperatorBufferWithStartEndObservable: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$JellyBeanAndBeyondImpl: void enableFeatures(int,android.database.sqlite.SQLiteDatabase)>
<rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber: void onSubscribe(rx.Subscription)>
<rx.Completable$19: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable sample(rx.Observable)>
<rx.schedulers.Timestamped: void <init>(long,java.lang.Object)>
<rx.internal.operators.OperatorWindowWithObservable: void <clinit>()>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: java.lang.Object poll()>
<rx.internal.util.atomic.BaseLinkedAtomicQueue: boolean isEmpty()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$HighlightDrawable: void highlightView(android.view.View)>
<rx.Observable: rx.Observable onBackpressureDrop(rx.functions.Action1)>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: void soElement(int,java.lang.Object)>
<rx.subjects.BehaviorSubject: void <init>(rx.Observable$OnSubscribe,rx.subjects.SubjectSubscriptionManager)>
<rx.functions.Actions: rx.functions.Func3 toFunc(rx.functions.Action3)>
<com.facebook.stetho.inspector.protocol.module.DOM$InspectNodeRequestedEvent: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<okhttp3.internal.framed.Http2$Writer: void synReply(boolean,int,java.util.List)>
<rx.internal.util.OpenHashSet: java.lang.Object[] values()>
<rx.internal.util.InternalObservableUtils$ReplaySupplierNoParams: java.lang.Object call()>
<rx.subjects.TestSubject: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.ChromeDiscoveryHandler: void setSuccessfulResponse(com.facebook.stetho.server.http.LightHttpResponse,com.facebook.stetho.server.http.LightHttpBody)>
<rx.internal.util.IndexedRingBuffer: boolean isUnsubscribed()>
<okhttp3.internal.framed.Http2$Writer: void connectionPreface()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: void <init>(int)>
<com.squareup.picasso.ContactsPhotoRequestHandler$ContactPhotoStreamIcs: void <init>()>
<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void <init>(okhttp3.ResponseBody)>
<rx.Observable: rx.Observable nest()>
<rx.subjects.BehaviorSubject: java.lang.Object getValue()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void hook(java.lang.Object)>
<com.squareup.picasso.Stats: void processBitmap(android.graphics.Bitmap,int)>
<rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber: void createNewWindow()>
<rx.internal.operators.OperatorZip: void <init>(rx.functions.Func8)>
<rx.internal.operators.OperatorOnBackpressureBuffer: void <init>(long,rx.functions.Action0,rx.BackpressureOverflow$Strategy)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.lang.String getFirstWord(java.lang.String)>
<rx.internal.operators.OnSubscribeTimerOnce: void call(rx.Subscriber)>
<rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction: void call(java.lang.Object)>
<rx.internal.util.UtilityFunctions$AlwaysTrue: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.console.ConsolePeerManager: com.facebook.stetho.inspector.console.ConsolePeerManager getInstanceOrNull()>
<rx.observables.AsyncOnSubscribe$UnicastSubject: void onNext(java.lang.Object)>
<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>
<rx.internal.operators.OperatorCast: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.common.Util: void awaitUninterruptibly(java.util.concurrent.CountDownLatch)>
<okhttp3.Cache$2: void remove()>
<okhttp3.Cache$CacheRequestImpl: okio.Sink body()>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$OverlayHighlighter: void <init>()>
<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void onChildNodeInserted(com.facebook.stetho.inspector.elements.DocumentView,java.lang.Object,int,int,com.facebook.stetho.common.Accumulator)>
<com.squareup.picasso.Request: com.squareup.picasso.Request$Builder buildUpon()>
<rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber: void call()>
<com.facebook.stetho.websocket.WebSocketSession$1: void handlePong(byte[],int)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean isEmpty()>
<rx.internal.operators.OperatorDematerialize$1: void <init>(rx.internal.operators.OperatorDematerialize,rx.Subscriber,rx.Subscriber)>
<com.squareup.picasso.FileRequestHandler: boolean canHandleRequest(com.squareup.picasso.Request)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>
<rx.Subscription: void unsubscribe()>
<okhttp3.internal.framed.FramedConnection$4: void execute()>
<rx.internal.operators.OperatorTakeWhile$1: java.lang.Boolean call(java.lang.Object,java.lang.Integer)>
<okhttp3.internal.framed.PushObserver$1: boolean onData(int,okio.BufferedSource,int,boolean)>
<rx.observables.BlockingObservable$6: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber: void <init>(rx.internal.operators.OperatorTakeUntilPredicate,rx.Subscriber)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: long currentConsumerIndex()>
<com.facebook.stetho.inspector.protocol.module.Runtime$ExceptionDetails: void <init>(com.facebook.stetho.inspector.protocol.module.Runtime$1)>
<rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber: void <init>(rx.SingleSubscriber,rx.functions.Action0)>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: java.lang.String getNodeValue(java.lang.Object)>
<rx.Completable$26: void <init>(rx.Completable,rx.functions.Action0,rx.subscriptions.MultipleAssignmentSubscription)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter$$Lambda$1: void <init>(fr.masciulli.drinks.ui.adapter.LiquorsAdapter,fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Liquor)>
<rx.internal.operators.CachedObservable$ReplayProducer: boolean isUnsubscribed()>
<okhttp3.internal.framed.Huffman: void encode(byte[],java.io.OutputStream)>
<okhttp3.internal.framed.Settings: void merge(okhttp3.internal.framed.Settings)>
<com.facebook.stetho.common.android.ResourcesUtil: int getResourcePackageId(int)>
<okio.Base64: java.lang.String encodeUrl(byte[])>
<rx.internal.operators.OnSubscribeFromArray$FromArrayProducer: void <init>(rx.Subscriber,java.lang.Object[])>
<com.facebook.stetho.inspector.helper.PeerRegistrationListener: void onPeerUnregistered(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<rx.functions.Actions$3: void <init>(rx.functions.Action2,java.lang.Object)>
<rx.internal.operators.OperatorDoAfterTerminate$1: void onCompleted()>
<rx.Observable: rx.Observable toSortedList()>
<okhttp3.internal.cache.CacheStrategy$Factory: long computeFreshnessLifetime()>
<okhttp3.internal.connection.RouteSelector: okhttp3.Route next()>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter$2: retrofit2.adapter.rxjava.Result call(retrofit2.Response)>
<okio.Buffer: okio.BufferedSink writeLong(long)>
<retrofit2.RequestBuilder: void canonicalizeForPath(okio.Buffer,java.lang.String,int,int,boolean)>
<rx.internal.operators.CompletableOnSubscribeTimeout$1: void <init>(rx.internal.operators.CompletableOnSubscribeTimeout,java.util.concurrent.atomic.AtomicBoolean,rx.subscriptions.CompositeSubscription,rx.Completable$CompletableSubscriber)>
<com.facebook.stetho.inspector.network.ResponseBodyData: void <init>()>
<rx.internal.operators.OperatorScan$2: void onError(java.lang.Throwable)>
<okhttp3.internal.cache.DiskLruCache$3: void remove()>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcException: com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError getErrorMessage()>
<com.facebook.stetho.inspector.protocol.module.Console$MessageSource: void <clinit>()>
<rx.Completable: void await()>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction: rx.internal.operators.OperatorOnErrorResumeNextViaFunction withException(rx.Observable)>
<rx.internal.operators.OperatorTakeUntil$1: void onNext(java.lang.Object)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: android.support.v7.widget.RecyclerView$ViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3: rx.Observable call(java.lang.Throwable)>
<com.facebook.stetho.dumpapp.plugins.FilesDumperPlugin: java.io.File resolvePossibleSdcardPath(java.lang.String)>
<com.facebook.stetho.okhttp3.StethoInterceptor$ForwardingResponseBody: okhttp3.MediaType contentType()>
<rx.internal.producers.QueuedValueProducer: boolean offer(java.lang.Object)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment$$Lambda$2: void <init>(fr.masciulli.drinks.ui.fragment.DrinksFragment)>
<com.facebook.stetho.inspector.protocol.module.Debugger: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorElementAt: void <init>(int,java.lang.Object)>
<rx.observers.Observers$1: void onError(java.lang.Throwable)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>
<rx.internal.operators.OperatorDoAfterTerminate$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$NoOpViewHighlightOverlays: void <init>()>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: java.lang.Integer removeObject(java.lang.Object)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$2: void printTo(java.io.PrintWriter,java.io.InputStream)>
<rx.internal.operators.NotificationLite$OnErrorSentinel: void <init>(java.lang.Throwable)>
<okio.BufferedSource: void require(long)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber: void onNext(java.lang.Object)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder socketFactory(javax.net.SocketFactory)>
<okhttp3.internal.framed.FramedStream$FramedDataSource: long read(okio.Buffer,long)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$$Lambda$3: void <init>(fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter,fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Drink)>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectType: void <clinit>()>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver: void onCompleted()>
<com.facebook.stetho.common.Util: void joinUninterruptibly(java.lang.Thread)>
<rx.internal.operators.OperatorDoOnRequest: void <init>(rx.functions.Action1)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$$Lambda$1: android.view.View$OnClickListener lambdaFactory$(fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter,fr.masciulli.drinks.ui.adapter.holder.RelatedHeaderViewHolder)>
<rx.subjects.PublishSubject: boolean hasCompleted()>
<fr.masciulli.drinks.ui.adapter.DrinksAdapter: void onBindViewHolder(fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,int)>
<retrofit2.ParameterHandler$RelativeUrl: void <init>()>
<rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler: void <init>()>
<com.facebook.stetho.common.LogUtil: void d(java.lang.Throwable,java.lang.String)>
<okio.Pipe$PipeSource: long read(okio.Buffer,long)>
<com.squareup.picasso.LruCache: int putCount()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: android.view.View getHighlightingView(java.lang.Object)>
<okio.RealBufferedSink: okio.BufferedSink emit()>
<com.facebook.stetho.common.LogRedirector: void e(java.lang.String,java.lang.String,java.lang.Throwable)>
<rx.internal.operators.OnSubscribeAmb$AmbSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.dumpapp.Framer: java.io.InputStream getStdin()>
<rx.internal.operators.BlockingOperatorToFuture$1: void onNext(java.lang.Object)>
<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void close()>
<rx.Single: rx.Observable flatMapObservable(rx.functions.Func1)>
<rx.Observable: java.lang.Object extend(rx.functions.Func1)>
<com.facebook.stetho.dumpapp.DumpUsageException: void <init>(java.lang.String)>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void replaceSubject()>
<rx.subjects.BehaviorSubject: void onCompleted()>
<com.squareup.picasso.BitmapHunter$3: void run()>
<rx.Observable: rx.Observable doOnRequest(rx.functions.Action1)>
<rx.schedulers.Schedulers: rx.Scheduler io()>
<okhttp3.internal.cache.DiskLruCache: long size()>
<com.facebook.stetho.inspector.helper.ThreadBoundProxy: java.lang.Object postAndWait(com.facebook.stetho.common.UncheckedCallable)>
<rx.Completable$1: void call(java.lang.Object)>
<rx.subjects.TestSubject$3: void <init>(rx.subjects.TestSubject,java.lang.Throwable)>
<com.squareup.picasso.PicassoDrawable: void onBoundsChange(android.graphics.Rect)>
<rx.internal.operators.SingleDoAfterTerminate: void call(rx.SingleSubscriber)>
<rx.internal.operators.BlockingOperatorToFuture$2: boolean isDone()>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void slowPath(long)>
<rx.internal.schedulers.ImmediateScheduler: void <clinit>()>
<com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager$1: void <init>(com.facebook.stetho.inspector.domstorage.DOMStoragePeerManager)>
<rx.subjects.BehaviorSubject: void onError(java.lang.Throwable)>
<rx.internal.util.RxRingBuffer: boolean isEmpty()>
<okhttp3.Cache$Entry: java.util.List readCertificateList(okio.BufferedSource)>
<rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber: void <init>(rx.internal.operators.OperatorBufferWithSingleObservable,rx.Subscriber)>
<okhttp3.RequestBody$1: void <init>(okhttp3.MediaType,okio.ByteString)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onGetAttributes(android.view.View,com.facebook.stetho.inspector.elements.AttributeAccumulator)>
<rx.internal.operators.OnSubscribeAmb$Selection: void unsubscribeLosers()>
<rx.subjects.UnicastSubject: rx.subjects.UnicastSubject create()>
<com.squareup.picasso.Utils: boolean parseResponseSourceHeader(java.lang.String)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$MarginLeftHighlightDrawable: void draw(android.graphics.Canvas)>
<okhttp3.Cache$Entry: void writeCertList(okio.BufferedSink,java.util.List)>
<okhttp3.internal.framed.PushObserver: boolean onRequest(int,java.util.List)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: void <clinit>()>
<okhttp3.internal.framed.Spdy3$Writer: void sendDataFrame(int,int,okio.Buffer,int)>
<com.facebook.stetho.dumpapp.Dumper: void dumpPluginOutput(java.io.InputStream,java.io.PrintStream,java.io.PrintStream,org.apache.commons.cli.CommandLine)>
<com.facebook.stetho.inspector.network.NetworkEventReporter: void responseReadFailed(java.lang.String,java.lang.String)>
<rx.internal.operators.OperatorSerialize$Holder: void <init>()>
<rx.plugins.RxJavaSingleExecutionHook: void <init>()>
<rx.Completable$17$1: void onSubscribe(rx.Subscription)>
<okhttp3.internal.framed.Hpack$Reader: void readHeaders()>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: boolean addAll(java.util.Collection)>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder centerCrop()>
<com.facebook.stetho.inspector.protocol.module.Page: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult canScreencast(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$MatchResult: java.lang.String getSchemaUri()>
<okio.ByteString: int lastIndexOf(okio.ByteString)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: int getItemCount()>
<rx.Observable: rx.Observable takeLast(int,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.squareup.picasso.BitmapHunter: void <init>(com.squareup.picasso.Picasso,com.squareup.picasso.Dispatcher,com.squareup.picasso.Cache,com.squareup.picasso.Stats,com.squareup.picasso.Action,com.squareup.picasso.RequestHandler)>
<rx.internal.util.RxRingBuffer: java.lang.Throwable asError(java.lang.Object)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: java.lang.String reasonPhrase()>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat: void enableFeatures(int,android.database.sqlite.SQLiteDatabase)>
<retrofit2.ServiceMethod$Builder: java.lang.RuntimeException parameterError(java.lang.Throwable,int,java.lang.String,java.lang.Object[])>
<rx.internal.operators.OperatorSkipTimed: void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.websocket.ReadHandler: void <init>(java.io.InputStream,com.facebook.stetho.websocket.SimpleEndpoint)>
<com.facebook.stetho.inspector.network.ResponseHandler: void onRead(int)>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.protocol.module.Runtime$GetPropertiesResponse getPropertiesForProtoContainer(com.facebook.stetho.inspector.protocol.module.Runtime$ObjectProtoContainer)>
<okhttp3.internal.http.HttpDate: java.util.Date parse(java.lang.String)>
<rx.Single: rx.Single error(java.lang.Throwable)>
<okio.BufferedSource: short readShort()>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1: void onError(java.lang.Throwable)>
<rx.exceptions.OnErrorThrowable: void <init>(java.lang.Throwable)>
<rx.internal.util.unsafe.BaseLinkedQueue: int size()>
<rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1: void tryTerminate()>
<okhttp3.Request$Builder: okhttp3.Request$Builder delete()>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker: void unsubscribe()>
<rx.internal.operators.BufferUntilSubscriber: void <clinit>()>
<rx.internal.util.InternalObservableUtils$ReplaySupplierBuffer: void <init>(rx.Observable,int)>
<okio.RealBufferedSource: java.lang.String readString(java.nio.charset.Charset)>
<rx.Observable: rx.Observable mergeDelayError(rx.Observable,rx.Observable)>
<rx.observables.BlockingObservable: java.util.Iterator getIterator()>
<rx.internal.operators.CachedObservable: rx.internal.operators.CachedObservable 'from'(rx.Observable)>
<okhttp3.internal.framed.Hpack$Reader: okio.ByteString readByteString()>
<rx.internal.util.ScalarSynchronousObservable$2$1: void call()>
<fr.masciulli.drinks.ui.adapter.Placeholders: android.graphics.drawable.Drawable get(android.content.Context,int)>
<rx.Single: rx.Observable merge(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<fr.masciulli.drinks.ui.activity.LicensesActivity: void <init>()>
<rx.observables.BlockingObservable$9: void onNext(java.lang.Object)>
<com.squareup.picasso.BitmapHunter: void run()>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker: rx.Subscription schedule(rx.functions.Action0)>
<com.squareup.picasso.Utils: void checkMain()>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.helper.ObjectIdMapper: void <init>()>
<rx.internal.operators.OperatorIgnoreElements: rx.Subscriber call(rx.Subscriber)>
<okhttp3.internal.http.Http1xStream$ChunkedSink: okio.Timeout timeout()>
<rx.Completable$13$1: void onSubscribe(rx.Subscription)>
<fr.masciulli.drinks.ui.activity.DrinkActivity: void shareDrink()>
<okhttp3.internal.framed.Http2$Writer: void rstStream(int,okhttp3.internal.framed.ErrorCode)>
<okhttp3.internal.http.Http1xStream: okio.Sink newChunkedSink()>
<rx.observables.SyncOnSubscribe$5: void call(java.lang.Void)>
<rx.internal.operators.OperatorScan$3: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorTimeout$2$1: void call()>
<okhttp3.Cache: int writeAbortCount()>
<rx.internal.util.UtilityFunctions$AlwaysTrue: java.lang.Boolean call(java.lang.Object)>
<okhttp3.Cache$CacheResponseBody: long contentLength()>
<rx.internal.operators.OperatorDematerialize: void <init>()>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1: rx.Observable call(java.lang.Throwable)>
<rx.functions.Actions$10: void <init>(rx.functions.Action9,java.lang.Object)>
<rx.internal.schedulers.TrampolineScheduler$TimedAction: void <init>(rx.functions.Action0,java.lang.Long,int)>
<rx.Observable: rx.Observable amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.Observable: rx.Observable flatMap(rx.functions.Func1,rx.functions.Func2)>
<okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>
<rx.internal.operators.OperatorGroupBy: void <init>(rx.functions.Func1)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: void adjustLookAheadStep(int)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: java.lang.Object last()>
<rx.internal.util.InternalObservableUtils$ReplaySupplierBuffer: rx.observables.ConnectableObservable call()>
<com.facebook.stetho.inspector.protocol.module.DOM$Node: void <init>()>
<rx.subjects.AsyncSubject$1: void call(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesResponse: void <init>(com.facebook.stetho.inspector.protocol.module.Database$1)>
<com.squareup.picasso.Action: boolean willReplay()>
<rx.Completable$23$1: void onCompleted()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: int calcDirectOffset(int)>
<com.facebook.stetho.inspector.database.ContentProviderDatabaseDriver: java.lang.String fetchTableName(java.lang.String)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter$2: java.lang.Object call(java.lang.Object)>
<fr.masciulli.drinks.model.Liquor: java.util.List getOtherNames()>
<okio.SegmentedByteString: java.nio.ByteBuffer asByteBuffer()>
<okhttp3.Cache$Entry: okhttp3.Response response(okhttp3.internal.cache.DiskLruCache$Snapshot)>
<retrofit2.adapter.rxjava.Result: retrofit2.Response response()>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: long lvProducerIndex()>
<com.squareup.picasso.Stats: void <init>(com.squareup.picasso.Cache)>
<rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber: void drain()>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$DialogFragmentAccessorSupportLib: android.app.Dialog getDialog(java.lang.Object)>
<rx.internal.operators.OperatorTakeLastOne: void <init>()>
<rx.schedulers.ImmediateScheduler: void <init>()>
<com.facebook.stetho.inspector.elements.Document$DocumentObjectIdMapper: void <init>(com.facebook.stetho.inspector.elements.Document)>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber: void onError(java.lang.Throwable)>
<com.squareup.picasso.ResourceRequestHandler: void <init>(android.content.Context)>
<rx.internal.util.InternalObservableUtils$IsInstanceOfFunc1: java.lang.Boolean call(java.lang.Object)>
<okhttp3.CacheControl: boolean noTransform()>
<com.facebook.stetho.json.ObjectMapper: void <init>()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$HighlightDrawable: void <init>(int)>
<fr.masciulli.drinks.model.Drink: java.util.List getIngredients()>
<com.squareup.picasso.NetworkRequestHandler: boolean supportsReplay()>
<rx.internal.operators.EmptyObservableHolder: void <clinit>()>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter$1: retrofit2.adapter.rxjava.Result call(java.lang.Throwable)>
<com.facebook.stetho.common.ListUtil$ImmutableArrayList: java.lang.Object get(int)>
<rx.observables.SyncOnSubscribe: rx.observables.SyncOnSubscribe createSingleState(rx.functions.Func0,rx.functions.Action2,rx.functions.Action1)>
<okhttp3.internal.platform.OptionalMethod: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object)>
<rx.Observable: rx.Observable delay(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.server.SecureSocketHandler: void onAccepted(android.net.LocalSocket)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib: com.facebook.stetho.common.android.FragmentActivityAccessor forFragmentActivity()>
<rx.internal.operators.OperatorWithLatestFrom$2: void onCompleted()>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat: void <init>()>
<rx.internal.operators.OnSubscribeRedo: rx.Observable repeat(rx.Observable,rx.functions.Func1,rx.Scheduler)>
<rx.android.MainThreadSubscription: void verifyMainThread()>
<retrofit2.OkHttpCall: java.lang.Object clone()>
<rx.Single: void <clinit>()>
<rx.subjects.ReplaySubject: rx.subjects.ReplaySubject create(int)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierBufferTime: void <init>(rx.Observable,long,java.util.concurrent.TimeUnit,rx.Scheduler,rx.internal.util.InternalObservableUtils$1)>
<rx.Completable$7: void call(java.lang.Object)>
<rx.subjects.AsyncSubject: boolean hasValue()>
<rx.internal.operators.OperatorScan$InitialProducer: void request(long)>
<okio.RealBufferedSource: java.lang.String readUtf8()>
<rx.observers.SafeCompletableSubscriber: void onSubscribe(rx.Subscription)>
<okhttp3.internal.framed.Http2$Writer: void synStream(boolean,boolean,int,int,java.util.List)>
<com.facebook.stetho.inspector.protocol.module.DOMStorage: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$1: void run()>
<okio.Okio: okio.Source source(java.io.File)>
<rx.internal.operators.OperatorScan: void <init>(rx.functions.Func0,rx.functions.Func2)>
<rx.internal.util.atomic.MpscLinkedAtomicQueue: java.lang.Object poll()>
<com.facebook.stetho.inspector.elements.Document: void releaseCachedAttributeAccumulator(com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator)>
<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>
<rx.Observable: rx.Observable serialize()>
<rx.internal.operators.OperatorScan$3: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable sequenceEqual(rx.Observable,rx.Observable,rx.functions.Func2)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction: rx.internal.operators.OperatorOnErrorResumeNextViaFunction withOther(rx.Observable)>
<okhttp3.Cache$CacheResponseBody: okhttp3.MediaType contentType()>
<okio.ForwardingSource: java.lang.String toString()>
<okhttp3.internal.framed.Http2$Writer: void headers(boolean,int,java.util.List)>
<com.facebook.stetho.inspector.protocol.module.Network: void <init>(android.content.Context)>
<rx.internal.operators.OperatorMulticast: void <init>(rx.Observable,rx.functions.Func0)>
<rx.internal.operators.OperatorToObservableSortedList$2: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$CharSequenceMethodInvoker: java.lang.Object convertArgument(java.lang.String)>
<okhttp3.Dispatcher: int getMaxRequests()>
<okhttp3.internal.cache.CacheInterceptor$1: long contentLength()>
<rx.functions.Actions: void <clinit>()>
<okhttp3.Interceptor$Chain: okhttp3.Request request()>
<retrofit2.adapter.rxjava.CompletableHelper$CompletableCallAdapter: rx.Completable adapt(retrofit2.Call)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment: void onItemClick(int,fr.masciulli.drinks.model.Drink)>
<rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber: void <init>(rx.Subscriber,rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber)>
<rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber: void onCompleted()>
<okhttp3.Cookie: java.lang.String path()>
<com.facebook.stetho.inspector.elements.Descriptor: void postAndWait(java.lang.Runnable)>
<okhttp3.internal.Version: void <init>()>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.observables.AsyncOnSubscribe$6: void <init>(rx.observables.AsyncOnSubscribe,rx.Subscriber,rx.observables.AsyncOnSubscribe$AsyncOuterManager)>
<rx.functions.Functions$7: java.lang.Object call(java.lang.Object[])>
<okhttp3.internal.framed.FramedConnection$Reader: void goAway(int,okhttp3.internal.framed.ErrorCode,okio.ByteString)>
<rx.Notification: int hashCode()>
<rx.internal.operators.OperatorAll$1: void onNext(java.lang.Object)>
<rx.Observable: rx.Observable concatMapEager(rx.functions.Func1,int,int)>
<com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getDocument(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.subscriptions.RefCountSubscription$InnerSubscription: boolean isUnsubscribed()>
<com.facebook.stetho.dumpapp.Framer$FramingInputStream: void <init>(com.facebook.stetho.dumpapp.Framer)>
<com.facebook.stetho.inspector.elements.android.ViewGroupDescriptor: java.lang.Object getElementForView(android.view.ViewGroup,android.view.View)>
<rx.observables.BlockingObservable: java.lang.Iterable mostRecent(java.lang.Object)>
<rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber: void accountProduced()>
<com.facebook.stetho.inspector.network.DownloadingAsyncPrettyPrinterFactory$2: com.facebook.stetho.inspector.network.PrettyPrinterDisplayType getPrettifiedType()>
<rx.internal.operators.OnSubscribeSingle: rx.internal.operators.OnSubscribeSingle create(rx.Observable)>
<okhttp3.internal.cache.DiskLruCache$Snapshot: okio.Source getSource(int)>
<okhttp3.internal.cache.DiskLruCache$Editor: void detach()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void getStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<okhttp3.internal.framed.Huffman: int encodedLength(byte[])>
<rx.Observable: rx.Observable create(rx.observables.AsyncOnSubscribe)>
<rx.internal.util.InternalObservableUtils$ReturnsVoidFunc1: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorIgnoreElements$Holder: void <clinit>()>
<okio.SegmentedByteString: boolean rangeEquals(int,okio.ByteString,int,int)>
<rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber: boolean checkTerminated(boolean,boolean,rx.Subscriber,java.util.Queue)>
<rx.internal.producers.ProducerArbiter: void emitLoop()>
<rx.observables.BlockingObservable: java.lang.Object singleOrDefault(java.lang.Object,rx.functions.Func1)>
<rx.internal.util.IndexedRingBuffer: java.lang.Object remove(int)>
<rx.Observable: rx.Observable zip(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func9)>
<com.facebook.stetho.okhttp3.StethoInterceptor$ForwardingResponseBody: okio.BufferedSource source()>
<rx.exceptions.OnErrorThrowable: java.lang.Throwable addValueAsLastCause(java.lang.Throwable,java.lang.Object)>
<okio.ByteString: okio.ByteString read(java.io.InputStream,int)>
<okhttp3.internal.framed.Http2$FrameLogger: java.lang.String formatFlags(byte,byte)>
<com.facebook.stetho.inspector.helper.ThreadBoundProxy: boolean checkThreadAccess()>
<okhttp3.RequestBody: void <init>()>
<rx.Observable: rx.Observable toSortedList(rx.functions.Func2,int)>
<rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer: void truncate()>
<com.squareup.picasso.RequestHandler: int getRetryCount()>
<com.facebook.stetho.server.http.LightHttpRequest: void <init>()>
<rx.internal.schedulers.SchedulerLifecycle: void shutdown()>
<okio.Buffer$1: void close()>
<rx.internal.operators.CompletableOnSubscribeConcatArray: void call(java.lang.Object)>
<okhttp3.internal.framed.FramedStream$FramedDataSource: void waitUntilReadable()>
<com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder: java.util.HashSet acquireNotNewChildrenHashSet()>
<rx.Single: rx.Subscription unsafeSubscribe(rx.Subscriber)>
<okhttp3.internal.framed.Spdy3$Reader: void readSynStream(okhttp3.internal.framed.FrameReader$Handler,int,int)>
<rx.Completable$20: void onError(java.lang.Throwable)>
<okhttp3.Cookie: void <init>(okhttp3.Cookie$Builder,okhttp3.Cookie$1)>
<okhttp3.internal.tls.TrustRootIndex: okhttp3.internal.tls.TrustRootIndex get(java.security.cert.X509Certificate[])>
<rx.observables.AsyncOnSubscribe$6: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver: void <init>(android.content.Context)>
<rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber: void onNext(java.lang.Object)>
<com.squareup.picasso.BitmapHunter: java.util.List getActions()>
<rx.subjects.BehaviorSubject$1: void <init>(rx.subjects.SubjectSubscriptionManager)>
<rx.Observable: rx.Observable count()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: java.lang.String getNodeValue(java.lang.Object)>
<okhttp3.internal.framed.FramedStream: java.util.List getRequestHeaders()>
<rx.schedulers.TestScheduler$InnerTestScheduler$1: void call()>
<com.squareup.picasso.Utils$OkHttpLoaderCreator: com.squareup.picasso.Downloader create(android.content.Context)>
<rx.internal.operators.BlockingOperatorNext$NextObserver: void setWaiting(int)>
<okhttp3.internal.cache.DiskLruCache: void delete()>
<rx.Observable: rx.Observable window(rx.Observable,rx.functions.Func1)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: java.lang.Throwable error()>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor$ElementContext: void hook(android.widget.TextView)>
<rx.internal.operators.OnSubscribeAmb: rx.Observable$OnSubscribe amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.BackpressureUtils: boolean postCompleteRequest(java.util.concurrent.atomic.AtomicLong,long,java.util.Queue,rx.Subscriber,rx.functions.Func1)>
<rx.subscriptions.Subscriptions: rx.Subscription empty()>
<rx.internal.operators.OperatorDebounceWithSelector$1: void onNext(java.lang.Object)>
<okhttp3.Call: void cancel()>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void setWikipediaClickListener(fr.masciulli.drinks.ui.adapter.ItemClickListener)>
<rx.internal.operators.OperatorTimestamp$1: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.Console: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.CompletableOnSubscribeMerge: void <init>(rx.Observable,int,boolean)>
<com.squareup.picasso.Dispatcher: void batch(com.squareup.picasso.BitmapHunter)>
<rx.subscriptions.MultipleAssignmentSubscription: void set(rx.Subscription)>
<rx.Single$22$1: void onCompleted()>
<rx.internal.operators.OperatorReplay$InnerProducer: void <init>(rx.internal.operators.OperatorReplay$ReplaySubscriber,rx.Subscriber)>
<rx.functions.Functions$3: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.OperatorTimestamp$1: void <init>(rx.internal.operators.OperatorTimestamp,rx.Subscriber,rx.Subscriber)>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber: void beginWindow(java.lang.Object)>
<rx.internal.operators.OperatorSkipUntil$2: void <init>(rx.internal.operators.OperatorSkipUntil,rx.Subscriber,java.util.concurrent.atomic.AtomicBoolean,rx.observers.SerializedSubscriber)>
<okhttp3.internal.framed.Hpack$Writer: void <init>(int,okio.Buffer)>
<com.squareup.picasso.Utils$ActivityManagerHoneycomb: int getLargeMemoryClass(android.app.ActivityManager)>
<rx.Completable: rx.Completable mergeDelayError(java.lang.Iterable)>
<rx.Single$20$1: void <init>(rx.Single$20,rx.Subscriber,boolean,rx.Subscriber)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierBufferTime: java.lang.Object call()>
<com.squareup.picasso.Request: boolean hasSize()>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentActivityAccessorFramework: android.app.FragmentManager getFragmentManager(android.app.Activity)>
<okhttp3.internal.framed.FramedConnection: void writeWindowUpdateLater(int,long)>
<com.squareup.picasso.Dispatcher: void shutdown()>
<okhttp3.internal.framed.FramedStream: int getId()>
<rx.observers.Observers$2: void onError(java.lang.Throwable)>
<rx.Completable$3: void call(rx.Completable$CompletableSubscriber)>
<okhttp3.internal.http.Http2xStream: java.util.List http2HeadersList(okhttp3.Request)>
<com.facebook.stetho.dumpapp.GlobalOptions: void <init>()>
<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: void onChildNodeInserted(com.facebook.stetho.inspector.elements.DocumentView,java.lang.Object,int,int,com.facebook.stetho.common.Accumulator)>
<com.facebook.stetho.inspector.elements.android.ApplicationDescriptor: void onHook(android.app.Application)>
<rx.internal.operators.OperatorWindowWithSize: void <init>(int,int)>
<rx.internal.operators.OnSubscribeRedo$3$1: void onCompleted()>
<rx.observables.AsyncOnSubscribe$1: void <init>(rx.functions.Action3)>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber: void <init>(rx.Completable$CompletableSubscriber,int)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierBufferTime: void <init>(rx.Observable,long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<com.facebook.stetho.inspector.MessageHandlingException: void <init>(java.lang.Throwable)>
<rx.internal.operators.OnSubscribePublishMulticast$PublishProducer: void unsubscribe()>
<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>
<rx.Completable$10: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorUnsubscribeOn: void <init>(rx.Scheduler)>
<rx.functions.Functions$11: java.lang.Void call(java.lang.Object[])>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter$$Lambda$2: android.view.View$OnClickListener lambdaFactory$(fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter,fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Drink)>
<rx.subjects.TestSubject: rx.subjects.TestSubject create(rx.schedulers.TestScheduler)>
<rx.internal.producers.ProducerArbiter: void request(long)>
<com.squareup.picasso.RequestCreator: void <init>()>
<okio.Source: void close()>
<com.facebook.stetho.inspector.protocol.module.DOM$2: void run()>
<rx.internal.operators.OperatorPublish$InnerProducer: void <init>(rx.internal.operators.OperatorPublish$PublishSubscriber,rx.Subscriber)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueueProducerColdFields: void <init>()>
<rx.internal.operators.BackpressureUtils: void postCompleteDone(java.util.concurrent.atomic.AtomicLong,java.util.Queue,rx.Subscriber)>
<rx.plugins.RxJavaCompletableExecutionHook: rx.Completable$CompletableOnSubscribe onSubscribeStart(rx.Completable,rx.Completable$CompletableOnSubscribe)>
<com.facebook.stetho.inspector.network.NetworkEventReporter: void dataSent(java.lang.String,int,int)>
<retrofit2.Retrofit: java.util.List callAdapterFactories()>
<rx.Observable: rx.Subscription subscribe(rx.Observer)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void onItemClick(int,fr.masciulli.drinks.model.Liquor)>
<com.facebook.stetho.common.android.FragmentManagerAccessor: java.util.List getAddedFragments(java.lang.Object)>
<rx.internal.operators.OperatorReplay$ReplaySubscriber: void onError(java.lang.Throwable)>
<rx.subscriptions.RefCountSubscription$State: rx.subscriptions.RefCountSubscription$State unsubscribe()>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<rx.internal.operators.OperatorDoAfterTerminate: void <init>(rx.functions.Action0)>
<retrofit2.http.Path: boolean encoded()>
<rx.subscriptions.RefCountSubscription: boolean isUnsubscribed()>
<rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber: void onError(java.lang.Throwable)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$CharSequenceMethodInvoker: java.lang.CharSequence convertArgument(java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.DOM$7: void run()>
<rx.Completable$18: void call(java.lang.Object)>
<rx.Single$20: java.lang.Object call(java.lang.Object)>
<rx.internal.util.InternalObservableUtils$ReturnsVoidFunc1: java.lang.Void call(java.lang.Object)>
<com.facebook.stetho.websocket.WebSocketSession$1: void onCompleteFrame(byte,byte[],int)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator tag(java.lang.Object)>
<rx.Completable: void unsafeSubscribe(rx.Completable$CompletableSubscriber)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider$InspectModeHandler: void disable()>
<fr.masciulli.drinks.model.Liquor: java.lang.String getWikipedia()>
<retrofit2.BuiltInConverters$StreamingResponseBodyConverter: java.lang.Object convert(java.lang.Object)>
<rx.internal.operators.NotificationLite: java.lang.Object completed()>
<okhttp3.CertificatePinner: okio.ByteString sha1(java.security.cert.X509Certificate)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: java.lang.Object last()>
<rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String convertViewPropertyNameToCSSName(java.lang.String)>
<okhttp3.internal.framed.FrameWriter: void applyAndAckSettings(okhttp3.internal.framed.Settings)>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResponseCallAdapter: void <init>(java.lang.reflect.Type,rx.Scheduler)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1$1: void <init>(retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1,retrofit2.Response)>
<com.squareup.picasso.RequestHandler: boolean canHandleRequest(com.squareup.picasso.Request)>
<okhttp3.Cookie: java.lang.String value()>
<rx.Observable: rx.Observable amb(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.OnSubscribeRedo$4$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentActivityAccessorFramework: void <init>(com.facebook.stetho.common.android.FragmentCompatFramework$1)>
<rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2: java.lang.Object call(java.lang.Object)>
<com.squareup.picasso.Cache: void set(java.lang.String,android.graphics.Bitmap)>
<retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall: boolean isExecuted()>
<com.facebook.stetho.common.android.ViewUtil$ViewCompat: float getAlpha(android.view.View)>
<rx.Observable: rx.Observable skipLast(long,java.util.concurrent.TimeUnit)>
<okhttp3.internal.framed.Hpack$Reader: int evictToRecoverBytes(int)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: void clear()>
<rx.observables.AsyncOnSubscribe$5: void <init>(rx.functions.Action0)>
<com.facebook.stetho.websocket.WebSocketSession$1: void handlePing(byte[],int)>
<okhttp3.internal.cache.DiskLruCache$Entry: void setLengths(java.lang.String[])>
<rx.subscriptions.MultipleAssignmentSubscription: void unsubscribe()>
<rx.Observable: rx.Observable toMultimap(rx.functions.Func1,rx.functions.Func1)>
<rx.functions.Actions$9: void <init>(rx.functions.Action8,java.lang.Object)>
<okio.Pipe$PipeSink: void flush()>
<rx.internal.util.unsafe.SpscArrayQueue: void soProducerIndex(long)>
<rx.internal.operators.OperatorToMap$1: void onStart()>
<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver: void onUnregistered(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<rx.Observable: void forEach(rx.functions.Action1,rx.functions.Action1)>
<rx.internal.operators.OperatorAsObservable: java.lang.Object call(java.lang.Object)>
<rx.Completable$29: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber: void <init>(rx.Subscriber,rx.functions.Func2,rx.Scheduler$Worker,rx.subscriptions.SerialSubscription,rx.internal.producers.ProducerArbiter)>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void onSaveInstanceState(android.os.Bundle)>
<rx.internal.operators.SingleOperatorOnErrorResumeNext$2: void onSuccess(java.lang.Object)>
<rx.internal.operators.OperatorWindowWithTime$State: rx.internal.operators.OperatorWindowWithTime$State create(rx.Observer,rx.Observable)>
<rx.internal.operators.OperatorDelay$1: void <init>(rx.internal.operators.OperatorDelay,rx.Subscriber,rx.Scheduler$Worker,rx.Subscriber)>
<com.squareup.picasso.BitmapHunter: boolean isCancelled()>
<rx.SingleSubscriber: boolean isUnsubscribed()>
<rx.Scheduler$Worker$1: void <init>(rx.Scheduler$Worker,long,long,rx.subscriptions.MultipleAssignmentSubscription,rx.functions.Action0,long)>
<rx.internal.util.atomic.SpscLinkedArrayQueue: void <init>(int)>
<com.squareup.picasso.PicassoExecutorService$PicassoFutureTask: int compareTo(com.squareup.picasso.PicassoExecutorService$PicassoFutureTask)>
<rx.schedulers.Timestamped: long getTimestampMillis()>
<com.squareup.picasso.GetAction: void error()>
<rx.Completable$24: void call(rx.Completable$CompletableSubscriber)>
<rx.internal.operators.OperatorTakeLastOne$ParentSubscriber: void onError(java.lang.Throwable)>
<rx.internal.schedulers.ScheduledAction: void addParent(rx.subscriptions.CompositeSubscription)>
<rx.Observable: rx.Observable window(long,long,java.util.concurrent.TimeUnit,int,rx.Scheduler)>
<com.facebook.stetho.inspector.protocol.module.Network$DataReceivedParams: void <init>()>
<com.facebook.stetho.inspector.network.AsyncPrettyPrinterExecutorHolder: void shutdown()>
<rx.Completable: void deliverUncaughtException(java.lang.Throwable)>
<rx.internal.operators.OnSubscribePublishMulticast: boolean isUnsubscribed()>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber$1: void call()>
<rx.Completable: rx.Completable fromFuture(java.util.concurrent.Future)>
<com.facebook.stetho.inspector.protocol.module.Page$ExecutionContextDescription: void <init>()>
<okhttp3.internal.framed.FramedConnection$5: void execute()>
<rx.internal.operators.OperatorSwitch: rx.Subscriber call(rx.Subscriber)>
<rx.schedulers.Schedulers: void shutdownInstance()>
<rx.subjects.SubjectSubscriptionManager: boolean add(rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<rx.Single$22$1: void onNext(java.lang.Object)>
<com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder: com.facebook.stetho.Stetho$DefaultInspectorModulesBuilder databaseFiles(com.facebook.stetho.inspector.database.DatabaseFilesProvider)>
<rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber: void onError(java.lang.Throwable)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: java.lang.Object[] toArray()>
<okhttp3.MediaType: java.lang.String type()>
<okhttp3.internal.framed.FramedStream$FramedDataSource: okio.Timeout timeout()>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$6: rx.functions.Action1 lambdaFactory$(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addEncodedQueryParameter(java.lang.String,java.lang.String)>
<okhttp3.Response: java.util.List headers(java.lang.String)>
<rx.internal.operators.OperatorToObservableList: void <init>()>
<com.facebook.stetho.Stetho$BuilderBasedInitializer: void <init>(com.facebook.stetho.Stetho$InitializerBuilder)>
<com.facebook.stetho.dumpapp.plugins.CrashDumperPlugin: void doUncaughtException(java.util.Iterator)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber: void onCompleted()>
<rx.internal.util.BackpressureDrainManager: void terminate(java.lang.Throwable)>
<rx.internal.operators.OperatorWindowWithTime$State: rx.internal.operators.OperatorWindowWithTime$State next()>
<com.facebook.stetho.inspector.elements.Document$UpdateListener: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String)>
<com.facebook.stetho.server.SocketHandlerFactory: com.facebook.stetho.server.SocketHandler create()>
<rx.internal.operators.OperatorEagerConcatMap: java.lang.Object call(java.lang.Object)>
<okhttp3.internal.http.HttpHeaders: boolean hasVaryAll(okhttp3.Response)>
<fr.masciulli.drinks.model.Liquor$1: void <init>()>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator: void <init>()>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void childRequested(long)>
<rx.internal.operators.OperatorReplay$3: void call(java.lang.Object)>
<com.facebook.stetho.inspector.network.ResponseHandler: void onReadDecoded(int)>
<rx.internal.operators.OnSubscribeDelaySubscriptionOther$1: void onCompleted()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean offer(java.lang.Object)>
<okio.RealBufferedSource: java.lang.String readUtf8Line()>
<rx.subjects.ReplaySubject$ReplayUnboundedBuffer: boolean drain(rx.subjects.ReplaySubject$ReplayProducer)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: boolean containsAll(java.util.Collection)>
<okhttp3.internal.framed.FramedConnection$Builder: okhttp3.internal.framed.FramedConnection$Builder listener(okhttp3.internal.framed.FramedConnection$Listener)>
<okhttp3.Response: okhttp3.Handshake handshake()>
<retrofit2.ParameterHandler$Part: void <init>(okhttp3.Headers,retrofit2.Converter)>
<rx.internal.operators.OperatorMap$MapSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorTakeLastOne$Holder: void <init>()>
<rx.Completable$33$1: void onSubscribe(rx.Subscription)>
<okhttp3.internal.framed.Settings: int get(int)>
<com.squareup.picasso.NetworkPolicy: boolean shouldReadFromDiskCache(int)>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$BitmapFetchRunnable: void run()>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$HoneycombImpl: int provideOpenFlags(int)>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$NoopImpl: void <init>()>
<retrofit2.Utils$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>
<rx.observables.ConnectableObservable: void <init>(rx.Observable$OnSubscribe)>
<rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber: void onSuccess(java.lang.Object)>
<rx.observables.AsyncOnSubscribe$UnicastSubject$State: void <init>()>
<com.squareup.picasso.RequestCreator: void into(com.squareup.picasso.Target)>
<rx.internal.operators.OperatorSkipWhile: void <init>(rx.functions.Func2)>
<com.facebook.stetho.inspector.ChromeDevtoolsServer: void onMessage(com.facebook.stetho.websocket.SimpleSession,byte[],int)>
<rx.internal.operators.OperatorPublish$1: void call(rx.Subscriber)>
<com.facebook.stetho.inspector.protocol.module.Console: void <init>()>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.lang.Object remove()>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: void emitLoop(java.util.List,java.lang.Object,rx.internal.operators.NotificationLite)>
<com.squareup.picasso.Stats$StatsHandler$1: void <init>(com.squareup.picasso.Stats$StatsHandler,android.os.Message)>
<com.facebook.stetho.common.LogUtil: void v(java.lang.Throwable,java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.Page: void clearDeviceOrientationOverride(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.Completable: void subscribe(rx.Completable$CompletableSubscriber)>
<rx.Completable$29: void call(java.lang.Object)>
<okhttp3.internal.cache.CacheRequest: okio.Sink body()>
<rx.observers.Subscribers: rx.Subscriber empty()>
<com.facebook.stetho.common.android.FragmentCompat: com.facebook.stetho.common.android.FragmentActivityAccessor forFragmentActivity()>
<com.facebook.stetho.inspector.elements.DocumentProvider: void hideHighlight()>
<okhttp3.Cookie$Builder: okhttp3.Cookie$Builder path(java.lang.String)>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther: void call(rx.SingleSubscriber)>
<rx.exceptions.OnErrorThrowable: rx.exceptions.OnErrorThrowable 'from'(java.lang.Throwable)>
<rx.internal.operators.OperatorTimestamp: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorWindowWithTime: void <clinit>()>
<okio.Segment: void <init>(okio.Segment)>
<com.facebook.stetho.server.CompositeInputStream: boolean markSupported()>
<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: java.lang.String getNodeValue(java.lang.Object)>
<retrofit2.DefaultCallAdapterFactory$1: retrofit2.Call adapt(retrofit2.Call)>
<rx.internal.operators.OperatorEagerConcatMap: void <init>(rx.functions.Func1,int,int)>
<rx.internal.operators.OperatorZip: rx.Subscriber call(rx.Subscriber)>
<rx.Observable: rx.Observable delay(long,java.util.concurrent.TimeUnit)>
<okhttp3.internal.connection.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>
<rx.android.schedulers.AndroidSchedulers: rx.Scheduler 'from'(android.os.Looper)>
<rx.Observable: rx.Observable collect(rx.functions.Func0,rx.functions.Action2)>
<okhttp3.Protocol: okhttp3.Protocol valueOf(java.lang.String)>
<com.facebook.stetho.inspector.network.CountingOutputStream: void write(int)>
<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: void onInspectRequested(java.lang.Object)>
<okhttp3.internal.http.Http1xStream: okio.Source newChunkedSource(okhttp3.HttpUrl)>
<okio.DeflaterSink: void finishDeflate()>
<retrofit2.http.QueryMap: boolean encoded()>
<okio.SegmentedByteString: int lastIndexOf(byte[],int)>
<rx.internal.producers.ProducerArbiter$1: void request(long)>
<rx.Observable: rx.Observable unsubscribeOn(rx.Scheduler)>
<rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.network.MimeMatcher$MimeMatcherRule: void <init>(com.facebook.stetho.inspector.network.MimeMatcher,java.lang.String,java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor: void onUnhook(java.lang.Object)>
<rx.Completable: rx.Completable retry(long)>
<rx.internal.operators.OperatorDematerialize: rx.internal.operators.OperatorDematerialize instance()>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$4: rx.functions.Func1 lambdaFactory$()>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1: void onNext(java.lang.Object)>
<rx.Observable: rx.Observable toMap(rx.functions.Func1,rx.functions.Func1)>
<fr.masciulli.drinks.model.Liquor: java.lang.String getName()>
<okhttp3.internal.tls.TrustRootIndex: java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate)>
<okio.Buffer: boolean exhausted()>
<rx.internal.operators.BufferUntilSubscriber: void onCompleted()>
<rx.internal.operators.OperatorWindowWithSize: java.lang.Object call(java.lang.Object)>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager$AsyncPrettyPrintingCallable: java.lang.Object call()>
<okio.Segment: void <init>(byte[],int,int)>
<rx.subjects.ReplaySubject$ReplayBuffer: boolean drain(rx.subjects.ReplaySubject$ReplayProducer)>
<com.squareup.picasso.Utils: boolean isAirplaneModeOn(android.content.Context)>
<rx.internal.util.RxRingBuffer$2: rx.internal.util.unsafe.SpmcArrayQueue createObject()>
<rx.internal.operators.OnSubscribeAmb$AmbSubscriber: boolean isSelected()>
<rx.subscriptions.SerialSubscription: void unsubscribe()>
<okhttp3.HttpUrl$1: void <clinit>()>
<rx.internal.operators.OperatorSampleWithObservable$2: void <init>(rx.internal.operators.OperatorSampleWithObservable,java.util.concurrent.atomic.AtomicReference,rx.observers.SerializedSubscriber,rx.Subscriber)>
<com.facebook.stetho.common.ListUtil$ThreeItemImmutableList: int size()>
<rx.internal.util.ScalarSynchronousSingle$DirectScheduledEmission: void call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String onGetNodeName(java.lang.Object)>
<com.facebook.stetho.common.android.AccessibilityUtil: void <init>()>
<com.squareup.picasso.Callback: void onSuccess()>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$4: void <init>()>
<com.facebook.stetho.json.ObjectMapper: org.json.JSONObject _convertToJSONObject(java.lang.Object)>
<rx.Observable: rx.Completable toCompletable()>
<com.squareup.picasso.Request$Builder: com.squareup.picasso.Request$Builder transform(java.util.List)>
<okhttp3.internal.framed.FramedConnection: void pushDataLater(int,okio.BufferedSource,int,boolean)>
<rx.Observable: rx.Observable flatMap(rx.functions.Func1,int)>
<rx.Single$2: void call(java.lang.Object)>
<com.facebook.stetho.common.LogRedirector: void d(java.lang.String,java.lang.String)>
<okhttp3.Cache$2: java.lang.Object next()>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays$ViewHighlightOverlaysJellybeanMR2$PaddingTopHighlightDrawable: void highlightView(android.view.View)>
<com.facebook.stetho.inspector.elements.android.AndroidDescriptorHost: android.view.View getHighlightingView(java.lang.Object)>
<com.facebook.stetho.server.LocalSocketServer: android.net.LocalServerSocket bindToSocket(java.lang.String)>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectType: java.lang.String getProtocolValue()>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: void onError(java.lang.Throwable)>
<okhttp3.HttpUrl$Builder: int parsePort(java.lang.String,int,int)>
<rx.Completable: java.lang.Object 'to'(rx.functions.Func1)>
<rx.internal.operators.OperatorWindowWithTime$ExactSubscriber$1: void <init>(rx.internal.operators.OperatorWindowWithTime$ExactSubscriber,rx.internal.operators.OperatorWindowWithTime)>
<fr.masciulli.drinks.ui.activity.LiquorActivity$$Lambda$5: void <init>(fr.masciulli.drinks.ui.activity.LiquorActivity)>
<rx.internal.operators.OperatorDelay: rx.Subscriber call(rx.Subscriber)>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void fastpath()>
<com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper: org.json.JSONObject invoke(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorZip$ZipProducer: void <init>(rx.internal.operators.OperatorZip$Zip)>
<okhttp3.internal.tls.TrustRootIndex: void <init>()>
<com.squareup.picasso.TargetAction: void error()>
<okhttp3.Cache$CacheRequestImpl$1: void close()>
<rx.functions.Actions: rx.functions.Func0 toFunc(rx.functions.Action0,java.lang.Object)>
<okhttp3.Dns$1: void <init>()>
<rx.internal.util.atomic.SpscLinkedArrayQueue: boolean remove(java.lang.Object)>
<rx.observables.SyncOnSubscribe: void onUnsubscribe(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.DOM: void releaseChildNodeRemovedEvent(com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeRemovedEvent)>
<rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber: void onSubscribe(rx.Subscription)>
<rx.observables.GroupedObservable$1: void call(java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Profiler$ProfileHeaderResponse: void <init>(com.facebook.stetho.inspector.protocol.module.Profiler$1)>
<rx.observers.TestObserver: java.util.List getOnCompletedEvents()>
<com.facebook.stetho.inspector.protocol.module.Runtime: com.facebook.stetho.inspector.protocol.module.Runtime$Session getSession(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>
<rx.internal.operators.OnSubscribeRefCount: rx.functions.Action1 onSubscribe(rx.Subscriber,java.util.concurrent.atomic.AtomicBoolean)>
<fr.masciulli.drinks.ui.adapter.LiquorsAdapter: void lambda$onBindViewHolder$0(fr.masciulli.drinks.ui.adapter.holder.TileViewHolder,fr.masciulli.drinks.model.Liquor,android.view.View)>
<okio.RealBufferedSink: okio.BufferedSink writeLongLe(long)>
<rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue: java.util.Iterator iterator()>
<rx.internal.operators.OperatorSkip: void <init>(int)>
<rx.singles.BlockingSingle: void <init>(rx.Single)>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.ViewGroupDescriptor: void onGetChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OperatorTakeLastOne$ParentSubscriber: void <clinit>()>
<rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl: java.lang.Object next(java.lang.Object,long,rx.Observer)>
<rx.Single$14: void <init>(rx.Single)>
<rx.internal.operators.OperatorDistinct$Holder: void <init>()>
<okhttp3.internal.framed.FramedStream$StreamTimeout: void exitAndThrowIfTimedOut()>
<com.facebook.stetho.inspector.elements.android.MethodInvoker$FloatMethodInvoker: java.lang.Float convertArgument(java.lang.String)>
<rx.observers.TestSubscriber: rx.observers.TestSubscriber create(long)>
<rx.internal.operators.OperatorSkipUntil$1: void onCompleted()>
<com.facebook.stetho.common.ExceptionUtil: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>
<rx.Observable: rx.Observable concat(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.Scheduler$Worker$1: void call()>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator stableKey(java.lang.String)>
<rx.internal.operators.NeverObservableHolder: void <init>(java.lang.String,int)>
<rx.internal.operators.OperatorZip$Zip$InnerSubscriber: void onStart()>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver: void onNext(java.lang.Object)>
<rx.observers.Subscribers$5: void onNext(java.lang.Object)>
<okhttp3.internal.framed.Ping: void <init>()>
<okhttp3.RealCall: okhttp3.internal.connection.StreamAllocation streamAllocation()>
<com.squareup.picasso.Picasso: boolean isDebugging()>
<rx.Observable: rx.Observable concatEager(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable)>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: boolean isUnsubscribed()>
<rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker: boolean isUnsubscribed()>
<rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator: void request(long)>
<com.squareup.picasso.LruCache: void evictAll()>
<com.facebook.stetho.inspector.screencast.ScreencastDispatcher$CancellationRunnable: void <init>(com.facebook.stetho.inspector.screencast.ScreencastDispatcher)>
<rx.internal.operators.OperatorMulticast: void connect(rx.functions.Action1)>
<rx.internal.operators.OnSubscribeDelaySubscription$1: void <init>(rx.internal.operators.OnSubscribeDelaySubscription,rx.Subscriber)>
<rx.Observable: rx.Observable retryWhen(rx.functions.Func1,rx.Scheduler)>
<com.facebook.stetho.inspector.elements.android.MethodInvoker: void invoke(java.lang.Object,java.lang.String,java.lang.String)>
<rx.functions.Func1: java.lang.Object call(java.lang.Object)>
<okhttp3.internal.http.Http1xStream$ChunkedSource: void close()>
<retrofit2.Utils$GenericArrayTypeImpl: java.lang.reflect.Type getGenericComponentType()>
<okhttp3.Cache$1: void remove(okhttp3.Request)>
<fr.masciulli.drinks.ui.activity.LiquorActivity: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorBufferWithSingleObservable$1: java.lang.Object call()>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentProvider: void getWindows(com.facebook.stetho.common.Accumulator)>
<rx.internal.operators.OperatorBufferWithSingleObservable$1: void <init>(rx.internal.operators.OperatorBufferWithSingleObservable,rx.Observable)>
<rx.internal.util.RxRingBuffer: rx.internal.util.RxRingBuffer getSpscInstance()>
<com.facebook.stetho.inspector.network.GunzippingOutputStream: void <clinit>()>
<rx.Completable$27: void onSubscribe(rx.Subscription)>
<rx.internal.operators.OperatorTimeout$1$1: void call()>
<rx.schedulers.TrampolineScheduler: void <init>()>
<com.facebook.stetho.inspector.elements.ObjectDescriptor: void setAttributesAsText(java.lang.Object,java.lang.String)>
<okhttp3.OkHttpClient$1: void setCache(okhttp3.OkHttpClient$Builder,okhttp3.internal.cache.InternalCache)>
<rx.Completable: rx.Completable defer(rx.functions.Func0)>
<rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber: void emit()>
<rx.internal.util.RxRingBuffer: int capacity()>
<rx.Observable: rx.Observable defer(rx.functions.Func0)>
<rx.plugins.RxJavaPlugins: rx.plugins.RxJavaCompletableExecutionHook getCompletableExecutionHook()>
<rx.Completable$13$1$1: void call()>
<rx.internal.operators.OperatorThrottleFirst$1: void <init>(rx.internal.operators.OperatorThrottleFirst,rx.Subscriber,rx.Subscriber)>
<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okhttp3.MediaType contentType()>
<rx.internal.operators.OperatorPublish$InnerProducer: void request(long)>
<okhttp3.internal.framed.PushObserver: boolean onData(int,okio.BufferedSource,int,boolean)>
<com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$JellyBeanAndBeyondImpl: void <init>(com.facebook.stetho.inspector.database.SQLiteDatabaseCompat$1)>
<okhttp3.internal.cache.DiskLruCache: void close()>
<rx.internal.operators.OperatorBufferWithSingleObservable$2: void <init>(rx.internal.operators.OperatorBufferWithSingleObservable,rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber)>
<rx.internal.operators.OnSubscribeCombineLatest: void <init>(rx.Observable[],java.lang.Iterable,rx.functions.FuncN,int,boolean)>
<retrofit2.OkHttpCall$NoContentResponseBody: long contentLength()>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther$1: void onSuccess(java.lang.Object)>
<rx.internal.util.InternalObservableUtils: rx.functions.Func1 createRetryDematerializer(rx.functions.Func1)>
<rx.Single$13: void <init>(rx.functions.Func9)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorRequest: java.lang.String headerValue(int)>
<fr.masciulli.drinks.ui.fragment.LiquorsFragment: void onLiquorsRetrieved(java.util.List)>
<rx.internal.operators.OperatorObserveOn: rx.Observable$Operator rebatch(int)>
<rx.internal.operators.OnSubscribeRefCount$2: void <init>(rx.internal.operators.OnSubscribeRefCount,rx.Subscriber,rx.Subscriber,rx.subscriptions.CompositeSubscription)>
<okhttp3.MultipartBody: int size()>
<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>
<okio.Buffer: okio.BufferedSink writeHexadecimalUnsignedLong(long)>
<rx.Observable: rx.Observable asObservable()>
<rx.internal.operators.OperatorWindowWithSize$WindowExact$1: void <init>(rx.internal.operators.OperatorWindowWithSize$WindowExact)>
<rx.internal.operators.OnSubscribeRange: void call(rx.Subscriber)>
<rx.internal.operators.OnSubscribeRedo$RedoFinite$1: void <init>(rx.internal.operators.OnSubscribeRedo$RedoFinite)>
<rx.Completable$24$1: void onCompleted()>
<rx.internal.operators.OnSubscribeTimerPeriodically$1: void call()>
<retrofit2.Utils$ParameterizedTypeImpl: java.lang.reflect.Type getRawType()>
<rx.internal.operators.OperatorTakeUntil$2: void onNext(java.lang.Object)>
<okhttp3.Headers: java.util.List values(java.lang.String)>
<okio.Base64: byte[] decode(java.lang.String)>
<rx.exceptions.OnCompletedFailedException: void <init>(java.lang.String,java.lang.Throwable)>
<rx.Completable$14: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorBufferWithSize$BufferOverlap: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorBufferWithTime$InexactSubscriber: void scheduleChunk()>
<rx.subjects.Subject: void <init>(rx.Observable$OnSubscribe)>
<okhttp3.CacheControl: java.lang.String headerValue()>
<com.facebook.stetho.dumpapp.Framer: void writeExitCode(int)>
<okio.HashingSource: long read(okio.Buffer,long)>
<okhttp3.internal.cache.CacheInterceptor$2: void <init>(okhttp3.internal.cache.CacheInterceptor,okio.BufferedSource,okhttp3.internal.cache.CacheRequest,okio.BufferedSink)>
<com.facebook.stetho.inspector.protocol.module.CSS$GetComputedStyleForNodeResult: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<fr.masciulli.drinks.ui.adapter.holder.TileViewHolder: void <init>(android.view.View)>
<com.squareup.picasso.RequestCreator: void fetch(com.squareup.picasso.Callback)>
<retrofit2.ParameterHandler$QueryMap: void apply(retrofit2.RequestBuilder,java.lang.Object)>
<rx.Completable$17$1: void <init>(rx.Completable$17,rx.Completable$CompletableSubscriber)>
<com.facebook.stetho.inspector.elements.android.DialogDescriptor: void onGetChildren(android.app.Dialog,com.facebook.stetho.common.Accumulator)>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.util.List getDatabaseNames()>
<com.facebook.stetho.inspector.runtime.RhinoDetectingRuntimeReplFactory$1: java.lang.Object evaluate(java.lang.String)>
<rx.internal.operators.OperatorMerge$InnerSubscriber: void onCompleted()>
<rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber: void onNext(java.lang.Object)>
<okhttp3.internal.cache.DiskLruCache$Snapshot: java.lang.String key()>
<rx.internal.operators.OperatorMap$MapSubscriber: void onNext(java.lang.Object)>
<okhttp3.internal.http.HttpDate: void <init>()>
<fr.masciulli.drinks.ui.adapter.holder.RelatedHeaderViewHolder: android.widget.TextView getHistoryView()>
<com.facebook.stetho.inspector.database.SqliteDatabaseDriver: java.lang.Object executeRawQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler)>
<com.facebook.stetho.inspector.database.DatabaseFilesProvider: java.util.List getDatabaseFiles()>
<okhttp3.Cache$CacheResponseBody$1: void <init>(okhttp3.Cache$CacheResponseBody,okio.Source,okhttp3.internal.cache.DiskLruCache$Snapshot)>
<rx.subjects.UnicastSubject$State: void call(java.lang.Object)>
<rx.observers.TestObserver: void onNext(java.lang.Object)>
<com.facebook.stetho.common.android.FragmentCompatSupportLib$FragmentAccessorSupportLib: void <init>()>
<rx.internal.util.RxRingBuffer: void <init>()>
<rx.observables.AsyncOnSubscribe: java.lang.Object generateState()>
<rx.subjects.SubjectSubscriptionManager$1: void <init>(rx.subjects.SubjectSubscriptionManager,rx.subjects.SubjectSubscriptionManager$SubjectObserver)>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1: void onError(java.lang.Throwable)>
<okhttp3.Cache: boolean isClosed()>
<rx.observables.ConnectableObservable$1: void call(java.lang.Object)>
<rx.observables.SyncOnSubscribe: rx.observables.SyncOnSubscribe createStateless(rx.functions.Action1,rx.functions.Action0)>
<rx.internal.operators.OperatorSkipUntil: void <init>(rx.Observable)>
<com.facebook.stetho.common.LogUtil: void d(java.lang.String)>
<com.facebook.stetho.Stetho: com.facebook.stetho.Stetho$InitializerBuilder newInitializerBuilder(android.content.Context)>
<rx.internal.util.PlatformDependent$1: java.lang.ClassLoader run()>
<rx.internal.operators.OperatorToMap$DefaultToMapFactory: void <init>()>
<rx.internal.operators.OnSubscribeFromIterable$IterableProducer: void fastpath()>
<rx.internal.schedulers.ScheduledAction: void <init>(rx.functions.Action0,rx.subscriptions.CompositeSubscription)>
<com.squareup.picasso.Dispatcher$NetworkBroadcastReceiver: void unregister()>
<com.facebook.stetho.inspector.protocol.module.CSS$ShorthandEntry: void <init>()>
<rx.internal.operators.OperatorSkipWhile$2: void <init>(rx.functions.Func1)>
<rx.Completable$CompletableSubscriber: void onSubscribe(rx.Subscription)>
<com.facebook.stetho.dumpapp.DumperContext: java.util.List getArgsAsList()>
<rx.Completable$22$1: void onSubscribe(rx.Subscription)>
<rx.Observable: rx.Observable timeout(rx.functions.Func1,rx.Observable)>
<com.squareup.picasso.Callback$EmptyCallback: void onError()>
<okhttp3.MultipartBody: java.lang.String boundary()>
<okhttp3.internal.tls.DistinguishedNameParser: int getByte(int)>
<rx.internal.operators.OnSubscribeFlattenIterable$1: void <init>(rx.internal.operators.OnSubscribeFlattenIterable,rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber)>
<rx.internal.operators.BlockingOperatorNext$NextObserver: void onError(java.lang.Throwable)>
<rx.Observable: rx.Observable buffer(int)>
<rx.internal.producers.QueuedProducer: boolean offer(java.lang.Object)>
<rx.Observable: rx.Observable mapNotification(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0)>
<okio.ByteString: okio.ByteString sha256()>
<com.squareup.picasso.ImageViewAction: void cancel()>
<rx.internal.operators.OperatorFilter: rx.Subscriber call(rx.Subscriber)>
<okhttp3.FormBody: void <init>(java.util.List,java.util.List,okhttp3.FormBody$1)>
<com.squareup.picasso.Picasso$LoadedFrom: void <clinit>()>
<okhttp3.Cookie: java.lang.String toString()>
<rx.Completable$22: void call(java.lang.Object)>
<rx.internal.operators.OnSubscribeDefer: void call(rx.Subscriber)>
<retrofit2.Platform: java.util.concurrent.Executor defaultCallbackExecutor()>
<rx.internal.operators.OperatorWithLatestFrom: rx.Subscriber call(rx.Subscriber)>
<com.facebook.stetho.inspector.protocol.module.DOM$GetDocumentResponse: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>
<rx.internal.operators.OperatorReplay$Node: void <init>(java.lang.Object,long)>
<rx.internal.operators.OperatorDoOnEach$1: void <init>(rx.internal.operators.OperatorDoOnEach,rx.Subscriber,rx.Subscriber)>
<rx.internal.operators.OperatorWindowWithTime$InexactSubscriber$1: void call()>
<rx.Completable$12$1: void call()>
<com.facebook.stetho.inspector.protocol.module.DOM: void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber: void onNext(java.lang.Object)>
<com.squareup.picasso.RequestCreator: com.squareup.picasso.RequestCreator centerCrop()>
<rx.Single: rx.Single onErrorReturn(rx.functions.Func1)>
<rx.internal.operators.OperatorPublish$PublishSubscriber: void onCompleted()>
<rx.observers.TestSubscriber: void <clinit>()>
<com.squareup.picasso.BitmapHunter$4: void run()>
<rx.internal.operators.OperatorRetryWithPredicate: rx.Subscriber call(rx.Subscriber)>
<rx.internal.operators.OperatorSequenceEqual: void <clinit>()>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: void <init>(com.facebook.stetho.inspector.protocol.module.Runtime$1)>
<rx.Single: rx.Observable merge(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<okhttp3.internal.http.Http1xStream$FixedLengthSink: void flush()>
<com.squareup.picasso.PicassoExecutorService: void setThreadCount(int)>
<okhttp3.internal.framed.Huffman: byte[] decode(byte[])>
<rx.Completable$32: java.lang.Object call()>
<rx.internal.operators.OperatorTakeUntilPredicate$1: void <init>(rx.internal.operators.OperatorTakeUntilPredicate,rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber)>
<okhttp3.internal.http.Http2xStream: void finishRequest()>
<com.facebook.stetho.json.ObjectMapper: java.lang.reflect.Method getJsonValueMethodImpl(java.lang.Class)>
<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String getIdAttribute(android.view.View)>
<rx.internal.util.RxRingBuffer: rx.internal.util.RxRingBuffer getSpmcInstance()>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorRequest: java.lang.String id()>
<rx.internal.operators.OperatorMerge$MergeProducer: void <init>(rx.internal.operators.OperatorMerge$MergeSubscriber)>
<rx.Single: rx.Single defer(java.util.concurrent.Callable)>
<com.facebook.stetho.inspector.network.GunzippingOutputStream$GunzippingCallable: java.lang.Object call()>
<rx.Single$21$2: void onNext(java.lang.Object)>
<rx.Notification: void <clinit>()>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory,javax.net.ssl.X509TrustManager)>
<rx.internal.operators.OperatorWindowWithSize$WindowExact: rx.Producer createProducer()>
<rx.internal.operators.OperatorBufferWithSize$BufferOverlap: void onCompleted()>
<rx.internal.operators.OperatorGroupBy$GroupedUnicast: void onNext(java.lang.Object)>
<rx.Observable: rx.Observable doOnUnsubscribe(rx.functions.Action0)>
<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver getDatabasePeer(java.lang.String)>
<rx.functions.Actions$EmptyAction: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.common.StringUtil: void <init>()>
<okio.GzipSource: void updateCrc(okio.Buffer,long,long)>
<fr.masciulli.drinks.model.Drink$1: java.lang.Object createFromParcel(android.os.Parcel)>
<okhttp3.internal.framed.FrameReader: void readConnectionPreface()>
<rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer: void call()>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse: java.lang.String requestId()>
<com.facebook.stetho.websocket.SimpleEndpoint: void onMessage(com.facebook.stetho.websocket.SimpleSession,java.lang.String)>
<rx.internal.util.RxRingBuffer: void release()>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorRequest: byte[] body()>
<okhttp3.internal.framed.Http2$Writer: void goAway(int,okhttp3.internal.framed.ErrorCode,byte[])>
<rx.Single$25: void call(rx.SingleSubscriber)>
<rx.observers.TestObserver: java.util.List getOnNextEvents()>
<com.squareup.picasso.RequestCreator: void fetch()>
<rx.Observable: rx.Observable concatWith(rx.Observable)>
<okhttp3.Cookie$Builder: okhttp3.Cookie$Builder httpOnly()>
<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument$Update createShadowDocumentUpdate()>
<rx.internal.util.RxRingBuffer: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.Network$Request: void <init>()>
<rx.internal.operators.OperatorReplay$1: java.lang.Object call()>
<retrofit2.adapter.rxjava.SingleHelper$1: void <init>(retrofit2.CallAdapter)>
<okhttp3.Protocol: java.lang.String toString()>
<rx.observables.SyncOnSubscribe$3: void <init>(rx.functions.Action1)>
<rx.functions.Functions: void <init>()>
<okhttp3.FormBody$Builder: okhttp3.FormBody build()>
<com.facebook.stetho.inspector.protocol.module.Runtime$ObjectSubType: void <clinit>()>
<retrofit2.adapter.rxjava.HttpException: int code()>
<fr.masciulli.drinks.model.Drink: java.lang.String getWikipedia()>
<rx.subjects.SubjectSubscriptionManager$State: void <clinit>()>
<rx.Observable: rx.Observable singleOrDefault(java.lang.Object)>
<rx.internal.util.SynchronizedQueue: java.lang.Object element()>
<com.facebook.stetho.dumpapp.DumpappFramingException: void <init>(java.lang.String)>
<rx.internal.operators.OperatorSerialize: java.lang.Object call(java.lang.Object)>
<com.squareup.picasso.Picasso: void submit(com.squareup.picasso.Action)>
<rx.internal.operators.OnSubscribeFromIterable$IterableProducer: void slowpath(long)>
<okhttp3.HttpUrl: java.util.List queryParameterValues(java.lang.String)>
<rx.internal.operators.OnSubscribeRedo$RetryWithPredicate: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver: void onNext(java.lang.Object)>
<rx.android.plugins.RxAndroidPlugins: void reset()>
<com.facebook.stetho.inspector.elements.android.DialogFragmentDescriptor: void maybeRegister(com.facebook.stetho.inspector.elements.DescriptorMap,com.facebook.stetho.common.android.FragmentCompat)>
<rx.internal.operators.OperatorWithLatestFrom$1: void <init>(rx.internal.operators.OperatorWithLatestFrom,rx.Subscriber,boolean,java.util.concurrent.atomic.AtomicReference,rx.observers.SerializedSubscriber)>
<okhttp3.internal.framed.FramedConnection$Builder: okhttp3.internal.framed.FramedConnection$Builder protocol(okhttp3.Protocol)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: java.lang.String nextArgValue(java.util.Iterator)>
<okio.Segment: void writeTo(okio.Segment,int)>
<rx.Observable: rx.Observable concatMapDelayError(rx.functions.Func1)>
<retrofit2.Platform$IOS$MainThreadExecutor: void <init>()>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: void unsubscribe()>
<retrofit2.Utils: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>
<rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator: void <init>()>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: void onCompleted()>
<rx.functions.Functions$12: java.lang.Object call(java.lang.Object[])>
<rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber: void onCompleted()>
<rx.internal.util.UtilityFunctions$AlwaysTrue: void <init>(java.lang.String,int)>
<com.facebook.stetho.inspector.elements.Document: void applyDocumentUpdate(com.facebook.stetho.inspector.elements.ShadowDocument$Update)>
<rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.jsonrpc.JsonRpcException: void <init>(com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError)>
<com.facebook.stetho.inspector.network.GunzippingOutputStream$GunzippingCallable: java.lang.Void call()>
<com.facebook.stetho.inspector.protocol.module.DOMStorage$GetDOMStorageItemsResult: void <init>()>
<okio.HashingSource: okio.HashingSource md5(okio.Source)>
<rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber: void onCompleted()>
<okhttp3.Cookie: java.util.List parseAll(okhttp3.HttpUrl,okhttp3.Headers)>
<rx.internal.operators.SingleOperatorOnErrorResumeNext: void <init>(rx.Single,rx.functions.Func1)>
<rx.observables.SyncOnSubscribe: void call(rx.Subscriber)>
<rx.Observable: rx.Observable delaySubscription(long,java.util.concurrent.TimeUnit)>
<rx.Single$4: void call(rx.SingleSubscriber)>
<rx.observables.AsyncOnSubscribe$AsyncOuterManager: void setConcatProducer(rx.Producer)>
<com.facebook.stetho.server.ProtocolDetectingSocketHandler$AlwaysMatchMatcher: boolean matches(java.io.InputStream)>
<okhttp3.OkHttpClient$Builder: void setInternalCache(okhttp3.internal.cache.InternalCache)>
<rx.observers.SerializedObserver: void onNext(java.lang.Object)>
<retrofit2.ParameterHandler$1: void <init>(retrofit2.ParameterHandler)>
<rx.Observable: rx.Observable toMultimap(rx.functions.Func1)>
<rx.internal.util.unsafe.SpscLinkedQueue: java.lang.Object peek()>
<rx.internal.operators.OnSubscribeRefCount$3: void <init>(rx.internal.operators.OnSubscribeRefCount,rx.subscriptions.CompositeSubscription)>
<com.facebook.stetho.inspector.protocol.module.Console$CallFrame: void <init>()>
<com.facebook.stetho.server.LeakyBufferedInputStream: void reset()>
<retrofit2.adapter.rxjava.RxJavaCallAdapterFactory$ResultCallAdapter: java.lang.reflect.Type responseType()>
<rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc$WindowSubscriber: void <init>(rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc,rx.Subscriber,rx.Subscription)>
<rx.Observable: rx.Observable buffer(int,int)>
<okhttp3.CacheControl: int minFreshSeconds()>
<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: void <init>(com.facebook.stetho.inspector.protocol.module.DOM)>
<rx.internal.operators.OperatorGroupBy$GroupedUnicast: void onComplete()>
<rx.internal.operators.CachedObservable$CacheState$1: void onError(java.lang.Throwable)>
<com.facebook.stetho.common.StringUtil: java.lang.String removePrefix(java.lang.String,java.lang.String,java.lang.String)>
<rx.Completable: rx.Single andThen(rx.Single)>
<okhttp3.Cookie: boolean httpOnly()>
<rx.internal.operators.OperatorSequenceEqual$2: java.lang.Boolean call(java.lang.Object,java.lang.Object)>
<com.facebook.stetho.common.android.ViewUtil: android.view.View hitTest(android.view.View,float,float,com.facebook.stetho.common.Predicate)>
<rx.internal.operators.OperatorThrottleFirst$1: void onError(java.lang.Throwable)>
<okio.RealBufferedSink: okio.BufferedSink writeUtf8CodePoint(int)>
<rx.internal.operators.OperatorUnsubscribeOn$2$1: void call()>
<rx.plugins.RxJavaSingleExecutionHookDefault: rx.plugins.RxJavaSingleExecutionHook getInstance()>
<com.facebook.stetho.inspector.protocol.module.CSS$CSSRule: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void writeLine()>
<rx.internal.producers.ProducerArbiter: void setProducer(rx.Producer)>
<rx.schedulers.TestScheduler: void advanceTimeBy(long,java.util.concurrent.TimeUnit)>
<rx.Completable$5: void <init>(rx.functions.Func0)>
<rx.internal.operators.OperatorSwitch$SwitchSubscriber: void emit(java.lang.Object,rx.internal.operators.OperatorSwitch$InnerSubscriber)>
<okhttp3.HttpUrl: java.util.Set queryParameterNames()>
<rx.internal.util.atomic.AtomicReferenceArrayQueue: void svElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>
<fr.masciulli.drinks.ui.view.RatioImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<fr.masciulli.drinks.ui.adapter.LiquorRelatedAdapter: void bindHeaderHolder(fr.masciulli.drinks.ui.adapter.holder.RelatedHeaderViewHolder)>
<com.squareup.picasso.Dispatcher$NetworkBroadcastReceiver: void <init>(com.squareup.picasso.Dispatcher)>
<com.squareup.picasso.MarkableInputStream: int read(byte[],int,int)>
<rx.Observable: rx.Observable skipLast(int)>
<rx.exceptions.CompositeException: void printStackTrace(java.io.PrintWriter)>
<okhttp3.internal.platform.AndroidPlatform: void log(int,java.lang.String,java.lang.Throwable)>
<okio.Base64: void <clinit>()>
<okhttp3.Cookie$Builder: okhttp3.Cookie$Builder hostOnlyDomain(java.lang.String)>
<com.squareup.picasso.Picasso$Builder: com.squareup.picasso.Picasso build()>
<com.squareup.picasso.NetworkRequestHandler: void <init>(com.squareup.picasso.Downloader,com.squareup.picasso.Stats)>
<rx.observers.TestSubscriber: rx.observers.TestSubscriber create(rx.Observer)>
<com.facebook.stetho.inspector.protocol.module.CSS: void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<rx.exceptions.OnErrorFailedException: void <init>(java.lang.String,java.lang.Throwable)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: android.app.FragmentManager getFragmentManager(android.app.Fragment)>
<rx.internal.util.ScalarSynchronousObservable$ScalarAsyncOnSubscribe: void <init>(java.lang.Object,rx.functions.Func1)>
<rx.Completable: rx.Completable concat(rx.Observable)>
<rx.internal.operators.OnSubscribeUsing$DisposeAction: void call()>
<rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter: boolean isUnsubscribed()>
<rx.internal.operators.OnSubscribeDetach$DetachProducer: void <init>(rx.internal.operators.OnSubscribeDetach$DetachSubscriber)>
<okio.ByteString: byte[] toByteArray()>
<rx.observables.SyncOnSubscribe$SubscriptionProducer: boolean isUnsubscribed()>
<okhttp3.internal.framed.FramedStream: java.util.List getResponseHeaders()>
<rx.Single: rx.Observable concat(rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single,rx.Single)>
<com.facebook.stetho.inspector.MethodDispatcher: java.util.Map buildDispatchTable(com.facebook.stetho.json.ObjectMapper,java.lang.Iterable)>
<okhttp3.internal.Util: boolean isAndroidGetsocknameError(java.lang.AssertionError)>
<com.facebook.stetho.dumpapp.Dumper: int doDump(java.io.InputStream,java.io.PrintStream,java.io.PrintStream,java.lang.String[])>
<rx.internal.operators.OperatorWindowWithObservableFactory: void <clinit>()>
<com.facebook.stetho.dumpapp.Framer$FramingInputStream: void <init>(com.facebook.stetho.dumpapp.Framer,com.facebook.stetho.dumpapp.Framer$1)>
<okhttp3.internal.platform.Jdk9Platform: okhttp3.internal.platform.Jdk9Platform buildIfSupported()>
<rx.Single: rx.Observable merge(rx.Single,rx.Single,rx.Single,rx.Single)>
<okhttp3.internal.framed.PushObserver: void <clinit>()>
<rx.internal.operators.CompletableOnSubscribeMergeIterable$1: void onError(java.lang.Throwable)>
<rx.internal.operators.OperatorTakeLastTimed$TakeLastTimedSubscriber: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorScan: void <init>(java.lang.Object,rx.functions.Func2)>
<com.squareup.picasso.Stats: void dispatchDownloadFinished(long)>
<rx.internal.operators.OperatorOnBackpressureDrop$2: void onStart()>
<com.facebook.stetho.inspector.elements.DescriptorMap: com.facebook.stetho.inspector.elements.DescriptorMap register(java.lang.Class,com.facebook.stetho.inspector.elements.Descriptor)>
<okhttp3.internal.connection.RealConnection: okhttp3.Request createTunnel(int,int,okhttp3.Request,okhttp3.HttpUrl)>
<com.squareup.picasso.Request$Builder: boolean hasSize()>
<rx.internal.operators.BufferUntilSubscriber$1: void <init>()>
<okio.Buffer: okio.Buffer writeShortLe(int)>
<okhttp3.Challenge: int hashCode()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: java.io.InputStream interpretResponseStream(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,com.facebook.stetho.inspector.network.ResponseHandler)>
<com.facebook.stetho.inspector.elements.Descriptor: void removeCallbacks(java.lang.Runnable)>
<rx.subjects.TestSubject$2: void call()>
<retrofit2.BuiltInConverters$RequestBodyConverter: void <init>()>
<rx.internal.operators.OperatorSingle$ParentSubscriber: void onNext(java.lang.Object)>
<com.facebook.stetho.inspector.elements.Origin: java.lang.String getProtocolValue()>
<okhttp3.internal.framed.Spdy3$Reader: void readConnectionPreface()>
<rx.subjects.BehaviorSubject: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorOnBackpressureDrop$2: void <init>(rx.internal.operators.OperatorOnBackpressureDrop,rx.Subscriber,rx.Subscriber,java.util.concurrent.atomic.AtomicLong)>
<rx.functions.Functions$13: java.lang.Void call(java.lang.Object[])>
<com.facebook.stetho.inspector.protocol.module.Database$1: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleRawQuery()>
<rx.functions.Actions: rx.functions.Func2 toFunc(rx.functions.Action2,java.lang.Object)>
<okio.ByteString: byte[] internalArray()>
<rx.subjects.UnicastSubject$State: void doTerminate()>
<rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$2: void call()>
<rx.internal.operators.OnSubscribePublishMulticast$PublishProducer: boolean isUnsubscribed()>
<okio.Buffer: boolean rangeEquals(long,okio.ByteString)>
<rx.Single$19$1: void call()>
<com.facebook.stetho.inspector.elements.Document$ProviderListener: void <init>(com.facebook.stetho.inspector.elements.Document)>
<com.facebook.stetho.inspector.network.ResponseHandler: void onEOF()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder password(java.lang.String)>
<com.squareup.picasso.Picasso: com.squareup.picasso.Request transformRequest(com.squareup.picasso.Request)>
<okhttp3.internal.framed.StreamResetException: void <init>(okhttp3.internal.framed.ErrorCode)>
<rx.internal.operators.CompletableOnSubscribeTimeout: void call(rx.Completable$CompletableSubscriber)>
<okio.Buffer: okio.BufferedSink emitCompleteSegments()>
<rx.Completable$16$1$2: void call()>
<retrofit2.BuiltInConverters$StreamingResponseBodyConverter: void <init>()>
<rx.internal.operators.OperatorBufferWithSize: void <init>(int,int)>
<com.facebook.stetho.inspector.network.MimeMatcher$MimeMatcherRule: boolean match(java.lang.String)>
<rx.internal.operators.OperatorTimeout$2: java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.squareup.picasso.Stats: void dispatchCacheMiss()>
<rx.functions.Actions: rx.functions.Func4 toFunc(rx.functions.Action4,java.lang.Object)>
<rx.Completable: rx.Completable doOnError(rx.functions.Action1)>
<rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker: rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.inspector.elements.Document$4: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.ShadowDocument$Update)>
<com.facebook.stetho.inspector.elements.Document: void getElementStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>
<rx.Observable: rx.Observable onBackpressureBuffer(long,rx.functions.Action0,rx.BackpressureOverflow$Strategy)>
<com.facebook.stetho.server.http.LightHttpBody$1: java.lang.String contentType()>
<rx.Single: rx.Observable concat(rx.Single,rx.Single,rx.Single)>
<com.facebook.stetho.common.android.FragmentCompatFramework: com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb forFragment()>
<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getDatabaseTableNames(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<com.squareup.picasso.Picasso: void setIndicatorsEnabled(boolean)>
<rx.internal.operators.OperatorWithLatestFrom$2: void onError(java.lang.Throwable)>
<rx.internal.util.InternalObservableUtils$RetryNotificationDematerializer: java.lang.Object call(java.lang.Object)>
<fr.masciulli.drinks.model.Liquor$1: fr.masciulli.drinks.model.Liquor[] newArray(int)>
<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>
<rx.observers.TestSubscriber: void assertError(java.lang.Throwable)>
<rx.exceptions.CompositeException: void <init>(java.lang.Throwable[])>
<rx.subjects.ReplaySubject: java.lang.Object[] getValues(java.lang.Object[])>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder allEnabledTlsVersions()>
<okhttp3.internal.framed.Hpack: void <init>()>
<rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker: void <init>(rx.internal.schedulers.EventLoopsScheduler$PoolWorker)>
<com.facebook.stetho.inspector.console.RuntimeRepl: java.lang.Object evaluate(java.lang.String)>
<com.facebook.stetho.dumpapp.Framer$FramingOutputStream: void write(byte[])>
<com.facebook.stetho.inspector.network.ResponseHandlingInputStream: void writeToOutputStream(byte[],int,int)>
<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>
<com.facebook.stetho.websocket.Frame: byte[] encodeLength(long)>
<com.facebook.stetho.dumpapp.plugins.SharedPreferencesDumperPlugin: void doWrite(java.util.List)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot: void onGetChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>
<okhttp3.Dispatcher: void setIdleCallback(java.lang.Runnable)>
<rx.Completable$28: void onCompleted()>
<rx.internal.operators.OperatorOnBackpressureDrop: java.lang.Object call(java.lang.Object)>
<rx.internal.operators.OperatorReplay$2: void call(rx.Subscriber)>
<okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider: void <init>(java.util.List)>
<rx.Single$7: void <init>(rx.functions.Func3)>
<com.facebook.stetho.okhttp3.StethoInterceptor$OkHttpInspectorResponse: java.lang.String requestId()>
<rx.internal.operators.OnSubscribeDetach$TerminatedProducer: rx.internal.operators.OnSubscribeDetach$TerminatedProducer[] values()>
<com.squareup.picasso.LruCache: int size()>
<rx.internal.operators.OperatorMerge$HolderNoDelay: void <init>()>
<rx.Observable: rx.Observable firstOrDefault(java.lang.Object)>
<rx.observables.SyncOnSubscribe: rx.observables.SyncOnSubscribe createSingleState(rx.functions.Func0,rx.functions.Action2)>
<com.facebook.stetho.inspector.protocol.module.CSS$1$1: void <init>(com.facebook.stetho.inspector.protocol.module.CSS$1)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedPassword(java.lang.String)>
<rx.subjects.SubjectSubscriptionManager$SubjectObserver: java.lang.Object index()>
<okhttp3.internal.connection.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>
<rx.internal.operators.OperatorMapNotification: void <init>(rx.functions.Func1,rx.functions.Func1,rx.functions.Func0)>
<com.squareup.picasso.RequestHandler$Result: void <init>(java.io.InputStream,com.squareup.picasso.Picasso$LoadedFrom)>
<okio.Buffer: void readFully(okio.Buffer,long)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment$$Lambda$3: void <init>(fr.masciulli.drinks.ui.fragment.DrinksFragment)>
<rx.functions.Functions: rx.functions.FuncN fromFunc(rx.functions.Func9)>
<rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1: void call()>
<okhttp3.internal.framed.FrameWriter: void flush()>
<rx.android.MainThreadSubscription: void onUnsubscribe()>
<com.facebook.stetho.inspector.network.NetworkEventReporterImpl: void dataReceived(java.lang.String,int,int)>
<com.facebook.stetho.common.android.ResourcesUtil: java.lang.String getIdStringQuietly(java.lang.Object,android.content.res.Resources,int)>
<rx.internal.operators.OperatorSwitchIfEmpty: java.lang.Object call(java.lang.Object)>
<rx.singles.BlockingSingle$1: void onError(java.lang.Throwable)>
<rx.internal.util.InternalObservableUtils$ReplaySupplierBufferTime: rx.observables.ConnectableObservable call()>
<rx.Single$16: void onNext(java.lang.Object)>
<rx.internal.operators.OperatorDistinctUntilChanged$1: void onCompleted()>
<rx.internal.operators.OperatorGroupBy$State: void request(long)>
<okhttp3.ResponseBody$1: okio.BufferedSource source()>
<com.facebook.stetho.server.CompositeInputStream: long skip(long)>
<rx.subjects.ReplaySubject$ReplaySizeBoundBuffer: void error(java.lang.Throwable)>
<com.facebook.stetho.dumpapp.DumpappHttpSocketLikeHandler: void <init>(com.facebook.stetho.dumpapp.Dumper)>
<rx.Observable: rx.Observable zip(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func4)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder setQueryParameter(java.lang.String,java.lang.String)>
<rx.internal.operators.OperatorPublish$PublishSubscriber: boolean checkTerminated(java.lang.Object,boolean)>
<com.facebook.stetho.inspector.database.ContentProviderSchema$Builder: com.facebook.stetho.inspector.database.ContentProviderSchema build()>
<rx.internal.operators.OperatorObserveOn$1: java.lang.Object call(java.lang.Object)>
<retrofit2.RequestBuilder$ContentTypeOverridingRequestBody: void <init>(okhttp3.RequestBody,okhttp3.MediaType)>
<retrofit2.adapter.rxjava.CompletableHelper$CompletableCallOnSubscribe$1: void call()>
<rx.Notification$Kind: void <clinit>()>
<rx.internal.operators.OperatorTakeLastOne$1: void <init>(rx.internal.operators.OperatorTakeLastOne,rx.internal.operators.OperatorTakeLastOne$ParentSubscriber)>
<okhttp3.internal.Util: int indexOf(java.lang.Object[],java.lang.Object)>
<rx.observables.AsyncOnSubscribe$6: void onNext(java.lang.Object)>
<rx.singles.BlockingSingle: java.lang.Object value()>
<okhttp3.internal.cache.DiskLruCache$Entry: java.io.IOException invalidLengths(java.lang.String[])>
<rx.observers.TestSubscriber: void awaitTerminalEvent()>
<com.facebook.stetho.common.ArrayListAccumulator: void <init>()>
<rx.subjects.ReplaySubject: rx.subjects.ReplaySubject createWithSize(int)>
<rx.internal.schedulers.ScheduledAction$Remover: boolean isUnsubscribed()>
<rx.internal.util.ScalarSynchronousObservable$1: void <init>(rx.internal.util.ScalarSynchronousObservable,rx.internal.schedulers.EventLoopsScheduler)>
<rx.Observable: rx.Observable 'from'(java.util.concurrent.Future)>
<rx.internal.operators.OperatorMaterialize$1: void request(long)>
<rx.internal.util.atomic.SpscExactAtomicArrayQueue: int size()>
<com.facebook.stetho.inspector.elements.android.ViewHighlighter$NoopHighlighter: void <init>(com.facebook.stetho.inspector.elements.android.ViewHighlighter$1)>
<rx.Completable$4$1: void onCompleted()>
<com.squareup.picasso.ImageViewAction: void <init>(com.squareup.picasso.Picasso,android.widget.ImageView,com.squareup.picasso.Request,int,int,int,android.graphics.drawable.Drawable,java.lang.String,java.lang.Object,com.squareup.picasso.Callback,boolean)>
<rx.singles.BlockingSingle$1: void <init>(rx.singles.BlockingSingle,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch,java.util.concurrent.atomic.AtomicReference)>
<rx.subjects.SerializedSubject$1: void call(java.lang.Object)>
<com.squareup.picasso.Dispatcher: void markForReplay(com.squareup.picasso.BitmapHunter)>
<rx.internal.operators.OnSubscribeDelaySubscriptionOther: void call(rx.Subscriber)>
<rx.internal.operators.OperatorSkip$1: void setProducer(rx.Producer)>
<okhttp3.Cache: void flush()>
<rx.internal.operators.OnSubscribeFromIterable$IterableProducer: void <init>(rx.Subscriber,java.util.Iterator)>
<rx.Completable$24$1$1: void onError(java.lang.Throwable)>
<rx.functions.Action6: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.facebook.stetho.inspector.DevtoolsSocketHandler: void <init>(android.content.Context,java.lang.Iterable)>
<com.squareup.picasso.RequestHandler$Result: int getExifOrientation()>
<com.facebook.stetho.inspector.protocol.module.Runtime: void <init>()>
<retrofit2.ExecutorCallAdapterFactory$1: java.lang.Object adapt(retrofit2.Call)>
<rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1: void onCompleted()>
<rx.internal.operators.OperatorDematerialize$Holder: void <clinit>()>
<com.facebook.stetho.common.ThreadBound: void postDelayed(java.lang.Runnable,long)>
<com.facebook.stetho.inspector.network.NetworkEventReporter$InspectorResponse: boolean fromDiskCache()>
<com.facebook.stetho.server.LazySocketHandler: void onAccepted(android.net.LocalSocket)>
<com.squareup.picasso.Picasso: com.squareup.picasso.RequestCreator load(android.net.Uri)>
<rx.internal.operators.OperatorZip$Zip$InnerSubscriber: void requestMore(long)>
<rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther: void call(java.lang.Object)>
<retrofit2.RequestBuilder: java.lang.String canonicalizeForPath(java.lang.String,boolean)>
<rx.internal.operators.OnSubscribeDefer: void call(java.lang.Object)>
<rx.Completable$25: void onCompleted()>
<com.facebook.stetho.websocket.WebSocketSession: void markAndSignalOpen()>
<okhttp3.internal.framed.FramedConnection: void setSettings(okhttp3.internal.framed.Settings)>
<rx.internal.operators.OperatorBufferWithSize$BufferExact: void <init>(rx.Subscriber,int)>
<rx.subjects.SubjectSubscriptionManager: void call(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.FragmentDescriptor: void maybeRegister(com.facebook.stetho.inspector.elements.DescriptorMap,com.facebook.stetho.common.android.FragmentCompat)>
<rx.internal.operators.OnSubscribeFromIterable: void <init>(java.lang.Iterable)>
<okhttp3.internal.framed.FrameWriter: void pushPromise(int,int,java.util.List)>
<rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber: void setProducer(rx.Producer)>
<rx.internal.util.RxRingBuffer: boolean isUnsubscribed()>
<okhttp3.internal.framed.FramedStream: okio.Source getSource()>
<rx.Observable: rx.Observable timer(long,long,java.util.concurrent.TimeUnit)>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.protocol.module.Runtime$RemoteObject objectForRemote(java.lang.Object)>
<retrofit2.OkHttpCall$1: void onFailure(okhttp3.Call,java.io.IOException)>
<rx.functions.Actions$7: void <init>(rx.functions.Action6,java.lang.Object)>
<com.facebook.stetho.inspector.protocol.module.Runtime$Session: com.facebook.stetho.inspector.protocol.module.Runtime$GetPropertiesResponse getPropertiesForMap(java.lang.Object)>
<com.squareup.picasso.Request: boolean hasCustomTransformations()>
<com.squareup.picasso.Callback: void onError()>
<okhttp3.internal.http.HttpHeaders: okhttp3.Headers varyHeaders(okhttp3.Headers,okhttp3.Headers)>
<rx.internal.operators.OperatorBufferWithSize: rx.Subscriber call(rx.Subscriber)>
<retrofit2.Call: okhttp3.Request request()>
<com.facebook.stetho.inspector.network.CountingOutputStream: void write(byte[])>
<rx.Observable: rx.Observable take(int)>
<rx.internal.operators.OnSubscribeToObservableFuture: void <init>()>
<okhttp3.internal.framed.FramedConnection$Reader: void <init>(okhttp3.internal.framed.FramedConnection,okhttp3.internal.framed.FrameReader,okhttp3.internal.framed.FramedConnection$1)>
<com.facebook.stetho.common.android.FragmentCompat: void <clinit>()>
<com.squareup.picasso.Utils: void closeQuietly(java.io.InputStream)>
<rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture: void call(rx.Subscriber)>
<rx.internal.producers.SingleDelayedProducer: void request(long)>
<com.facebook.stetho.inspector.elements.android.AndroidDocumentRoot: void <init>(android.app.Application)>
<com.facebook.stetho.inspector.elements.android.ViewHighlightOverlays: void removeHighlight(android.view.View)>
<rx.internal.operators.OperatorTakeTimed$TakeSubscriber: void onNext(java.lang.Object)>
<com.squareup.picasso.AssetRequestHandler: java.lang.String getFilePath(com.squareup.picasso.Request)>
<com.facebook.stetho.dumpapp.Dumper: void dumpUsage(java.io.PrintStream)>
<rx.Observable: rx.Observable replay(rx.functions.Func1,int)>
<okhttp3.internal.framed.FramedConnection$Reader$2: void execute()>
<okhttp3.internal.framed.FramedStream: void <init>(int,okhttp3.internal.framed.FramedConnection,boolean,boolean,java.util.List)>
<okhttp3.internal.framed.Hpack$Writer: void setHeaderTableSizeSetting(int)>
<rx.internal.operators.OperatorPublish$PublishSubscriber: void <clinit>()>
<rx.internal.producers.SingleDelayedProducer: void <init>(rx.Subscriber)>
<rx.internal.operators.SingleOnSubscribeUsing: void handleSubscriptionTimeError(rx.SingleSubscriber,java.lang.Object,java.lang.Throwable)>
<rx.functions.Actions: rx.functions.Func6 toFunc(rx.functions.Action6)>
<com.squareup.picasso.Picasso: void setSingletonInstance(com.squareup.picasso.Picasso)>
<rx.Observable: rx.Observable create(rx.observables.SyncOnSubscribe)>
<rx.internal.util.unsafe.SpscUnboundedArrayQueue: void soProducerIndex(long)>
<rx.subscriptions.BooleanSubscription: void unsubscribe()>
<okhttp3.internal.framed.Http2: void <clinit>()>
<rx.singles.BlockingSingle: rx.singles.BlockingSingle 'from'(rx.Single)>
<rx.internal.operators.OnSubscribeDetach$TerminatedProducer: void request(long)>
<com.facebook.stetho.common.android.FragmentCompatUtil: boolean isDialogFragment(java.lang.Object)>
<com.facebook.stetho.inspector.elements.android.TextViewDescriptor$ElementContext: void <init>(com.facebook.stetho.inspector.elements.android.TextViewDescriptor)>
<rx.internal.operators.OnSubscribePublishMulticast: void unsubscribe()>
<com.facebook.stetho.inspector.protocol.module.Network$ResourceTiming: void <init>()>
<rx.observers.SerializedSubscriber: void onNext(java.lang.Object)>
<rx.internal.util.ScalarSynchronousSingle$NormalScheduledEmission: void <init>(rx.Scheduler,java.lang.Object)>
<rx.internal.util.ScalarSynchronousSingle$2: void call(java.lang.Object)>
<rx.Single: rx.Single doAfterTerminate(rx.functions.Action0)>
<com.facebook.stetho.inspector.protocol.module.Runtime: com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getProperties(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>
<retrofit2.BuiltInConverters$StringConverter: java.lang.Object convert(java.lang.Object)>
<com.squareup.picasso.FileRequestHandler: void <init>(android.content.Context)>
<rx.internal.operators.OperatorWindowWithObservable: rx.Subscriber call(rx.Subscriber)>
<rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer: boolean isEmpty()>
<okio.Buffer: okio.ByteString snapshot(int)>
<rx.internal.operators.BufferUntilSubscriber$1: void onError(java.lang.Throwable)>
<okhttp3.internal.http.Http1xStream$FixedLengthSink: void close()>
<com.squareup.picasso.StatsSnapshot: void dump(java.io.PrintWriter)>
<rx.internal.util.SynchronizedSubscription: void <init>(rx.Subscription)>
<com.facebook.stetho.common.android.FragmentCompatFramework$FragmentAccessorFrameworkHoneycomb: java.lang.String getTag(android.app.Fragment)>
<com.facebook.stetho.server.http.LightHttpServer: boolean dispatchToHandler(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpResponse)>
<rx.internal.operators.OperatorAsObservable: void <init>()>
<okhttp3.MultipartBody$Part: okhttp3.MultipartBody$Part create(okhttp3.RequestBody)>
<rx.Single: rx.Single timeout(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber: void onCompleted()>
<com.facebook.stetho.inspector.protocol.module.Page$GetResourceTreeParams: void <init>()>
<rx.observers.TestSubscriber: java.lang.Thread getLastSeenThread()>
<okio.ForwardingTimeout: void throwIfReached()>
<com.facebook.stetho.inspector.network.ResponseBodyFileManager: java.lang.String prettyPrintContentWithTimeOut(com.facebook.stetho.inspector.network.AsyncPrettyPrinter,java.io.InputStream)>
<com.facebook.stetho.common.android.FragmentCompatFramework$DialogFragmentAccessorFramework: void <init>(com.facebook.stetho.common.android.FragmentAccessor)>
<com.facebook.stetho.inspector.MessageHandlingException: void <init>(java.lang.String)>
<com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder: com.facebook.stetho.inspector.elements.ShadowDocument$Update build()>
<rx.subjects.ReplaySubject$ReplayBuffer: java.lang.Throwable error()>
<com.squareup.picasso.Stats: void dispatchCacheHit()>
<okio.BufferedSink: okio.BufferedSink writeByte(int)>
<com.facebook.stetho.dumpapp.DumperContext: java.io.PrintStream getStdout()>
<rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl: void <init>(rx.functions.Func0,rx.functions.Func2,rx.functions.Action1)>
<fr.masciulli.drinks.ui.fragment.DrinksFragment$$Lambda$3: rx.functions.Action1 lambdaFactory$(fr.masciulli.drinks.ui.fragment.DrinksFragment)>
<okio.Buffer: void flush()>
<rx.Observable: rx.Observable throttleWithTimeout(long,java.util.concurrent.TimeUnit,rx.Scheduler)>
<okio.ForwardingSink: okio.Sink delegate()>
<rx.functions.Action4: void call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
